window.COURSE_DATA = {"language":"en-GB","lastDownload":"2018-12-04T09:17:18+03:00","title":"Prep Full-Time","modules":[{"id":23,"name":"Week 1","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":true,"exportId":"i60852a055fd3facd93b7379ecc4aa1b4","items":[{"id":1401,"title":"Monday: Making the Most of Moringa School","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cstrong\u003eGetting Started\u003c/strong\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWelcome to the Moringa School family, where we assist you on your journey to becoming a programmer in a few short months. Please make sure to read through both this entire document and the \u003c/span\u003e\u003ca href=\"https://docs.google.com/document/d/1p0W3mON800mKpdsJNu5Efp-axEnzVZNnAhp2K9cihJY/edit?usp=sharing\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eStudent Handbook\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e before the first day of coursework so that we all start on the same page. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBefore we get started, we want to share our general philosophy at Moringa School. Any experienced developer will tell you that the more you learn about programming, the more you realize just how little you know. Moringa School is structured based off the understanding that being a developer is not about learning a fixed set of skills that you can apply for the rest of your career. From our personal experiences as software engineers and many conversations with hiring partners of all types, we believe that the languages, tools, and approaches you'll learn here are (still very important, but) much less important than the general skills of \u003c/span\u003e\u003cstrong\u003esolving problems\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Successful programmers embrace the limitations of what they can know, and get good at facing ambiguity and figuring out what they don't know. They develop a mindset in which \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003enot knowing\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e the answer isn't a source of anxiety, but rather an opportunity to learn and explore.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow, let's explore what you will learn. Each course here lines up with the different courses Moringa School offers. Our \"Moringa Prep\" course is designed to take you from limited experience to creating basic web pages, styling those pages so that they look nice, and adding interactivity. We also build your foundational problem solving skills, and learn about the tools that are essential to the programming trade. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs a student, once you have successfully completed Moringa Prep or tested straight into Moringa Core, you will be ready to dive into a one of our tracks. Regardless of which track you decide to take, Moringa School students are required to learn JavaScript. JavaScript is the only programming language web browsers understand (HTML and CSS are markup and styling languages, respectively, not programming languages), and with the importance of the web in modern application development, every programmer needs to know JavaScript. If you're more interested in front-end work, JavaScript will let you build out interactivity in your web pages, and if you're more interested in back-end work, JavaScript will let you wire up user interfaces to work with your backends and is even used to write backend code in some cases.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFinally, you'll pick a framework to learn. Android is used in mobile application development; Django is generally used for large-scale web applications. Don't get too hung up on picking the \"right\" language and framework, though. Odds are, at your first job, you might need to learn an entirely new set of skills and practices, and maybe even a new programming language. That's part of why we require all students to study at least two languages - with two under your belt, it's not too difficult to pick up a third.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNo matter what languages and framework you learn, our best advice is not to think of Moringa School as a place to learn a specific language like Python or Java, or a framework like Django. Instead, think of Moringa School as a place to \u003c/span\u003e\u003cstrong\u003e\u003ci\u003elearn how to learn\u003c/i\u003e\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOkay, let's get going!\u003c/span\u003e\u003c/p\u003e\r\n\u003ch1\u003e\u003cstrong\u003eMaking the Most of Moringa School\u003c/strong\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eYou've done it, you're in Moringa School! You've committed time, energy and dedication toward learning how to code. We can’t wait to see what you create, and want to do everything we can to support your success. As you're beginning to understand, we feel the biggest part of that success lies in your mindset and how you approach the challenging months that lie ahead.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSome things to remember are that this program is a marathon, not a sprint, and probably very different than any previous educational experiences you may have had. Differently from how your experience in high school, college, or your workplaces may have been - there are no shortcuts in our program. We need to have your full commitment in order to help make your own journey a success. It’s up to \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eyou \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eto make the most of your experience!\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eRead the article \u003c/span\u003e\u003ca href=\"https://www.linkedin.com/pulse/8-easy-ways-up-your-code-school-experience-perry-eising\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e8 Easy Ways to Screw Up your Code School Experience\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e, which provides a lot of insight into life at a code school and how to make the most of it.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eRead the article \u003c/span\u003e\u003ca href=\"https://blog.ragnarson.com/2016/10/07/developing-as-a-developer.html\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eDeveloping as a Developer\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e to understand what the process of going to beginner to expert looks and feels like.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eRead the article \u003c/span\u003e\u003ca href=\"https://www.vikingcodeschool.com/posts/why-learning-to-code-is-so-damn-hard\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhy Learning to Code is so Damn Hard\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e for a bit of mental preparation about the awesome and challenging experience you’re about to begin.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf this is your first week, use this information to prepare yourself with the best possible mindset \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003ebefore\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e you walk in the door. If this is your 5th, 10th, or even 15th week, revisit this article to re-assess and recalibrate your perspective and approach in your remaining time here. It's never too late to make improvements!\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAlso, as a developer it is important to be up to date with what is happening in the tech industry. Read \u003c/span\u003e\u003ca href=\"https://news.ycombinator.com/\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eHacker News\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e often to see what is happening in the industry, and I recommend signing up for a \u003c/span\u003e\u003ca href=\"https://hndigest.com/\"\u003e\u003cspan style=\"font-weight: 400;\"\u003edaily digest\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e so that you can receive the top articles in your email inbox daily.\u003c/span\u003e\u003c/p\u003e","exportId":"monday-making-the-most-of-moringa-school"},{"id":35,"title":"Tuesday: Git, HTML, and CSS Objectives","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eThis week we will be learning the building blocks of making basic web pages: HTML and CSS. We will also focus on using the command line and Git to create a daily workflow for our coding projects.\u003c/p\u003e\r\n\u003ch2\u003eDaily Goals\u003c/h2\u003e\r\n\u003cp\u003eEveryone learns at a different pace. \u003cstrong\u003eUnderstanding is the most important goal every day.\u003c/strong\u003e If you feel like you will not be able to complete all of the lessons on a given day, talk to a TM about ways to ensure that you are covering the day's objectives. Always focus on understanding the concepts at hand, not finishing the work as quickly as possible.\u003c/p\u003e\r\n\u003ch2\u003ePlan\u003c/h2\u003e\r\n\u003cp\u003eWe will begin this week by practicing the command line, Git, Github, and exploring basic HTML. We'll create READMEs to include extra information with our projects on Github. We'll also learn a formatting language called Markdown to format READMEs. Then, we'll explore basic CSS to add styling to our web pages, and actually publish our sites online! Later in the week we will dive deeper into CSS by using divs and spans, floats, cascading, classes, ids, and the box model. Finally, we'll explore a tool called Bootstrap that offers even more powerful styling capability. You're in for a great time!\u003c/p\u003e\r\n\u003cp\u003eAt the end of this section, you will be able to:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eNavigate the command line to access and create directories and files\u003c/li\u003e\r\n\u003cli\u003eUse Git and GitHub to track the creation of static web pages\u003c/li\u003e\r\n\u003cli\u003eCreate a static webpage using HTML\u003c/li\u003e\r\n\u003cli\u003eStyle a static webpage using custom CSS rules in a linked stylesheet\u003c/li\u003e\r\n\u003cli\u003eCreate a project README.md in Markdown\u003c/li\u003e\r\n\u003cli\u003eAdapt a webpage for responsive design\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch2\u003eIndependent Project Objectives\u003c/h2\u003e\r\n\u003cp\u003eAt the end of this section, you will complete an independent project. Your instructor will review this project for the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse the most common HTML tags:\r\n\u003cul\u003e\r\n\u003cli\u003ep, h, ul, ol, li, em, strong, a, img, div, span\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eCreate a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eImplement standard indentation and spacing conventions of HTML and CSS\u003c/li\u003e\r\n\u003cli\u003eMake Git commits regularly with clear messages that finish the phrase \"It will…\"\u003c/li\u003e\r\n\u003cli\u003eAdd a README to the GitHub repository that includes:\r\n\u003cul\u003e\r\n\u003cli\u003eAuthor name\u003c/li\u003e\r\n\u003cli\u003eProject or program name\u003c/li\u003e\r\n\u003cli\u003eDescription of program\u003c/li\u003e\r\n\u003cli\u003eProgram setup instructions\u003c/li\u003e\r\n\u003cli\u003eLink to live version of site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eCopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"tuesday-git-html-and-css-objectives"},{"id":36,"title":"Tuesday: Introduction and Interaction with the Command Line","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eOne of the first tools every developer needs to get familiar with is the terminal. No matter which language you use, you will be using the terminal a lot. As a person new to programming, using the terminal interface of a computer may be something you'll do for the first time in this lesson.\u003c/p\u003e\r\n\u003cp\u003eWhen you open up your computer and want to access a file or program, it's likely that you do this using a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003egraphical user interface\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eGUI\u003c/strong\u003e. This is simply the graphical, or visual, part of a computer program that the user can interact with.\u003c/p\u003e\r\n\u003cp\u003eFor example, when you want to open up your internet browser and you click on the icon in your computer's menu bar, you are using the GUI of your computer's operating system to access the program. The cursor to indicate where on the screen you are clicking and the icons that represent programs are both parts of the graphical user interface.\u003c/p\u003e\r\n\u003cp\u003eAnother example of a program with a GUI is a word processor. The GUI gives us a document to type in, a cursor to see where we're typing, letters on the screen to represent the text we've typed, menu options to format our text and save or documents, and more.\u003c/p\u003e\r\n\u003cp\u003eThe GUI gives us a visual representation of what the computer program is doing underneath the hood. However, it's not the only way to interact with a computer. We can also use our computer's terminal interface, and you often will when developing. The\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eterminal\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a text-based interface that allows users to interact with the computer by typing commands into the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecommand prompt\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou have probably navigated the folders and files on your computer using a GUI such as\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFinder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon Mac or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFiles\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon Linux. In the next lesson, we'll see how we can create, update, delete, and navigate folders and files using the terminal. We'll also learn some additional functionality not available by using a GUI.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eAccessing the Terminal\u003c/h2\u003e\r\n\u003ch3\u003eUbuntu Setup\u003c/h3\u003e\r\n\u003cp\u003eThe Terminal application on a PC with Ubuntu installed can be accessed by pressing\u003cspan\u003e \u003c/span\u003e\u003cem\u003ectrl + Alt + T\u003c/em\u003e. Alternatively, you can locate the Terminal application by searching\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTerminal\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eonce you click on the ubuntu icon on the upper left side of your screen.\u003c/p\u003e\r\n\u003ch3\u003eMac Setup\u003c/h3\u003e\r\n\u003cp\u003eThe Terminal application on a Mac is located in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUtilities\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder, which is located inside the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eApplications\u003c/em\u003efolder. Alternatively, you can locate the Terminal application by clicking on the magnifying glass icon at the upper right corner of the screen and typing\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTerminal\u003c/em\u003e.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCommand Prompt\u003c/h2\u003e\r\n\u003cp\u003eWhen you open up your computer's terminal, you should see a blank screen with a few lines of text in the corner, followed by a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$\u003c/code\u003e. This is called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eprompt\u003c/strong\u003e. It usually provides some contextual information such as who you are, your location on the computer, and other useful info. For example, the prompt on your computer might look something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~\u003c/span\u003e$\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn this example,\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eguest\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the name of the user currently logged in\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003emoringa-Lenovo-B50-80\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the nickname of the computer we're using\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e~\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eindicates that we are located in the Home directory (we'll learn more about what this means later)\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the end of the prompt\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTake note here that not all command prompts look the same. Your computer will likely have a different nickname or username, and you may be located somewhere else in the filesystem. There's no need to worry if the prompt on your computer looks different from the example above - this is totally normal.\u003c/p\u003e\r\n\u003cp\u003eAfter the prompt is a blinking grey rectangle, called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecursor\u003c/strong\u003e. This is where you will be typing commands.\u003c/p\u003e\r\n\u003cp\u003eBoth in the curriculum and in resources online, you will often see commands preceded by a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$\u003c/code\u003e. When typing the commands yourself, do not type the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- this is simply a common convention used to indicate that what follows is a command to be run.\u003c/p\u003e\r\n\u003cp\u003eNow that we have covered the basics of the terminal and command line, let's start using it. In the next lesson, we will learn some common and very useful commands, what they do, and how to use them.\u003c/p\u003e\r\n\u003ch1\u003eInteracting with the Command Line\u003c/h1\u003e\r\n\u003cp\u003eNow that we know what the command line is, how to access it, and what to use it for, let's start interacting with it. In this lesson, we will explore some of the most frequently used terminal commands. You will use these commands all the time at Moringa School, so start getting comfortable with them now.\u003c/p\u003e\r\n\u003cp\u003eTo type a command, simply open your terminal program and start typing. Anything you type will appear where the cursor is. Once you've typed the command, hit\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEnter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Linux or Windows) or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Mac) to run it. For the remainder of this lesson,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEnter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill be used interchangeably.\u003c/p\u003e\r\n\u003ch3\u003eSee current location with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ pwd\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe first command on our journey will be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epwd\u003c/code\u003e, which prints your current location to the screen. It stands for \"print working directory\".\u003c/p\u003e\r\n\u003cp\u003eSee what happens when we use this command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003eguest@moringa-Lenovo-B50-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e:~$ \u003cspan class=\"hljs-built_in\"\u003epwd\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter we hit\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn or Enter\u003c/em\u003e, we see a series of words separated by slashes (\u003ccode\u003e/\u003c/code\u003e), also known as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efile path\u003c/strong\u003e. Each of the words is a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edirectory\u003c/strong\u003e, which is another word for a folder. So, in the example, the terminal returned:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs\"\u003e/home/nancy\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis tells us that we are located inside of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003enancy \u003c/em\u003edirectory, which is inside of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehome\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/p\u003e\r\n\u003cp\u003eThis default directory is also called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ehome directory\u003c/strong\u003e, and it is a sort of \"entry point\" for a system, and contains all of a user's files, directories, and programs. Remember when we first opened up the terminal and saw that our location was represented by a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e~\u003c/code\u003e? The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e~\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esymbol refers to the home directory.\u003c/p\u003e\r\n\u003ch3\u003eList out contents of folder with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eNow that we know which folder we are in, let's see what's inside of the folder. The next command we will learn is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003els\u003c/code\u003e, which lists all the content of a folder (\u003ccode\u003els\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"list\"). When I type it on my computer, I see a list of all files and directories in that folder.\u003c/p\u003e\r\n\u003cp\u003eThis tells us that I have each of the following folders in my\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers\u003c/em\u003e/\u003cem\u003eGuest\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\n\u003cspan class=\"hljs-constant\"\u003eDocuments\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003eDownloads\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003eMusic\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003ePictures\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003ePublic\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003eTemplates\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003eVideos\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRemember, just like\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFinder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFile Explorer\u003c/em\u003e, the terminal interface lets us navigate and interact with our computer.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003els\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells us which files and folders are inside of a directory, just like the icons in the Graphical User Interface.\u003c/p\u003e\r\n\u003ch3\u003eChange folders with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eWhen we're using Finder and we want to move to a different folder, we find the icon for the folder where we want to go and double-click on it. In Terminal, we use the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd folder-name\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(replacing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efolder-name\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the name of the folder to which you'd like to navigate).\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"change directory\". Be sure to always type a space after any command that has an additional argument, such as the name of a directory in this example.\u003c/p\u003e\r\n\u003cp\u003eFor instance, in order to navigate to my\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDocuments\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder, I use the command\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd \u003cspan class=\"hljs-constant\"\u003eDocuments\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter hitting\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn\u003c/em\u003e, the prompt reads\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents\u003c/span\u003e$\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice how\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDocuments\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enow precedes the \u003ccode\u003e$\u003c/code\u003e, indicating that our location has changed.\u003c/p\u003e\r\n\u003cp\u003eHere are a few more options to help you navigate your computer:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIf you type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand press the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ekey - with no directory specified - you'll go back to your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHome \u003c/em\u003efolder. (You can also type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd ~\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto go there.)\u003c/li\u003e\r\n\u003cli\u003eIf you type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd ..\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(that's two periods), you'll go to the directory above the one you're currently in. So if you're in your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHome\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder, and type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd ..\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eyou'll go to your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCreate folders with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mkdir\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emkdir\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"make directory\". We create a folder with a command like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mkdir name-of-directory\u003c/code\u003e, replacing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ename-of-directory\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith whatever we would like to name the folder. Make sure you are in your computer's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDesktop\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory and let's create a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir moringa-prep\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003els\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon our current folder, we can see that it contains a new folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nmoringa-prep\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eCreate new files with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etouch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand works a lot like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emkdir\u003c/code\u003e, but instead of creating a new directory, it creates a new file. The structure looks like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch new-file-name\u003c/code\u003e. For example, let's move to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep \u003c/em\u003edirectory we just made:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd moringa-prep\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd let's create a new file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-file.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etouch my-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we list the files in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, we see that it contains\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-file.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nmy-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eCopy items with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cp\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecp\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"copy\", and it is used to copy files and directories. The basic structure of this command is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cp original-file new-file\u003c/code\u003e, where\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoriginal-file\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the name of the original file, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enew-file\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis what you want to name the copy. Here's how we would use it to create a copy of\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-file.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003enamed\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanother-file.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecp my-first-file.html another-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we list the contents of the directory, we can see that there are two files:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nanother-file.html    my-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe new file is an\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindependent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecopy of the original, meaning that any changes to one do not affect the other.\u003c/p\u003e\r\n\u003cp\u003eA word of caution in naming copies. If there is already a file with the name of the new file in a folder, the old file will be overwritten and its contents will be lost, so be careful to give your new documents and folders a unique name.\u003c/p\u003e\r\n\u003ch3\u003eMove and rename items with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand stands for \"move\". It can both move and rename files. To see how this works, let's list the contents of our current directory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nanother-file.html    my-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's say we want to call it\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanother-file.html\u003c/em\u003e. We use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv \u003c/code\u003ecommand to rename it like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emv another-file.html my-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLike\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cp\u003c/code\u003e, the basic structure of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand requires two pieces of information: the name of the file we would like to rename or move; and the new name or location for the file or folder.\u003c/p\u003e\r\n\u003cp\u003eNow we can use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto see that the file has been renamed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nmy-first-file.html    my-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's see how we can use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto move a file. First, let's create a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto hold the file:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir brand-new-folder\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere is how we move\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emv my-second-file.html brand-new-folder/my-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we provided the name of the file that we want to move, which is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emy-second-file.html\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein this case. Then, separated by a space, we provided the new name and location of the file:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrand-new-folder/my-second-file.html\u003c/code\u003e. By changing the name of the file from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emy-second-file.html\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrand-new-folder/my-second-file.html\u003c/code\u003e, we are actually moving the file into the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/p\u003e\r\n\u003cp\u003eSee for yourself! List the contents of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, and see that\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis no longer there:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nbrand-new-folder    my-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, navigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd brand-new-folder\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eList the contents of the folder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep/brand-new-folder\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nmy-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd we can see that we have successfully used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to move\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch3\u003eDelete files with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eWe can delete files using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand. Let's see how it works. Here is how we delete\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep/brand-new-folder\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003erm my-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe basic structure of this command is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm file-to-delete\u003c/code\u003e, with a space between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the name of the file you'd like to delete. We can see with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat the file has been removed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep/brand-new-folder\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow that the folder is empty, let's delete it as well. Note that we can not delete a folder from inside of it, so first, navigate up one folder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep/brand-new-folder\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd ..\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen we can delete the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003erm -r brand-new-folder\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that this looks a little different from removing a file: we have an extra option in there,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-r\u003c/code\u003e. As a safety measure,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edoes not delete directories by default. In order to delete directories, we need to include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-r\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eafter the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e, which stands for \"recursive\".\u003c/p\u003e\r\n\u003cp\u003eIf we would like to delete a folder that contains files, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-rf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eflag instead:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm -rf folder-name\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003eClear the terminal screen with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ clear\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eFinally, our terminal screen is getting pretty crowded with all of these commands! Sometimes it's nice to start with a blank screen. To clear the screen from previous commands, we use the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ clear\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eAfter the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ clear\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand has been issued, all that remains on the display screen is the command prompt. This does not actually clear any data, it simply gives us a blank screen to work with.\u003c/p\u003e\r\n\u003cp\u003eThere are a\u003cspan\u003e \u003c/span\u003e\u003cem\u003eton\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof commands for the terminal, but knowing the commands covered in this lesson will make you pretty effective at using the command line. Being able to use the command line is one way to make yourself a powerful and efficient developer, so get in the habit early!\u003c/p\u003e","exportId":"tuesday-introduction-and-interaction-with-the-command-line"},{"id":38,"title":"Resource: Cheat Sheet - Command Line","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eHere's a quick reference of all of the commands listed in this lesson. Feel free to reference this as you learn the commands - they'll be second nature before you know it.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ pwd\u003c/code\u003e: Prints the path of the current directory to the screen\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ ls\u003c/code\u003e: Lists out the contents of the current folder\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ cd directory-name\u003c/code\u003e: Changes the current directory to the one specified\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ cd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd ~\u003c/code\u003e: Changes the current directory to the home directory\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ cd ..\u003c/code\u003e: Changes the current directory up one level\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ mkdir directory-name\u003c/code\u003e: Creates a new directory (folder) in the current directory with the name specified\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ touch file-name.html\u003c/code\u003e: Creates a new, empty file in the current directory with the name specified\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ cp original-file.html new-file.html\u003c/code\u003e: Creates a duplicate copy of the first file listed and gives it the name of the second file listed. Both files still exist.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ mv original-file-name.html new-file-name.html\u003c/code\u003e: Moves the contents of the first file into the second file. Effectively renames the file.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ mv sample-file.html new-location/sample-file.html\u003c/code\u003e: Moves the first file into the folder specified for the second file.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ rm file-name.html\u003c/code\u003e: Removes the file specified.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ rm -rf directory-name\u003c/code\u003e: Removes the folder specified and all of the files inside.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ clear\u003c/code\u003e: Clears the terminal screen.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eTerminology\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003efile path\u003c/strong\u003e: The location of a file or folder in the file system. For example:\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers/MoringaSchool/Pictures/cute-kitten.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis the path for the image called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecute-kitten.jpg\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003edirectory\u003c/strong\u003e: Another name for a folder in a file system. For example,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers/MoringaSchool/Pictures/cute-kitten.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehas 3 directories:\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers\u003c/em\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMoringaSchool\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePictures\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003ehome directory\u003c/strong\u003e: The highest-level directory on a computer - this is the default directory when you open the terminal.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"resource-cheat-sheet-command-line"},{"id":1952,"title":"Tuesday: Practice the Command Line","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Start using the command line to interact with your computer. Learn some basic commands.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following question with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between a GUI and the command line?\u003c/li\u003e\r\n\u003cli\u003eWhat are some advantages you can think of for using the command line?\u003c/li\u003e\r\n\u003cli\u003eName two commands and what they do.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson to start interacting with your computer through the command line. Then, once you have experience using the command line and using basic commands, complete the following exercise in the terminal.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eIf you're not already there, navigate to the home directory.\u003c/li\u003e\r\n\u003cli\u003ePrint your location to the screen to make sure you're in the right spot.\u003c/li\u003e\r\n\u003cli\u003eList the contents of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHome\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory to the terminal.\u003c/li\u003e\r\n\u003cli\u003eNavigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDesktop\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/li\u003e\r\n\u003cli\u003eCreate a directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/li\u003e\r\n\u003cli\u003eCreate a file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile1.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eCreate two more files named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile2.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile3.html\u003c/em\u003e. (Here's a tip: you can create two files with a single command! Simply separate the two file names with a space:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch file2.html file3.html\u003c/code\u003e)\u003c/li\u003e\r\n\u003cli\u003eCreate a directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eMove\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile1.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eCopy\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile2.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand name the copy\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile4.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eRename\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile3.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethird-file.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate into\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eDelete\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile1.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate up one directory so that you are back in\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003ePrint your location to verify that you are back in\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eDelete\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eList the contents to the page to make sure that\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewas successfully deleted.\u003c/li\u003e\r\n\u003cli\u003eClear the terminal screen.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eStill want more practice? Check out the adventure game at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://web.mit.edu/mprat/Public/web/Terminus/Web/main.html\" target=\"_blank\"\u003ethis link\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ethat uses the same terminal commands that we just learned to navigate through the levels.\u003c/p\u003e","exportId":"tuesday-practice-the-command-line"},{"id":39,"title":"Tuesday: Using Atom and Git","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eIn this lesson, we are going to walk through creating our first webpage in the Atom text editor and tracking the process using Git. Make sure you have installed both of these on your computer before we begin (see the instructions in the \u003ca href=\"https://docs.google.com/document/d/1l3CkxKeZ49jcy5n-q_p_Nc0h5gkkc9ei5KtxWFXap1U/edit?usp=sharing\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/pages/monday-pre-course-setup-and-installations\" data-api-returntype=\"Page\"\u003ePre-Course Setup\u003c/a\u003e if you haven't already).\u003c/p\u003e\r\n\u003ch2\u003eOverview of Atom\u003c/h2\u003e\r\n\u003cp\u003eLet's take a quick tour of Atom. Open the program. When we open the editor, we arrive on an empty file with the name \"untitled\". If we add content to the file, we see the x at the top becomes a blue circle. This indicates that there is content that hasn't yet been saved. We'll save this file as\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eusing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.html \u003c/code\u003eextension to indicate that this will be a document written in HTML. The blue circle returns to a grey x and we know that our file's content has been saved.\u003c/p\u003e\r\n\u003cp\u003eAtom offers developers the ability to customize the editor's settings and shortcuts. Press\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCmd\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e,\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(Mac) or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCtrl\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e,\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(Ubuntu and Windows) to see the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSettings\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eview.\u003c/p\u003e\r\n\u003cp\u003eOne setting that we want to make sure we have in place is the tab length. Writing good code means making a habit of using consistent indentation. The standard for indenting lines of code is 2 spaces. We have confirmed that this is set to 2. So, rather than hitting the space bar twice, we can use the tab key for indentation.\u003c/p\u003e\r\n\u003cp\u003eYou won't need to worry too much about all of the customization possibilities now but as you start gaining coding experience, remember that you can return to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSettings\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eview to make updates to keyboard shortcuts, themes, or packages that add other functionality to the editor.\u003c/p\u003e\r\n\u003ch2\u003eGit Project Setup\u003c/h2\u003e\r\n\u003cp\u003eWe've already started using command line to navigate our computer. Let's switch gears a little and expand on what we're able to do using the command line and start using Git and GitHub. In this lesson, we will create a simple webpage and track the process using Git.\u003c/p\u003e\r\n\u003ch3\u003eTracking changes with Git\u003c/h3\u003e\r\n\u003cp\u003eAt Moringa School, every project that we create will have its own \u003cstrong\u003edirectory\u003c/strong\u003e (a folder in your laptop) and its own \u003cstrong\u003erepository\u003c/strong\u003e (a folder on Github). Now we are going to walk through creating a new project and tracking those changes with Git.\u003c/p\u003e\r\n\u003cp\u003eThe first thing we need to do is create the project directory on our own computers. We'll do this just like we have done previously - Git will come in shortly. Open up Terminal and navigate to the folder where you would like to create your projects.\u003c/p\u003e\r\n\u003cp\u003eI am going to create a new folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-projects\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einside of my computer's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDocuments \u003c/em\u003edirectory to hold all of the projects that I will create in class.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd \u003cspan class=\"hljs-constant\"\u003eDocuments\u003c/span\u003e\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir moringa-school-projects\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd moringa-school-projects\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we are located in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-projects\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, and we can add a new directory for this project. I am going to call this one\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(and just a bit of computer programming history for you: it's traditional to write some form of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehello world\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas the first program or example you write in a new language).\u003c/p\u003e\r\n\u003cpre\u003e$ mkdir hello-world\u003cbr\u003e$ cd hello-world\u003c/pre\u003e\r\n\u003cp\u003eNow we are located inside of our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, and we can turn it into a Git repository. We do this by\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einitializing\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eGit inside of the directory (make sure that you do this inside of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e directory! Remember, you can always see your location with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ pwd\u003c/code\u003e):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e$ git init\u003cbr\u003e\u003c/code\u003e\u003ccode class=\"hljs coffeescript\"\u003eInitialized empty Git repository \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-regexp\"\u003e/Documents/moringa-school-projects/hello-world/\u003c/span\u003e.git/\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs the confirmation message reads, the Git repository has been initialized inside of a directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.git\u003c/em\u003e. But when we try to list the contents of\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e) with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e, where is it?\u003c/p\u003e\r\n\u003cp\u003eDirectories that being with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ehidden\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edirectories, which means that they do not show up with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand. To view hidden files, we need to use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-a\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoption like this, which stands for \"all\":\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ ls \u003cspan class=\"hljs-operator\"\u003e-a\u003c/span\u003e\r\n.git\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThere's our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.git\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory! Let's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto it and see what's inside:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd .git\u003c/code\u003e\u003cbr\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\u003c/code\u003e\u003cbr\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-constant\"\u003eHEAD\u003c/span\u003e        description info        refs\r\nconfig        hooks       objects\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we're never actually going to be touching any of these files. The\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.git\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory is where all of the changes we make to our project will be tracked. Whenever we add, edit, or delete files, Git will be keeping track of those changes in here. This is actually why the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.git\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory is hidden in the first place - to prevent us from making any changes that could interfere with Git's job.\u003c/p\u003e\r\n\u003cp\u003eLet's navigate back up to our main project directory:\u003c/p\u003e\r\n\u003cpre\u003e$ cd ..\u003c/pre\u003e\r\n\u003cp\u003eNow that we've set up our Git repository, we need to tell Git who is working on the project. If you are working solo, you can skip this step - you've already set the global user name and email for all projects on your computer.\u003c/p\u003e\r\n\u003cp\u003eNow our project is set up with a Git repository initialized. Let's start adding files to track!\u003c/p\u003e\r\n\u003cp\u003eCreate an empty file in the project directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etouch hello-world.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow open the project in Atom using the following command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003eatom .\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ atom\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand tells the computer to open anything that follows it in Atom. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emeans current directory, so the entire directory should open up in Atom.\u003c/p\u003e\r\n\u003cp\u003eLet's add some text to\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ehello-world.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's what this looks like in Atom:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-03-atom_hello_world.jpg?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"Atom\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/812\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe little blue dot on the right of the page tab next to the file name (\u003cem\u003ehello-world.html\u003c/em\u003e) means that the file has unsaved changes. Save the file with\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFile\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSave\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the Atom menu bar.\u003c/p\u003e\r\n\u003cp\u003eWe can see what Git is doing with our files with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git status\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git status\r\nOn branch master\r\n\r\nInitial \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e\r\n\r\nUntracked files:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e include \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e what will be committed)\r\n\r\n    hello-world.html\r\n\r\nnothing added \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e but untracked files present (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e track)\u003cbr\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis is Git telling us, \"I noticed that you added a file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e, but unless you use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add\u003c/code\u003e, I am not going to do anything with it.\"\u003c/p\u003e\r\n\u003cp\u003eBefore we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add\u003c/code\u003e, let's quickly go over a concept that can be a little confusing when first learning git: the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003estaging environment\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand how it relates to a commit.\u003c/p\u003e\r\n\u003cp\u003eTo reiterate, a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecommit\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a record of what files you have changed since the last time you made a commit. A commit is like a save point, and we want to make a commit when we've made a notable change or addition to a project. Commits narrate the development of a project and allow you to go back to the state of a project at any point.\u003c/p\u003e\r\n\u003cp\u003eSo, how do you tell Git which files to put into a commit? This is where the staging environment comes in. As we just saw, when you make changes to a repo, Git notices that a file has changed but won't do anything with it.\u003c/p\u003e\r\n\u003cp\u003eTo add a file to a commit, we first need to add it to the staging environment. To do this, we can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add \u0026lt;filename\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand. Here is how we add\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add hello-world.html\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git status\u003c/code\u003e, we see that Git is tracking\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git status\r\nOn branch master\r\n\r\nInitial \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e\r\n\r\nChanges \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be committed:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git rm --cached \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e unstage)\r\n\r\n    new file:   hello-world.html\u003cbr\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOnce you've used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to add all the files you want to the staging environment, you can then tell Git to package them into a commit using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand. Let's do that now.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Add initial hello world page\"\u003c/span\u003e \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo make a commit, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand followed by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-m \u003c/code\u003eoption (for \"message\"), followed by a short message describing the commit.\u003c/p\u003e\r\n\u003cp\u003eFor consistency, commit messages should be in present tense and describe the change(s) made. As a rule of thumb, they should complete the phrase, \"This commit will...\". So when we look back at our commit history, we know that this commit will \"add initial hello world page\".\u003c/p\u003e\r\n\u003cp\u003eWe can look at our Git commit history with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e$ git log commit de955b7ef50670e42d21f2366ea09cf517379475 Author: Albert Einstein \u0026lt;einstein@email.com\u0026gt; Date: Tue May 23 16:50:58 2017 +0300 Add initial hello world page\u003c/pre\u003e\r\n\u003cp\u003eThis command lists the commits made in a repository in reverse chronological order, so the most recent commits show up first. As we can see, this commit has been assigned a unique collection of numbers and letters,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ede955b7ef50670e42d21f2366ea09cf517379475\u003c/code\u003e. From now on, whenever we would like to return to this project exactly as it is right now, we will be able to return to this commit.\u003c/p\u003e\r\n\u003cp\u003eAll right, let's add a short paragraph to our page to introduce ourselves:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ehello-world.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first website! I am about to embark on the exciting journey of learning how to code. Won't you join me?\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's check out our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit status\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand see what it tells us:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git status\r\nOn branch master\r\nChanges not staged for \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eupdate\u003c/span\u003e what will be committed)\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git checkout -- \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e discard changes \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e working directory)\r\n\r\n    modified:   hello-world.html\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eno\u003c/span\u003e changes added \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e/\u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git commit -a\"\u003c/span\u003e)\u003cbr\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGit knows that\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehas been modified, but the changes still need to be added to the staging environment and then committed. Let's do that now, using another option for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git add .\r\n$ git \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e -m \u003cspan class=\"hljs-string\"\u003e\"Add intro paragraph\"\u003c/span\u003e\r\n[\u003cspan class=\"hljs-keyword\"\u003emaster\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003ead09ba] \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e intro paragraph\r\n \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e file \u003cspan class=\"hljs-keyword\"\u003echanged\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e insertion(+)\u003cbr\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis time, we used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add .\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add hello-world.html\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for the current directory (just like in the case of the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ atom .\u003c/code\u003e), and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add .\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill add any changes in the directory that have not yet been added to the staging environment, so we can add multiple files at the same time.\u003c/p\u003e\r\n\u003cp\u003eLet's look at our project history now:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003ead09ba06206efdf5be66c56b0e425ed56ac70d1\r\n\u003c/span\u003e\u003c/code\u003e\u003ccode class=\"hljs sql\"\u003e\u003cspan class=\"hljs-operator\"\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/code\u003eDate: Tue May \u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e26\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e22\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e +\u003cspan class=\"hljs-number\"\u003e0300\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e intro paragraph \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e de955b7ef50670e42d21f2366ea09cf517379475 Author: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;grace+james@\u0026gt; \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Tue May \u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e58\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e +\u003cspan class=\"hljs-number\"\u003e0300\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial hello world page\u003c/pre\u003e\r\n\u003cp\u003eNotice that the most recent commit is at the top. We can make this a little easier to read by adding the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e--oneline\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoption like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ git \u003cspan class=\"hljs-built_in\"\u003elog\u003c/span\u003e --oneline\r\n\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003ead09ba Add intro paragraph\r\nde955b7 Add initial hello world page\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe seven-character string before each message is also a unique identifier for the commit and can be used in the same way (we will see how in an upcoming lesson).\u003c/p\u003e\r\n\u003cp\u003eThis may seem like a lot of work for such minor changes on a single web page, but as we start building more projects - and more complex projects - we will see just how useful it is to track changes to our code this way.\u003c/p\u003e\r\n\u003ch2\u003eRemote repositories on GitHub\u003c/h2\u003e\r\n\u003cp\u003eSo far, our code only exists on the machines where they were written. We have been tracking our changes in a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elocal\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eGit repository, which is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.git\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edirectory we've seen. However, it would be good to have a copy of our work backed up online, especially when our projects grow in size and have real-world implications. More importantly, we will need some way of collaborating with others on our work. When we want to push our work to the world, we will push it to a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eremote\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003erepository on GitHub. In this lesson, we will explore GitHub and how to use it.\u003c/p\u003e\r\n\u003cp\u003eWhat do we mean when we say local and remote? When we work on a repository that we can only access from the computer on which it is saved, we call this a local repository. All the code we have written so far has been written locally. If we want to work on the project from another device, we won't be able to access it. A remote repository, on the other hand, is a repository that is saved in a location outside of the computer where it was created, but still accessible by that computer (and other computers as well). At Moringa School, we will generally be saving our work to remote repositories.\u003c/p\u003e\r\n\u003cp\u003eLet's start by pushing our local repository to a remote repository on GitHub.\u003c/p\u003e\r\n\u003cp\u003eThe first thing we need to do is create the remote repository on GitHub. Each partner needs to create a repository on their own GitHub account. Both remote repositories will link to the same local repository, but this will give each of you a personal record of the project.\u003c/p\u003e\r\n\u003cp\u003eOnce you're logged in, click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew Repository\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton, which will take you to the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/new\"\u003e\u003cem\u003eCreate New Repository \u003c/em\u003epage\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-03-new_repo_screen-1.png?canvas_download=1\" alt=\"MP-W1D1-03-new_repo_screen-1.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/815\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's go over the options on this page.\u003c/p\u003e\r\n\u003cp\u003eThe text box under\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRepository Name\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis where we enter the name of the repository. You can name it anything you'd like, but give it a name that helps you identify the repository. It makes sense to give it the same name as the project folder for your local repository. For this project, let's use \"hello-world\".\u003c/p\u003e\r\n\u003cp\u003eUnderneath the repository name, you can enter a description. The description is optional, but it can be helpful for others and your future self to have a quick reference for the description of the repository content.\u003c/p\u003e\r\n\u003cp\u003eYou have the option to make a repository public or private. Because we're using free GitHub accounts, we can only select the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePublic\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoption. As the page notes, anyone can see a public repository, but you can choose who has permission to contribute to it.\u003c/p\u003e\r\n\u003cp\u003eThe last option asks whether you would like to initialize the project with a README. A README file contains information about the contents of the repository - stuff like the authors, description, setup instructions, and licensing information. Do not select this box. We will explore README files in an upcoming lesson.\u003c/p\u003e\r\n\u003cp\u003eWith the repository name and description set, click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCreate Repository\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton. You will be taken to a page that looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-04-empty_repo.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"MP-W1D1-04-empty_repo.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/822\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWith this empty repository in place, we can push our locally-stored code to the new remote location.\u003c/p\u003e\r\n\u003cp\u003eFirst, we need to tell our local repository that a remote repository even exists somewhere online. We do this by adding it to Git's record. Just like Git wouldn't do anything with our files until we used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add\u003c/code\u003e, it won't acknowledge our remote repository yet, either.\u003c/p\u003e\r\n\u003cp\u003eTo tell the repository about the remote location, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit remote add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cpp\"\u003e$ git remote add origin https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit remote add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand takes two arguments:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe remote name, for example \u003cspan style=\"font-family: monospace;\"\u003e\u003cspan style=\"font-size: 13px;\"\u003eorigin\u003c/span\u003e\u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe remote name can be anything - it's a nickname for the remote repository at the URL provided. By convention, the default name for the remote repository is named \"\u003cspan\u003eorigin\", so we gave it that name here. However, you can give the remote any name you want, as well as work with multiple remotes.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe remote location or URL, for example\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://github.com/moringaschool/hello-world.git\u003c/code\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThis is the URL found in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eQuick setup\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebox at the top of the empty repository page\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePlease note that your command should include your repository info. Our URL is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://github.com/moringaschool/hello-world.git\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein this example, but you want to replace this with your own URL.\u003c/p\u003e\r\n\u003cp\u003eNow Git knows that there is a remote repository, and it's where you want your local repository changes to go. To confirm that Git has done this successfully, run this command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit remote -v\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe response looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs nginx\"\u003e\u003cspan class=\"hljs-title\"\u003eorigin\u003c/span\u003e    \u003cspan class=\"hljs-url\"\u003ehttps://github.com/moringaschool/hello-world.git\u003c/span\u003e (fetch)\r\norigin    \u003cspan class=\"hljs-url\"\u003ehttps://github.com/moringaschool/hello-world.git\u003c/span\u003e (push)\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-v\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoption will give you a list of all of the remote repositories that your local repository knows about. There's one repository and it’s listed twice, which means it is available to push information to and to fetch information from. If both you and your partner have added remote repositories, then both repositories should be listed.\u003c/p\u003e\r\n\u003cp\u003eWe are finally ready to push our code from local to remote. In other words, we will be copying it from our machine to the location on GitHub. To do this, we will use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit push\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin master\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit push\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand takes two arguments.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFirst, we provide the name of the remote repository location. In this example, we wanted to push to the remote repository we just created, so we can use the nickname \u003cspan style=\"font-family: monospace;\"\u003e\u003cspan style=\"font-size: 13px;\"\u003eorigin \u003c/span\u003e\u003c/span\u003ethat we created.\u003c/li\u003e\r\n\u003cli\u003eSecond, we provide the name of the version of the code (also known as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebranch\u003c/strong\u003e, which we will learn more about in an upcoming lesson) we are pushing. As we start building more complex projects, we will have multiple versions of code at various stages of development on a single, local device. At the moment, we only have one branch, the \"master\" branch.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the name given to this branch by Git, and the master is always considered the master copy.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWhen you push to GitHub on a computer where the user has not been set globally, the terminal will prompt you to enter your GitHub login information. This is GitHub protecting your account - only the owner of a repository is allowed to push to it. Once you have entered your login information, the terminal will give you some feedback that it is pushing your code to the remote repository. Go ahead and refresh the repository's page on GitHub, and you can see the file structure of the project, and the same commits that we saw in the terminal.\u003c/p\u003e\r\n\u003ch2\u003eCloning from GitHub\u003c/h2\u003e\r\n\u003cp\u003eAll right, we've pushed code from our personal machine up to GitHub. But as we mentioned before, one of the big advantages to using a service like GitHub is how it lets us collaborate with others on the same code. This requires copying the code from the remote repository into a local repository, a process called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecloning\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eTo practice this, first, we need to remove the local repository from our personal computers. If you are in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory (check with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epwd\u003c/code\u003e):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ \u003cspan class=\"hljs-built_in\"\u003epwd\u003c/span\u003e\r\nDocuments/moringa-school-projects/hello-world\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMove up one directory with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd ..\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand remove the folder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd ..\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003erm -rf hello-world\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow the folder is gone, and we can clone our remote repository back onto our computers. On the main GitHub page for the repository, find the button that says\u003cspan\u003e \u003c/span\u003e\u003cem\u003eClone or download\u003c/em\u003e. A dialog box opens containing the URL for the repository. This is the same URL as the one we used for the remote. Copy the URL (either select the text and copy it manually, or click on the clipboard button next to the URL), and we will clone the repository using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit clone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand in the terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003eclone\u003c/span\u003e https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe terminal will print some feedback that it has successfully cloned the repository. Go ahead and list the contents of the folder and see that we now have a\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nhello-world\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we navigate into\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit log\u003c/code\u003e, we can see that our previous commits are still part of this repository.\u003c/p\u003e\r\n\u003cp\u003eTake a look at the Git remotes for the repository:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cpp\"\u003e$ git remote -v\r\norigin    https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git (fetch)\u003c/span\u003e\r\norigin    https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git (push)\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe see that the remote repository is automatically linked, and by default, it has the name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e. If we make changes to our local repository and want to push those to GitHub, we will use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eremote nickname, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin master\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOne more (important) thing about Git repositories. Make sure that you never create or clone a repository inside of an existing repository. This creates something called a\u003cspan\u003e \u003c/span\u003e\u003cem\u003esubmodule\u003c/em\u003e, which has an icon like the one here for\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewild-beasts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon GitHub:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-06-submodule.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/814\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThere are cases when you would want to do this, but for our purposes, it will only interfere with our Git process.\u003c/p\u003e\r\n\u003cp\u003eAll right! We've just covered\u003cspan\u003e \u003c/span\u003e\u003cem\u003ea lot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof ground here! Don't worry about memorizing everything that we did here, and use the cheat sheet for reference when using Git in your daily workflow. It's okay if everything isn't making perfect sense right now - we will be using Git every day while at Moringa School, and like anything else, it will become more natural with practice.\u003c/p\u003e","exportId":"tuesday-using-atom-and-git"},{"id":40,"title":"Resource: Cheat Sheet - Git Commands","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eDaily Git Workflow\u003c/h2\u003e\r\n\u003ch3\u003eSet Name and Email\u003c/h3\u003e\r\n\u003ch4\u003eSolo Programming\u003c/h4\u003e\r\n\u003cp\u003eUse the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit config\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to set your name and email for your local computer. This only needs to be done once.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e$ git config --\u003cspan class=\"hljs-built_in\"\u003eglobal\u003c/span\u003e user.name \u003cspan class=\"hljs-string\"\u003e\"Santa Claus\"\u003c/span\u003e\r\n$ git config --\u003cspan class=\"hljs-built_in\"\u003eglobal\u003c/span\u003e user.email santa\u003cspan class=\"hljs-property\"\u003e@northpole\u003c/span\u003e.com\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch4\u003eTracking Changes\u003c/h4\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate a new project directory with Git repository\r\n\u003cp\u003eIn the terminal type these commands:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir project-name\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd project-name\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit init\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eAfter adding files or making changes, track the changes.\r\n\u003cp\u003eUse this command to add all changes:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add .\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eUse this command to add a specific file (replace\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efilename.html\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the name of the file to add):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add filename.html\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eCommit the changes.\r\n\u003cp\u003eIn terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"add a short, descriptive present-tense message here describing the changes made\"\u003c/span\u003e\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCreate repository for project on GitHub at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/new\"\u003ehttps://github.com/new\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAdd the remote to the project.\u003c/p\u003e\r\n\u003cp\u003eIn terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit remote add [remote name] [remote \u003cspan class=\"hljs-constant\"\u003eURL\u003c/span\u003e]\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e[remote name]\u003c/code\u003e: Name of the remote. When working solo, use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e[remote URL]\u003c/code\u003e: The URL of the remote on GitHub.\u003c/li\u003e\r\n\u003cli\u003eFor example, this command adds a remote named \u003cspan style=\"font-family: monospace;\"\u003e\u003cspan style=\"font-size: 13px;\"\u003eorigin \u003c/span\u003e\u003c/span\u003eto the repository at \u003cem\u003ehttps://github.com/moringaschool/hello-world\u003c/em\u003e:\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cpp\"\u003e$ git remote add origin https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git\u003c/span\u003e\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003ePush the changes to GitHub.\r\n\u003cp\u003eIn terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e [remote name] [branch name]\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e[branch name]\u003c/code\u003e: Name of the branch you're working on.\u003c/li\u003e\r\n\u003cli\u003eFor example, this command pushes to the remote named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin \u003c/code\u003eto the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch:\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin master\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eClone repository from GitHub.\r\n\u003cp\u003eIn terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ git \u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003e [remote URL]\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor example, this command clones the repository at\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehttps://github.com/moringaschool/hello-world\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003eclone\u003c/span\u003e https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git\u003c/span\u003e\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch2\u003eGit Commands Overview\u003c/h2\u003e\r\n\u003cp\u003eIn this reference, examples in brackets [xxx], should be entirely replaced by what is indicated (do not leave the [ ] symbols).\u003c/p\u003e\r\n\u003ch3\u003eProject Setup\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git init\u003c/code\u003e: Initializes new local Git repository in the current directory.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eTracking Files\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git add .\u003c/code\u003e: Adds ALL files with changes to be committed.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git add [file]\u003c/code\u003e: Adds the named file to be committed.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git commit -m \"[message]\"\u003c/code\u003e: records all of the staged files permanently to the version history; message should describe the changes finishing the phrase \"This commit will…\".\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eExample:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git commit -m \"add submit functionality for the form\"\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eRemote Repositories\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git remote add [remote name] [remote URL]\u003c/code\u003e: Adds a remote with the name specified for the repository to the remote URL provided.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git remote -v\u003c/code\u003e: Shows the names and URLs for all of the remote repositories that the project's Git repository has stored.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git push [remote name] [branch name]\u003c/code\u003e: Copies the code to the remote repository from the local Git repository.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git clone [remote URL]\u003c/code\u003e: Copies the code and commit history from a remote repository to a local repository.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eReviewing Git Info\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git log\u003c/code\u003e: Lists commit history for the current branch.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git log --oneline\u003c/code\u003e: Lists a condensed format of the commit history for the current branch.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git status\u003c/code\u003e: Lists the files where changes have been made to be committed.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"resource-cheat-sheet-git-commands"},{"id":1553,"title":"Tuesday: Forking with Git","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003cspan style=\"font-size: 18pt;\"\u003eObjectives\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003eIn this lesson, we will:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eFork a project from an account to your account \u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-size: 18pt;\"\u003eForking a Repository\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003eA \u003cstrong\u003efork\u003c/strong\u003e is a copy of a repository. Most commonly, forks are used to propose changes to someone's project or to use someone else's project as a starting point for your own idea. We are going to learn how to collaborate effectively later in the course. When going through Moringa Prep, you will be working in pairs for the most part. After working on your pair partner's computer and pushing changes to their GitHub account, there's the need to create a copy of the project in your own GitHub account. \u003c/p\u003e\r\n\u003cp\u003eTo get started, open the \u003ca href=\"https://github.com/iantheninja/delani_studio_site\"\u003eGitHub repository\u003c/a\u003e we will be working with throughout this lesson. On the top right corner of your screen, you should see a button with the text 'Fork' as shown in the image below. Clicking on this button should start the process of copying the project/repository to your own account. This is the \u003cstrong\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Open-source_software\"\u003eopen source\u003c/a\u003e \u003c/strong\u003eadvantage of sharing projects on Github allowing people to collaborate on their work.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/fork-button-1.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"\" data-decorative=\"true\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/2645\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eClick on that button which should result in a modal prompting you to choose the account to which you want to fork. Select your account name which should take you to the repo you forked in your account. For example, if your GitHub username is \u003cem\u003e'iantheninja' \u003c/em\u003ejust like mine is, you should select it and not anything else that appears in the modal. This may take a couple of seconds so be patient as the process takes place. To know that the forking process is complete, check the \u003cstrong\u003etop left\u003c/strong\u003e corner of your repo. You should be in your account in a repo with the same name as the original repository (\u003cstrong\u003eyour_username\u003c/strong\u003e/delani_studio_site). This shows that the forking process is complete.\u003c/p\u003e\r\n\u003cp\u003eIt shows that you are now working on your forked version that was forked from\u003cem\u003e iantheninja/delani_studio_site.\u003c/em\u003e\u003cem\u003e \u003c/em\u003eHaving copied \u003cem\u003eiantheninja\u003c/em\u003e'\u003cem\u003es\u003c/em\u003e repo to your own account, we can then proceed to \u003cstrong\u003eclone\u003c/strong\u003e it like we learned to do in the previous lesson. Remember that \u003cstrong\u003ecloning makes a copy in a location on your device\u003c/strong\u003e, in this case, your laptop. \u003c/p\u003e\r\n\u003ch3\u003eCloning a repo \u003c/h3\u003e\r\n\u003cp\u003eRun the \u003ccode\u003egit clone\u003c/code\u003e command to clone the repo to your preferred location. At this point, you should have a \u003cem\u003emoringa-school-projects \u003c/em\u003efolder which should host all projects you are going to work on at Moringa School. If you do not have such a folder, make sure you create one right now. Make sure to clone the repository to that directory (\u003cem\u003emoringa-school-projects\u003c/em\u003e) to avoid making a mess of your folder structure. Take the next 5 minutes and figure out if you and your pair partner can figure out how to correctly clone the repo. \u003c/p\u003e\r\n\u003cp\u003e[\u003cem\u003e5 minute practice session\u003c/em\u003e] \u003c/p\u003e\r\n\u003cp\u003eConfirm that you did the right thing by opening the \u003cem\u003emoringa-school-projects\u003c/em\u003e folder\u003cem\u003e \u003c/em\u003eand checking that you have the hello-world project. If you did not nail the task (cloning the repo), here's a bit of guidance to assist you. Follow the following steps:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eOpen the terminal application. \u003c/li\u003e\r\n\u003cli\u003eNavigate to the moringa-school-projects folder from the terminal. Remember to use the \u003cem\u003ecd \u003c/em\u003eand \u003cem\u003emkdir\u003c/em\u003e commands where necessary.\u003c/li\u003e\r\n\u003cli\u003eRun the command: \r\n\u003cpre\u003e\u003cem\u003egit clone \u003ca href=\"https://github.com/iantheninja/hello-world.git\"\u003ehttps://github.com/\u003cstrong\u003eyour-username\u003c/strong\u003e/hello-world.git\u003c/a\u003e\u003c/em\u003e\u003c/pre\u003e\r\n(remember to replace '\u003cstrong\u003e\u003cem\u003eyour-username\u003c/em\u003e\u003c/strong\u003e' with your GitHub username to prevent cloning the wrong repository)\u003c/li\u003e\r\n\u003cli\u003eNavigate to inside the cloned repository by using the change directory (\u003ccode\u003ecd\u003c/code\u003e) command. \u003c/li\u003e\r\n\u003cli\u003eOpen your editor by using the command \u003ccode\u003eatom .\u003c/code\u003e for Atom users or \u003ccode\u003ecode .\u003c/code\u003e for Visual Studio Code users.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eYou are now ready to make modifications to the project you forked from the user \u003cem\u003e'iantheninja'\u003c/em\u003e (who seems to be a pretty cool person from his username). The project you forked now belongs to you. You should consult the licensing information in GitHub repos to make sure you do not get sued for using other people's work illegally. Play around with \u003ca href=\"https://choosealicense.com/\"\u003echoosealicense.com\u003c/a\u003e to get to know what types of open source licenses there are.\u003c/p\u003e","exportId":"tuesday-forking-with-git"},{"id":41,"title":"Tuesday: HyperText Markup Language (HTML)","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eMany people think that creating a web page involves really complicated code that requires considerable studying to understand. This is not necessarily the case. In the next lesson we will make a simple web page together. But before we do that, let's quickly go over what the World Wide Web is.\u003c/p\u003e\r\n\u003cp\u003eThe web is made up of mostly text files - like the ones you created to write your papers in high school - as well as some other files like images or videos. These files are stored on computers that are connected over networks. When you put a web site's address into your browser, you are really just requesting to see a particular file, or combination of files.\u003c/p\u003e\r\n\u003cp\u003eWe've already seen a basic HTML file with our Hello World and Goodbye web pages. Now, we're going to focus on the basics of HyperText Markup Language, or HTML, that we previously just copy and pasted.\u003c/p\u003e\r\n\u003cp\u003eIt looked a bit like this in Atom:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026lt;h1\u0026gt;HTML Lesson\u0026lt;/h1\u0026gt;\r\n\u0026lt;h2\u0026gt;For Moringa School\u0026lt;/h2\u0026gt;\r\n\r\n\u0026lt;p\u0026gt;The goal \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e lesson \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e to illustrate how simple HTML \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e to read \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e write \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e showing some text written \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e HTML \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e what it looks like \u003cspan class=\"hljs-keyword\"\u003ewhen\u003c/span\u003e it \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e displayed \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a web browser.\u0026lt;/p\u0026gt;\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we open this file in our browser, it looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-07-hello_world_webpage.png\" alt=\"MP-W1D1-07-hello_world_webpage.png\" width=\"747\" height=\"160\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1337\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eHyperText\u003c/strong\u003e, or the \"HT\" of HTML, is just a fancy word for text that links to something else. The \"ML\" of HTML stands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emarkup language\u003c/strong\u003e. As we can see in the example above, the text in the HTML file is normal text that is\u003cspan\u003e \u003c/span\u003e\u003cem\u003emarked up\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith instructions written inside of these angle brackets\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e, known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003etags\u003c/strong\u003e. The actual language of HTML is the instructions that we wrap around the text to format it and as we'll see, instructions for many other things like images, links, videos and more.\u003c/p\u003e","exportId":"tuesday-hypertext-markup-language-html"},{"id":1953,"title":"Tuesday: Indentation and Spacing","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eBefore we start writing any HTML, it's important that we go over some rules to make sure that we're writing our code properly.\u003c/p\u003e\r\n\u003cp\u003eWhen writing HTML (or any other programming language), well-written code follows consistent indentation and spacing patterns. In some languages, indentation and spacing are required for the code to function properly. In HTML, inconsistent indentation and spacing will not impact the functionality of the web page but will cause your code to be difficult to read and understand.\u003c/p\u003e\r\n\u003cp\u003eConsider this example of HTML with poor indentation and spacing:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e   \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e  Page Title\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHeader\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e  Page content   \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAt first glance, it's difficult to see where elements begin and end, and what elements are nested within each other.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eNested\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis another way of saying that the start tag and end tags of one element are inside of the start and end tags of another element.\u003c/p\u003e\r\n\u003cp\u003eHere's the same code with proper indentation and spacing:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePage content\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMuch better!\u003c/p\u003e\r\n\u003cp\u003eIn HTML, start tags and end tags on different lines are always left-aligned with one another. For example, when I see the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag, I can scan vertically down to see its closing tag. It's clear that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare nested within\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e. The same goes for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag alignment.\u003c/p\u003e\r\n\u003cp\u003eWhen an element is nested inside another element, it needs to be indented two spaces from the opening tag. You can see in the above example that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis indented two spaces from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis indented two spaces from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWith a text editor like Atom, you can use the tab key to indent quickly. If you use the tab option, make sure tabs are set to two spaces. Some defaults are set to other amounts, such as four spaces, which is too much white space for HTML and is not standard practice.\u003c/p\u003e\r\n\u003cp\u003eTo check your settings in Atom, go to the menu bar and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAtom\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePreferences\u003c/em\u003e, then choose the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEditor \u003c/em\u003emenu in the sidebar and scroll down to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTab Length\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-08-tab_length.jpeg\" alt=\"MP-W1D1-08-tab_length.jpeg\" width=\"565\" height=\"466\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1338\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAlso, notice that there is no space between the text content of an element and its tags. For example,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;Header\u0026lt;/h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas no spaces between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the word\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHeader\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eRegardless of the language that you use to write code, learn its conventions for indentation and spacing. Getting in good habits now is much easier than breaking bad habits later. Practice consistency so that your code is easily understood by other developers, as well as yourself.\u003c/p\u003e","exportId":"tuesday-indentation-and-spacing"},{"id":1954,"title":"Tuesday: Practice with Indentation and Spacing - Cookie Recipe","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eContinue developing good indentation and spacing habits while simultaneously exploring the anatomy of a basic website, and practice cloning Git repositories. These skills will be used nonstop during your time at Moringa School.\u003c/p\u003e\r\n\u003cp\u003eNow it's time to practice using Git clone and honing your HTML skills by fixing some indentation and spacing. There is a\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/iantheninja/cookie-recipe/blob/master/cookie-recipe.html\"\u003ecookie repository\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eon GitHub that contains an HTML file with terrible indentation, spacing and HTML tag placement. It really needs your help.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git clone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto clone the repository onto your desktop.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBe sure you have changed into your\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emoringa-school-projects\u003c/strong\u003e\u003cspan\u003e folder \u003c/span\u003eor the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDocuments\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edirectory before cloning the repository so that \u003cstrong\u003e\u003cspan style=\"color: #ff0000;\"\u003eyou do not accidentally clone the cookie repository inside of an existing project folder\u003c/span\u003e\u003c/strong\u003e.\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eAsk a peer if you're not sure if you are cloning the repository into the correct place.\u003c/li\u003e\r\n\u003cli\u003eCreate a new remote repository on your own GitHub for this project and link it to your local project folder by creating a remote (using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit remote add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand).\u003c/li\u003e\r\n\u003cli\u003eGo through the HTML file and fix every indentation error. Commit the changes. THEN...\u003c/li\u003e\r\n\u003cli\u003eGo through the HTML file and fix every spacing error. Commit the changes. THEN ...\u003c/li\u003e\r\n\u003cli\u003eGo through the HTML file and fix every tag placement error. Commit the changes.\u003c/li\u003e\r\n\u003cli\u003eHave a TM come by and check your file for any errors that you have missed.\u003c/li\u003e\r\n\u003cli\u003ePush your changes to the remote you created in your own GitHub account.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eToday (and always!), focus on making sure that\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof your code is properly indented and spaced and your HTML tags are properly placed around the content they contain.\u003c/p\u003e","exportId":"tuesday-practice-with-indentation-and-spacing-cookie-recipe"},{"id":43,"title":"Tuesday: Creating a Web Page","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that we have an understanding of what HTML is, let's write some! In this lesson, we will create our first webpage. It will look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/MP-W1D1-09-my_first_webpage.png\" alt=\"MP-W1D1-09-my_first_webpage.png\" width=\"518\" height=\"579\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1339\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's create a project directory and initialize a Git repository for a new project called\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eAs a review, here are the steps:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eOpen Terminal.\u003c/li\u003e\r\n\u003cli\u003eMake a project directory called my-first-website in your Desktop directory:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mkdir my-first-website\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate into the project directory you just created:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd my-first-website\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eIf you type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ pwd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein Terminal now, you should see that you are in your project directory at /Users/Guest/Desktop/my-first-webpage.\u003c/li\u003e\r\n\u003cli\u003eWithin your project directory, initialize your Git repository:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git init\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eCreate an empty file:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch my-first-webpage.html\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eOpen the project directory in Atom:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ atom .\u003c/code\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eatom .\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eopens the entire directory you are currently in because the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erefers to current directory. If you only want to open the single file, you could instead type:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ atom my-first-webpage.html\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eA note here about the name of the file. When you open a file on your computer, it knows what program to use to open the program by checking its\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eextension\u003c/strong\u003e. This is the group of letters that come after the name of the file, and indicates its file format. So, for example,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eexample.mp3\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill open in a program that plays music, because the \".mp3\" extension indicates an audio file.\u003c/p\u003e\r\n\u003cp\u003eWe gave our HTML document the file extension \".html\", which tells our computer that it is an HTML file, and that it shouldopen the file in a web browser.\u003c/p\u003e\r\n\u003cp\u003eThe name of the file can consist of any combination of letters, numbers or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(underscore) and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(hyphen) characters. It is a good practice to start the file name with a letter and use lowercase letters to avoid capitalization errors.\u003c/p\u003e\r\n\u003cp\u003eNow, with\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eopen in Atom, let's start by typing the following code (no more copying and pasting!):\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs apache\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThese two tags are the standard start and end tags on any page. They need to be there. HTML elements can contain text and other HTML elements inside them, and these two tags will contain the rest of the HTML that makes up the page.\u003c/p\u003e\r\n\u003cp\u003eNow let's add the rest of the page structure. Modify the page so that it looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe've created our first web page - let's commit it!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"add initial page structure\"\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSo, what's going on here?\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag at the top tells the browser that this document contains HTML, and specifically that it contains the newest version of HTML, HTML5. (An example of a doctype for an older version of HTML is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u0026gt;\u003c/code\u003e) Without the the doctype declaration, your HTML code will likely still work, as HTML5 is the current standard. In the future, however, a new standard will override HTML5. Future browsers may assume you're using a different, newer standard, in which case your document will be interpreted incorrectly. To make sure your document is forever interpreted correctly, always include at the very beginning of your HTML documents.\u003c/p\u003e\r\n\u003cp\u003eHTML pages are made up of two distinct parts - the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ehead\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003epart, and the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebody\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003epart. The head contains things that won't appear on your page. Many of the elements that go in the head are advanced stuff to tell search engines and browsers about the page, so the only one you need to know for now is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e. We will see more in upcoming lessons.\u003c/p\u003e\r\n\u003cp\u003eThe text inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etitle\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement is the text that appears at the very top of your browser window when you view the page. We decided to call this page \"My first webpage!\", but you can type whatever you want.\u003c/p\u003e\r\n\u003cp\u003eThe body section is the main part of your page. Everything between those two tags will be visible on your page. Let's type something there now.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  Hello, world!\r\n  Welcome to my first webpage!\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThat's it - we've written our first web page!\u003c/p\u003e\r\n\u003cp\u003eNow let's see what that looks like in a web browser, such as Google Chrome or Internet Explorer. You may have seen some of these before:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/MP-W1D1-10-web_browser_logos.png\" alt=\"MP-W1D1-10-web_browser_logos.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1340\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eRemember in the last lesson how we said that when you put a web site's address into your browser, you are just requesting to see a particular file? As it turns out, we can use web browsers to display files on our computers as well.\u003c/p\u003e\r\n\u003cp\u003eOpen the file location in your file explorer and double-click the icon for\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e. The page should open in a web browser and look like the image at the beginning of this lesson.\u003c/p\u003e\r\n\u003cp\u003eOkay, that's not very fancy - it's just some text in the corner of the screen. Over the next lessons, we will learn how to use HTML (and more) to format our pages.\u003c/p\u003e","exportId":"tuesday-creating-a-web-page"},{"id":201,"title":"Tuesday: Practice Creating a Web Page","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: familiarize yourself with the basic building blocks of a webpage by creating a basic website.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWork through the \u003ca href=\"pages/tuesday-creating-a-web-page\"\u003eprevious lesson\u003c/a\u003e with your partner to create your first web page. Remember to document your process on Git!\u003c/li\u003e\r\n\u003cli\u003eCreate a second web page in the same project folder, and this one will be all about your favorite things. Name it\u003cspan\u003e \u003c/span\u003e\u003cem data-redactor-tag=\"em\"\u003emy-favorite-things.html\u003c/em\u003e. We can't do too much with the page right now but go through the process of creating the page and give it an appropriate title all the same. You will be practicing your skills and add to this page in upcoming lessons. The folder structure of\u003cspan\u003e \u003c/span\u003e\u003cem data-redactor-tag=\"em\"\u003emy-first-website\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eshould look like this:\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cimg style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"viewer/files/MP-W1D1-16-hello_world_folder_structure.png\" alt=\"MP-W1D1-16-hello_world_folder_structure.png\" width=\"237\" height=\"164\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1345\" data-api-returntype=\"File\"\u003e\u003c/p\u003e","exportId":"tuesday-practice-creating-a-web-page"},{"id":202,"title":"Tuesday: Block Elements","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eWe're going to start adding content to our page by working with\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eblock elements\u003c/strong\u003e. These are HTML elements that start on their own line when displayed, like a\u003cspan\u003e \"\u003c/span\u003eblock\"\u003cspan\u003e \u003c/span\u003eon the page. In this lesson, we will learn how to add paragraphs, headers, and lists to our pages.\u003c/p\u003e\r\n\u003cp\u003eOpen up\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand modify it so that it looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe formatting instructions around the text are called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003etags\u003c/strong\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ep tag\u003c/strong\u003e. It means that everything that follows is a paragraph, until\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis reached. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eclosing tag\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eend tag \u003c/strong\u003eand indicates the end of the paragraph. Closing tags always match the header but have a backslash in front.\u003c/p\u003e\r\n\u003cp\u003eWhen we viewed this page without the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags in the last lesson, all of the text appeared on the same line, despite being written on different lines. When we load up the page now, the lines appear as separate paragraphs.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-12-webpage_screenshot_paragraphs.png\" alt=\"MP-W1D1-12-webpage_screenshot_paragraphs.png\" width=\"532\" height=\"254\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1342\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003eWe've just made a change to our code. Time to commit!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"add paragraph block elements to the page\"\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's try some more tags:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy First Webpage\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from Moringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've added a main\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eheader\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(\u003ccode\u003e\u0026lt;h1\u0026gt;My First Webpage\u0026lt;/h1\u0026gt;\u003c/code\u003e) and a subheader (\u003ccode\u003e\u0026lt;h2\u0026gt;Written with a little guidance from Moringa School\u0026lt;/h2\u0026gt;\u003c/code\u003e). Here's how it looks in the browser:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-13-webpage_screenshot_headers.png\" alt=\"MP-W1D1-13-webpage_screenshot_headers.png\" width=\"533\" height=\"329\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1343\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThere are six different levels of headers you can add using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethrough\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e. Like the paragraph tags, we have an opening tag that indicates where the header begins (\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e) and a closing tag that indicates where it ends (\u003ccode\u003e\u0026lt;/h1\u0026gt;\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003eHTML ignores empty spaces and blank lines, which is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewhitespace\u003c/strong\u003e. That's why the extra line we might add between our headers and paragraphs doesn't do anything when the HTML is displayed. We could take it out, or make it three spaces, and it would look exactly the same in the browser.\u003c/p\u003e\r\n\u003cp\u003eLet's commit again!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"add header block elements\"\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add a little bit more:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy First Webpage\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from Moringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere are some things I'm going to learn about coding:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eCSS\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJavaScript\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eAnd a lot more!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere we've added an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eunordered list\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e) with four\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elist items\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e). Here's the page with the unordered list:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-14-webpage_screenshot_unordered_list.png\" alt=\"MP-W1D1-14-webpage_screenshot_unordered_list.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1344\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf we wanted to make an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eordered list\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat uses numbers and letters instead of bullets, we would use an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eol\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eCSS\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJavaScript\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eAnd beyond!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eol\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's the list now:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-15-webpage_screenshot_ordered_list.png\" alt=\"MP-W1D1-15-webpage_screenshot_ordered_list.png\" width=\"519\" height=\"200\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1352\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNotice in the code how I've indented the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003es within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003es. This makes it much easier to read which tags are nested, and makes it easy to see where the closing tag goes when it's not on the same line. It's a good idea to write your closing tag just after you write your opening tag, and then go back and fill in whatever comes in the middle. This way, you won't forget to close a tag after opening it.\u003c/p\u003e\r\n\u003cp\u003eLet's commit again!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"add list elements\"\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe're done with this page for the moment. Now is a good time to push the project to GitHub. As a reminder, here are the steps:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erepository on GitHub\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git remote add [remote nickname] [remote url]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(replacing [remote nickname] with your initials or another good nickname and [remote url] with the URL to the GitHub repository you just created)\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git push [remote nickname] master\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(replacing [remote nickname] with the same nickname you used when you added the remote link)\u003c/li\u003e\r\n\u003cli\u003eCheck on GitHub that your code uploaded successfully\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"tuesday-block-elements"},{"id":203,"title":"Tuesday: Practice: Block Elements","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice creating web pages, and start using block elements. Continue to track your process in Git, and pay special attention to indentation and spacing.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm up\u003c/h2\u003e\r\n\u003cp\u003eDiscuss the following questions with your partner:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhy is indentation and spacing important?\u003c/li\u003e\r\n\u003cli\u003eWhat is an opening tag? What is a closing tag?\u003c/li\u003e\r\n\u003cli\u003eWhat does it mean when an element is nested within another? Can you give an example of when we would use nested elements?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFirst, follow along with the lesson and add the block elements to the page. Then, open up the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand add some block elements. Some to consider:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtaining the page title\u003c/li\u003e\r\n\u003cli\u003eAdd an unordered list (\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e) of your best friends\u003c/li\u003e\r\n\u003cli\u003eAdd an ordered list (\u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e) ranking your favorite foods\u003c/li\u003e\r\n\u003cli\u003eAdd a paragraph (\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e) about some of your favorite things\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003ePet Website\u003c/h3\u003e\r\n\u003cp\u003eNow it's your turn to start creating!\u003c/p\u003e\r\n\u003cp\u003eMake a homepage for your pet or a blog for a fictional animal. Get creative here! Maybe include information about their favorite toys and their favorite activities.\u003c/p\u003e\r\n\u003cp\u003eDon't forget to make a new project folder, commit regularly, and push to a remote repository on GitHub. Continue to pay close attention to indentation and closing all tags you open.\u003c/p\u003e\r\n\u003cp\u003eOf course, you're more than welcome to make web pages about anything you want - these are just suggestions.\u003c/p\u003e\r\n\u003cp\u003eHave a TM check the indentation and spacing of this project before you move on.\u003c/p\u003e","exportId":"tuesday-practice-block-elements"},{"id":204,"title":"Tuesday: Inline Elements","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eAll of the tags we learned about in the previous lessons are block elements, meaning that each element is displayed on a new line. In this lesson, we are going to look at elements that do not appear on their own line but share a line with other elements. These are called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einline elements\u003c/strong\u003e. We will see how to add text emphasis, links, and images to our pages. At the end of this lesson,\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-17-my_first_webpage_inline_elements.png\" alt=\"MP-W1D1-17-my_first_webpage_inline_elements.png\" width=\"615\" height=\"825\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1346\" data-api-returntype=\"File\"\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eOpen up\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e. We're going to modify it to include an inline element:\u003c/p\u003e\r\n\u003cpre\u003e\u0026lt;p\u0026gt;Welcome to my \u0026lt;strong\u0026gt;first web page\u0026lt;/strong\u0026gt;!\u0026lt;/p\u0026gt;\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag indicates that something is important. By default, it will make the text inside it bold (although we'll learn how to customize this soon), like the text below:\u003c/p\u003e\r\n\u003cp\u003eWelcome to my\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efirst web page\u003c/strong\u003e!\u003c/p\u003e\r\n\u003cp\u003eIf we want to emphasize something, we'll use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag, which will italicize it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eem\u003c/span\u003e\u0026gt;\u003c/span\u003eMoringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eem\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's how the HTML should render in the browser:\u003c/p\u003e\r\n\u003cp\u003eWritten with a little guidance from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMoringa School\u003c/em\u003e\u003c/p\u003e\r\n\u003ch2\u003eLinks\u003c/h2\u003e\r\n\u003cp\u003eAnd now let's learn about one of the most useful HTML tags. Add the following line to the end of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eCheck out \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://moringaschool.com/\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMoringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e. It's a great place to learn web development skills!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eanchor tag\u003c/strong\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e, creates a link to the address at the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehref\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute, or\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehypertext reference\u003c/em\u003e. An attribute is something that further defines what a tag does - in this case, it tells the link where to go.\u003c/p\u003e\r\n\u003cp\u003eHere's how the link should render in the browser:\u003c/p\u003e\r\n\u003cp\u003eCheck out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringaschool.com/\"\u003eMoringa School\u003c/a\u003e. It's a great place to learn web development skills!\u003c/p\u003e\r\n\u003cp\u003eWe can also use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag to link from one document to another. For example, if you've been following along with the exercises and have\u003cspan\u003e \u003c/span\u003e\u003cem\u003efavorite-things.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein your project directory, you can link to it from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elike this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere is a link to my \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"favorite-things.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003efavorite things\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn this link, instead of supplying a full path, we've provided a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003erelative path\u003c/strong\u003e. In other words, if a link doesn't start with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://\u003c/code\u003e, or a few other specific protocols you may come across), your web browser will look in the same folder as the HTML document folder for the file in the link.\u003c/p\u003e\r\n\u003cp\u003eThis brings up a pitfall you should be careful to avoid: if you write a link like this:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a href=\"www.moringaschool.com\"\u0026gt;link\u0026lt;/a\u0026gt;\u003c/code\u003e, it will look for a file named \"www.moringaschool.com\" in the current directory. If you're linking to another website, remember to start it with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eImages\u003c/h2\u003e\r\n\u003cp\u003eLet's learn about one more inline tag, which will allow us to add images to the page. Find an image of an elephant online, save it in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder with the name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelephant.jpg\u003c/code\u003e, and then display it on our page like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"elephant.jpg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"A photo of an elephant\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag is a little different than the other tags that we've seen: it's\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eself-closing\u003c/strong\u003e, meaning that it does not need a closing tag - in other words, it doesn't need one of these:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/img\u0026gt;\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc\u003c/code\u003eattribute tells the tag where to find the image, and is required.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute is typically a description of the image, and is optional. However, it's a good idea to include for a few reasons. First, if the image fails to load, the user can hover the mouse over the image's area and read the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etext for a description of the image. Second, visually impaired users often browse the web with the aid of screen reading software. When you include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute, the screen reading software can read the image's description out loud to the user.\u003c/p\u003e\r\n\u003cp\u003eTypically, websites will store their images in a separate folder from the rest of the HTML. Create a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimages\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the main project directory and move the image there.\u003c/p\u003e\r\n\u003cp\u003eThe project directory should look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-16-hello_world_folder_structure.png\" alt=\"MP-W1D1-16-hello_world_folder_structure.png\" width=\"257\" height=\"178\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1345\" data-api-returntype=\"File\"\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eNow let's update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag so that knows where to find the image:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"images/elephant.jpg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"A photo of an elephant\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eimages/elephant.jpg\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells the browser to look in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimages\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder in the current directory and then look for the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eelephant.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003eRemember to commit and push to GitHub after updating!\u003c/p\u003e","exportId":"tuesday-inline-elements"},{"id":205,"title":"Tuesday: Practice: Inline Elements","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice using common inline elements in web pages, and get comfortable with some of the most common ones.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following questions with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between a block element and an inline element?\u003c/li\u003e\r\n\u003cli\u003eWhat does it mean to provide a relative path?\u003c/li\u003e\r\n\u003cli\u003eWhat is an HTML attribute? Can you give some examples of ones that we have seen so far?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eAdd some inline elements to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e. Some to consider:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd some images to represent your favorite things\u003c/li\u003e\r\n\u003cli\u003eList your favorite websites and provide links to them\u003c/li\u003e\r\n\u003cli\u003eAdd some\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags at appropriate places\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNext, update your pet's website to include images, links,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estrong\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eem\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags.\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIn Moringa School exercises, the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFurther Exploration\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esection contains additional activities and exercises to explore if all of the coursework for the day has been completed. Make sure that you and your partner have completed the day's exercises and understand them well with time to spare before proceeding.\u003c/p\u003e\r\n\u003ch4\u003ePet Website\u003c/h4\u003e\r\n\u003cp\u003eAdd additional pages to your pet website. This could include pages for other pets, a play date calendar, a biography or 'about me' page, a blog, a contact page, or anything else you can think up!\u003c/p\u003e\r\n\u003ch4\u003eOther HTML Website\u003c/h4\u003e\r\n\u003cp\u003eCreate an additional HTML website for any topic of your choosing. This could include your friend's local business, your favorite vacation spot, or something dedicated to a hobby you and your partner share. Create multiple pages for the site.\u003c/p\u003e","exportId":"tuesday-practice-inline-elements"},{"id":44,"title":"Discussion: Indentation and Spacing","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cem\u003eDiscuss the following:\u003c/em\u003e\u003c/p\u003e\n\u003ch2\u003e\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eWhy is indentation and spacing important? What benefit is there to ensuring that it is consistent?\u003c/li\u003e\n\u003cli\u003eWhen do we indent?\u003c/li\u003e\n\u003cli\u003eHow many spaces should make up one indent?\u003c/li\u003e\n\u003cli\u003eIf we wanted to change the little icon that displays next to the page title, would that code go in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e?\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cimg src=\"viewer/files/MP-W1D1-11-favicon.png\" alt=\"MP-W1D1-11-favicon.png\" width=\"484\" height=\"143\"\u003e\n\u003c/li\u003e\n\u003cli\u003eWhat is an opening tag? What is a closing tag?\u003c/li\u003e\n\u003cli\u003eWhat does it mean when an element is nested within another? Can you give an example of when we would use nested elements?\u003c/li\u003e\n\u003cli\u003eWhat is the difference between a block element and an inline element?\u003c/li\u003e\n\u003cli\u003eWhat does it mean to provide a relative path?\u003c/li\u003e\n\u003cli\u003eWhat is an HTML attribute? Can you give some examples of ones that we have seen so far?\u003c/li\u003e\n\u003c/ol\u003e","exportId":"icf39d29fd7924bb6b2ede5bfa34403f7"},{"id":45,"title":"Tuesday: README ","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eEvery GitHub repository should have a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eREADME.md\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile. It's often the first thing someone new to your project sees and is frequently the only source of documentation. The READMEs we will write will have the extension,\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e.md\u003c/code\u003e which stands for Markdown. Like HTML, Markdown is a language that uses annotations to format the display of text.\u003c/p\u003e\r\n\u003cp\u003eThe README file should be located in the top level of the project directory. GitHub knows to look for a file named \"README\" and display the contents on the repo's viewing page.\u003c/p\u003e\r\n\u003cp\u003eIt's worth taking the time to make your README look presentable because it will be the first thing anyone will see in your repositories. You want to make a solid first impression - if people see that you have a messy or incomplete README, they will assume that your code is also messy or incomplete. You want to make it as easy as possible for your users (such as potential employers) to check out your code. Writing a strong README is a good way to practice - and showcase - your empathy as a developer.\u003c/p\u003e\r\n\u003cp\u003eCheck out the following examples of good READMEs:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://github.com/iharsh234/WebApp\"\u003eWebApp\u003c/a\u003e: description, live demo, screenshots, usage and collaboration instructions, technologies used, to do list, collaborators, license\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://github.com/sindresorhus/pageres\"\u003ePageRes\u003c/a\u003e: logo, description, installation instructions, usage instructions, API documentation, links to related repos, live demo, collaborators, license\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://github.com/IgorAntun/node-chat\"\u003eNode.JS Chat\u003c/a\u003e: description, screenshot, live demo, features, setup instructions, usage instructions, license\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAs you can see from these examples, READMEs vary widely from one repository to the next, depending on the project needs. This is why it's important that your README is well-organized and easy to read. Moringa School recommends including as a minimum the following sections:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eApplication name\u003c/li\u003e\r\n\u003cli\u003eNames of contributors\u003c/li\u003e\r\n\u003cli\u003eDescription of the project's purpose\u003c/li\u003e\r\n\u003cli\u003eComplete setup/installation instructions\u003c/li\u003e\r\n\u003cli\u003eLicense information with a copyright and date\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAdditional sections to consider:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eLive demo\u003c/li\u003e\r\n\u003cli\u003eInstructions on running tests\u003c/li\u003e\r\n\u003cli\u003eTechnologies used\u003c/li\u003e\r\n\u003cli\u003eFuture features or to do list\u003c/li\u003e\r\n\u003cli\u003eKnown bugs\u003c/li\u003e\r\n\u003cli\u003eContact information\u003c/li\u003e\r\n\u003cli\u003eSupport or contribution instructions\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBelow is a README sample template written in Markdown. Feel free to copy and paste the text below into a new file and replace the relevant parts in curly brackets with information about your project. It includes sections from above, but you can modify this in any way to suit your project's needs or to make your README look the way you want.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e# {Application Name}\r\n#### {Brief description of application}, {Date of current version}\r\n#### By **{List of contributors}**\r\n## Description\r\n{This is a detailed description of your application, including its purpose and usage.  Give as much detail as needed to \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexplain\u003c/span\u003e what the application does, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e other information you want users \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e other developers \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e have. }\r\n## Setup/Installation Requirements\r\n* This \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e a great place\r\n* \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e list setup instructions\r\n* \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a simple\r\n* easy-\u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e-understand\r\n* \u003cspan class=\"hljs-keyword\"\u003eformat\u003c/span\u003e\r\n{Leave nothing \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e chance! You want it \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be easy \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e potential users, employers \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e collaborators \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e run your app. \u003cspan class=\"hljs-keyword\"\u003eDo\u003c/span\u003e I need \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e run a \u003cspan class=\"hljs-keyword\"\u003eserver\u003c/span\u003e? \u003cspan class=\"hljs-keyword\"\u003eDo\u003c/span\u003e I need \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e dependencies? How should I \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e up my \u003cspan class=\"hljs-keyword\"\u003edatabases\u003c/span\u003e? \u003cspan class=\"hljs-keyword\"\u003eIs\u003c/span\u003e there other code this app depends \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e?}\r\n## Known Bugs\r\n{\u003cspan class=\"hljs-keyword\"\u003eAre\u003c/span\u003e there issues that have \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e yet been resolved that you want \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e let users know you know? Outline \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e issues that would impact \u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e your application. \u003cspan class=\"hljs-keyword\"\u003eShare\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e workarounds that \u003cspan class=\"hljs-keyword\"\u003eare\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e place. }\r\n## Technologies Used\r\n{Tell me about the languages \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e tools you used \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecreate\u003c/span\u003e this app. Assume that I know you probably used HTML \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e CSS. \u003cspan class=\"hljs-keyword\"\u003eIf\u003c/span\u003e you did something really cool \u003cspan class=\"hljs-keyword\"\u003eusing\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eonly\u003c/span\u003e HTML, point that out.}\r\n## Support \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e contact details\r\n{Let people know what \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e they run \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e issues \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e have questions, ideas \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e concerns.  Encourage them \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e contact you \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e make a contribution \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e the code.}\r\n### License\r\n*{Determine the license under which this application can be used.  See below \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e more details \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e licensing.}*\r\nCopyright (c) {\u003cspan class=\"hljs-keyword\"\u003eyear\u003c/span\u003e} **{List \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econtributors\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e company name}**\r\n  \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eLicensing\u003c/h2\u003e\r\n\u003cp\u003eAn open source license details how others can use your code. Adding a license to your repository is a good practice because it is how you state your intent.\u003c/p\u003e\r\n\u003cp\u003eMIT and GPL are the most common licenses. An MIT license means your code is free to use by anyone and you are not liable (Rails and jQuery use an MIT license). GPL also indicates free usage of the code but when used, the resulting work MUST be open source (Linux, Git and Wordpress use GPL).\u003c/p\u003e\r\n\u003cp\u003eFor additional details on choosing a license for your code, visit GitHub's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://choosealicense.com/\"\u003eChoose a License site\u003c/a\u003e.\u003c/p\u003e","exportId":"tuesday-readme"},{"id":46,"title":"Tuesday: README practice","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Add some READMEs to your projects and understand what goes into them.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat are some features that make up a good README?\u003c/li\u003e\r\n\u003cli\u003eHow is Markdown similar to HTML? How is it different?\u003c/li\u003e\r\n\u003cli\u003eWhat is an open source license? Why is it a good idea to include one?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eAdd a README to one of each of you and your partner's projects.\u003c/p\u003e","exportId":"tuesday-readme-practice"},{"id":47,"title":"Wednesday: Introduction to CSS","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eSo far, the sites we've made have not been very exciting. In this lesson, we're going learn how to change that with CSS, which stands for Cascading Style Sheets. CSS is a language that lets us add style to our webpages. It lets us separate the page content and structure from the style and appearance.The\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecascading\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the name refers to the way that styles are applied to an element - we'll get more into that later.\u003c/p\u003e\r\n\u003cp\u003eLet's go back to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-website\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eproject. Open up the project in Atom and add a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the main project directory. Create a file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einside of the folder. Your directory structure should look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D2-01-folder_structure_css.png\" alt=\"MP-W1D2-01-folder_structure_css.png\" width=\"237\" height=\"246\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1348\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eFirst, we need to tell the HTML document to use this CSS. The reference typically goes in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e section like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement links the HTML and CSS files together. It must be placed within the head of the HTML file. It is a self-closing tag and requires the following three attributes:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003ehref\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- like the anchor element, the value of this attribute must be the address, or path, to the CSS file.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003etype\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- this attribute describes the type of document that you are linking to (in this * case, a CSS file). The value of this attribute should be set to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etext/css\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003erel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- this attribute describes the relationship between the HTML file and the CSS file. Because you are linking to a stylesheet, the value should be set to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estylesheet\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow let's add some CSS to\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto see what this looks like:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSave the file and refresh the page, and see that the header is now blue.\u003c/p\u003e\r\n\u003cp\u003eWhat we just wrote is known as a CSS rule. It is made of two parts: the selector and the declaration. In the above example,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the selector, or the HTML tag to which the rule is applied. Everything inside of the curly braces is the declaration, which defines of the styles to be applied to the selector. The declaration is made of two parts: the property (\u003ccode\u003ecolor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein this case) and the value (\u003ccode\u003eblue\u003c/code\u003e), and they are separated by a colon.\u003c/p\u003e\r\n\u003cp\u003eA declaration can contain more than one property. Each property is separated by a semicolon:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice the indentation and spacing here: properties are indented two spaces from the selector.\u003c/p\u003e\r\n\u003cp\u003eLet's add some more rules:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: green\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-family\u003c/span\u003e: sans-serif\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eline-height\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e40px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGo ahead and refresh the page and see the changes. All these rules are pretty straightforward.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags, we've set the color to green, the font style to italic, and the text alignment to the center of the page.\u003c/li\u003e\r\n\u003cli\u003eFor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags, we've set the font family to _sans serif), which is a type of font.\u003c/li\u003e\r\n\u003cli\u003eFor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eul\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags, we've set the line height to 40 pixels -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epx\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis short for \"pixels\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIt's worth noting here that named colors, such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreen\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003e, are not commonly used. More likely, you will see three- or six-digit hexadecimal codes to define color, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: \u003cspan class=\"hljs-hexcolor\"\u003e#00f\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eor this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n\u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: \u003cspan class=\"hljs-hexcolor\"\u003e#0000ff\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBoth of these are equivalent to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue\u003c/code\u003e. There are numerous tools online for picking colors and hex codes, such as\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://htmlcolorcodes.com/\"\u003ehtmlcolorcodes.com\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou may be wondering why we made\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eitalic using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efont-style\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty instead of using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003etags like we did in a previous lesson. There are a few reasons for this. First, we can modify the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag just like any other HTML tag.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eemphasize\u003c/em\u003e, and eventually, we may decide that we want to emphasize text by bolding it instead of italicizing it, which we may not want for our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003es. Second, one of the advantages of CSS is that we can change style in many places at the same time. What happens when we add another\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003e? We have to add\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003es again so that it has the same formatting. Say we want our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003es to be bold as well. Now we have to add\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e tags We end up repeating ourselves with many opportunities to miss something. By using CSS, we only need to change the style in one place, and every\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon every page that uses that CSS file will be updated.\u003c/p\u003e\r\n\u003cp\u003eLet's take a second to reflect on this last point. It's in the nature of websites that even after they're built, they are bound to change: there will be additions, deletions, overhauls, and more. CSS gives us some powerful tools to change what we've built. Remember: good code is code that is easy to change.\u003c/p\u003e\r\n\u003cp\u003eTo see the power of using CSS, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.csszengarden.com/\"\u003eCSS Zen Garden\u003c/a\u003e. Clicking one of the links on the right side of the page will apply a different stylesheet to the same HTML. The page is totally transformed without making any changes in the HTML. Your goal in writing CSS should be to allow to Zen Garden-like changes to your styles.\u003c/p\u003e","exportId":"wednesday-introduction-to-css"},{"id":1746,"title":"Wednesday: Help Desk and Curriculum Feedback","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eCurriculum Feedback\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhile going through the curriculum, we would like to hear of suggestions or error that need to be addressed. This can be done inside the Moringa School LMS, making tracking, assigning and follow up of the feedback much easier.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo give feedback inside the LMS follow the steps in the following images.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Grading/Picture5.png\" alt=\"Picture5.png\" width=\"389\" height=\"628\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/3664\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the global navigation locate the and click the \u003c/span\u003e\u003cstrong\u003eHelp Desk\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e [1] icon then the \u003c/span\u003e\u003cstrong\u003eReport a problem\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e [2]\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003cimg src=\"viewer/files/Grading/Picture6.png\" alt=\"Picture6.png\" width=\"388\" height=\"560\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/3665\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eType a brief title for your feedback in the \u003c/span\u003e\u003cstrong\u003eSubject\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e field [3] and provide more details in the \u003c/span\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e [4] text area. The drop-down menu labeled '\u003c/span\u003e\u003cstrong\u003eHow is this affecting you?\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e' provides additional tags that tell Moringa School the urgency of the feedback\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOnce all the fields have been filled properly[ 3,4,5], click the \u003c/span\u003e\u003cstrong\u003eSubmit ticket \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e[6] button.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNOTE: \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003eTry to make your feedback as constructive as possible. If it is a problem you faced while coding, provide as much detail as you can on \u003c/span\u003e\u003ca href=\"https://whathaveyoutried.com/\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhat you tried\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e. If it is a suggestion on how the content can be improved, please provide actionable steps we can take to implement your feedback.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eGetting Help From Technical Mentors\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eMoringa School LMS has a way to support students such as yourself when doing Help Desk. You can send a message directly to their TM without leaving their course content view.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003cimg src=\"viewer/files/Grading/Picture7.png\" alt=\"Picture7.png\" width=\"382\" height=\"525\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/3666\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the global navigation, click \u003c/span\u003e\u003cstrong\u003eHelp Desk \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e[1], to view a side navigation menu. Click \u003c/span\u003e\u003cstrong\u003eAsk your instructor a question\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e link [2].\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003cimg src=\"viewer/files/Grading/Picture8.png\" alt=\"Picture8.png\" width=\"381\" height=\"340\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/3667\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the drop-down menu [3], select the class to which the question belongs. Type in your message in the \u003c/span\u003e\u003cstrong\u003eMessage\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e text box [4] then the \u003c/span\u003e\u003cstrong\u003eSend message\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e [5] to send your instructor the message.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the \u003c/span\u003e\u003cstrong\u003eMessage\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e text box [4], include the following:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf the question is related to the content, add the link located in the url bar. This will help the instructor know where the question is coming from and to effectively assist you.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eA description of what you were trying to do and ideas that you have used to try and solve the technical challenge\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOnce you are done giving the relevant information, click the \u003c/span\u003e\u003cstrong\u003eSend message [5] \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003ebutton to send a message to the Technical Mentor assigned to you.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe single most important thing you will learn is \u003c/span\u003e\u003cstrong\u003ehow to teach yourself\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e, and our classroom is constructed to facilitate your learning that skill. This means that your Technical Mentors will never give you the answer, rather, we give you the tools that you need to succeed. You have to figure out how to do it, you have to figure out the answer, and you have to prove why you think your answers are what they are. The only way that you can fail is if you give up. If you continue to persevere, if you continue to try, if you continue to work through problems, you will get the answers and the environment at Moringa will help you. But if you give up, you will fail. You can do it.\u003c/span\u003e\u003c/p\u003e","exportId":"wednesday-help-desk-and-curriculum-feedback"},{"id":206,"title":"Wednesday: Debugging HTML and CSS","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eLearning to debug your code is an essential skill as a developer. There are many debugging techniques out there, and I'm going to introduce you to a few techniques you will use all the time for HTML and CSS.\u003c/p\u003e\r\n\u003cp\u003eThese instructions are for Google Chrome. Both the JavaScript Console and Inspect panel discussed below are part of Chrome Developer Tools, or DevTools.\u003c/p\u003e\r\n\u003ch2\u003eJavaScript Console\u003c/h2\u003e\r\n\u003cp\u003eTo access DevTools, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMore Tools\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDeveloper Tools\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom Chrome's main menu (the three dots in the top right corner of the window). As a shortcut, you can also press\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCtrl\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eShift\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJ\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Linux or Windows) or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCmd\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOption\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJ\u003c/em\u003e(Mac). You may also have to click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eConsole\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab at the top of the window that pops open.\u003c/p\u003e\r\n\u003cp\u003eThis window is called the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJavaScript Console\u003c/em\u003e. Although we're not working with JavaScript, this is also where errors in the web page are logged. If you see something that looks like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFailed to load resource file:///Users/moringa/css/styles.css\u003c/code\u003e, Chrome is telling you that it was instructed to look for your CSS file at\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers/moringa/css/styles.css\u003c/em\u003e, but the file wasn't there. In other words, you either gave the wrong path to the file, or you put the file in the wrong place.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/MP-W1D2-02-failed_to_load_resource.png\" alt=\"MP-W1D2-02-failed_to_load_resource.png\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eInspect Element\u003c/h2\u003e\r\n\u003cp\u003eAnother very useful tool in debugging web pages is\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect Element\u003c/em\u003e. To access this tool, open any webpage and right-click a page element and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect\u003c/em\u003e. As a shortcut, you can also press\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCtrl\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eShift\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eI\u003c/em\u003e(Linux or Windows) or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCmd\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOpt\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eI\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Mac). You may click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eElements\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab at the top of the DevTools window. A window will pop open revealing the source code for the page, with the selected element highlighted in blue.\u003c/p\u003e\r\n\u003cp\u003eWith an element selected, you can see CSS in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eStyles\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab. This makes it easy to see what rules have been applied, including those that have been overridden due to specificity or order of other rules (these will be crossed out). Here is what the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eStyles\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab looks like with overridden rules:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/MP-W1D2-04-overridden_rules.png\" alt=\"MP-W1D2-04-overridden_rules.png\" width=\"367\" height=\"522\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYou can also uncheck a rule to disable it, or double-click a rule to edit it and see the change live. You can even add new rules and see what they would do live.\u003c/p\u003e\r\n\u003cp\u003eYou won't have much space to work with\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect Element\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eat the bottom of your screen, so click the three vertical dots on the top right-hand side of the inspect element pane near the \"X\" (which you'd click to close the pane). Now, you'll see an option to move the pane to the right-hand side of your browser (dock to right), move the pane to the bottom of the browser window (dock to bottom) or to open the pane in a completely separate window (undock into separate window).\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/MP-W1D2-03-inspect_element_dock_options.png\" alt=\"MP-W1D2-03-inspect_element_dock_options.png\" width=\"798\" height=\"329\"\u003e\u003c/p\u003e\r\n\u003cp\u003eInspecting a web page is a fantastic way to see for yourself what makes a website tick. Try inspecting elements on this page to see what CSS rules are being applied.\u003c/p\u003e","exportId":"wednesday-debugging-html-and-css"},{"id":207,"title":"Wednesday: Practice: CSS","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003ePractice: CSS\u003c/h1\u003e\r\n\u003cp\u003eGoal: Start getting familiar with CSS basics. Be able to use CSS styling on HTML elements.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow does HTML know about CSS we have added in a separate stylesheet?\u003c/li\u003e\r\n\u003cli\u003eHow do we add a style to an HTML element?\u003c/li\u003e\r\n\u003cli\u003eName four CSS rules.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eWork through the lesson to add CSS styling to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eThen, add a reference to\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cem\u003efavorite-things.html\u003c/em\u003e. Refresh the page and notice that the styles from\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eare applied to the page.\u003c/p\u003e\r\n\u003cp\u003eAdd more custom styles to the page. Use the following styles:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolor\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebackground-color\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efont-size\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efont-style\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efont-family\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eline-height\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eAdd a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag somewhere on the page. Then, customize those tags with your own CSS so that using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e makes text italic and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emakes text bold.\u003c/p\u003e\r\n\u003cp\u003eMake a new stylesheet with different styles and add it to both pages. Give it a different name than\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand make sure you can add it to your page correctly.\u003c/p\u003e","exportId":"wednesday-practice-css"},{"id":208,"title":"Wednesday: GitHub Pages","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eWe've made some web pages that we can view on our personal computers. Now let's learn how we can host our sites online. There are a number of ways to do this, and GitHub offers an option that is free and one of the easiest out there. GitHub Pages lets us turn a GitHub repository into a website with a URL that we can access from any browser. Pretty neat!\u003c/p\u003e\r\n\u003cp\u003eIn this lesson, we will walk through the steps to get a website from an existing repository hosted. I am going to use\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-project\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom the previous lesson on Creating a Web Page to demonstrate. Feel free to use your version of this project, or a different project that you would like to see online. The directions will be the same, and GitHub does not limit the number of sites that you can host online.\u003c/p\u003e\r\n\u003cp\u003eBefore we get started, let's go over a typical project structure for any website. In previous lessons, we put our images and CSS stylesheets in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimages\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolders. It's pretty common to organize files in this way.\u003c/p\u003e\r\n\u003cp\u003eSo far, we have been giving our pages descriptive file names, such as\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-website.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e. Another convention is to name the HTML file for the main page for a website\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e. This naming convention is common practice in the industry. Additionally, many hosting services, including GitHub Pages, require this convention to display content. Let's change the name of\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-website.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003enow. GitHub won't know to display it as the main page if we don't.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ mv \u003cspan class=\"hljs-keyword\"\u003emy\u003c/span\u003e-first-website.html \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e.html\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSince we have been using Git to track our project, let’s commit the change.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add .\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Change name of favorite-things.html file to index.html.\"\u003c/span\u003e\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit push origin master\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOne of the most important features when using Git or any other version control system is the ability to create a branch. We will go more into detail about what exactly a branch is and how it works in an upcoming lesson, but for now, you can think of it like an exact copy of the code at the point when the branch is created. Each branch exists independent of each other, so once you create a branch, any changes you make to one branch won’t affect the code in another branch. GitHub Pages looks for content to display online in a branch called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e. Let's create that branch now. Run these commands in the Terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit branch gh-pages\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to create a new branch called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e. Again, we will go more into detail about branching in an upcoming lesson. For now, what matters is that we have a branch called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e, and it is a copy of the code in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch. Next, we push the code to GitHub:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin gh-pages\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the last argument in this command is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e, which means that we are pushing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch.\u003c/p\u003e\r\n\u003cp\u003eOnce the project is pushed to GitHub, you will be able to view it online at\u003cspan\u003e \u003c/span\u003e\u003cem\u003egithub-username.github.io/repository-name\u003c/em\u003e. For example, if our GitHub username was\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-student\u003c/em\u003e, and our repository was named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e, we would navigate to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-student.github.io/hello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the browser.\u003c/p\u003e\r\n\u003cp\u003eOne last thing to note here. For now, if you want to continue making changes to a project, you should edit the code in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch, not\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e. Then, when you want to update the live site on\u003cspan\u003e \u003c/span\u003e\u003cem\u003egithub.io\u003c/em\u003e, delete the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch and then create it again using the steps above.\u003c/p\u003e\r\n\u003cp\u003eTo delete a branch, first click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBranches\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab at the top of the repository's main page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-05-github_branch_tab.png\" alt=\"MP-W1D2-05-github_branch_tab.png\" width=\"774\" height=\"247\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1373\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis will take you to a page where all of the repository's branches are listed. Delete a branch by clicking on the red trash can symbol in the branch's row on the right side of the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-06-github_branch_delete.png\" alt=\"MP-W1D2-06-github_branch_delete.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1374\" data-api-returntype=\"File\"\u003e\u003c/p\u003e","exportId":"wednesday-github-pages"},{"id":209,"title":"Wednesday: Practice: GitHub Pages","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Walk through the process of creating and publishing to a GitHub pages page by publishing one of our previous projects.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following questions with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWe need to create something called a branch to publish our content on GitHub pages. We'll learn more about branches later, but for now, what is the specific name we must call the branch in order for Github pages to work correctly?\u003c/li\u003e\r\n\u003cli\u003eWhat is the easiest way to add new changes to a Github pages site after it's already been published?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003ePublish to GitHub Pages\u003c/h3\u003e\r\n\u003cp\u003eNow that you have learned how to host your web pages on GitHub Pages, go ahead and make your pet homepage display on GitHub Pages as well. Make sure that each project properly displays for you and your partner. If it isn't working, make sure you have confirmed your email address with GitHub.\u003c/p\u003e","exportId":"wednesday-practice-github-pages"},{"id":210,"title":"Wednesday: Git Branching","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eSo far we've learned what Git and GitHub are, how to set up a project, track changes, push code to GitHub, clone projects back down from GitHub into a local Git repository, and even publish websites on GitHub Pages.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we'll dive deeper into Git by exploring something called branching. We were introduced to branching briefly when we learned about GitHub pages. In this lesson, we'll learn more about what it is, how it works, what benefits it offers, and how to create and maintain branches in our own projects.\u003c/p\u003e\r\n\u003cp\u003eTo do this, we'll walk through creating an example project in the next two lessons. Together, we'll create and merge branches in this example project. Then, in an upcoming exercise you'll have the opportunity to work with branches on your own project with a partner.\u003c/p\u003e\r\n\u003ch2\u003eOverview\u003c/h2\u003e\r\n\u003cp\u003eIn Git, branching is the act of creating multiple copies of similar code in the same repository. There are many reasons developers do this. Here are a few of the most common:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMultiple branches allow a team of developers to work together without \"stepping on each others' feet\", so to speak. If a team was all working on the same files at the same time, things could get messy very quickly. Branches allow each developer their own copy of the project to work on. When part of the project is done, the team can merge multiple branches together into a completed final product.\u003c/li\u003e\r\n\u003cli\u003eBranching also allows us to experiment with changes without risking our final product. We can use branching to create a copy of our code separate from our final version to experiment with new features and code. If this new code causes any bugs, we can rest assured knowing our original code is still safe!\u003c/li\u003e\r\n\u003cli\u003eBranching allows us to pursue multiple options at once. Not sure which approach to a problem is preferable? With branching, you can always create multiple copies of your project, try implementing different code in each, and see which result is preferable.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eMaster Branch\u003c/h2\u003e\r\n\u003cp\u003eYou may be surprised to learn that you've been interacting with branches since the beginning of the course! At this point in the curriculum, you've most likely pushed several projects to GitHub already, and published at least one on GitHub Pages. Your current GitHub repositories should look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-07-github_repo_main.png\" alt=\"MP-W1D2-07-github_repo_main.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1375\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNotice the drop-down menu on the left side labeled\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBranch\u003c/em\u003e. If we click this drop-down we see it contains one entry:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(if you've published a project to GitHub pages it will also contain a branch named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-08-github_branch_dropdown.png\" alt=\"MP-W1D2-08-github_branch_dropdown.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1376\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWhen you learned how to push a project to a remote GitHub repo yesterday, you pushed your local Git repositories to online GitHub repositories using a command like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe \u003ccode\u003emaster\u003c/code\u003e portion of this command instructs Git to push the current master copy of your local repository to the remote repository under the nickname \u003cspan style=\"font-family: monospace;\"\u003e\u003cspan style=\"font-size: 13px;\"\u003eorigin\u003c/span\u003e\u003c/span\u003e.\u003c/p\u003e\r\n\u003cp\u003eBut what does\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emean? Well, projects tracked in Git and GitHub may have multiple branches. The term \"master\" specifies that code should be pushed to the master branch on GitHub. Remember, we saw there was a branch named \u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the dropdown menu on GitHub.\u003c/p\u003e\r\n\u003cp\u003eA branch is just another copy or version of the project's main code. Both Git and GitHub repositories may have multiple branches at once. There is always at least one branch in a project:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003e\"Master\" is the name of the default branch. If you don't create or navigate between branches in your project, you will have one branch named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, and you will be located in it by default. When you have multiple branches in a project, the master branch is like the \"final draft\".\u003c/p\u003e\r\n\u003cp\u003eBranches that are not\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare often referred to as feature branches, because they allow developers to experiment with new features before integrating them into the \"final draft\"\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, you probably published a project to GitHub pages with a command like this in a previous lesson:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin gh-pages\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMuch like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis also a branch name. While master is responsible for containing the final product, \u003ccode\u003egh-pages\u003c/code\u003e is responsible for publishing content to GitHub's special GitHub Pages tool.\u003c/p\u003e\r\n\u003ch2\u003eExample Project\u003c/h2\u003e\r\n\u003cp\u003eLet's walk through a basic example of branching together. We'll craft a small website. Then, we'll create multiple branches to experiment with different CSS styles. We'll compare the styles, choose which we like best, and integrate the favored styles into our \"final draft\" (that is, our master branch). You and your partner should begin following along at this time.\u003c/p\u003e\r\n\u003ch3\u003eProject Directory\u003c/h3\u003e\r\n\u003cp\u003eNext, let's create a new project directory in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDocuments\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder. Remember, whenever we start a new project we must create a new directory for it to reside in. First, we'll navigate to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDocuments\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e Documents\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll create a new directory called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebranching-test-project\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan class=\"hljs-keyword\"\u003emkdir\u003c/span\u003e branching-test-project\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can see our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebranching-test-project\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory. Next, use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to navigate to the new project folder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e branching-test-project\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRemember, if you're ever unsure of your location in the command line you can run the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ pwd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand.\u003c/p\u003e\r\n\u003ch3\u003eGit Initialization\u003c/h3\u003e\r\n\u003cp\u003eNext, we'll initialize our Git repository:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit init\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eHTML File\u003c/h3\u003e\r\n\u003cp\u003eNext, let's create an HTML file for our website's code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etouch branching-website.html\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll open our project directory in Atom:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003eatom .\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd add the following code to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebranching-website.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ebranching-website.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e Branching Practice Site \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e Branching \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e A website to practice branching with Git. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e This page has been created in order to practice branching with Git and GitHub. By creating branches, we can work on different versions of the same code in the same repository simultaneously!  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eCommitting Changes\u003c/h3\u003e\r\n\u003cp\u003eOnce this code is in place, we can make our first commit. First, we'll run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git status\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto see there are new, uncommitted changes in our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git status\r\nOn branch master\r\nInitial \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e\r\nUntracked files:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e include \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e what will be committed)\r\n    branching-website.html\r\nnothing added \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e but untracked files present (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e track)\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto add our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebranching-website.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to Git so it will track this file's changes:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add branching-website.html\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git status\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to see that our file is now being tracked, but has not yet been committed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git status\r\nOn branch master\r\nInitial \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e\r\nChanges \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be committed:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git rm --cached \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e unstage)\r\n    new file:   branching-website.html\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's save our new HTML to the permanent history of the project by committing it. Since we're working with a partner, we'll use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to do this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Add initial HTML file with explanation of branching practice site.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run $ git log we can see a new commit has been added to the history of our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2016\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eAdding Styles with CSS\u003c/h3\u003e\r\n\u003cp\u003eGreat! Now, earlier today you learned about CSS. Before we begin branching, let's create a basic CSS stylesheet for our example project. We'll make a folder called css in our existing project directory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan class=\"hljs-keyword\"\u003emkdir\u003c/span\u003e css\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll create a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewithin our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etouch css/styles.css\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur project structure should look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-09-project_structure_branching.png\" alt=\"MP-W1D2-09-project_structure_branching.png\" width=\"279\" height=\"183\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1377\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNext, let's tell our HTML document to use this new file for its CSS. We will include a link to the new CSS file in the \u003cspan\u003etags of our \u003c/span\u003e\u003cem\u003ebranching-website.html file\u003c/em\u003e\u003cspan\u003e, like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ebranching-website.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e Branching Practice Site \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e Branching \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e A website to practice branching with Git. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e This page has been created in order to practice branching with Git and GitHub. By creating branches, we can work on different versions of the same code in the same repository simultaneously!  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add these new changes to our Git repository:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add .\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd commit them to the history of our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Create stylesheet, link in head of website.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll add a basic CSS rule to our stylesheet:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we open _branching-website.html_ file in our browser, we should see that the text in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e tags is blue:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-10-test_site_blue_headers.png\" alt=\"MP-W1D2-10-test_site_blue_headers.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1387\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's add and commit this new CSS rule to our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add css/styles.css\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Add CSS rule to make H1 headers blue.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe will see we now have 3 commits:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: \u003c/span\u003e\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"hljs-operator\"\u003eAlbert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/code\u003eDate: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Create\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Add\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\u003c/pre\u003e\r\n\u003cp\u003eNow that our basic website is set up, we can use it to learn about branching in the next section. Nice work!\u003c/p\u003e\r\n\u003ch3\u003eViewing a Project's Branches\u003c/h3\u003e\r\n\u003cp\u003eEverything we've done thus far should be review. Now, let's explore the new concept at hand: branching. First we'll run the following command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit branch\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand displays what branches are currently in our project. It also denotes which branch we're currently viewing with an asterisk\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e*\u003c/code\u003e. After we execute this command, we should see this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-bullet\"\u003e* \u003c/span\u003emaster\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis informs us that there is only one branch:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. And, we know we're currently located in that branch because there is an asterisk next to it. Remember, master is the default branch. If we do not create any branches, or move between any branches, we will be on master.\u003c/p\u003e\r\n\u003ch3\u003eCreating a New Branch\u003c/h3\u003e\r\n\u003cp\u003eLet's pretend we're unsure how to style our site. We want to test a couple different stylistic approaches, and see which looks best. To do this, we'll create several versions of our project with branches. We'll implement different styles in each branch.\u003c/p\u003e\r\n\u003cp\u003eWe can create a new branch by running the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand and including the name of the new branch after it, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis creates a new branch named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e. Branch names should be short and meaningful, and describe the reason for the branch. In our case, this branch will contain styles that use the color blue throughout.\u003c/p\u003e\r\n\u003cp\u003e(Note that there are only two exceptions to these naming rules: The master branch will always be named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, and GitHub pages requires branches be named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein order to publish them using the GitHub pages tool.)\u003c/p\u003e\r\n\u003ch3\u003eNavigating Between Branches\u003c/h3\u003e\r\n\u003cp\u003eIf we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain, we can see our project now contains two branches:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice the asterisk is still next to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. We created a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch, but we're still located on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. We can switch branches like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git checkout \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git checkout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand navigates to the specified branch. We can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to confirm we've successfully entered the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n* \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n  master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe asterisk is now next to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e, so we know we've successfully navigated to that branch. Now, let's look at our project in Atom. Despite being located in our new branch, everything should look the exact same.\u003c/p\u003e\r\n\u003cp\u003eWhen you create a branch, the new branch is \"branched off\" from the branch you are located in when the command to create a new branch is executed. This means the new branch will contain all code and commits from the branch it was branched off from. In our case, since we were located in master when we created\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtains all code and commits that master contained at the time of the new branch's creation.\u003c/p\u003e\r\n\u003cp\u003eWe can confirm this by running\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e. We should see our new branch contains the same commits we made on master:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: \u003c/span\u003e\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"hljs-operator\"\u003eAlbert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/code\u003eDate: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Add\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Create\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e070\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Add\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\u003c/pre\u003e\r\n\u003ch3\u003eWorking on a Branch\u003c/h3\u003e\r\n\u003cp\u003eWe now have a separate, isolated version of our project to experiment with. We can safely test code in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewithout risking the integrity of code in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. We can change, add, and commit whatever we'd like in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand master will remain completely unaffected. Let's add more CSS to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003estylesheet:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: teal\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: gray\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: skyblue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we refresh our page in the browser, we can see these new styles:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-11-test_site_blue_theme.png\" alt=\"MP-W1D2-11-test_site_blue_theme.png\" width=\"896\" height=\"188\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1378\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs always, we'll add these changes to our Git repository and commit them:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add css/styles.css\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Add styles to h1, h2, p, and body to fit blue theme.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eSeparation of Commits Between Branches\u003c/h3\u003e\r\n\u003cp\u003eLet's run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to see a summary of our commits:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e268363\u003c/span\u003eae7b81a7ee91540d93f82e3f9285c575dd\r\nAuthor: \u003c/span\u003e\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"hljs-operator\"\u003eAlbert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/code\u003eDate: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e24\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e38\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Add\u003c/span\u003e styles \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e h1, h2, p, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e body \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e fit blue theme.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Add\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Create\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Add\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch now contains the commits it inherited from master, and the new commit we've just made. Before we continue, let's return to our master branch for a moment using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit checkout\u003c/code\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit checkout master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs always, we can double-check we're on master by running\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand confirming that master has an asterisk next to it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGreat. Now, let's look at the commits on our master branch again:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: \u003c/span\u003e\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"hljs-operator\"\u003eAlbert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/code\u003eDate: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Add\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Create\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Add\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\u003c/pre\u003e\r\n\u003cp\u003eNotice that the new commit we just made on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not present in master! Our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme \u003c/code\u003ebranch's most recent commit reads \"Add styles to h1, h2, p, and body to fit blue theme.\" Whereas master's most recent commit reads \"Add CSS rule to make H1 headers blue.\" And if we refresh our page in the browser again, we can see our blue styles are no longer present:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-10-test_site_blue_headers.png\" alt=\"MP-W1D2-10-test_site_blue_headers.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1387\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAlso, if you view the\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003estylesheet in Atom, you'll notice that the CSS rules we just added are gone! Don't worry; this is entirely normal. Because we switched branches, the version of the project we're seeing in Atom is different. The master branch does not have the same CSS rules as the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch.\u003c/p\u003e\r\n\u003cp\u003eRemember, when we create a branch the new branch will inherit all commits from the branch it is branched off from. That is, the branch we are located in when we create the new branch. However, when we make new commits on our new branch, they remain on that branch. The organization of our current commits between branches look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-13-flow_chart_1.png\" alt=\"MP-W1D2-13-flow_chart_1.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1379\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe can see our first three commits on master. When we branched off of master to create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e, it inherited all of master's commits. However, when we made subsequent commits in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethey remained exclusive to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand were not shared with master.\u003c/p\u003e\r\n\u003ch3\u003eWorking with Multiple Branches\u003c/h3\u003e\r\n\u003cp\u003eLet's create another branch with a different set of CSS styles for our site. Remember, you may branch off from any existing branch. The new branch will contain all code and commits from whatever branch you were located within when the new branch was created.\u003c/p\u003e\r\n\u003ch3\u003eCreating a New Branch\u003c/h3\u003e\r\n\u003cp\u003eLet's branch from master again. We'll run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand confirm we're located in master:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll create another new branch named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to confirm our new branch has been created:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n  \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eNavigating Between Branches\u003c/h3\u003e\r\n\u003cp\u003eNext, we'll switch to our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit checkout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit checkout red_theme\r\n\u003cspan class=\"hljs-constant\"\u003eSwitched\u003c/span\u003e to branch \u003cspan class=\"hljs-string\"\u003e'red_theme'\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto confirm we've successfully navigated into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n  master\r\n* \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd, if we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can see\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas inherited all commits from master, as expected:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: \u003c/span\u003e\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"hljs-operator\"\u003eAlbert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e    Add\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e    Create\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e    Add\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site. \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eWorking on a Branch\u003c/h3\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in Atom should currently look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAgain, notice that it does not contain the CSS we just committed in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch. The new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e branch was branched off of master. Therefore, it contains all of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e's commits and code. It does not contain the code we committed on the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch, only the master branch. Let's add styles to this branch's version of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile now:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: darkred\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: crimson\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: salmon\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we refresh our page in the browser, we can see our new CSS at work:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-14-test_site_red_theme.png\" alt=\"MP-W1D2-14-test_site_red_theme.png\" width=\"1028\" height=\"186\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1380\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe'll add these changes to our Git repository, and commit:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add css/styles.css\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Add styles to h1, h2, p, and body to fit red theme.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs always, we can run \u003ccode\u003e$ git log\u003c/code\u003e to see a summary of our commits:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003ef2d9510cdc76736c7c5cf7e5d56264cd405fcd1\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e51\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e styles \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e h1, h2, p, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e body \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e fit red theme.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe now have the commits that came along with the new branch when we branched from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, and the new commit we've just made on the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch. Our organization of commits between branches currently looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-15-flow_chart_2.png\" alt=\"MP-W1D2-15-flow_chart_2.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1381\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNow, let's say we want to improve the styles in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eeven further by changing the site's text. We'll include the following additional CSS rules in\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: darkred\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: crimson\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: salmon\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-family\u003c/span\u003e: sans-serif\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we denote that everything located in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags should have sans-serif style font that is center-aligned. Because we're now styling everything in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags we can remove\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etext-align: center;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the existing h1 and h2 CSS rules.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags exist within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags, so this rule will automatically apply to them too. We can save our changes and refresh the site to see our new styles:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-16-red_theme_sans_serif.png\" alt=\"MP-W1D2-16-red_theme_sans_serif.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1382\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAgain, we'll add these changes to our Git repository:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add css/styles.css\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd commit them with a descriptive message:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Make all font sans-serif style.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's run \u003ccode\u003e$ git log\u003c/code\u003e. We can see that in addition to the 3 commits inherited from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme \u003c/code\u003ebranch also has 2 of its own commits:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e d5bae6406669988e154608ce990e08fed51e9cb3\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e13\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e00\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    Make \u003cspan class=\"hljs-keyword\"\u003eall\u003c/span\u003e font sans-serif style.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003ef2d9510cdc76736c7c5cf7e5d56264cd405fcd1\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e51\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e styles \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e h1, h2, p, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e body \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e fit red theme.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe commits across all branches of the project currently look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-17-flow_chart_3.png\" alt=\"MP-W1D2-17-flow_chart_3.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1383\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eBenefits of Branching\u003c/h2\u003e\r\n\u003cp\u003eAre you beginning to see how branching can be beneficial? It allows us to experiment with code and ensure it works correctly before saving it to our \"final draft\" master branch. When developers integrate new features into projects, they commonly do so in a branch. This allows them to make a copy of the entire project, experiment with new code, and confirm it does what it is supposed to before saving it into the final version.\u003c/p\u003e\r\n\u003cp\u003eThis prevents bugs or issues from affecting the project. If the new code a developer adds or breaks anything, it won't cause issues on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, only on that isolated branch. This allows developers room to iron out any issues with code before integrating it into the final version of the project.\u003c/p\u003e\r\n\u003cp\u003eWhen code is fine-tuned and tested in the branch, and we know it works, we can add it to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. This process is called merging, and we'll explore it in detail in the next lesson as we continue to work with this example project.\u003c/p\u003e","exportId":"wednesday-git-branching"},{"id":211,"title":"Wednesday: Git Merging","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eIn the last lesson we explored creating and managing multiple branches in a single Git repository. As we learned, branches allow us to create multiple copies of our code. These copies may be used to experiment with implementing new code, without putting the \"final version\" or master branch at risk of bugs or errors.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, branches can be used to simply try out different options before deciding which should end up in the final iteration of the project; like we did in the previous lesson with different sets of CSS styles.\u003c/p\u003e\r\n\u003cp\u003eHowever, once we confirm the code located in a feature branch works, and that we want to include it in the final version of our project, we need to integrate this code into the master branch that represents our final product. The act of incorporating code from multiple branches together is called \u003cstrong\u003emerging\u003c/strong\u003e. In this lesson, we'll walk through merging branches together in our example project.\u003c/p\u003e\r\n\u003ch2\u003eMerging Branches\u003c/h2\u003e\r\n\u003cp\u003eLet's say we've decided to use the CSS we wrote in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch in the final version of our project. Since the master branch represents the final product, we'll need to merge the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eTo merge two branches you must first navigate to the branch you'd like to introduce new code into. In our case, this is the master branch, because we'd like to integrate the CSS we created in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto see where we are currently located:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n  master\r\n* \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you followed along with the previous lesson exactly, you should still be located in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e. Let's navigate into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eusing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git checkout\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit checkout master\r\n\u003cspan class=\"hljs-constant\"\u003eSwitched\u003c/span\u003e to branch \u003cspan class=\"hljs-string\"\u003e'master'\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to confirm we've successfully navigated to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n  \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git merge\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to bring the contents and commits of an outside branch into our current branch. In our case, we'll bring the commits from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch we are currently located in. We'll run the following command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git merge \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis should result in something that looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-title\"\u003eUpdating\u003c/span\u003e 982b0f2..d5bae64\r\nFast-forward\r\n css/styles.css | \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e ++++++++++++++++-\r\n \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e file changed, \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e insertions(+), \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e deletion(-)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto view our commit history:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e d5bae6406669988e154608ce990e08fed51e9cb3\r\nAuthor: Albert Einstien \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e13\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e00\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    Make \u003cspan class=\"hljs-keyword\"\u003eall\u003c/span\u003e font sans-serif style.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003ef2d9510cdc76736c7c5cf7e5d56264cd405fcd1\r\nAuthor: Albert Einstien \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e51\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e styles \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e h1, h2, p, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e body \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e fit red theme.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Albert Einstien \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Albert Einstien \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the two most recent commits from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare now part of the commit history here in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. This is because we merged\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. This means all code and commits from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehave been incorporated into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, too.\u003c/p\u003e\r\n\u003cp\u003eThe commit structure of our project across all branches currently looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-18-flow_chart_4.png\" alt=\"MP-W1D2-18-flow_chart_4.png\" width=\"794\" height=\"723\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1384\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNotice that merging\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas brought all commits previously exclusive to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehere in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. Also, notice that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommits don't instantly disappear when we merge them into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. They still exist in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch.\u003c/p\u003e\r\n\u003ch3\u003eDeleting Branches\u003c/h3\u003e\r\n\u003cp\u003eAfter successfully merging a branch (always confirm all of the branch's commits are present), you may delete it if you do not plan on using it further. This is safe to do because all commits\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eonce contained are now present in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. So, we don't risk losing any work.\u003c/p\u003e\r\n\u003cp\u003eWe can delete a branch using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch -D\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit branch -\u003cspan class=\"hljs-constant\"\u003eD\u003c/span\u003e red_theme\r\n\u003cspan class=\"hljs-constant\"\u003eDeleted\u003c/span\u003e branch red_theme (was d5bae64).\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand see\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas been removed from the repository entirely:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd, since we opted to integrate the styles in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e, we no longer need the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch either. We'll delete it at this time, too:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit branch -\u003cspan class=\"hljs-constant\"\u003eD\u003c/span\u003e blue_theme\r\n\u003cspan class=\"hljs-constant\"\u003eDeleted\u003c/span\u003e branch blue_theme (was \u003cspan class=\"hljs-number\"\u003e268363\u003c/span\u003ea).\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eKnow that merging doesn't always go quite this smoothly, unfortunately. If multiple branches contain edits to the same lines of code, Git won't know which edit should supersede which, and requires the developer to manually intervene (this primarily occurs when branches are working on the same code simultaneously, and both attempt to merge with master). This is known as a merge conflict.\u003c/p\u003e\r\n\u003cp\u003eHowever, we shouldn't encounter any merge conflicts quite yet. For now, simply make sure you're familiar with the general concepts of branching and merging, and able to create branches for use with GitHub Pages. We'll explore merge conflicts, what they look like, and how to resolve them later on.\u003c/p\u003e\r\n\u003cp\u003eAs you can see, merging and branching in Git is a powerful, complex feature. However, don't feel overwhelmed if you don't yet have a handle on everything we've covered in these past two lessons. Feel free to refer back to this content whenever necessary. Soon enough, branching and merging will become second nature!\u003c/p\u003e","exportId":"wednesday-git-merging"},{"id":212,"title":"Wednesday: Practice: Branching and Merging","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Now that you have spent some time learning about branching and merging, let’s practice! The goal of this exercise is to work on branching and merging along with your new CSS skills.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the benefit of branching?\u003c/li\u003e\r\n\u003cli\u003eHow do we create a new branch of a project?\u003c/li\u003e\r\n\u003cli\u003eWhy would we want to merge back into master?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eResort Website\u003c/h3\u003e\r\n\u003cp\u003eYou are hired by an investor to create a website for a private island resort that they are building.\u003c/p\u003e\r\n\u003cp\u003eYour website should have:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eA main home page\u003c/li\u003e\r\n\u003cli\u003ePages for:\r\n\u003cul\u003e\r\n\u003cli\u003eaccommodations\u003c/li\u003e\r\n\u003cli\u003eactivities\u003c/li\u003e\r\n\u003cli\u003etravel arrangements\u003c/li\u003e\r\n\u003cli\u003econtact information\u003c/li\u003e\r\n\u003cli\u003epictures, etc.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThe investor doesn't know exactly what style they want for the website, so they have asked you to use your best judgement and provide them with at least two options for styling so they can make their decision later.\u003c/p\u003e\r\n\u003cp\u003eMake a branch for each style and when you are done, call a teacher over so that the \"investor\" can see their options and decide which style they would prefer. Once the \"investor\" (your TM) has made their selection, merge that branch into master.\u003c/p\u003e\r\n\u003cp\u003eMake sure you have been making commits throughout building this project and make a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003ebranch to display it on GitHub Pages. And don't forget your README!\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you and your partner finish all activities for the day with time to spare, make a website for your favorite restaurant. Include a page to display the menu, a page with contact information and hours, and a homepage describing the cuisine, or restaurant's history. Add styles using CSS, and publish the site on GitHub Pages.\u003c/p\u003e","exportId":"wednesday-practice-branching-and-merging"},{"id":213,"title":"Thursday: Styling with Classes","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eYesterday, we learned how to style elements of the page. Unfortunately, we had no way of targeting specific parts of the page. So if we wanted one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto be green, all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelements on the page would need to be green. In this lesson, we will learn some HTML code that allows us to label HTML elements so that we can style specific parts of the page any way we'd like.\u003c/p\u003e\r\n\u003cp\u003eLet's create a new page with some paragraphs about my favorite animal, the giraffe. These will be regular paragraphs with an introductory summary at the top of the page.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eGiraffes!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eGiraffes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eIt's time to learn about the mysterious giraffe!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThis is an introduction. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eAt first glance, giraffes are pretty magical creatures. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eAt vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e\u0026gt;\u003c/span\u003eAbout the Author\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere's some information about the author. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs a note here, the text used to fill these paragraphs is known as \u003cstrong\u003elorem ipsum\u003c/strong\u003e. It looks like Latin, but the words are jumbled and don't really have any meaning. Lorem ipsum text is often used as a placeholder for text when doing website design; you can search online for \"lorem ipsum\" and find many varieties and websites where you can copy the text.\u003c/p\u003e\r\n\u003cp\u003eThis page is nice, but let's the introductory paragraph to look more like an introduction - I want the text to be italicized.\u003c/p\u003e\r\n\u003cp\u003eTo label the introductory paragraph, first we add a class to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e    \u0026lt;p \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"intro\"\u003c/span\u003e\u0026gt;This \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e an introduction. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e eiusmod tempor incididunt ut labore et dolore magna aliqua.\u0026lt;/p\u0026gt;\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we can add a rule to our stylesheet that targets this paragraph by using a class selector. Here's what that looks like:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.intro\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we refresh the page, we see that the paragraph with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintro\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis italicized. In the rule, the HTML element with a class of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintro\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas targeted with the class selector\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintro\u003c/code\u003e. All class selectors begin with a period:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe can also apply a class to multiple tags. Let's say we want our info about the author to be red. Let's add some classes:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"author\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAbout the author\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"author\"\u003c/span\u003e\u0026gt;\u003c/span\u003eHere's some information about the author. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd here's the CSS rule:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.author\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe class selector targets all elements of a particular class. It's possible, however, for multiple elements on a web page to share a specific styling, but for one of those elements to differ slightly.\u003c/p\u003e\r\n\u003cp\u003eFor example, I want both the header and the paragraph with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto be red, but I want the paragraph text to be a smaller font than the rest of the paragraphs on the page. But what happens when I do this?\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.author\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-size\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e12px\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe paragraph text size is smaller, but so is the header. Instead, we can target the paragraph with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.author\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e\u003cspan class=\"hljs-class\"\u003e.author\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-size\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e12px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis code uses a new selector:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep.author\u003c/code\u003e. What's the difference between the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.author\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep.author\u003c/code\u003e selectors?\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.author\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector targets\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall elements\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep.author\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector targets only\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003eelements with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e. This type of selector allows you to be even more specific with your styling.\u003c/p\u003e","exportId":"thursday-styling-with-classes"},{"id":48,"title":"Thursday: Practice - Styling with Classes","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice using classes to style large portions of our webpages, and applying classes to multiple HTML tags.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat's the difference between styling using classes and styling elements directly?\u003c/li\u003e\r\n\u003cli\u003eWhat does a class selector in the stylesheet look like?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson to create the page about giraffes that uses classes to style various sections of the page.\u003c/p\u003e\r\n\u003ch3\u003eTravel Agency\u003c/h3\u003e\r\n\u003cp\u003eCreate a webpage for the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHappy Trails Travel Agency\u003c/em\u003e. The page should have text, images, and links. Feature various travel destinations and get creative!\u003c/p\u003e\r\n\u003cp\u003eAdd a class named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etropical\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor tropical destinations. Give the headers the color\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#f7325e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the text the color\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#7dc410\u003c/code\u003e. Use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efantasy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efont family.\u003c/p\u003e\r\n\u003cp\u003eAdd a class named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epopular\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the most popular destination. Add some styling to distinguish it from the other destination listings. What happens when a popular destination is also a tropical destination? How can you make sure that the styles you want to see on the page are displayed?\u003c/p\u003e\r\n\u003ch3\u003eNews Article\u003c/h3\u003e\r\n\u003cp\u003eCreate a new project folder containing\u003cspan\u003e \u003c/span\u003e\u003cem\u003enews-article.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtaining a fake news article. Use lorem ipsum text with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags to give you paragraphs. Add a few images to illustrate the news, as well as headers to divide the page into sections.\u003c/p\u003e\r\n\u003cp\u003eLet the first section on the page be the introduction. Give it a subheader (\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e), a paragraph or two, and an image. Each element in this section should have the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintroduction\u003c/code\u003e. Create styles for all of the elements in this section to set them apart from the rest of the content on the page. Use the selectors\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2.introduction\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep.introduction\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimg.introduction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the styles.\u003c/p\u003e\r\n\u003ch3\u003eFavorite Things: More Practice\u003c/h3\u003e\r\n\u003cp\u003eGet some more practice styling with classes by adding classes and class selectors for your CSS rules to your copy of\u003cspan\u003e \u003c/span\u003e\u003cem\u003efavorite-things.html\u003c/em\u003e.\u003c/p\u003e","exportId":"thursday-practice-styling-with-classes"},{"id":214,"title":"Thursday: Class vs. ID","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eBefore we go on, let's talk about the difference between assigning a class to an HTML tag and assigning an id to an HTML tag. For the remainder of this section you can ignore IDs and continue using classes, but a brief explanation is in order, as you are likely to find references to IDs when reading resources online.\u003c/p\u003e\r\n\u003cp\u003eBoth classes and IDs can be targeted by CSS rules (classes with a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand IDs with a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esymbol). For example, both paragraph tags below are styled the same, though one is referenced by class and the other by ID.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eSome Exciting Red Text\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"line1\"\u003c/span\u003e\u0026gt;\u003c/span\u003eThis text will appear red.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"line2\"\u003c/span\u003e\u0026gt;\u003c/span\u003eThis text will also be red. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.line1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-id\"\u003e#line2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe important difference is that IDs are unique, while classes are not unique. We can use the same class on multiple elements, while IDs must be unique to a single element on the page. IDs may appear to work even when duplicated on the same page, but duplicate IDs can lead to inconsistent behavior and hard-to-find bugs.\u003c/p\u003e\r\n\u003cp\u003eIf in doubt, use a class.\u003c/p\u003e","exportId":"thursday-class-vs-id"},{"id":215,"title":"Thursday: Divs and Spans","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eClasses are useful for applying styles to parts of a page, but sometimes you have a style that you want to apply to an entire part of your page, and adding a class to every tag can be unwieldy. It can also result in an HTML file that is difficult to read. Here's a new page I made about wildcats.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ewildcats.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eI'm going to teach you all about wildcats. First, the important stuff:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTypes of wildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eThere are many types of wildcats. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eHere are some types of wildcats:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLion\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eTiger\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJaguar\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMore important stuff\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eYou should also know this about wildcats. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eNow, for some less important stuff about wildcats.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats communicate with over a dozen different types of sound.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats make great dance partners\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003eIt's a little-known fact that wildcats are actually great dance partners. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSee all of the classes we had to add to make certain elements\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimportant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eunimportant\u003c/code\u003e? We can simplify this using the new tag,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ewildcats.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eI'm going to teach you all about wildcats. First, the important stuff:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eTypes of wildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThere are many types of wildcats. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere are some types of wildcats:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLion\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eTiger\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJaguar\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eOther important stuff\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere is some other really important stuff about wildcats. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eNow, for some less important stuff about wildcats.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats communicate with over a dozen different types of sound.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats make great dance partners\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eIt's a little-known fact that wildcats are actually great dance partners. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen we can style entire sections of the page using the selectors\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.important\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.unimportant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our CSS:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.important\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.unimportant\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag does not actually do anything on its own - it simply defines a section of a page. It acts as a container to separate the content of a page, so that when used with CSS, styles can be applied to an entire section. Remember, good code is code that is easy to change: When we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003es and want to change a class name, we only need to change one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of all of the elements inside of it.\u003c/p\u003e\r\n\u003cp\u003eThere is a similar tag for inline elements called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ewildcats.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;Wildcats are versatile creatures that can live \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"important\"\u003c/span\u003e\u0026gt;many different climates\u0026lt;/span\u0026gt;. They can live \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"cat-climate\"\u003c/span\u003e\u0026gt;the jungle\u0026lt;/span\u0026gt;, \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"cat-climate\"\u003c/span\u003e\u0026gt;the mountains\u0026lt;/span\u0026gt;, and even \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"cat-climate\"\u003c/span\u003e\u0026gt;the desert\u0026lt;/span\u0026gt;. Look carefully, and you may find one \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"important\"\u003c/span\u003e\u0026gt;your own backyard\u0026lt;/span\u0026gt;!\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow let's add some style for our new class,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.cat-climate\u003c/code\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.important\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.unimportant\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.cat-climate\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellow\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe same class can be used to apply the same styles to both spans and divs, as we did with \u003ccode\u003e.important\u003c/code\u003e.\u003c/p\u003e","exportId":"thursday-divs-and-spans"},{"id":216,"title":"Thursday: Practice: Divs and Spans","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice adding divs and spans to pages.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between divs and spans?\u003c/li\u003e\r\n\u003cli\u003eIf I wanted to highlight a specific phrase in a paragraph, would it be better to use a div or a span?\u003c/li\u003e\r\n\u003cli\u003eIf I wanted to highlight a group of paragraphs, would it be better to use a div or a span?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson to create the webpage about wildcats, dividing the page into important and unimportant sections. Then, choose one (or several) of the following to practice using divs and spans to style the page.\u003c/p\u003e\r\n\u003ch3\u003eTravel Agency\u003c/h3\u003e\r\n\u003cp\u003ePull up the page you made for Happy Trails Travel Agency and rewrite it to remove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etropical\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epopular\u003c/code\u003eclasses from the elements themselves, and use divs instead.\u003c/p\u003e\r\n\u003ch3\u003eNews Article\u003c/h3\u003e\r\n\u003cp\u003eRewrite the news article webpage by removing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintroduction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass from the elements themselves and create a div with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintroduction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to hold the elements.\u003c/p\u003e\r\n\u003ch3\u003eResume\u003c/h3\u003e\r\n\u003cp\u003eCreate a webpage to display your resume. Use divs and spans to style sections of the page to list your work experience, skills, education, contact info, and any other sections you'd like your resume to have.\u003c/p\u003e","exportId":"thursday-practice-divs-and-spans"},{"id":217,"title":"Thursday: Floats","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eAll the pages we've made so far have been laid out pretty simply - top to bottom for block elements, and left to right for inline elements. But often we will want our pages to have more complexity, with columns or a sidebar, or text wrapping around an image. We can use floats to design these kinds of layouts.\u003c/p\u003e\r\n\u003cp\u003eLet's see what this looks like. Here's an example of text wrapping around an image:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/mango.jpg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"An image of a ripe mango.\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes are one of the world's favorite fruits. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd here's the CSS rule:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: left\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we pull up the page, we can see that the image \"floats\" to the left, and the text wraps to the right of it. You can resize your browser window to see that when the area for the text exceeds the image size, the text flows underneath the image. If you'd like, you can also make the text float to the right by using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efloat: right;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead.\u003c/p\u003e\r\n\u003cp\u003eLet's see how we can use floats to create a sidebar:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eAll about mangoes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"sidebar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eEating mangoes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes are delicious! Here are some ways to enjoy them:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eBy themselves\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eSmoothies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eFruit salad\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eWith coconut rice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"main\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes are one of the world's favorite fruits. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's the CSS:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.sidebar\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e30%\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: right\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellow\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRefresh the page, and now we have a yellow sidebar on the right of the page. Let's see one more example of floats and make some columns on the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eColumns\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's see some columns!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWith the CSS:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.column\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e350px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: left\u003c/span\u003e;\r\n  }\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we have columns! As you can see, floats are a useful way to lay out web pages.\u003c/p\u003e","exportId":"thursday-floats"},{"id":218,"title":"Thursday: Practice: Floats","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Practice using floats to organize webpage layouts. Use concepts from the lesson on floats, such as wrapping text around an image, creating sidebars, and creating pages with multiple columns.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat are some of the options available to us for using floats?\u003c/li\u003e\r\n\u003cli\u003eWhat are we able to accomplish using floats?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson and create the page about mangoes and pay attention to how floats are used to change the layout of the page.\u003c/p\u003e\r\n\u003ch3\u003eBand Website\u003c/h3\u003e\r\n\u003cp\u003eCreate a website for your favorite band. Give the page a sidebar for upcoming shows. Create an \"About the band\" section and a section for images, and use floats to set the layout of the page.\u003c/p\u003e\r\n\u003ch3\u003ePhotographer Portfolio\u003c/h3\u003e\r\n\u003cp\u003eCreate a website for a photographer. Divide the page into columns that feature different categories of photography: For example, one for portraits, one for nature, and one for weddings.\u003c/p\u003e\r\n\u003ch3\u003eResume\u003c/h3\u003e\r\n\u003cp\u003ePull up your resume from the divs and spans practice, and use floats to divide the different sections into columns and rows. For example, the skills section can be broken into columns to save vertical space.\u003c/p\u003e","exportId":"thursday-practice-floats"},{"id":219,"title":"Thursday: Box Model","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eThere's one more essential piece of HTML and CSS we need to cover: the box model. You can think of every element on a web page as a rectangular box that takes up space, and it's made of four parts: content, padding, border, and margin. This is easiest to see in a diagram:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Wednesday%20Content%20Images/MP-W1D3-01-box_model.png\" alt=\"MP-W1D3-01-box_model.png\" width=\"556\" height=\"328\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1404\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWhen you see\u003ccode\u003e height\u003c/code\u003e and \u003ccode\u003ewidth\u003c/code\u003e used in CSS, those values apply to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003econtent\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's use some CSS to demonstrate the box model on a web page. Start with some unstyled text contained in a div:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBox model\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"test-box\"\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add a border using CSS:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  }\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can actually give each side a different value if we'd like:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder-right\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e4px\u003c/span\u003e solid blue\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder-top\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6px\u003c/span\u003e solid orange\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder-bottom\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8px\u003c/span\u003e solid black\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor the sake of space, I'll keep the border uniform for the rest of these examples.\u003c/p\u003e\r\n\u003cp\u003eNow let's increase the space between the text and the border:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6px\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFinally, let's make some room between the border and the elements around it (which are, in this simple case, just the edges of the page):\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6px\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003emargin\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e20px\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's see what happens when we give the div a background color:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6px\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003emargin\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e20px\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellow\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe color applies to the box\u003cspan\u003e \u003c/span\u003e\u003cem\u003econtent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003cem\u003epadding\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe can see the box model for an element in the DevTools\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epanel. For this example, it looks something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Wednesday%20Content%20Images/MP-W1D3-02-box_model_inspect.png\" alt=\"MP-W1D3-02-box_model_inspect.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1405\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYou'll run into the box model a lot when building web pages, so spend some time getting familiar with it.\u003c/p\u003e","exportId":"thursday-box-model"},{"id":220,"title":"Thursday: Practice: Box Model","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Implement the box model in our code to organize and layout the page content.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between margin and padding?\u003c/li\u003e\r\n\u003cli\u003eWhat are some benefits to using the box model?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson on the box model and understand how its various properties affect the layout of elements on the page. After you have gone through the lesson, here are some exercises for you to practice using margins, borders, and padding. Choose one project to start - you are not expected to complete all of the exercises, but to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eunderstand\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe box model.\u003c/p\u003e\r\n\u003ch3\u003eBand Website\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor the sidebar to your band's webpage, add a border and a bit of padding and margin. Give the sidebar a background color, if you haven't already.\u003c/li\u003e\r\n\u003cli\u003eAdd some padding around the images on your band's webpage.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eResume\u003c/h3\u003e\r\n\u003cp\u003eUse the box model to further format sections of your resume. For example, give each section a border to separate different sections from each other.\u003c/p\u003e\r\n\u003ch3\u003ePhotography Portfolio\u003c/h3\u003e\r\n\u003cp\u003eUse the box model to lay out the presentation of your photography portfolio from the Floats exercise. Give each photo a border, and give each column a different background color.\u003c/p\u003e","exportId":"thursday-practice-box-model"},{"id":221,"title":"Thursday: Cascading and Inheritance","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eYou may have noticed that, in earlier lessons, we defined a style for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e, and it was applied to the text that was inside of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags. This is called inheritance: since the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags are nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003etags, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags inherit the styles given to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003es.\u003c/p\u003e\r\n\u003cp\u003eOn the other hand, when we applied a style to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags on the same page as a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e, it was not applied to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare not nested within another, so their styles are applied independently.\u003c/p\u003e\r\n\u003cp\u003eWe can use inheritance to change the font for the entire web page like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-family\u003c/span\u003e: sans-serif\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSince all of the other elements in the web page are nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag, all of the text for the page will be Sans Serif.\u003c/p\u003e\r\n\u003cp\u003eLet's see how we can use cascading to target specific child elements. For example, take this HTML:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eCats vs Dogs\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eCats vs Dogs: the Definitive Guide\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to the ultimate showdown between cats and dogs. May the best one win!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"cats\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere's why cats are great. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eFind out more about cats \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://www.example.com/cats.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003ehere\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"dogs\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere's why dogs are great. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eFind out more about dogs \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://www.example.com/dogs.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003ehere\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWho will win? You will be the judge.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSay we want to color-code each paragraph so that we can tell which paragraphs are about cats and which ones are about dogs. Here is how we can style the paragraphs in each div differently:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.cats\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: coral\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.dogs\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: steelblue\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThese rules tell the page that all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecats\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass need the background color\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecoral\u003c/code\u003e, and all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edogs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass need the background color\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esteelblue\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou can nest even further down:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.cats\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-weight\u003c/span\u003e: bold\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.dogs\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou can actually nest as far down as you like. A word of caution, however: anything more than 3 or 4 levels deep is usually a sign that you should re-evaluate what you are trying to accomplish with your CSS. Chances are, there's a much more efficient way to accomplish what you're attempting to do.\u003c/p\u003e\r\n\u003cp\u003eNow, consider the following rules:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.dogs\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-weight\u003c/span\u003e: bold\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-weight\u003c/span\u003e: normal\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen it comes to CSS rules, the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emore specific\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erule is applied. In this example, a link in a paragraph in an element with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edogs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass will be bold, because the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.dogs p a\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector is more specific than the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ea\u003c/code\u003eselector. This is called specificity.\u003c/p\u003e\r\n\u003cp\u003eThere's one more thing I'd like to cover about cascading: if two rules have the same specificity, the last one wins - in other words, the one that's the farthest down in the CSS file takes precedence. When more than one CSS file is linked in the page head, then again, the furthest one down takes precedence.\u003c/p\u003e\r\n\u003cp\u003eOccasionally, you'll run into HTML that looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003estyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"float: left\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"cute-kitten.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, the style is embedded in the HTML using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estyle\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estyle=\"float: left\"\u003c/code\u003e. This is called an inline style, and it should be avoided at all costs! It defeats the purpose of CSS when you do this, because it means that now you can't reuse your styles and keep them in one place. This is not a common practice, but you still may run into it every once in awhile. The main takeaway here is that if you see an inline style, it takes precedence over what's defined in your CSS.\u003c/p\u003e\r\n\u003cp\u003eThere are some additional rules about which style takes precedence in more complicated situations, but that's beyond the scope of what we're learning here.\u003c/p\u003e","exportId":"thursday-cascading-and-inheritance"},{"id":222,"title":"Thursday: Practice: Cascading and Inheritance","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice identifying HTML selectors using CSS, and understand various rules of cascading.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003eDiscuss the following questions with your partner:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhy is it a bad idea to use inline styling?\u003c/li\u003e\r\n\u003cli\u003eWhat is meant by specificity? How is it related to cascading?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCSS Diner\u003c/h3\u003e\r\n\u003cp\u003e\u003ca href=\"http://flukeout.github.io/\"\u003eCSS Diner\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eis a game that will let you hone your chops at using CSS selectors. Click the link and proceed through the game with your partner, switching places at each level.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eAnimal Shelter\u003c/h3\u003e\r\n\u003cp\u003eCreate a webpage for an animal shelter that features the animals available for adoption on the home page. Use divs and floats to give each animal its own profile section. Change the styles of the elements on the page using cascading.\u003c/p\u003e\r\n\u003ch3\u003ePast Projects\u003c/h3\u003e\r\n\u003cp\u003eTake a look at some of your past projects and try to find places where you could rewrite the page using cascading.\u003c/p\u003e","exportId":"thursday-practice-cascading-and-inheritance"},{"id":223,"title":"Thursday: Responsive Design and Media Queries","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eYou may have noticed that some websites look a little different on your phone than they do in a browser window on your computer screen. Altering the appearance of a website depending on the device used to view it is an important feature of CSS that ensures a quality user experience on any device. It's essential to building modern websites. In this lesson, we'll learn about adapting a site for different screen sizes using media queries.\u003c/p\u003e\r\n\u003cp\u003eBuilding a site to change its appearance in response to the size of screen on which it is being viewed is known as responsive web design. The screen being used to view a site is often called a viewport. Before we begin, let's take a look at some examples of websites that use responsive design. Check out the following two websites to view some examples of responsive design. Each site contains the layouts of several different websites, and how their styles appear differently depending on the user's screen size.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://responsivedesign.is/examples/\"\u003eResponsive Design\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://mediaqueri.es/\"\u003emediaqueri.es\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBut how do we make our own sites responsive? How does it know when to use styles meant for smaller viewports, and when to apply styles meant for larger ones?\u003c/p\u003e\r\n\u003cp\u003eIn human terms, responsive design sounds something like,\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"I want my website to have a white background when viewed on a phone, but a green background when viewed from a computer monitor\"\u003c/em\u003e. To accomplish this, you need to give the computer instructions such as,\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"If the viewport size is larger than 768 pixels, use green for the background color. Otherwise, use white for the background color.\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eTo accomplish this, we can use CSS media queries. A media query is a block of CSS that is applied only when certain conditions about the user's viewport are true.\u003c/p\u003e\r\n\u003cp\u003eLet's walk through creating media queries together. This will allow us to both understand their construction, and see what they look like in action.\u003c/p\u003e\r\n\u003cp\u003eCreate a project directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emedia-query-practice\u003c/em\u003e. Inside, create an HTML file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emedia-query-site.html\u003c/em\u003e, and another directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e. In the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory create a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eTo start, let's add some HTML to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emedia-query-site.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMedia Queries\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMedia Queries\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc tincidunt vestibulum sollicitudin. Aliquam sit amet ultrices purus, quis pulvinar massa. Sed quis ligula dapibus, gravida lectus sit amet, euismod quam. Integer id nisi sem. Phasellus ac purus et nunc dignissim ultricies quis sed ligula. Proin efficitur nunc eget egestas iaculis. Proin posuere, enim in venenatis gravida, erat metus hendrerit tellus, sit amet sollicitudin magna mauris sit amet ex. In hac habitasse platea dictumst. Fusce porta suscipit felis vitae ornare. Duis fringilla, nunc vitae aliquam lacinia, metus urna tincidunt erat, ut laoreet leo mi ac nibh. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eIn pretium eu sem quis dignissim. In commodo velit eu elit volutpat bibendum. Proin a orci pharetra, pharetra mauris et, tempor odio. Nullam semper magna sit amet augue pretium molestie. Quisque ullamcorper turpis a nisi consectetur, vel consectetur purus lobortis. Pellentesque tristique justo id faucibus rutrum. Donec mi lacus, molestie et posuere eget, lacinia sed turpis. Aenean id sem ligula. Cras venenatis commodo felis a tempor. Duis nec leo facilisis, condimentum odio dictum, rutrum lectus. Nullam vehicula elementum imperdiet.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eNullam sit amet ante porttitor, vestibulum quam nec, tincidunt sem. Nulla ac diam in risus porta sollicitudin. Nam pellentesque diam nec arcu vehicula varius. Praesent id ornare magna. Aliquam congue nisl enim, id vulputate lacus faucibus non. Sed ac dignissim dui, quis porttitor augue. Donec velit erat, hendrerit ut tincidunt vel, placerat sit amet risus.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, the fun part: let's add some media queries!\u003c/p\u003e\r\n\u003cp\u003eMedia queries are located in CSS stylesheets. Because of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecascading\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein CSS, they should be located at the bottom of the file, to prevent other style rules from overriding them.\u003c/p\u003e\r\n\u003cp\u003eThe basic skeleton of a media query looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e () \u003c/span\u003e{\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThere are three parts to this block of code:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e@media\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells the browser that this is a media query\u003c/li\u003e\r\n\u003cli\u003eThe parentheses will contain the conditions of when to apply CSS\u003c/li\u003e\r\n\u003cli\u003eThe curly braces will contain the CSS rule to be applied when the conditions contained in the parenthesis are true\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eMedia Type\u003c/h2\u003e\r\n\u003cp\u003eMedia queries will often include something called a media type, which refers to the type of device the user is viewing a site with. We have the following options to choose from:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eall\u003c/code\u003e: Suitable for all devices.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eprint\u003c/code\u003e: Intended for viewing a site in \"print preview\" mode. For instance, if we had a website with a dark-colored background that users may want to print, we could use a print media query that removes the dark-colored background for print media types. This would both make our website's information more legible in a printed format, and save our users printer ink.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003escreen\u003c/code\u003e: Intended primarily for color computer screens.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003espeech\u003c/code\u003e: Intended for screen readers that assist users with impaired vision.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf you do not explicitly specify a type, the media query will default to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eall\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eHere's how to add the media type to a query:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen () \u003c/span\u003e{\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBy specifying the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escreen\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia type, we're instructing our site to only apply any CSS in this media query to the site if a user is viewing it through a screen.\u003c/p\u003e\r\n\u003ch2\u003eMedia Features\u003c/h2\u003e\r\n\u003cp\u003eTo tell a media query the conditions of when to apply CSS, we include something called a media feature. Media features are specific properties and details about the manner the user is viewing content. The most commonly-used media features are:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eheight\u003c/code\u003e: Describes the height of the viewport, in pixels. This media feature can also have a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix added onto it. That is, we can say\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax-height\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto specify the maximum height to which a media query's CSS should apply. Or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin-height\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto define a minimum height.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003ewidth\u003c/code\u003e: Describes the width of the viewport, in pixels. Like height, it may also have a min or max prefix added onto it.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eorientation\u003c/code\u003e: Indicates whether the viewport is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elandscape\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(wider than it is tall) or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eportrait\u003c/code\u003e(taller than it is wide).\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWhile not required for this course, you can learn about the additional, less common features in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#Media_features\"\u003eMDN Documentation on Media Queries\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewidth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia feature in our media query. We'll also include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix, in order to specify a minimum width:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-property\"\u003e@media\u003c/span\u003e screen \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e (min-\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e480\u003c/span\u003epx) {\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe've done a few things here:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFirst, we specified that this CSS rule will apply to the screen media type.\u003c/li\u003e\r\n\u003cli\u003eThen we added the word\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebetween our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escreen\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia type, and the parenthesis containing our new media feature. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword is used for combining media features with media types, as well as combining multiple media features together.\u003c/li\u003e\r\n\u003cli\u003eThen, we included\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin-width: 480px\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the parenthesis.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003ewidth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis our media feature.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix specifies that the CSS we will eventually include in this media query should only be applied to viewports with a minimum width of 480 pixels.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e480px\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esimply refers to size (in pixels) we'd like to define as the maximum. When defining pixel sizes in CSS, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epx\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esuffix is required.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eBreakpoints\u003c/h3\u003e\r\n\u003cp\u003eThis rule means the CSS we will eventually include in this media query will only be applied when the user's viewport is wider than the minimum width of 480 pixels. This is known as a breakpoint.\u003c/p\u003e\r\n\u003cp\u003eA breakpoint is the point at which a media query's condition becomes true. For instance, because our media query has a min-width of 480px, it will apply its styles only when the viewport is 480 pixels wide or greater. 480px is therefore the breakpoint, because it is the point at which the query will be \"activated\".\u003c/p\u003e\r\n\u003cp\u003eFor some standard device breakpoints, check out this reference at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://css-tricks.com/snippets/css/media-queries-for-standard-devices/\"\u003eCSS Tricks\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2\u003eMobile-First Design\u003c/h2\u003e\r\n\u003cp\u003eLet's focus on the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix for a bit here. What's the difference? Why does it matter which one we use?\u003c/p\u003e\r\n\u003cp\u003eWhen we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin-width\u003c/code\u003e, then the design changes when the width is larger than 480 pixels. Using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax-width\u003c/code\u003emeans that the design changes when the width gets smaller than 480 pixels.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin-width\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill make the page display faster on smaller devices, and is a good idea because smaller devices usually have less power to display a website. This approach to designing a website is called mobile first design, because it means designing for mobile screens before designing for desktop or other devices. When in doubt, take the mobile first approach.\u003c/p\u003e\r\n\u003ch2\u003eCSS Rules\u003c/h2\u003e\r\n\u003cp\u003eAll right, we have our setup ready to make some media queries. Let's start writing some CSS! We will include CSS within the curly braces, and the CSS is exactly like the CSS we've been using so far. The only difference is that the CSS rule will only be applied when the media query conditions are met.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e480px\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: black\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: white\u003c/span\u003e;\r\n    }\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe're saying that when the user is viewing our page from a screen, and the page width is larger than 480 pixels, then the background color will be black and the text color will be white. Any smaller than that, and only the default styles will be applied. Try it out!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D3-04-resize_window_responsive.gif\" alt=\"MP-W1D3-04-resize_window_responsive.gif\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe can add multiple media queries to address a variety of viewport sizes and media types. Let's add another media query to our site:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e480px\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: black\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: white\u003c/span\u003e;\r\n    }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellowgreen\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you refresh the page, you can see that if the width is between 480 and 767 pixels, the background color is black, when the width is 768 pixels or larger, the background color changes to yellow-green. Notice that the text color remains white after the background turns yellow-green, even though we don't specify text color in the second CSS rule. This is because he viewport is still greater than 480 pixels wide, and we didn't say anything about text color in the second CSS rule. Unless we override the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty with a new rule, it will remain white.\u003c/p\u003e\r\n\u003ch2\u003eViewport Ranges\u003c/h2\u003e\r\n\u003cp\u003eWe can also specify both minimum and maximum values for a media query. This can be useful if we don't want to worry about certain styles applying to multiple media queries.\u003c/p\u003e\r\n\u003cp\u003eWe could add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax-width\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our media query like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e480px\u003c/span\u003e) and (max-width: \u003cspan class=\"hljs-number\"\u003e767px\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: black\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: white\u003c/span\u003e;\r\n    }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellowgreen\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo specify the viewport range, we added a second\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebetween the two sets of parentheses. Now when we refresh the page, we see that the text color is white only for the first media query, and changes back to black when the screen width is greater than 767 pixels.\u003c/p\u003e\r\n\u003ch2\u003eMore CSS in Media Queries\u003c/h2\u003e\r\n\u003cp\u003eLet's look at another example of how we can use media queries to change our webpage's display. Often, sites will display text in a single column for easy reading on mobile phones or smaller devices, but display the text in columns on larger devices (see\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://mediaqueri.es/dbp/\"\u003ethis example from mediaqueri.es\u003c/a\u003e).\u003c/p\u003e\r\n\u003cp\u003eWe've styled text into columns in a previous lesson on floats. Where do you think we need to put the CSS for displaying our text as columns at only larger screen sizes?\u003c/p\u003e\r\n\u003cp\u003eHere's the CSS:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e480px\u003c/span\u003e) and (max-width: \u003cspan class=\"hljs-number\"\u003e767px\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: black\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: white\u003c/span\u003e;\r\n    }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellowgreen\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n  \u003cspan class=\"hljs-class\"\u003e.column\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e220px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: left\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur new rule will float any element with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolumn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to the left, and make its width 220 pixels, but only for screens larger than 768 pixels. Check it out! Our text is displayed in a single column by default:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D3-05-single_column.png\" alt=\"MP-W1D3-05-single_column.png\" width=\"585\" height=\"500\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBut at larger screen sizes, we have columns:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D3-06-multiple_column.png\" alt=\"MP-W1D3-06-multiple_column.png\" width=\"696\" height=\"499\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs you can see, media queries are a powerful tool in web design! We have the ability to tailor our user's experience of the webpage depending on how they view it. As more individuals are accessing web content through handheld devices and tablets, it's a good idea to be aware of responsive design and how we can use it to give the user the highest quality experience.\u003c/p\u003e\r\n\u003cp\u003eAs you create websites and applications throughout this course, begin implementing media queries to ensure your content looks great on all devices.\u003c/p\u003e","exportId":"thursday-responsive-design-and-media-queries"},{"id":224,"title":"Thursday: Practice: Responsive Design and Media Queries","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice implementing responsive design into your projects to make them easily readable on multiple screen sizes.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following questions with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is meant by mobile first design?\u003c/li\u003e\r\n\u003cli\u003eWhat is a breakpoint?\u003c/li\u003e\r\n\u003cli\u003eWhy do media queries need to be placed after the traditional CSS rules?\u003c/li\u003e\r\n\u003cli\u003eWhat are some of the benefits to using responsive design?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eGo back to a past project and add some media queries to the styles to make the sites responsive. Feel free to use the viewport ranges from this lesson, or see the ones listed in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://css-tricks.com/snippets/css/media-queries-for-standard-devices/\"\u003eCSS Tricks\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ereference.\u003c/p\u003e","exportId":"thursday-practice-responsive-design-and-media-queries"},{"id":1745,"title":"Friday: Learning Dashboard","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003cspan\u003eViewing Courses\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Grading/Picture1.png\" alt=\"Picture1.png\" width=\"127\" height=\"180\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/3660\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eTo view all the courses you are enrolled in click the \u003cstrong\u003eDashboard [1]\u003c/strong\u003e or the \u003cstrong\u003eCourses [2]\u003c/strong\u003e link on the global navigation.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Grading/Picture2.png\" alt=\"Picture2.png\" width=\"298\" height=\"112\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/3661\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIn the Moringa School LMS the \u003cstrong\u003eCourses [2 ]\u003c/strong\u003e are the different modules we offer with daily lessons grouped into weeks. To view all the course contents click the \u003cstrong\u003eHome [1]\u003c/strong\u003e link.\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan\u003eGradebook\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003eAll scores from the code reviews conducted by your peers and TMs are recorded and stored. The gradebook shows your progress against the total score of the objectives set out for the project.\u003c/p\u003e\r\n\u003cp\u003e \u003cimg src=\"viewer/files/Grading/Picture3.png\" alt=\"Picture3.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/3662\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eTo navigate to the gradebook, click the \u003cstrong\u003eCourses\u003c/strong\u003e \u003cstrong\u003e[1]\u003c/strong\u003e link in the global navigation\u003cstrong\u003e,\u003c/strong\u003e then the course you want to access. In the course navigation, click on\u003cstrong\u003e Grades [2]\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe gradebook looks similar to the image above. Accumulated scores are found at the bottom right in the \u003cstrong\u003eTotal\u003c/strong\u003e row. The total score is displayed both in percentage format \u003cstrong\u003e[3]\u003c/strong\u003e and the score achieved over the total score achievable \u003cstrong\u003e[4]\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Grading/Picture4.png\" alt=\"Picture4.png\" width=\"664\" height=\"655\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/3663\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYou can print your score by clicking the \u003cstrong\u003ePrint \u003c/strong\u003ebutton at the top left corner.\u003c/p\u003e","exportId":"friday-learning-dashboard"},{"id":265,"title":"Friday: Independent Project - Portfolio Landing Page ","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":20.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eCongratulations on beginning your journey toward becoming a developer! As a developer, you need a web portfolio to showcase your work. Today, you will be creating the landing page for your programming portfolio. \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eRequirements\u003c/h2\u003e\r\n\u003cp\u003eHere are the requirements for your page:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eYour name\u003c/li\u003e\r\n\u003cli\u003eAn image of you or something that represents who you are\u003c/li\u003e\r\n\u003cli\u003eA list of projects you have created with active links to them (either on GitHub or GitHub pages)\r\n\u003cul\u003e\r\n\u003cli\u003eFor each, include a brief description of the project and what languages it uses\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eAn \"About Me\" section including:\r\n\u003cul\u003e\r\n\u003cli\u003eYour background (for example, your education, job experience, a paragraph on why you decided to take a class on programming, etc.)\u003c/li\u003e\r\n\u003cli\u003eYour current interests/hobbies/skills\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eDeploy your site onto GitHub pages so that a live site can be viewed at\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour-username.github.io/portfolio\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(for example)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eObjectives\u003c/h2\u003e\r\n\u003cp\u003eIn addition to these requirements, your portfolio will be evaluated on the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSome of the most common HTML tags are incorporated, including:\r\n\u003cul\u003e\r\n\u003cli\u003ep, h, ul, ol, li, em, strong, a, img, div, span\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003ePage incorporates a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eIndentation and spacing of HTML and CSS is accurate.\u003c/li\u003e\r\n\u003cli\u003eCommits are made regularly with clear messages associated with them\u003c/li\u003e\r\n\u003cli\u003eProject is deployed to GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eA project README that includes:\r\n\u003cul\u003e\r\n\u003cli\u003eproject or program name\u003c/li\u003e\r\n\u003cli\u003eauthor name\u003c/li\u003e\r\n\u003cli\u003edescription of project\u003c/li\u003e\r\n\u003cli\u003eproject setup instructions\u003c/li\u003e\r\n\u003cli\u003elink to live site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003ecopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"i3e972ae6b1ab43e61f968faf81ddabc2"}]},{"id":24,"name":"Week 2","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":true,"exportId":"ib53b622e1cbb3c1a6ab124c596cf6661","items":[{"id":1955,"title":"Monday: JavaScript Fundamentals Objectives","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eIn this section, we will be learning the fundamentals of JavaScript, the programming language of the web.\u003c/p\u003e\r\n\u003cp\u003eWe'll start our exploration of JavaScript with the basic building blocks:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eData types\u003c/li\u003e\r\n\u003cli\u003eOperators\u003c/li\u003e\r\n\u003cli\u003eVariables\u003c/li\u003e\r\n\u003cli\u003eMethods\u003c/li\u003e\r\n\u003cli\u003eFunctions\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan\u003eThen we will learn \u003c/span\u003eabout some important programming concepts that will allow us to better work with data:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eArrays: Lists of data or information\u003c/li\u003e\r\n\u003cli\u003eLooping: Allows JavaScript to repeat an action until some condition is met\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFinally, we will learn how we can make JavaScript make decisions for us by implementing branching, which allows JavaScript to perform different actions based on different conditions that we create\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eAs you'll see when you explore other languages, these foundational elements are standard components throughout programming. \u003c/span\u003e\u003c/p\u003e","exportId":"monday-javascript-fundamentals-objectives"},{"id":85,"title":"Monday: Introduction to JavaScript","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWelcome to JavaScript! So far, our pages have been pretty, but a little boring. We want to be able to interact with the page. That's where JS comes in! JS makes pages interactive. The internet is built on HTML, CSS, and JavaScript. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAlongside HTML and CSS, JavaScript is one of the three core technologies of World Wide Web content production; the majority of websites employ it, and all modern Web browsers support it without the need for plug-ins.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eBack in 1995, a developer at Netscape named Brendan Eich introduced JavaScript to the world. Despite Java and JavaScript both containing \"Java\" in their names, they're two distinct languages that have nothing to do with one another. The official name of JavaScript is ECMAScript which gets its name from the international organization that maintains it,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.ecma-international.org/\" target=\"_blank\"\u003eECMA (European Computer Manufacturer's Association)\u003c/a\u003e.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eJavaScript is a programming language used to make web pages interactive. Like HTML and CSS, you do not need to install anything to begin writing JavaScript or see it run on your users' computers. All modern browsers support JavaScript which means JavaScript that you write for your web pages will automatically run when your visitors load your web page in their browsers. In fact, JavaScript is the only scripting language that all browsers support so if you want a page to have dynamic content, learning JavaScript is a must.\u003c/p\u003e\r\n\u003ch2\u003eDocumentation and Resources\u003c/h2\u003e\r\n\u003cp\u003eJavaScript has been around for many years and there are many places for documentation and help online. Be wary of the resources you find online. There is a lot of bad information out there, especially on JavaScript. There are also many conflicting opinions about ways to accomplish the same task.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eHere are the primary sources we suggest for documentation and reference. If they seem overwhelming at first, don't be deterred. As your knowledge and ability grow, so too will your ability to navigate the documentation and resources.\u003c/p\u003e\r\n\u003ch3\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target=\"_blank\"\u003eMozilla Developer Network (MDN)\u003c/a\u003e\u003c/h3\u003e\r\n\u003cp\u003eMDN is one of the best sources of documentation on JavaScript. The site includes guides, tutorials, reference, tools and resources for developers using JavaScript.\u003c/p\u003e\r\n\u003ch3\u003e\u003ca href=\"http://stackoverflow.com/\" target=\"_blank\"\u003eStack Overflow\u003c/a\u003e\u003c/h3\u003e\r\n\u003cp\u003eStack Overflow is a good resource for finding answers to specific challenges that you are facing. It's a site for asking and answering questions about programming. You do need to be careful about what you find there, as there is plenty of bad information to go along with the good. Make sure to search to see if somebody has already answered your question before posting. Also, give back by answering questions for other people!\u003c/p\u003e\r\n\u003ch3\u003eSearch Engine\u003c/h3\u003e\r\n\u003cp\u003eFinally, if you're stuck on something, chances are, somebody has gotten stuck on it, too - try a search engine. To make sure you get up-to-date results, may find it helpful to limit your results to the past year (in Google, click \u003cem\u003eSearch tools\u003c/em\u003e in the bar above your search results, and then change \u003cem\u003eAll time\u003c/em\u003e to \u003cem\u003ePast year\u003c/em\u003e). It's helpful when searching to add the language to your search so you don't find yourself weeding through results for other languages (e.g. \"adding an element to an array JavaScript\" or \"jQuery clicking a button\").\u003c/p\u003e","exportId":"monday-introduction-to-javascript"},{"id":49,"title":"Monday: Arithmetic","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that you have the basics of HTML and CSS under your belt, we're going to start learning our first programming language: JavaScript. Remember, web browsers can only do three things: display content with HTML, style it with CSS, and change what's displayed with JavaScript. Because all browsers support JavaScript, it's the de facto programming language of the web.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eWe're going to take a detour away from the aesthetically pleasing and obviously useful world of web pages, so that we can learn some programming fundamentals. But don't worry! We'll be back in no time.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eLike earlier, I'm going to assume you're using Google Chrome for these lessons. Chrome includes a nice little console that lets you type in JavaScript code. To access it, click on the ☰ button, go to the \u003cem\u003eMore Tools\u003c/em\u003e menu, and click \u003cem\u003eDeveloper Tools\u003c/em\u003e. Go to the \u003cem\u003eConsole\u003c/em\u003e tab on the window that pops up at the bottom of the screen. As a shortcut, you can also press \u003cem\u003eCmd\u003c/em\u003e + \u003cem\u003eOption\u003c/em\u003e + \u003cem\u003eJ\u003c/em\u003e on a Mac or \u003cem\u003eCtrl\u003c/em\u003e + \u003cem\u003eShift\u003c/em\u003e + \u003cem\u003eI\u003c/em\u003e on a PC.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHere at the \u003ccode\u003e\u0026gt;\u003c/code\u003e prompt, you can type JavaScript and see what it does. Try typing 1 + 2; and pressing \u003cem\u003eEnter\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eCongratulations! You just ran your first JavaScript code.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eYou should see something like:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eDon't you dare copy \u0026amp; paste!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026gt; 1 + 2;\u003cbr\u003e\u003c/code\u003e\u003ccode\u003e\u003c/code\u003e\u003ccode\u003e3\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJavaScript took your code\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e1 + 2\u003c/code\u003e evaluated it, and returned the result: 3.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThe semicolon at the end of the line tells JavaScript to run everything before it. You'd think JavaScript would know on its own, wouldn't you?\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eNow try these:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e4 - 3;\u003c/li\u003e\r\n\u003cli\u003e5 * 6;\u003c/li\u003e\r\n\u003cli\u003e10 / 2;\u003c/li\u003e\r\n\u003cli\u003e9 / 2;\u003c/li\u003e\r\n\u003cli\u003e7 + 8 * 9;\u003c/li\u003e\r\n\u003cli\u003e(7 + 8) * 9;\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTry some other arithmetic yourself. Play around with the \u003ccode\u003e%\u003c/code\u003e operator, called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emodulo\u003c/strong\u003e. It will give you the remainder of dividing two numbers. Don't be fooled into thinking it has something to do with percentages! \u003ccode\u003e+\u003c/code\u003e,\u003ccode\u003e-\u003c/code\u003e,\u003ccode\u003e*\u003c/code\u003e,/, and \u003ccode\u003e%\u003c/code\u003e are called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eoperators\u003c/strong\u003e. An operator is a special character (or characters) that indicates an action to be performed. Try dividing 0 by 0. The result,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e, stands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot a number\u003c/em\u003e. In JavaScript,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis actually considered a type of number (bizarre as that may seem). Try dividing any other number by 0. The result,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eInfinity\u003c/code\u003e, is also a number in JavaScript.\u003c/p\u003e","exportId":"monday-arithmetic"},{"id":1956,"title":"Monday: Practice - Arithmetic","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e In the previous lesson, we learned\u003c/span\u003e:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow to access the JavaScript Console\u003c/li\u003e\r\n\u003cli\u003eAddition, subtraction, multiplication, and division using JavaScript\u003c/li\u003e\r\n\u003cli\u003eHow to use the\u003cspan\u003e \u003ccode\u003e%\u003c/code\u003e \u003c/span\u003eoperator\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eNaN\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emeans not a number but is actually considered a type of number\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBegin getting comfortable with these concepts by completing the practice exercises listed below. Soon enough, they'll be second nature!\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eMake sure you understand the following before moving on:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the \u003cspan\u003e\u003ccode\u003e%\u003c/code\u003e \u003c/span\u003eoperator? How is the action it performs different than simply dividing?\u003c/li\u003e\r\n\u003cli\u003eHow can we access the JavaScript console?\u003c/li\u003e\r\n\u003cli\u003eWhen might we see\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eComplete the following exercises to practice arithmetic in JavaScript:\u003c/p\u003e\r\n\u003ch3\u003eAdd:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e77 to 99\u003c/li\u003e\r\n\u003cli\u003e34 to 1233\u003c/li\u003e\r\n\u003cli\u003e-53 to 99\u003c/li\u003e\r\n\u003cli\u003e9,092 to -12312\u003c/li\u003e\r\n\u003cli\u003e943,456,575 to 39,087,092,348,570\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eSubtract:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e99 from 665\u003c/li\u003e\r\n\u003cli\u003e34 to 1233\u003c/li\u003e\r\n\u003cli\u003e555 from 23\u003c/li\u003e\r\n\u003cli\u003e7,912 from 88888\u003c/li\u003e\r\n\u003cli\u003e6,348,709,234 from 87,023,984,709,871,234.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eMultiply:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e89 and 54\u003c/li\u003e\r\n\u003cli\u003e932 and 1,900\u003c/li\u003e\r\n\u003cli\u003e-34 and 8\u003c/li\u003e\r\n\u003cli\u003e25 and 700\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eDivide:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e1008 by 7\u003c/li\u003e\r\n\u003cli\u003e23423 by 75\u003c/li\u003e\r\n\u003cli\u003e90 by 3\u003c/li\u003e\r\n\u003cli\u003e9,870,834,205,987 by 324\u003c/li\u003e\r\n\u003cli\u003eA number by 0.\u003c/li\u003e\r\n\u003cli\u003e0 by 0.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFind the remainder of dividing the following numbers:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e1008 by 7\u003c/li\u003e\r\n\u003cli\u003e23423 by 75\u003c/li\u003e\r\n\u003cli\u003e90 by 3\u003c/li\u003e\r\n\u003cli\u003e9,870,834,205,987 by 324\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-practice-arithmetic"},{"id":87,"title":"Monday: Variables","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the last lesson, when we wanted to add numbers together, we simply typed the numbers and added them. Now try this in the JavaScript console:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var myNumber = 3;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e3\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the code we typed above, \u003ccode\u003emyNumber\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is a variable that we set equal to 3. A variable is sort of like a container for storing values. You can almost read the code aloud: \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Variable myNumber is equal to 3\"\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Let's break down the above statement and look at each part:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003evar\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e stands for \"variable\", and is the JavaScript keyword that creates a variable for us.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003emyNumber\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is the name that we gave the variable\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is an assignment operator, meaning that it sets the value on the left side equal to the right side. It does not compare the two sides - we'll learn how to do this in an upcoming lesson\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e3\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is the value that we assign to the variable\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eOnce we set a variable equal to a value, we can use it just like the value. When we create a variable with a value like this, we say that we have declared the variable.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHere are some things we can do with variables. We can do arithmetic on the variable:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber + 5;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e8\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber + myNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e6\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNote that the value of a variable does not change when we do arithmetic on it. However, we can change the value of a variable once it has been set by using \u003ccode\u003e=\u003c/code\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber = 9;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e9\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e9\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can even use the variable to change its own value:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e9\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber = myNumber + 1;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e10\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e10\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can also use more than one variable at a time:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var firstNumber = 5;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var secondNumber = 8;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var thirdNumber = firstNumber + secondNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; thirdNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e13\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFor now, don't worry about the word \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e that prints to the console. When we declare a variable in this way, it does not actually evaluate to anything, so the return value is \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eNaming Conventions\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn JavaScript, it’s conventional to give variables names that start with a lowercase letter, and if the name has more than one word, to capitalize each word after the first, without spaces or punctuation (such as hyphens \u003ccode\u003e-\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e or underscores \u003ccode\u003e_\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e) between words. This capitalization style is called lower camelcase, named after the humps of a camel.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHere are some examples of good and bad naming:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eThe first letter of a variable must be lower case.\u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003elowerCamelCase\u003c/code\u003e: Good!\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003eNotLowerCamelCase\u003c/code\u003e: Bad - the first letter here is capitalized. This capitalization style is sometimes called upper camel case or Pascal case.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003eVariables should begin with a letter.\u003cbr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003efirstNumber\u003c/code\u003e: Good!\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e1stNumber\u003c/code\u003e: Bad - the first character here is a 1.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eVariables are case-sensitive\u003cbr\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003emyNumber\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is a different variable than \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003emyNUMBER\u003c/code\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eUse clear names that describe the value being stored.\u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003emyNumber\u003c/code\u003e: Good! This variable tells us that it a specific number.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003ex\u003c/code\u003e: Bad - this variable name does not tell us anything about what it represents. For example: \u003ccode\u003evar x = 45\u003c/code\u003e doesn't tell us much about the value. Is 45 an age, a distance, a size, a time?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003enum\u003c/code\u003e: Bad - it's possible that \u003ccode\u003enum\u003c/code\u003e here refers to the word \"number\", but abbreviations can be difficult for others (or even yourself).\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-variables"},{"id":1957,"title":"Monday: Practice - Variables","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: So far we have learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eVariables, in JavaScript, are written in lower camelcase\u003c/li\u003e\r\n\u003cli\u003eVariables are set using the var keyword\u003c/li\u003e\r\n\u003cli\u003eVariables can be used in arithmetic\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePractice creating and utilizing variables by completing the exercises listed below. Variables are a fundamental building block of programming; so begin getting comfortable with them now!\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhen is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eused? What does it mean?\u003c/li\u003e\r\n\u003cli\u003eHow can we use a variable after we've defined it?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eHere are a few exercises for you to practice using variables:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSet a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esomeName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eequal to your name. Put your name in quotation marks.\u003c/li\u003e\r\n\u003cli\u003eDisplay the value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esomeName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the console.\u003c/li\u003e\r\n\u003cli\u003eChange the value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esomeName\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eSet a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efavoriteNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eequal to your favorite number.\u003c/li\u003e\r\n\u003cli\u003eCalculate what your favorite number divided by 2 is.\u003c/li\u003e\r\n\u003cli\u003eSet another variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emichaelsFavorite\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eequal to 13.\u003c/li\u003e\r\n\u003cli\u003eChange the value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emichaelsFavorite\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto 7.\u003c/li\u003e\r\n\u003cli\u003eSubtract your favorite number from Michael's favorite.\u003c/li\u003e\r\n\u003cli\u003eChange the value of Michael's favorite number to be 26 times its current value.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-practice-variables"},{"id":88,"title":"Monday: Strings","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe’ve done some work with numbers. Now let’s work with words!\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"Hello world\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Hello world\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA series of characters inside of quotation marks, like \u003ccode\u003eHello world\u003c/code\u003e above, is called a \u003cstrong\u003estring\u003c/strong\u003e. Strings can contain any number of letters, punctuation, and even numbers. Let's see a few more:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"12345\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"12345\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"Hello, world!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Hello, world!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"Isn't learning fun? :)\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Isn't learning fun? :)\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat happens when we use a series of characters without the quotation marks?\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; hello\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eUncaught ReferenceError: hello is not defined\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe console is telling us that it doesn't know what we mean with \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ehello\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e without the quotation marks. Without quotation marks, JavaScript sees \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ehello\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e as a variable, which has not been defined yet.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can declare a variable as a string:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var hello = \"Hello world!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; hello\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Hello world!\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eYou may be wondering how we can have a string that contains quotation marks, since quotation marks are used to enclose strings. We can do this in a couple of ways.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHere is the first option:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"Someone once told me, \\\"Any sufficiently advanced technology is indistinguishable from magic.\\\"\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Someone once told me, \"Any sufficiently advanced technology is indistinguishable from magic.\"\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe used \u003ccode\u003e\\\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e as an escape character, which tells JavaScript that the character right after doesn’t have any special meaning, and is another character in the string.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAnother option is to use single quotes:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 'Someone once told me, \"Any sufficiently advanced technology is indistinguishable from magic.\"'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Someone once told me, \"Any sufficiently advanced technology is indistinguishable from magic.\"\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn general, it doesn’t really matter if you use single quotes or double quotes to declare a string. If you have a string that contains a lot of quotation marks, it might be a bit simpler to just use single quotes. Whether you use single quotes or double quotes, just remember that it is important that your code is consistent.\u003c/span\u003e\u003c/p\u003e","exportId":"monday-strings"},{"id":1958,"title":"Monday: Practice - Strings","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Strings lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eStrings can include letters, punctuation and numbers\u003c/li\u003e\r\n\u003cli\u003eStrings are surrounded with quotation marks\u003c/li\u003e\r\n\u003cli\u003eVariables can be set equal to strings\u003c/li\u003e\r\n\u003cli\u003eTo escape characters use the \u003ccode\u003e\\\u003c/code\u003e character\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePractice using this fundamental building block of programming by completing the exercises below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do we declare a string?\u003c/li\u003e\r\n\u003cli\u003eDo strings require single or double quotes?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eType a greeting to your best friend.\u003c/li\u003e\r\n\u003cli\u003eSet a variable equal to a string and then display the variable's contents\u003c/li\u003e\r\n\u003cli\u003eWhat happens when you add the string \u003ccode\u003e\"9\"\u003c/code\u003e to the number \u003ccode\u003e9\u003c/code\u003e? Make sure you're clear on the difference between \u003ccode\u003e\"9\"\u003c/code\u003e with quotes and \u003ccode\u003e9\u003c/code\u003e without.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-practice-strings"},{"id":1413,"title":"Monday: Methods","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOkay, we've learned some of the basics of numbers and strings. In this lesson, we will learn how to do some things to them with JavaScript.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's start by printing something to the JavaScript console:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; console.log(\"Hello from the JavaScript console!\");\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eHello from the JavaScript console!\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003econsole.log\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is called a \u003cstrong\u003emethod\u003c/strong\u003e. A method is an action that is taken on something. In this case, it takes an action on the JavaScript console: it \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003elogs\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e whatever we put inside of the parenthesis to the console. We can log anything to the console. We just used it with a string, but we can also use it with numbers:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; console.log(34);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e34\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eExpressions:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; console.log(5*4);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e20\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eEven variables:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var greeting = \"Hello\";\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; console.log(greeting);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eHello\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe part of the method inside of the parenthesis is called an \u003cstrong\u003eargument\u003c/strong\u003e. Arguments give methods more information about what they are supposed to do. In the case of \u003ccode\u003econsole.log\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, the argument is what we want to print to the console.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBecause we can use \u003ccode\u003econsole.log\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to print anything to the screen, it comes in handy a lot. We will soon see how we can use it to troubleshoot our code.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eMethods with Numbers\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow let's round a number to the nearest whole number using \u003ccode\u003etoFixed\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 737.255342.toFixed();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"737\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen we use a \u003ccode\u003etoFixed\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e like this, we are asking JavaScript to look at the number the method is attached to and evaluate it, and then give a response. In this case, the response is \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"737\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, which is the method's \u003cstrong\u003ereturn value\u003c/strong\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can also round a number to a certain number of decimal points using \u003ccode\u003etoFixed\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 3.58494.toFixed(0);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"4\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 3.58494.toFixed(2);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"3.58\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 3.58494.toFixed(4);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"3.5849\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 3.58494.toFixed(6);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"3.584940\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis time, when we used \u003ccode\u003etoFixed\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, we gave it a number as its argument, and the method rounded our number\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to that number of decimal points. In the case of \u003ccode\u003etoFixed\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, the argument is optional, because \u003ccode\u003etoFixed\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e has default behavior if no arguments are passed in. Even when arguments are optional, or when a method doesn't take an argument, we still need the parenthesis on the end to tell JavaScript that it is a method.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNotice that the return value for \u003ccode\u003etoFixed\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is in quotation marks, which means that the value is a string, not a number. We'll go more into detail about why strings and numbers are different in an upcoming lesson.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow let's look at a method that will change a number to exponential notation. Exponential notation is essentially a way of simplifying really large and really small numbers (\"really small\" means less than 1 here) with multiples of 10. In case you're unfamiliar with exponential notation, here's an example of how it works. The number 25 in exponential notation is 2.5 * 10, because 2.5 times 10 is 25. The number 786 in exponential notation is 7.86 * 10^2, because 10^2 is the same thing as 10 times 10 which is 100, so 7.86 * 100 = 786. Another way of writing this in exponential notation is 7.86e+2. Don't worry too much about grasping exponential notation right now if this is a new concept - the point here is that we are going to use JavaScript to find a number in exponential notation for us.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 98.4.toExponential();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"9.84e+1\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 1000000000.0.toExponential();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"1e+9\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 0.045.toExponential();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e4.5e-2\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003etoExponential\u003c/code\u003e can take arguments, too. You can provide a number to tell JavaScript how many decimal points you would like it to round the number to:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 2327948.218739.toExponential(3);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"2.328e+6\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 899.0.toExponential(1);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"9.0e+2\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can call methods on variables, too. After all, variables simply stand in for other values. For example, let's look at another method, \u003ccode\u003etoString\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, which returns a number as a string:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var twentyFive = 25;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; twentyFive.toString();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"25\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNote that it does not actually convert the variable to a string; it simply returns a string. For example:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var sevenHundredEightyNine = 789;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; sevenHundredEightyNine.toString();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"789\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; sevenHundredEightyNine;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e789\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/pre\u003e","exportId":"monday-methods"},{"id":1959,"title":"Monday: Practice - Methods","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Methods section, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow to manipulate numbers with methods\u003c/li\u003e\r\n\u003cli\u003eExponential notation\u003c/li\u003e\r\n\u003cli\u003eThe argument to the method is located within the parentheses\u003c/li\u003e\r\n\u003cli\u003eMethods, in JavaScript, are always followed by parentheses\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBegin to practice using methods by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow would you describe a method in your own words?\u003c/li\u003e\r\n\u003cli\u003eWhat is a return value? What does it represent?\u003c/li\u003e\r\n\u003cli\u003eWhat is an argument? How do you provide one to a method in JavaScript?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003ePractice using the methods you've learned about:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eConvert the following to exponential notation:\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e9238.479\u003c/li\u003e\r\n\u003cli\u003e98370923874.32\u003c/li\u003e\r\n\u003cli\u003e324.64322\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli\u003eSpecify the number of decimal places each number should have.\u003c/li\u003e\r\n\u003cli\u003eRepeat all of these using a variable set equal to any number you choose.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-practice-methods"},{"id":1960,"title":"Monday: String Methods","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can call methods on strings, too!\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"I love JavaScript\".toUpperCase();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"I LOVE JAVASCRIPT\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eJust like with numbers, we can call these methods on variables that represent strings:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var statement = \"LOREM IPSUM\";\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; statement.toLowerCase();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"lorem ipsum\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can combine strings:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"pine\".concat(\"apple\");\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"pineapple\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003econcat\u003c/code\u003e stands for \"concatenate\", which means that it combines the strings into one. Here's a shortcut for the \u003ccode\u003e.concat()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e method:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"example \" + \"here\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"example here\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can even chain methods together. Here's what that looks like:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"I am \".concat(\"so excited\").toUpperCase();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"I AM SO EXCITED\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe return value of the first part of the above example, \u003ccode\u003e\"I am \".concat(\"so excited\")\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, is a string (\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"I am so excited\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e), so we can use the string method \u003ccode\u003etoUpperCase\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e on it.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eString methods can take arguments just like number methods. Here's an example:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"spider\".charAt(1);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"p\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003echarAt\u003c/code\u003e means \"character at\", and it returns the character at the position in the string that we've specified with the argument. The character at position 1 of \"spider\" is \"p\" - does that seem strange? With how we would normally count, the first character would be \"s\". However, computers count a little differently, and start at 0. So, if we want the first letter of a string, we ask for the character at \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eposition 0\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"spider\".charAt(0);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"s\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe aren't restricted to using numbers as arguments. Arguments can be anything that the method will use to do an action. Some methods take strings as an argument:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var stringToSearch = \"Please show me where 'show' is located!\";\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; stringToSearch.search(\"show\");\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e7\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eCan you see what the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003esearch\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e method does? It returns the position in a string of the first letter of the string in the argument.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSome methods take multiple arguments:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var fruitList = \"papaya, melon, avocado\";\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; fruitList.slice(8, 13);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"melon\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe \u003ccode\u003e.slice()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e method extracts a part of a string and returns that part in a new string. It takes 2 arguments: the starting position and the ending position. In our example, we wanted the portion of \u003ccode\u003efruitList\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e that start at position 8 and ends at position 13, and the method returned \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"melon\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe've learned a few string methods in this lesson, but this is by no means an exhaustive list. If you're interested to explore some more possibilities with string methods, you're welcome to check out the reference on \u003ca href=\"https://www.w3schools.com/js/js_string_methods.asp\"\u003eW3Schools\u003c/a\u003e.\u003c/span\u003e\u003c/p\u003e","exportId":"monday-string-methods"},{"id":1961,"title":"Monday: Practice - String Methods","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the string methods lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMethods can be called on strings\u003c/li\u003e\r\n\u003cli\u003eMethods can be chained\u003c/li\u003e\r\n\u003cli\u003eYou can use the \u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e+\u003c/code\u003e\u003c/span\u003e operator on strings in place of the \u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e.concat()\u003c/code\u003e \u003c/span\u003emethod\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow that we've covered both methods and strings independently, practice common methods meant specifically for strings by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat does 'chaining' a method mean? What does that look like?\u003c/li\u003e\r\n\u003cli\u003eName two string methods.\u003c/li\u003e\r\n\u003cli\u003eName two ways to combine multiple strings together.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003ePractice calling methods on strings:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSet a variable equal to a string\u003c/li\u003e\r\n\u003cli\u003eCall a method on that variable.\u003c/li\u003e\r\n\u003cli\u003eSet another variable with a string in all uppercase.\u003c/li\u003e\r\n\u003cli\u003eUse the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econcat\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod with your two variables.\u003c/li\u003e\r\n\u003cli\u003eNow concatenate them with the shortcut.\u003c/li\u003e\r\n\u003cli\u003eUse the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoUpperCase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on your first variable.\u003c/li\u003e\r\n\u003cli\u003eNow use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoLowerCase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on your second variable.\u003c/li\u003e\r\n\u003cli\u003eFind the character at the 3rd position of either of your variables.\u003c/li\u003e\r\n\u003cli\u003eCheck out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype#Methods\"\u003eMDN's documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eof string methods and try out at least five new methods for yourself. If some of them don't make sense, don't worry about it - just try the ones that do. (Stick to the section labelled Methods unrelated to HTML. Click on the method itself to see how to use it in your code.)\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-practice-string-methods"},{"id":89,"title":"Monday: Operators","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eAssignment Operators\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen it comes to manipulating information with JavaScript, we will end up using operators a lot. We've already seen arithmetic operators in the \u003ca href=\"modules/items/ibad9ea60120fce9eb0dcd2a52afbb2ef\"\u003eArithmetic\u003c/a\u003e lesson, as well as the \u003cstrong\u003eassignment operator\u003c/strong\u003e, \u003ccode\u003e=\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, which assigns a value to a variable:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var favoriteDrink = \"green tea\";\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; favoriteDrink;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"green tea\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn this example, we have assigned the value \u003ccode\u003e\"green tea\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to the variable \u003ccode\u003efavoriteDrink\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Assignment operators are named that way because they assign the value on the right of the operator to the variable on the left. Another one is \u003ccode\u003e+=\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, which works like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var favoriteNumber = 42;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; favoriteNumber += 1;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e43\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; favoriteNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e43\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn this example, \u003ccode\u003efavoriteNumber += 1\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e means the same thing as \u003ccode\u003efavoriteNumber = favoriteNumber + 1\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Because it is an assignment operator, the mathematical operation on the right changes the value of the variable on the left. We can use any number with this operator:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; favoriteNumber += 4;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e47\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThere is an assignment operator for each mathematical operation:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e+=\u003c/code\u003e\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e-=\u003c/code\u003e\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e*=\u003c/code\u003e\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e/=\u003c/code\u003e\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's run each one:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var testNumber = 4;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; testNumber += 6;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e10\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; testNumber -= 2\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e8\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; testNumber *= 3\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e24\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; testNumber /= 4\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e6\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAre you starting to see how this works?\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eComparison Operators\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAssignment operators are useful for assigning values to variables. \u003cstrong\u003eComparison operators\u003c/strong\u003e allow us to compare the value on the left to the value on the right. They do not change any values. Instead, they return either \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e or \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003efalse\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, depending on whether the statement is true or false.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's explore some comparison operators now:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var myNumber = 3;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber \u0026lt; 5\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber \u0026gt; 5\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003efalse\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber === 3;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber === 4;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003efalse\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe first example reads \"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003emyNumber\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is less than 5\", and since \u003ccode\u003emyNumber\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is 3, this statement evaluates to \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Similarly, the second example reads \"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003emyNumber\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is greater than 5\", which we know is false.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe three equals signs, \u003ccode\u003e===\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, is the \u003cstrong\u003eequality operator\u003c/strong\u003e, and evaluates whether or not the two sides are equal. This is different from the single equals sign \u003ccode\u003e=\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, which \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eassigns\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e equality between the two sides. Mixing up the two operators is a \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003every\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e easy syntax error to make, so pay attention.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eJavaScript does have another operator for equality with two equals signs, \u003ccode\u003e==\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. It returns \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e for comparisons such as\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003ccode\u003e\"8\" == 8\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. This example says that the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003estring\u003c/span\u003e\u003c/i\u003e \u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"8\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003enumber\u003c/span\u003e\u003c/i\u003e \u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e8\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e are equal, despite being different types of data (we will cover why these two are not equal in much greater detail in an upcoming lesson). However, it has a lot of confusing rules, and it's generally best to avoid using it.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eYou may have noticed that the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003efalse\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e responses in the console did not have quotation marks. That's because they are not strings, but are actually a type of data called a boolean, and simply represents either true or false.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can use comparison operators on strings as well:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var weather = \"sunny\";\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; weather === \"sunny\";\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; weather === \"cloudy\";\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003efalse\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHere's a list of common comparison operators:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e===\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \"equal to\". Returns \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e for values that are exactly equal to each other, such as \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e1 === 1\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003ccode\u003e\"hello\" === \"hello\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. \u003ccode\u003e2 === \"2\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, \u003ccode\u003e4 === 5\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, and \u003ccode\u003e\"frog\" === \"lizard\"\u003c/code\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eall return \u003ccode\u003efalse\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e!==\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \"not equal to\". It is the opposite of the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e===\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e operator. So, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e1 !== 1\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"hello\" !== \"hello\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e evaluate as \u003ccode\u003efalse\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e4 !== 5\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"frog\" !== \"lizard\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e evaluate as \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \"greater than\". Returns \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e when the value on the left is greater than the value on the right. In the case of letters in strings, letters closer to the end of the alphabet evaluate as greater than letters closer to the beginning. For example, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e5 \u0026gt; 2\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"c\" \u0026gt; \"a\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e evaluate as \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e5 \u0026gt; 8\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"c\" \u0026gt; \"d\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e evaluate as \u003ccode\u003efalse\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \"greater than or equal to\". This is similar to \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, but it also evaluates as \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e if both sides are equal. For example, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e5 \u0026gt;= 5\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e5 \u0026gt;= 4\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e both evaluate as \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \"less than\". This is the opposite of \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, and returns \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e when the value of the left is less than the value on the right. For example, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e12 \u0026lt; 13\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"a\" \u0026lt; \"z\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e evaluate as \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e19 \u0026lt; 15\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"z\" \u0026lt; \"y\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e evaluate as \u003ccode\u003efalse\u003c/code\u003e.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \"less than or equal to\". Again, this is similar to \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, but it also evaluates as \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is both sides are equal. For example, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e12 \u0026lt;= 12\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e12 \u0026lt;= 13\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e both evaluate as \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-operators"},{"id":1962,"title":"Monday: Practice - Operators","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Assignment and Comparison Operators lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e===\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eassignment operator\u003c/li\u003e\r\n\u003cli\u003eComparison operators, including\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e===\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTake time to practice using each of these operators by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between a comparison operator and an assignment operator?\u003c/li\u003e\r\n\u003cli\u003eWhat is a boolean? What does it represent?\u003c/li\u003e\r\n\u003cli\u003eHow is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator different than the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003ePractice assigning and comparing:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSet two variables equal to two different numbers. Use a comparison operator to compare these two variables. Change one of their values by using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+=\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-=\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e*=\u003c/code\u003e, or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e/=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator. Then, compare their values again.\u003c/li\u003e\r\n\u003cli\u003eTry out the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperators.\u003c/li\u003e\r\n\u003cli\u003eTry to use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e!==\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-practice-operators"},{"id":90,"title":"Monday: Data Types","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eWe've already seen\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enumbers\u003c/strong\u003e,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003estrings\u003c/strong\u003e,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebooleans\u003c/strong\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eundefined\u003c/strong\u003e. These are 4 of the 5 basic data types, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eprimitives\u003c/strong\u003e, in JavaScript. The other is\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enull\u003c/strong\u003e, which represents nothingness. Don't worry about\u003cspan\u003e \u003c/span\u003e\u003cem\u003enull\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efor now - we'll learn more about it down the road.\u003c/p\u003e\r\n\u003ch2\u003eData Types\u003c/h2\u003e\r\n\u003ch3\u003eNumber\u003c/h3\u003e\r\n\u003cp\u003eUnsurprisingly, the number type represents numbers.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode\u003e42\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e3.14\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e-10\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eNaN\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(stands for \"not a number\", but is considered a number)\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eInfinity\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e-Infinity\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003evar favouriteNumber = 42;\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eYou can use certain methods on numbers:\u003c/p\u003e\r\n\u003cp\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n\u0026gt; \u003cspan class=\"hljs-number\"\u003e3.14159\u003c/span\u003e.toFixed(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n\u003cspan class=\"hljs-string\"\u003e\"3.14\"\u003c/span\u003e\u003c/code\u003e\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-string\"\u003e\u003c/span\u003e\u003c/code\u003eString\u003c/h3\u003e\r\n\u003cp\u003eAs you've seen, the string type represents text.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode\u003e\"hello, world!\"\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003evar greeting = \"hello, world!\";\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eYou can use certain methods on strings:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e.toUpperCase();\r\n\u003cspan class=\"hljs-string\"\u003e\"HELLO\"\u003c/span\u003e\r\n\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e.charAt(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n\u003cspan class=\"hljs-string\"\u003e\"l\"\u003c/span\u003e\r\n\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e.toUpperCase().charAt(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n\u003cspan class=\"hljs-string\"\u003e\"L\"\u003c/span\u003e    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eBoolean\u003c/h3\u003e\r\n\u003cp\u003eBooleans can only hold 2 possible values -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e \u0026gt; \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\r\n\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n\u0026gt; \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e \u0026gt; \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e.charAt(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e) === \u003cspan class=\"hljs-string\"\u003e\"e\"\u003c/span\u003e;\r\n\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e enrolledAtMoringa = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou'll discover soon just how important booleans are to programming.\u003c/p\u003e\r\n\u003ch3\u003eUndefined\u003c/h3\u003e\r\n\u003cp\u003eThe undefined data type has only one possible value -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWhen declaring a variable without giving it a value (\u003ccode\u003evar myNumber;\u003c/code\u003e), JavaScript creates the variable without a value, hence\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eundefined\u003c/strong\u003e. Even when declaring a variable and assigning it a value at the same time (\u003ccode\u003evar favoriteNumber = 42;\u003c/code\u003e), JavaScript actually creates the variable initially without a value, temporarily giving it a value of\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eundefined\u003c/strong\u003e, before then assigning it the value to the right of the equals sign. This is kind of a subtle point, so don't worry too much about it at the moment.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eAdditionally, there are some functions and methods that do not return any value, in which case the return value is actually\u003cspan\u003e \u003c/span\u003e\u003cem\u003eundefined\u003c/em\u003e. (You'll learn more about this when we learn how to write our own methods and functions.)\u003c/p\u003e\r\n\u003ch2\u003eData Type Detection\u003c/h2\u003e\r\n\u003cp\u003eIt's important to understand the difference between the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the string \"5\". To the computer, they are two entirely different things, as illustrated by this example:\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-string\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var myNumber = 5;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var myOtherNumber = 10;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var myText = \"5\";\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var myOtherText = \"10\";\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber + myOtherNumber;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e15\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myText + myOtherText;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"510\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we added\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e10\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe got\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e15\u003c/code\u003e, but when we added\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"10\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"5\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eit concatenated the two strings together.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eLikewise, the boolean\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not the same as the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"true\"\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIn the example above, somewhat confusingly, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator works on both numbers and strings - just differently. Usually methods will only work on a specific data type. For example,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e48432.78.toExponential();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eworks just fine, but trying to do\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"48432.78\".toExponential();\u003c/code\u003eresults in an error because there is no\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoExponential()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that works on a string.\u003c/p\u003e\r\n\u003cp\u003eLikewise,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"hello\".charAt(2);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eworks, but\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e314159.charAt(2);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edoes not.\u003c/p\u003e\r\n\u003cp\u003eWe can check the data type of a variable or value as follows:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003e\u0026gt; typeof 5;\u003cbr\u003e\"number\"\u003cbr\u003e\u0026gt; typeof \"5\";\u003cbr\u003e\"string\"\u003cbr\u003e\u0026gt; typeof true;\u003cbr\u003e\"boolean\"\u003cbr\u003e\u0026gt; typeof \"true\";\u003cbr\u003e\"string\"\u003cbr\u003e\u0026gt; var greeting = \"hello world\";\u003cbr\u003e\u0026gt; typeof greeting;\u003cbr\u003e\"string\"\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch2\u003eData Type Conversion\u003c/h2\u003e\r\n\u003cp\u003eOften input from a web browser will come in as a string and we will need to convert it to a number before working with it.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eWe can convert a string to a number by passing a string to the \u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction (more on functions soon):\u003c/p\u003e\r\n\u003cpre\u003e\u0026gt; var inputtedAge = \"45\";\u003cbr\u003e\u0026gt; inputtedAge;\u003cbr\u003e\"45\"\u003cbr\u003e\u0026gt; typeof inputtedAge;\u003cbr\u003e\"string\"\u003cbr\u003e\u0026gt; var myAge = parseInt(inputtedAge);\u003cbr\u003e\u0026gt; myAge;\u003cbr\u003e45\u003cbr\u003e\u0026gt; typeof myAge;\u003cbr\u003e\"number\"\u003c/pre\u003e\r\n\u003cp\u003eNote\u003cspan style=\"font-size: 1rem;\"\u003e that if you try to use \u003ccode\u003eparseInt()\u003c/code\u003e to convert a string not actually containing a number, the result is the \"number\u003c/span\u003e\"\u003cspan style=\"font-size: 1rem;\"\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u0026gt; var name = \"Andrea\";\u003cbr\u003e\u0026gt; var nonsense = parseInt(name);\u003cbr\u003e\u0026gt; nonsense;\u003cbr\u003eNaN\u003c/pre\u003e\r\n\u003cp\u003eIf you need to go the other way around, you can convert a number to a string by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoString()\u003c/code\u003e method on the number:\u003c/p\u003e\r\n\u003cpre\u003e\u0026gt; var myNumber = 42;\u003cbr\u003e\u0026gt; myNumber;\u003cbr\u003e42\u003cbr\u003e\u0026gt; typeof myNumber;\u003cbr\u003e\"number\"\u003cbr\u003e\u0026gt; var convertedNumber = myNumber.toString();\u003cbr\u003e\u0026gt; convertedNumber;\u003cbr\u003e\"42\"\u003cbr\u003e\u0026gt; typeof convertedNumber;\u003cbr\u003e\"string\"\u003c/pre\u003e","exportId":"monday-data-types"},{"id":1963,"title":"Monday: Practice - Data Types","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: In the Data Types lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e5 data types - number, string, boolean, undefined, null\u003c/li\u003e\r\n\u003cli\u003eMethods are generally specific to a data type\u003c/li\u003e\r\n\u003cli\u003eHow to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etypeof\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto check data type\u003c/li\u003e\r\n\u003cli\u003eHow to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.toString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto convert between numbers and strings\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eExplore these different data types and their corresponding methods by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat data type is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e? What about\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eInfinity\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eHow do we tell what data type something is?\u003c/li\u003e\r\n\u003cli\u003eName one way to convert something of one data type into another data type.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003ePractice checking and converting data types by doing the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSet a variable equal to your favorite number and check the data type.\u003c/li\u003e\r\n\u003cli\u003eThen, create a new variable converting the previous variable to a string. Check the data type again.\u003c/li\u003e\r\n\u003cli\u003eNext, create a third variable, converting this string variable back to a number. Check the data type one more time.\u003c/li\u003e\r\n\u003cli\u003eCompare the first and third variables using \u003ccode\u003e===\u003c/code\u003e to confirm that they are equal.\u003c/li\u003e\r\n\u003cli\u003eCompare the first and second variables or second and third variables to confirm that they are NOT equal.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-practice-data-types"},{"id":91,"title":"Monday: Functions","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSo far, none of the JavaScript we've written has allowed us to actually interact with the browser. Let’s write some now in the JavaScript console:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; alert(\"Hey there!\");\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs soon as we hit \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eEnter\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, a dialog box pops up that says \"Hey there!\".\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is something called a \u003cstrong\u003efunction\u003c/strong\u003e. Like a method, a function is something that performs an action. Functions are different from methods because they are called by themselves, whereas methods are actions that are called \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eon\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e something. For example, when we call \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e3.5.toFixed()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, we are calling the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e.toFixed()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e method on the number 3.5. When we call \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003ealert(\"Hey there!\")\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, it stands by itself. Like methods, functions can take arguments. The argument above was \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"Hey there!\"\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHere's another JavaScript function that takes an argument:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; prompt(\"What is your favorite planet?\"); // I'm going to type \"Earth\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Earth\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTry it out: hitting \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eEnter\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e on the \u003ccode\u003eprompt()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function opens a dialog box containing a box where you can enter some text.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe \u003ccode\u003e//\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e in the above code sample is the start of a \u003cstrong\u003ecomment\u003c/strong\u003e, which is text in your code that is ignored by the computer. Comments are a convenient way to leave notes to yourself or other programmers to make your code easier to read or understand. In the above example, I used a comment to let you know that I typed \"Earth\" in the dialog box, which is why \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Earth\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e printed on the next line.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Earth\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e prints on the next line because the \u003ccode\u003eprompt()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function returns your response. Here's a useful way we can use a \u003cstrong\u003ereturn statement\u003c/strong\u003e:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var mySchool = prompt(\"Where do you go to school?\"); // I'm going to type \"Moringa School\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; mySchool;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Moringa School\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHere, we created a variable named \u003ccode\u003emySchool\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and set it equal to whatever the user types in the box.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe return statement is a string, so we can use it in the same way that we use a string:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; prompt(\"Are you ready to code?\").toUpperCase(); // I'm going to type \"yes!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"YES!\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAnother built-in function that lets the browser interact with the user is \u003ccode\u003econfirm()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, which also takes a string as an argument:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; confirm(\"Would you like to continue?\"); // I am going to press the OK button\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTry it again for yourself. This time press the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eCancel\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e button, and notice that it returns the \u003ccode\u003efalse\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e boolean value.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eIt is good to be conscious of what arguments a function takes, and what data type it returns. Here is a table showing that information for the three built-in functions introduced in this lesson:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Tuesday/function-arguments-returns.png\" alt=\"function-arguments-returns.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1688\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction does not return anything useful, which is fine because you would just use it to display some information to the user - it is a way of outputting information, not of collecting information. On the other hand, you would want to somehow collect the user's response to the \u003ccode\u003eprompt()\u003c/code\u003e or \u003ccode\u003econfirm()\u003c/code\u003e functions - likely by assigning the returned value to a variable as demonstrated above with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar mySchool = prompt(\"Where do you go to school?\");\u003c/code\u003e. That way you can actually do something with the inputted information rather than just ignoring it.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","exportId":"monday-functions"},{"id":1964,"title":"Monday: Practice - Functions","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Functions lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFunctions perform actions in the browser\u003c/li\u003e\r\n\u003cli\u003eExamples of JavaScript functions are\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eMethods can be chained onto functions\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFunctions are an incredibly important part of programming, and you'll be using them constantly. Begin to get the hang of calling some common JavaScript functions by completing the practice exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow can we comment out code?\u003c/li\u003e\r\n\u003cli\u003eWhat happens when we run code that is commented out?\u003c/li\u003e\r\n\u003cli\u003eWhat are the differences between the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunctions in JavaScript?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003ePractice using JavaScript functions:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto pop up a dialog box with a warning for the user.\u003c/li\u003e\r\n\u003cli\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto ask a yes or no question.\u003c/li\u003e\r\n\u003cli\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto ask a question.\u003c/li\u003e\r\n\u003cli\u003eSave the response to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas a variable. All responses entered by a user in to a prompt input filed are saved as strings (even if the user enters 10, the value is saved as the string, \"10\"). Run at least 3 string methods of your choice on the string variable that you create from the prompt.\u003c/li\u003e\r\n\u003cli\u003eAsk a new question and save the response as a new variable and run 3 different string methods on it.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-practice-functions"},{"id":1965,"title":"Monday: Parsing Integers","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eThe most common error beginning JavaScript students experience is attempting to call functions meant for numbers on strings. This happens especially frequently because\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eall values returned from a prompt are saved as strings\u003c/strong\u003e. This is true even if the user enters a number into a prompt without quotation marks! Unfortunately, this is simply how JavaScript works. If we wanted to collect a value from a user with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e, and perform arithmetic with this value, we would need to convert it into a number with JavaScript's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction. If not, we would receive some very unexpected output.\u003c/p\u003e\r\n\u003ch2\u003eCommon Data Type Errors\u003c/h2\u003e\r\n\u003cp\u003eHere's what can happen if you\u003cspan\u003e \u003c/span\u003e\u003cem\u003edon't\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eparse integers correctly. In the example below, we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto ask the user how old they are. The user enters 35. We then attempt to perform some arithmetic on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eage\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u0026gt; var age = prompt(\"Enter your age: \");\u003cbr\u003e\u0026gt; age + age;\u003cbr\u003e3535\u003c/pre\u003e\r\n\u003cp\u003eRemember,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eall values returned from a prompt are strings!\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eSo, even though the user entered a number,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eage\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis actually equal to the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"35\"\u003c/code\u003e. Since the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator can be used to concatenate strings\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eage + age\u003c/code\u003e actually returns\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"3535\"\u003c/code\u003e, instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e70\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eAvoiding Data Type Errors\u003c/h2\u003e\r\n\u003cp\u003eTo make a string a number, we parse it using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction like this:\u003c/p\u003e\r\n\u003cpre\u003e\u0026gt; var number = parseInt(\"5\");\u003cbr\u003e\u0026gt; number;\u003cbr\u003e5\u003c/pre\u003e\r\n\u003cp\u003eSo, to change our age from the example above into an integer, we do the following:\u003c/p\u003e\r\n\u003cpre\u003e\u0026gt; var inputtedAge = prompt(\"Enter your age: \");\u003cbr\u003e\u0026gt; var age = parseInt(inputtedAge);\u003cbr\u003e\u0026gt; age + age;\u003cbr\u003e70\u003cbr\u003e\u003ccode class=\"javascript hljs\"\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAlternatively, the code does the exact same thing on a single line. Here we immediately pass the string returned by the .prompt() function as the argument to the .parseInt() function:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e age = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter your age: \"\u003c/span\u003e));\u003c/code\u003e\u003cbr\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; age + age;\u003cbr\u003e\u003cspan class=\"hljs-number\"\u003e70\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdditional Information\u003c/h2\u003e\r\n\u003cp\u003eNote: The \u003ccode\u003eInt\u003c/code\u003e part of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.parseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis short for integer, which means that it's a whole number. If we wanted to convert something into a number with a decimal, we'd use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.parseFloat()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u0026gt; var pi = \"3.14\";\u003cbr\u003e\u0026gt; parseFloat(pi);\u003cbr\u003e3.14\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong style=\"font-family: sans-serif; font-size: 1rem;\"\u003eFloating point\u003c/strong\u003e\u003cspan style=\"font-family: sans-serif; font-size: 1rem;\"\u003e \u003c/span\u003e\u003cspan style=\"font-family: sans-serif; font-size: 1rem;\"\u003enumbers are simply numbers with decimals. If you're parsing a whole number, \u003c/span\u003euse\u003cspan style=\"font-family: sans-serif; font-size: 1rem;\"\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e,\u003cspan style=\"font-family: sans-serif; font-size: 1rem;\"\u003e if you're parsing a number containing a decimal point, \u003c/span\u003euse\u003cspan style=\"font-family: sans-serif; font-size: 1rem;\"\u003e \u003c/span\u003e\u003ccode\u003eparseFloat()\u003c/code\u003e.\u003c/p\u003e","exportId":"monday-parsing-integers"},{"id":1966,"title":"Monday: JSFiddle","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eIn the Writing Functions lesson we wrote all of our functions in the JavaScript Console. This works for very simple functions that can be written on a single line, but it quickly becomes unwieldy as we want to write longer functions. There are a few solutions. You can write your functions in Atom and then copy \u0026amp; paste into the JavaScript console. Or you can try out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsfiddle.net/\" target=\"_blank\"\u003eJSFiddle\u003c/a\u003e, a useful tool for experimenting with JavaScript. With JSFIddle, you can write code in the JavaScript box and then execute it by clicking the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRun\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton on the menu bar at the top of the JSFiddle page.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Tuesday/jsfiddle-screenshot.png\" alt=\"jsfiddle-screenshot.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1686\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eType this out in the JavaScript box at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsfiddle.net/\" target=\"_blank\"\u003eJSFiddle\u003c/a\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003evar saySomething = function(whatToSay) {\u003cbr\u003ealert(whatToSay);\u003cbr\u003e};\u003cbr\u003evar add = function(number1, number2) {\u003cbr\u003ereturn number1 + number2;\u003cbr\u003e};\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode class=\"javascript hljs\"\u003e\u003c/code\u003eWriting out functions on multiple lines is clearer even with these simple functions; it will be essential when you begin writing more complex functions. Hit the \u003cem\u003eRun\u003c/em\u003e button and ... nothing happens. This is because we have simply defined two functions and made them available for future use. We have not yet called the functions, so the code inside of them has not yet been executed. Now add this line after the other lines:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003esaySomething(\u003cspan class=\"hljs-string\"\u003e\"hi\"\u003c/span\u003e);    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHit the \u003cem\u003eRun\u003c/em\u003e button again and you should see an alert pop up.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eNow add another line:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003eadd(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e);    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHit \u003cem\u003eRun\u003c/em\u003e and you should still see your alert pop up, but the new line you added doesn't appear to do anything. This is because our \u003ccode\u003eadd()\u003c/code\u003e method\u003cspan\u003e \u003c/span\u003ereturns\u003cspan\u003e \u003c/span\u003ethe result, but we don't do anything with that return value. When we run this code directly in the JavaScript console, the console automatically displays any return value. But in \"real life\" programming if we want to display something, we have to tell the computer to do that. We have a variety of options available to us. We could, for instance, assign the return value to a variable and then display it by calling the built-in JavaScript \u003ccode\u003ealert()\u003c/code\u003efunction.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = add(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e);\r\nalert(result);\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we hit \u003cem\u003eRun\u003c/em\u003e we should get an alert with our result, 8. If you aren't seeing the alert, make sure that you didn't delete your\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction definition code. Let's update our little program to make use of both functions:\u003c/p\u003e\r\n\u003cpre\u003evar saySomething = function(whatToSay) {\u003cbr\u003ealert(whatToSay);\u003cbr\u003e};\u003cbr\u003evar add = function(number1, number2) {\u003cbr\u003ereturn number1 + number2;\u003cbr\u003e};\u003cbr\u003evar result = add(3, 5);\u003cbr\u003evar outputText = \"The sum is \" + result + \".\";\u003cbr\u003esaySomething(outputText);\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar result = add(3, 5);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eline calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, passing it 2 arguments - the number 3 and the number 5. Our \u003ccode\u003eadd()\u003c/code\u003e function at this point assigns the first argument (\u003ccode\u003e3\u003c/code\u003e) to the parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the second argument (\u003ccode\u003e5\u003c/code\u003e) to the parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber2\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction then returns the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e8\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(in this case), which our code assigns to the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresult\u003c/code\u003e. Hence the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresult\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable is now the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e8\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThe next line -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar outputText = \"The sum is \" + result + \".\";\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- concatenates three things together into a new string, which it then assigns to the new variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoutputText\u003c/code\u003e. Note that result above is not in quotes. If you wrote\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar outputText = \"The sum is \" + \"result\" + \".\";\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethen \u003ccode\u003eoutputText\u003c/code\u003e would be the string \u003ccode\u003eThe sum is result.\u003c/code\u003e. But because we did not put \u003ccode\u003eresult\u003c/code\u003e in quotes, the computer understands the result variable's value (\u003ccode\u003e8\u003c/code\u003e) should be substituted here. Hence the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoutputText\u003c/code\u003e variable is assigned the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"The sum is 8.\"\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThe last line -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething(outputText);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- calls our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, passing it the value that the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoutputText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis standing in for - the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"The sum is 8.\"\u003c/code\u003e. Our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction assigns that string passed in to the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e. It then calls the built-in JavaScript function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein order to pop up a dialog box with that string.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eIf desired, you could refactor those last three lines into one line:\u003c/p\u003e\r\n\u003cpre\u003evar saySomething = function(whatToSay) {\u003cbr\u003ealert(whatToSay);\u003cbr\u003e};\u003cbr\u003evar add = function(number1, number2) {\u003cbr\u003ereturn number1 + number2;\u003cbr\u003e};\u003cbr\u003esaySomething(\"The sum is \" + add(3,5) + \".\");\u003c/pre\u003e\r\n\u003cp\u003eThat \u003cstrong\u003erefactored\u003c/strong\u003e line calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and passes it a string, which is concatenated together from 3 parts. The first part is just the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"The sum is \"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the last part is just the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\".\"\u003c/code\u003e. The second part is the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e8\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecause that is the return value of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction when passed the arguments\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e. Hence the concatenated string:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"The sum is 8.\"\u003c/code\u003e\u003c/p\u003e","exportId":"monday-jsfiddle"},{"id":1967,"title":"Monday: Writing Functions","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the last lesson, we learned how to use functions that are built into JavaScript. In this lesson, we'll learn to write our own.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's start by writing something simple, a function that will make an animal sound:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; function makeNoise() {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  alert(\"meow!\");\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFunctions in JavaScript are defined by the keyword \u003ccode\u003efunction\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, followed by:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe name of the function in lowerCamelCase.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eA pair of parentheses. We will learn what goes inside of the parentheses in just a moment.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eA pair of curly brackets.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe function code goes inside of the curly brackets.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNote that we can hit \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eEnter\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e to insert a line break as we're writing the function because the console knows what a function should look like, and will not execute any code.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can call the function just like we called the built-in JavaScript functions: by typing the name of the function followed by parentheses. Here is how we call the \u003ccode\u003emakeNoise\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; makeNoise();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eEvery time we run \u003ccode\u003emakeNoise()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, JavaScript will execute the code in between the curly brackets to give us an alert reading \u003ccode\u003emeow!\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. This function doesn't let us do very much, so let's make it a little more interesting:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; function makeNoise(animalSound) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  alert(animalSound);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; makeNoise(\"woof!\");\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"woof!\"\u003c/code\u003e in the above example is an argument to the \u003ccode\u003emakeNoise()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function. It's data that we are passing to the function, just like the arguments we've used for methods and for predefined JavaScript functions. When we call \u003ccode\u003emakeNoise(\"woof!\");\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, the function uses the value \u003ccode\u003e\"woof!\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e inside of the function.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the \u003ccode\u003emakeNoise()\u003c/code\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction, the value of the argument is assigned to the variable \u003ccode\u003eanimalSound\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. We call this variable, \u003ccode\u003eanimalSound\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, a \u003cstrong\u003eparameter\u003c/strong\u003e. Parameters and arguments are \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003enot\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e the same thing: the parameter will take on the value of an argument. You can think of parameters as placeholders for arguments.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's take a look at another, more complex example:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; function subtract(firstNumber, secondNumber) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  return firstNumber - secondNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; subtract(5,4);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e1\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNotice that when we call \u003ccode\u003esubtract\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, the word \u003ccode\u003eundefined\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e does not print on the next line. That's because we defined a return statement for the function as \u003ccode\u003efirstNumber - secondNumber\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. The return statement is what prints on the line after we call the function. When we don't define a return statement, the return statement is technically undefined, which is why \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e prints to the console.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can use variables with functions, too. Let's look at one more example to illustrate the subtleties between arguments and parameters:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; function add(number1, number2) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  return number1 + number2;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var five = 5;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var six = 6;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;add(five, six);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e11\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's step through what's going on here.\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eWe create a function named \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eadd\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e that takes two parameters, \u003ccode\u003enumber1\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003ccode\u003enumber2\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, and returns the sum of the two numbers\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eWe create a variable named \u003ccode\u003efive\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e with the value of \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e5\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eWe create a variable named \u003ccode\u003esix\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e with the value of \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e6\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eWe call the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eadd\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function and pass in \u003ccode\u003efive\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003ccode\u003esix\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e as the arguments\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eThe \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eadd\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function runs, with \u003ccode\u003enumber1\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e taking on the value of \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e5\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003ccode\u003enumber2\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e taking on the value of \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e6\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eThe \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eadd\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function returns the sum of \u003ccode\u003efive\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003ccode\u003esix\u003c/code\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThere is another syntax used to define functions in JavaScript that you may run into:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003evar add = function(number1, number2) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  return number1 + number2;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDeclaring a function like this is known as a \u003c/span\u003e\u003cstrong\u003efunction literal\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e or \u003c/span\u003e\u003cstrong\u003efunction expression\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e, whereas declaring a function like we do earlier in the lesson is called a \u003c/span\u003e\u003cstrong\u003efunction statement\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. There is a functional difference between the two, but it is subtle, and beyond the scope of this course. If you're interested in reading more about the difference, feel free to check out the \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\"\u003e\u003cspan style=\"font-weight: 400;\"\u003edocumentation\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e on Mozilla Developer Network or this post on \u003c/span\u003e\u003ca href=\"https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eJavaScript Weblog\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e","exportId":"monday-writing-functions"},{"id":1968,"title":"Monday: Practice - Writing Functions","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the previous lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eArguments to functions can be assigned to variables called parameters\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword tells JavaScript to return the result from the line of code\u003c/li\u003e\r\n\u003cli\u003eDon't abbreviate variable names because it can get confusing after time has passed\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBegin familiarizing yourself with writing custom functions in JSFiddle by completing the exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do we call a function?\u003c/li\u003e\r\n\u003cli\u003eWhat is a parameter, and how do we provide one to a function?\u003c/li\u003e\r\n\u003cli\u003eWhen do we need to parse integers?\u003c/li\u003e\r\n\u003cli\u003eWhat is a return value? How do we tell our functions what value to return?\u003c/li\u003e\r\n\u003cli\u003eWhat method is responsible for parsing integers?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eWrite a custom function for each of the following prompts. Then, call the function providing the necessary parameters to see if your function successfully returns the correct value. And don't forget to parse integers when necessary!\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eTake somebody's name and say a greeting to them.\u003c/li\u003e\r\n\u003cli\u003eWrite a function to subtract two numbers.\u003c/li\u003e\r\n\u003cli\u003eNow a function to multiply two numbers. Then create a new function called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethreeTimes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto multiply three numbers together.\u003c/li\u003e\r\n\u003cli\u003eNow write one to divide two numbers. Then write a new function called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eremainder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto find the remainder of two numbers.\u003c/li\u003e\r\n\u003cli\u003ePrompt the user to enter their age, another prompt to enter their name and another prompt to enter their favorite food. Pass these as arguments to a function that returns a sentence combining all of this information. Then display the returned string with an alert.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-practice-writing-functions"},{"id":1969,"title":"Monday: Business and User Interface Logic","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eWell-organized code is easier to debug, it appears more professional, and is easier to revisit later. Writing organized code is a highly-valued skill in the programming field. When working on a team, you'll often collaborate with other developers. Clean code is easier for others to understand and contribute to. Before we begin writing more complex JavaScript, let's make sure we understand how to organize our code using best, most professional practices from the very beginning.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eOne of the most important organizational rules to follow is keeping what is known as your user interface and business logic separate. We haven't written any user interface logic\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyet\u003c/em\u003e, but we will in upcoming lessons. In this lesson we'll explore what user interface and business logics are, and what each handles.\u003c/p\u003e\r\n\u003ch3\u003eUser Interface and Business Logics\u003c/h3\u003e\r\n\u003cp\u003eConsider a basic calculator application. Its code falls into two categories: code that performs calculations, and code responsible for interacting with the user.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThe code that handles arithmetic is the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eback-end\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebusiness logic\u003c/strong\u003e. It's the 'inner workings' of the application that performs calculations and returns a value. It's what takes the numbers\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e, adds them together, and arrives at\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e9\u003c/code\u003e. The functions we've explored so far are all back-end logic.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThe code that handles interacting with user is the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efront-end\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003euser interface\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003elogic. It retrieves information from the user and provides it to the business logic to calculate. While buttons on a calculator may be\u003cspan\u003e \u003c/span\u003e\u003cem\u003elabeled\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith numbers, they're just visual buttons. User interface logic is what translates clicking on this area of the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Tuesday/button-on-calculator.png\" alt=\"button-on-calculator.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1685\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e... into the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e4\u003c/code\u003e. After all, we cannot perform addition on\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuttons\u003c/em\u003e, but you can perform addition on\u003cspan\u003e \u003c/span\u003e\u003cem\u003enumbers\u003c/em\u003e. The user interface logic registers that the user has pushed the button labelled \"4\". It then provides the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the back-end logic where we may perform calculations with it.\u003c/p\u003e\r\n\u003cp\u003eLet's say we also press the buttons labelled \"+\" and \"5\". The user interface logic also translates these interactions into the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand recognizes it will need a method for addition. The back-end logic then adds the numbers\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etogether, and returns\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e9\u003c/code\u003e. The front-end/user interface logic can then display this result to the user:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Tuesday/result-displayed-from-calculator.png\" alt=\"result-displayed-from-calculator.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1687\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eUser interface/front-end logic handles interacting with the user; including displaying or gathering information. The business/back-end logic handles calculating or manipulation information 'behind the scenes'.\u003c/p\u003e\r\n\u003ch3\u003eSeparation of Logic\u003c/h3\u003e\r\n\u003cp\u003eRemember, we want to write clean, well-organized code.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eBecause user interface and business logics have separate purposes, their code should always be separate\u003c/strong\u003e. So far, we've only written business logic, so we don't have much to worry about. But keep this rule in mind as we begin to explore user interface logic with jQuery in the coming lessons.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eAlso, it's okay if everything we discussed isn't entirely clear right now. Just understand the basic differences between these two logics, and know they should be separate. Throughout the week we will see what this actually looks like in practice. By keeping this basic information in mind before we write more complex JavaScript, you'll learn the most professional practices from the very beginning!\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eYou may check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://blog.teamtreehouse.com/i-dont-speak-your-language-frontend-vs-backend\" target=\"_blank\"\u003ethis blog by Treehouse\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor more information on front-end vs back-end in the context of web development.\u003c/p\u003e","exportId":"monday-business-and-user-interface-logic"},{"id":92,"title":"Monday: Calculator: Business Logic","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that we can write custom JavaScript functions, let's create a simple calculator application! We'll begin with the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eback-end\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebusiness logic\u003c/strong\u003e, and focus first on creating the ability to add numbers together. We'll later include subtraction, multiplication and division, and later add the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003euser interface\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efront-end\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003elogic.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eBecause we've not yet learned about user interface/front-end logic, the difference between front-end logic and back-end logic (or business and user interface logics) might not feel very clear. This is okay! For now, simply know that what we're creating here is business, or back-end logic because it handles the core functionality and computations of the application. In the future we'll learn about jQuery and creating user interfaces, and we'll revisit the differences between the two types of logic.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's write the whole thing in JSFiddle first, then we'll transfer it into our own project.\u003c/p\u003e\r\n\u003ch3\u003eDefining an Addition Function\u003c/h3\u003e\r\n\u003cp\u003eWe've already written an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, so let's use that as a starting point. Clear out your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJSFiddle \u003c/em\u003eJavaScript box and put in just your custom \u003ccode\u003eadd()\u003c/code\u003e function:\u003c/p\u003e\r\n\u003cpre\u003evar add = function(number1, number2) {\u003cbr\u003e  return number1 + number2;\u003cbr\u003e};\u003c/pre\u003e\r\n\u003cp\u003eAdd in a line at the bottom of your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJSFiddle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003escript, below the function definition. This line will call our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, passing it two arguments. The return value from that function is immediately passed to JavaScript's built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction. When the script is run, it should pop up a dialog box with the value that the \u003ccode\u003eadd()\u003c/code\u003e function returns when passed those two arguments.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e subtract = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\u003c/code\u003e\u003cbr\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 - number2;\r\n};\r\nalert(subtract(\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e));\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eGathering User Input\u003c/h3\u003e\r\n\u003cp\u003eNow we have a simple (addition-only) calculator, but it isn't very useful because we have to go in and modify the code every time we want to do a new calculation. Let's add in the ability to collect input from the user. Remember that we can collect input through the built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, which takes a string as an argument and returns a string containing the user's input.\u003c/p\u003e\r\n\u003cpre\u003evar add = function(number1, number2) {\u003cbr\u003e  return number1 + number2;\u003cbr\u003e};\u003cbr\u003evar number1 = prompt(\"Enter a number:\");\u003cbr\u003ealert(number1);\u003c/pre\u003e\r\n\u003cp\u003eNot very exciting. All we did was echo back to the user what they entered. But let's ask for two inputs and then use them as arguments to our function.\u003c/p\u003e\r\n\u003cpre\u003evar add = function(number1, number2) {\u003cbr\u003e  return number1 + number2;\u003cbr\u003e};\u003cbr\u003evar number1 = prompt(\"Enter a number:\");\u003cbr\u003evar number2 = prompt(\"Enter another number:\");\u003cbr\u003ealert(add(number1, number2));\u003c/pre\u003e\r\n\u003ch3\u003eParsing Integers\u003c/h3\u003e\r\n\u003cp\u003eOops. We have the problem we previously encountered where the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction returns strings, so the \u003ccode\u003e+\u003c/code\u003e operator we use inside of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction concatenates the two strings together rather than doing what we want. Because our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction expects numbers as arguments rather than strings, we must convert the inputs into numbers before calling our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction.\u003c/p\u003e\r\n\u003cpre\u003evar add = function(number1, number2) {\u003cbr\u003e  return number1 + number2;\u003cbr\u003e};\u003cbr\u003evar number1 = parseInt(prompt(\"Enter a number:\"));\u003cbr\u003evar number2 = parseInt(prompt(\"Enter another number:\"));\u003cbr\u003ealert(add(number1, number2);\u003c/pre\u003e\r\n\u003cp\u003eNow we're getting somewhere! In the next exercise, you'll add in support for subtraction, multiplication and division, but first let's move this code into a project so that we can save it and build on it without having to use JSFiddle.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not exit JSFiddle yet.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the next lesson we'll migrate the code we've created here in JSFiddle into a new project directory in Atom.\u003c/p\u003e","exportId":"monday-calculator-business-logic-2"},{"id":1970,"title":"Monday: Calculator Business Logic","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal: \u003c/strong\u003eContinue to practice writing JavaScript functions by beginning the business logic for a calculator app. Eventually, we'll add user interface logic too, and familiarize ourselves with the differences between code for each, and how to keep them separated and organized.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between business and user interface logic?\u003c/li\u003e\r\n\u003cli\u003eWhat's another word for business logic? What about user interface logic?\u003c/li\u003e\r\n\u003cli\u003eHow do you provide a function multiple arguments?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eCalculator\u003c/h3\u003e\r\n\u003cp\u003eFollow along with the previous lesson to begin building a calculator app. Once you've written the code detailed in that lesson, create a project and migrate your code from JSFiddle into Atom by doing the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a \u003cem\u003ecalculator\u003c/em\u003e project folder on your computer.\u003c/li\u003e\r\n\u003cli\u003eInitialize a git repository in your newly created project folder.\u003c/li\u003e\r\n\u003cli\u003eCreate \u003cem\u003ejs\u003c/em\u003e and css folders in your project folder.\u003c/li\u003e\r\n\u003cli\u003eCreate an empty \u003cem\u003escripts.js file\u003c/em\u003e in your project's \u003cem\u003ejs\u003c/em\u003e subdirectory.\u003c/li\u003e\r\n\u003cli\u003eCopy the code from your JSFiddle into your \u003cem\u003escripts.js\u003c/em\u003e file to save it.\u003c/li\u003e\r\n\u003cli\u003eCreate an HTML file in your project directory and include in it a link to your scripts file: \u0026lt;script src=\"js/scripts.js\"\u0026gt;\u0026lt;/script\u0026gt; (see below for example HTML file)\u003c/li\u003e\r\n\u003cli\u003eAdd a \u003cem\u003eREADME.md\u003c/em\u003e file.\u003c/li\u003e\r\n\u003cli\u003eAdd everything to your local git repository and commit the changes.\u003c/li\u003e\r\n\u003cli\u003eCreate a calculator repository on GitHub and push your project to GitHub.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eExample\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHTML\u003c/em\u003e file:\u003c/p\u003e\r\n\u003cpre\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;Calculator\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Calculator\u0026lt;/h1\u0026gt;\u003cbr\u003e    \u0026lt;script src=\"js/scripts.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt;\u003c/pre\u003e\r\n\u003cp\u003eExample\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejavascript\u003c/em\u003e file:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003evar add = function(number1, number2) {\u003cbr\u003e  return number1 + number2;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003evar number1 = parseInt(prompt(\"Enter a number:\"));\u003cbr\u003evar number2 = parseInt(prompt(\"Enter another number:\"));\u003cbr\u003evar result = add(number1, number2);\u003cbr\u003ealert(result);\u003c/pre\u003e\r\n\u003cp\u003eIf you open your HTML file in the web browser, it should run your code just like it did on JSFiddle; popping up prompt boxes for input and then an alert with the calculated result. If this isn't working, check that you correctly link to your \u003cem\u003escripts.js\u003c/em\u003e file and that your scripts file includes both the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and code that actually calls that function. If something on your page isn't working right, an excellent initial troubleshooting step is to check the JavaScript Console to see if there are any helpful error messages that might point you in the right direction.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eNext, create functions to\u003cspan\u003e \u003c/span\u003e\u003cem\u003esubtract\u003c/em\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003emultiply\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003edivide\u003c/em\u003e. Verify that all four work by changing the line near the bottom of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(currently reads\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar result = add(number1, number2);\u003c/code\u003e) to call different functions. For now, you must manually change that line to choose between operations. In upcoming lessons we'll build a user interface for our calculator so that the user can choose between addition, subtraction, multiplication and division.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not build out the user interface yet. For now just focus on the business logic\u003c/strong\u003e.\u003c/p\u003e\r\n\u003ch3\u003eAdditional Custom Functions Practice\u003c/h3\u003e\r\n\u003cp\u003e(You can do these in JSFiddle)\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWrite a function that calculates body mass index (BMI) using two arguments. Then write another function that prompts the user for their height and weight, uses the BMI function and alerts the user of their BMI. \u003ca href=\"https://www.nhs.uk/common-health-questions/lifestyle/how-can-i-work-out-my-body-mass-index-bmi/\"\u003eClick here\u003c/a\u003e for information on BMI calculation.\u003c/li\u003e\r\n\u003cli\u003eWrite a function that converts temperature between Celsius and Fahrenheit. \u003ca href=\"https://www.rapidtables.com/convert/temperature/how-celsius-to-fahrenheit.html\"\u003eClick here\u003c/a\u003e for information on temperature conversion.\u003c/li\u003e\r\n\u003cli\u003eWrite functions to be used by a cooking app that converts between units. For example, a function that converts gallons to liters. Create a project for this like you did for the calculator so that you can return and build a front-end for this later.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003e\u003cem\u003eIf (and only if) you finish today's lessons and exercises with time to spare, spend the rest of your day exploring the following additional content. Do not worry about mastering regular expressions - remember that the goal for today is to practice using JavaScript.\u003c/em\u003e\u003c/p\u003e\r\n\u003ch3\u003eRegular Expressions\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eRegular Expressions\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare search strings used to locate and manipulate content that matches a particular pattern.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHere is an example of a variable set to a regular expression:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sample_regex = \u003cspan class=\"hljs-regexp\"\u003e/moringaschool/gi\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe characters between the / slashes represent the regular expression. The characters following the regular expression,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egi\u003c/code\u003e, are modifiers. The g stands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"global\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand the \"i\" stands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecase-insensitive\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's try it out:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eGo to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://regex101.com/\" target=\"_blank\"\u003eRegular Expressions 101\u003c/a\u003e.\u003c/li\u003e\r\n\u003cli\u003eIn the Test String area, add this string: This is a big ol' long string with the word, Moringa, in it. We'll also add school, School, SCHooL and SchOOL just for searching fun.\u003c/li\u003e\r\n\u003cli\u003eIn the Regular Expression fields, add \"Moringaschool\" between the slashes / MoringaSchool /.\u003c/li\u003e\r\n\u003cli\u003eNotice that all lowercase\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMoringaSchool\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eappears in blue in the Test String area. This indicates a match with the pattern of the regular expression.\u003c/li\u003e\r\n\u003cli\u003eTry adding the i modifier. What happens?\u003c/li\u003e\r\n\u003cli\u003eTry adding the g modifier now. What happens?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTo learn all of the characters used when creating regular expressions, visit the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" target=\"_blank\"\u003eMDN documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eor just experiment on the Regex101 site paying attention the explanation area for what is happening. To use regular expressions to find and replace text that matches patterns, try using the built-in JavaScript method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.replace()\u003c/code\u003e. Here's an example from MDN that you can try in JSFiddle:\u003c/p\u003e\r\n\u003cpre\u003evar str = 'Twas the night before Xmas...';\u003cbr\u003evar newstr = str.replace(/xmas/i, 'Christmas');\u003cbr\u003ealert(newstr);\u003c/pre\u003e\r\n\u003cp\u003eTo practice how regular expressions create patterns, see how far you can get in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://regexcrossword.com/\" target=\"_blank\"\u003eRegex Crossword\u003c/a\u003e.\u003c/p\u003e","exportId":"monday-calculator-business-logic"},{"id":1971,"title":"Tuesday: Control Flows","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf you think about what we've been doing so far, we've been writing instructions for computers. That's all programming really is: a list of instructions for computers. The main difficulty of being a developer is translating our ideas in human-speak into ideas in computer-speak.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn this lesson, we will start to learn how we can ask JavaScript to think like us and make decisions like us.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's start with human-speak. Many decisions we make everyday boil down to this sentence in some form:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"If something is true, let's do option 1, or else, if it is false, let's do option 2.\"\u003c/span\u003e\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis sentence looks fairly similar when we write it with JavaScript. See for yourself:\u003c/span\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003evar\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e enoughSleep = \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eif\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (enoughSleep) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"I'm ready to go!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e} \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eelse\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"I need a nap.\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis code is called an\u003c/span\u003e\u003cstrong\u003e if/else statement\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e, or \u003c/span\u003e\u003cstrong\u003ebranching\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Here's how it works. If the variable \u003ccode\u003eenoughSleep\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is true, JavaScript will run the first code block and print \"I'm ready to go!\" to the console. Otherwise (else), the other code block will run and \"I need a nap.\" will print.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003eif\u003c/code\u003e statements are made of the keyword \u003ccode\u003eif\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, followed by a condition in parentheses. The condition must evaluate to either true or false. If the condition is true, then the code block following the condition is executed. Otherwise, JavaScript moves on. The else block does not need a condition because it acts as a catch-all for the if statement - the code inside of the else block will run if the if condition is false.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn general, JavaScript code runs from top to bottom, kind of like a car driving straight down the road. When the car encounters an if statement, it is like encountering a split in the road. You can't take both paths - if the condition is true, the car turns down the path and the \u003ccode\u003eif\u003c/code\u003e code runs; otherwise the car keeps going down its current path and the \u003ccode\u003eelse\u003c/code\u003e code runs.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe \u003ccode\u003eif\u003c/code\u003e condition must evaluate to either true or false - this means that we can use an expression in the parentheses. It does not need to be a single variable like in the previous example. if/else statements are even more powerful when we use comparison operators (for example, greater than \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and less than \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e), like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003evar\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e temperature = \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e30\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt; undefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e if (temperature \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt; 20) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e    console.log(\"Don't forget a jacket!\");\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e} else {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e    console.log(\"Keep cool today!\");\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the code above, we create a variable named \u003ccode\u003etemperature\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and set it equal to 30. Then we write our if/else statement: If the value of \u003ccode\u003etemperature\u003c/code\u003e is less than 20, print \"Don't forget a jacket!\". Else (that is to say, if the temperature is greater than 20), print \"Keep cool today!\". Because temperature equals 30, the message \"Keep cool today!\" logs to the console.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat if we want more conditions? After all, there is a huge range of temperatures to prepare for, not just hot and cold! We can add another condition with \u003ccode\u003eelse if\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Let's see how it fits into our current \u003ccode\u003eelse if\u003c/code\u003e statement:\u003c/span\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eif\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (temperature \u0026lt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e15\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Don't forget a jacket!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e} \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eelse\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eif\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (temperature \u0026lt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e25\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Have a nice day :)\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e} \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eelse\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Keep cool today!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003eelse if\u003c/code\u003e is just like an alternate \u003ccode\u003eif\u003c/code\u003e. It also has a condition to be checked in parenthesis next to it, and if that condition is true then the code in curly braces following it runs. But\u003ccode\u003e else if\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e's condition is only checked when the \u003ccode\u003eif\u003c/code\u003e condition has already been found to be false.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFor example, let's set our \u003ccode\u003etemperature\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e variable equal to 23 and run the code. When JavaScript hits the first if statement, it checks the condition. Is \u003ccode\u003etemperature\u003c/code\u003e less than 15? No: \u003ccode\u003etemperature\u003c/code\u003e is 23, so the condition is false. JavaScript proceeds and skips the code block containing \u003ccode\u003econsole.log(\"Don't forget a jacket!\")\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and goes to the next condition in the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eelse\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eif\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Is temperature less than 25? Yes, 23 is less than 25. The condition evaluates to true and the code block with the line\u003ccode\u003e console.log(\"Have a nice day :)\");\u003c/code\u003e runs. Then the if statement is complete and JavaScript moves on and skips the else code block.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can add as many\u003ccode\u003e else if\u003c/code\u003e statements as we like. For example, let's say we want to print a warning when the weather is extremely cold:\u003c/span\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eif\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (temperature \u0026lt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e0\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Brr! Don't freeze out there!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e} \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eelse\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eif\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (temperature \u0026lt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e15\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Don't forget a jacket!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e} \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eelse\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eif\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (temperature \u0026lt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e25\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Have a nice day :)\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e} \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eelse\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Keep cool today!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe step through this sequence in the same way: first we check if \u003ccode\u003etemperature\u003c/code\u003e is less than 0, and if it's not, then we check if it's less than 15, and so on.\u003c/span\u003e\u003c/p\u003e","exportId":"tuesday-control-flows"},{"id":2055,"title":"Tuesday: Control flows practice","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003cspan style=\"font-size: 24pt;\"\u003eWarm Up\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003eGoal: In the Control flows we have learnt different control flows techniques such as if and else statements:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDescribe the \u003cem\u003eif\u003c/em\u003e and \u003cem\u003eif-else\u003c/em\u003e statements. What types of expressions can be used as conditions?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 36pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003eCode\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003eEven Number calculator\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003eUsing the if and else statement in JSfiddle, Create a simple calculator that calculates if a number is even or not. \u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003eCafe\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003eUsing if and else statements, create a simple program that prompts you to choose between coffee and tea. \u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003eCafe Reloaded \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003eBasing on the previous practice question on cafe, build on it by including more foods where the program program prompts you to choose a food variety. Here is an example of how the program should work:\u003cbr\u003e\u0026lt; What food would you like to be served?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003e\u0026gt; Burger\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003e\u0026lt;Here is some burger for you. Anything else?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003e\u0026gt; No\u003cbr\u003e\u0026lt;Thanks you for choosing us\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003eGrader \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003eYou are provided with the following grade score table, \u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e100 - 80\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e79 - 60\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eB\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e59 - 40\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eC\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e39 - 20\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eD\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e20 - 0\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eE\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eUsing \u003ca href=\"https://jsfiddle.net/\"\u003eJSFiddle\u003c/a\u003e, Write a program that calculates the following grades. Pass a score then calculate the score using control flows \u003cbr\u003e\u003cbr\u003e \u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","exportId":"tuesday-control-flows-practice"},{"id":1972,"title":"Tuesday: Logical Operators","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSo far, we've been able to translate some of our decisions into code with comparisons such as \"Are these things equal?\" with \u003ccode\u003e===\u003c/code\u003e and \"Is this thing greater than this other thing?\" with \u003ccode\u003e\u0026gt;\u003c/code\u003e. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can make our decisions more complex by adding multiple comparisons to the mix. If we want to say \"Both of these things\" or \"Either of these things\", we can translate those statements into JavaScript with \u003cstrong\u003elogical operators\u003c/strong\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHere are different logical operators and what they mean.\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e: both of these things must be true\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e||\u003c/code\u003e: either of these things may be true\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFor example, let's expand on the example from the previous lesson and turn it into an application that will tell us what to wear based on the weather. We'll start with the first \u003ccode\u003eelse if\u003c/code\u003e, which tells us to wear a jacket if the temperature is low. We should wear a jacket if it's cold out - but we should also wear one if it's raining. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's also create a variable named \u003ccode\u003eraining\u003c/code\u003e for whether or not it's raining. Because there are two possibilities (either it's raining or it's not raining), \u003ccode\u003eraining\u003c/code\u003e will be a boolean.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003evar temperature = 10;\u003cbr\u003evar raining = true;\u003cbr\u003eif (temperature \u0026lt; 0) {\u003cbr\u003e  console.log(\"Brr! Don't freeze out there!\");\u003cbr\u003e} else if (temperature \u0026lt; 15 \u0026amp;\u0026amp; raining === true) {\u003cbr\u003e console.log(\"Don't forget a jacket!\");\u003cbr\u003e} else if (temperature \u0026lt; 25) {\u003cbr\u003e console.log(\"Have a nice day :)\");\u003cbr\u003e} else {\u003cbr\u003e console.log(\"Keep cool today!\");\u003cbr\u003e}\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen we run this code, \"Don't forget a jacket!\" print to the console because \u003ccode\u003etemperature\u003c/code\u003e is less than 15, and \u003ccode\u003eraining\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eChange the temperature to 16 and run the code again. The code skips all the way to the \u003ccode\u003eelse\u003c/code\u003e statement to print \"Keep cool today!\". However, I think that \"Don't forget a jacket!\" is still an appropriate message for this weather - it should print if \u003ccode\u003etemperature\u003c/code\u003e is less than 15 _or_ if it's raining. Here is how we would use the **OR** operator to accomplish this (I've used an ellipsis \u003ccode\u003e...\u003c/code\u003e in the following code snippet to make the code sample shorter):\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e} else if (temperature \u0026lt; 15 || raining === true) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  console.log(\"Don't forget a jacket!\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can add as many statements with logical operators as we need. For example, we can add a condition to make sure that the message \"Don't forget a jacket\" will not print if the temperature is greater than 25:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e} else if (temperature \u0026lt; 15 || raining === true) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  console.log(\"Don't forget a jacket!\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNote: \u003ccode\u003eif/else\u003c/code\u003e statements check the \"true-ness\" or \"false-ness\" of an expression, so we can simplify the condition like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e} else if (temperature \u0026lt; 15 || raining) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  console.log(\"Don't forget a jacket!\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThere's no need to say \u003ccode\u003eraining === true\u003c/code\u003e because \u003ccode\u003eraining\u003c/code\u003e by itself evaluates to true.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThere's one more operator that we haven't mentioned: the \u003ccode\u003e!\u003c/code\u003e (pronounced \"bang\") or \u003cstrong\u003enot\u003c/strong\u003e operator. To see how it works, let's pretend that we want to change the above code to execute if \u003ccode\u003eraining === false\u003c/code\u003e. Here's how we could use \u003ccode\u003e!\u003c/code\u003e to say the same thing:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e} else if (temperature \u0026lt; 15 || ! raining) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  console.log(\"Don't forget a jacket!\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHere is a table of various operations with logical operators for reference:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cimg src=\"viewer/files/Screenshot%20from%202018-07-29%2018-56-00.png\" alt=\"Logical operators table\" width=\"511\" height=\"157\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/6848\" data-api-returntype=\"File\"\u003e\u003c/span\u003e\u003c/p\u003e","exportId":"tuesday-logical-operators"},{"id":2057,"title":"Tuesday: Practice - Control Flows with Logical Operators ","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Now that we have learned how to use control flows with \u003ccode\u003eif/else\u003c/code\u003e statements, and how to make logical decisions using \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, \u003ccode\u003e||\u003c/code\u003e, and \u003ccode\u003e!\u003c/code\u003e, let's put them together to further our understanding of both and make even more complex decisions.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003eDiscuss the following with your partner:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator and how do we use it?\u003c/li\u003e\r\n\u003cli\u003eWhat is the \u003ccode\u003e||\u003c/code\u003e and how do we use it?\u003c/li\u003e\r\n\u003cli\u003eWhat about the \u003ccode\u003e!\u003c/code\u003e operator?\u003c/li\u003e\r\n\u003cli\u003eWhat does the following statement check for? \u003ccode\u003eif (apples === 1 \u0026amp;\u0026amp; oranges === 1 || bananas === 2)\u003c/code\u003e\u003ccode\u003e\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eWhat Should I Wear Today?\u003c/h3\u003e\r\n\u003cp\u003eExtend on the weather app from the previous lessons so that the user can enter information about the day's weather (temperature, is it raining, and so on), and the app tells them what they should wear.\u003c/p\u003e\r\n\u003ch3\u003ePersonality Quiz\u003c/h3\u003e\r\n\u003cp\u003eAre you familiar with personality quizzes, where you can answer a series of questions and you learn something about your personality? \u003ca href=\"https://www.buzzfeed.com/quizzes/personality\"\u003eBuzzfeed has plenty of examples\u003c/a\u003e. Create a personality quiz that asks users some questions, and based on those answers, tells them something about their personality.\u003c/p\u003e\r\n\u003cp\u003eExample: Which pet should you get?\u003c/p\u003e\r\n\u003cp\u003eQuestion 1: \"Are you introverted or extroverted?\"\u003c/p\u003e\r\n\u003cp\u003eQuestion 2: \"Do you like the indoors or outdoors?\"\u003c/p\u003e\r\n\u003cp\u003eBased on these answers, the quiz could return \"cat\", \"dog\", \"both\", or \"neither\". \u003c/p\u003e\r\n\u003cp\u003eThis is just one example - get as creative and as complicated as you want!\u003c/p\u003e","exportId":"tuesday-practice-control-flows-with-logical-operators"},{"id":1973,"title":"Wednesday: JavaScript Arrays","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eUntil now, we've always dealt with one piece of information at a time: one number, one string, and so on. But often, we need to group things together. For example, what if we wanted to have a list of the months of the year? We'd use an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003earray\u003c/strong\u003e, which is just a list of things grouped together. An array looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e months = [\u003cspan class=\"hljs-string\"\u003e\"january\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"february\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"march\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"april\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"may\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"june\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"july\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"august\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"september\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"november\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"december\"\u003c/span\u003e];\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere are some more arrays for you to try in the JavaScript console:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode class=\"\"\u003e[2, 5, 7, 3423, 85, 65]\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode class=\"\"\u003e[\"e\", \"p\", \"i\", \"c\", \"o\", \"d\", \"u\", \"s\"]\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode class=\"\"\u003e[\"word\", 45, \"blah\", 123]\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eYou can put variables and expressions in your arrays, or even other arrays:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e variable = \u003cspan class=\"hljs-string\"\u003e\"I'm a variable!\"\u003c/span\u003e;\r\n\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e things = [variable, \u003cspan class=\"hljs-string\"\u003e\"I'm not a variable!\"\u003c/span\u003e];\r\n\u0026gt; things;\r\n[\u003cspan class=\"hljs-string\"\u003e\"I'm a variable!\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"I'm not a variable!\"\u003c/span\u003e]\r\n\r\n\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e numbers = [\u003cspan class=\"hljs-number\"\u003e62\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e62\u003c/span\u003e / \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e];\r\n\u0026gt; numbers;\r\n[\u003cspan class=\"hljs-number\"\u003e62\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e31\u003c/span\u003e]\r\n\r\n\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e confusingAssortmentOfThings = [\u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e123\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"another string\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e456\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e321\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"yet another string\"\u003c/span\u003e];\r\n\u0026gt; confusingAssortmentOfThings;\r\n[\u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e123\u003c/span\u003e, \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e321\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"yet another string\"\u003c/span\u003e]\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e(That\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eArray[2]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust means that this element of the \u003ccode class=\"hljs javascript\"\u003econfusingAssortmentOfThings\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray is itself an array containing 2 elements. More on this later.)\u003c/p\u003e\r\n\u003cp\u003eJust like numbers and strings, arrays have methods. Here are a couple for you to start with:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e fruits = [\u003cspan class=\"hljs-string\"\u003e\"apple\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"orange\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"passion fruit\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"kiwi\"\u003c/span\u003e];\r\n\u0026gt; fruits.pop();\r\n\u003cspan class=\"hljs-string\"\u003e\"kiwi\"\u003c/span\u003e\r\n\u0026gt; fruits;\r\n[\u003cspan class=\"hljs-string\"\u003e\"apple\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"orange\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"passion fruit\"\u003c/span\u003e]\u003cbr\u003e\u003c/code\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e numbers = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e];\r\n\u0026gt; numbers.reverse();\u003cbr\u003e[\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]\r\n\u0026gt; numbers;\r\n[\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote that both the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.pop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.reverse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods change the array on which they're called. The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.pop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod removes the last item from the array AND\u003cspan\u003e \u003c/span\u003e\u003cem\u003ereturns\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eit. The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.reverse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod reverses the order of items in the array and returns that reversed array.\u003c/p\u003e\r\n\u003cp\u003eWe can also add elements to an array, or combine two arrays:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e\u0026gt; var greetings = [];\r\n\u0026gt; greetings.\u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e);\r\n\u0026gt; greetings.\u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'hello'\u003c/span\u003e);\r\n\u0026gt; greetings;\r\n[\u003cspan class=\"hljs-string\"\u003e\"hi\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e]\r\n\u0026gt; greetings.concat([\u003cspan class=\"hljs-string\"\u003e'hola'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'buenos dias'\u003c/span\u003e]);\r\n[\u003cspan class=\"hljs-string\"\u003e\"hi\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hola\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"buenos dias\"\u003c/span\u003e]\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote that while\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.push()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eadds an element to an array, the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.concat()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod doesn't actually change the original array, but rather returns a new array that combines the two. The \u003ccode class=\"hljs perl\"\u003egreetings\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray still only contains the 2 elements pushed on to it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e\u0026gt; greetings;\r\n[\u003cspan class=\"hljs-string\"\u003e\"hi\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e]  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you want to access an element from an array, the syntax is a bit different from anything we've seen before:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e letters = [\u003cspan class=\"hljs-string\"\u003e'e'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'p'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'i'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'c'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'o'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'd'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'u'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e's'\u003c/span\u003e];\r\n\u0026gt; letters[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]\r\n\u003cspan class=\"hljs-string\"\u003e\"e\"\u003c/span\u003e\r\n\u0026gt; letters[\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e]\r\n\u003cspan class=\"hljs-string\"\u003e\"o\"\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJust like with strings, we count array elements starting with zero. So the zeroth element of the array is \u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-string\"\u003ee\u003c/span\u003e\u003c/code\u003e, and the fourth element is \u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-string\"\u003eo\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eNote that it is conventional for array variable names to be plural, thereby making it clear that the variable refers to a collection of things rather than a single thing. Following this convention will help with debugging your own code as well as making your code clearer for others.\u003c/p\u003e\r\n\u003cp\u003eCheck out the MDN documentation for\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Mutator_methods\" target=\"_blank\"\u003eMutator\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Accessor_methods\" target=\"_blank\"\u003eAccessor\u003c/a\u003e\u003cspan\u003e \u003c/span\u003emethods, and experiment using these methods on your own.\u003c/p\u003e","exportId":"wednesday-javascript-arrays"},{"id":1974,"title":"Wednesday: Array Methods","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eComparing Arrays\u003c/h2\u003e\r\n\u003cp\u003eUnlike other data types we've seen so far, it is not possible to compare two arrays by using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e===\u003c/code\u003e comparison operator. In JavaScript, two primitive data type values can be the equal. For example, \u003ccode class=\"\"\u003e\"abc\"\u003c/code\u003e is the same as any other \u003ccode class=\"\"\u003e\"abc\"\u003c/code\u003e. But arrays are different -\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eno two arrays are the same, even if they have the same elements inside\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eIf you need to compare the\u003cspan\u003e \u003c/span\u003e\u003cem\u003econtents\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof two arrays, one way to accomplish this is to transform the arrays into strings using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etoString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction on each and comparing the return values. This will work when the elements are all data types that we have worked with previously, such as strings, numbers, and booleans.\u003c/p\u003e\r\n\u003cp\u003eTry this example in the console:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e a = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e]\r\n\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e b = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e]\r\n\u0026gt; a === b\r\n\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n\u0026gt; a.toString();\r\n\u003cspan class=\"hljs-string\"\u003e\"1,2,3\"\u003c/span\u003e\r\n\u0026gt; a.toString() === b.toString();\r\n\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eCloning Arrays\u003c/h2\u003e\r\n\u003cp\u003eHere is another scenario where arrays may operate differently than we expect.\u003c/p\u003e\r\n\u003cp\u003eSuppose we have an array, and we want to keep in its original form, but we also need to manipulate in some ways. We might have one variable hold the original array and another variable with a copy of the same array that we can change.\u003c/p\u003e\r\n\u003cp\u003eTry this in the console:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e\u0026gt;var originalArray = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\u0026gt; originalArray\r\n[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\u0026gt;var \u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray = originalArray\r\n\u0026gt;\u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray\r\n[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\u0026gt;\u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray.push(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e)\r\n\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e\r\n\u0026gt;\u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray\r\n[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e]  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhat does\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eoriginalArray\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elook like now? We haven't touched it, so we may assume it would retain its original value of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e[1,2,3,4,5]\u003c/code\u003e. But if we check it again in the console, we see:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs css\"\u003e\u0026gt; \u003cspan class=\"hljs-tag\"\u003eoriginalArray\u003c/span\u003e\r\n\u003cspan class=\"hljs-attr_selector\"\u003e[1, 2, 3, 4, 5, 6]\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn JavaScript, the array is stored in memory, and the two variables\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eoriginal_array\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eclone_array\u003c/code\u003eare called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epointers\u003c/strong\u003e. A pointer references an object in memory but is\u003cspan\u003e \u003c/span\u003enot\u003cspan\u003e \u003c/span\u003ethe object itself. Therefore, as the array is changed, the new value is reflected in all of the variables that point to it.\u003c/p\u003e\r\n\u003cp\u003eThe way to clone an array\u003cspan\u003e \u003c/span\u003ewithout\u003cspan\u003e \u003c/span\u003esimply making another pointer is to create a new variable set to a new array:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003evar \u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray = originalArray.slice()\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis ensures that the new array really is an entirely separate entity, instead of simply a pointer to the original array.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003eFor more details on how the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eslice\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod works, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\" target=\"_blank\"\u003eMDN's Javascript documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eon the Array.prototype.slice method.\u003c/p\u003e","exportId":"wednesday-array-methods"},{"id":1975,"title":"Wednesday: Practice - JavaScript Arrays","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Arrays section, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eArrays can contain numbers, strings, variables, expressions and other arrays\u003c/li\u003e\r\n\u003cli\u003eArrays have methods like\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.pop()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.reverse()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.push()\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eHow to access an element from an array\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFamiliarize yourself with arrays by completing the exercises below by practicing creating and manipulating arrays in the JavaScript console.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a pointer? When might we see one when working with JavaScript arrays?\u003c/li\u003e\r\n\u003cli\u003eHow can we use square bracket notation to isolate a single element in an array? What does this notation look like?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.pop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.push()\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eWhat types of objects can be placed into a JavaScript array?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003ePlay around with arrays of your own by completing each of the following in the JavaScript console:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMake an array of your siblings' names or your favorite movie characters' names.\u003c/li\u003e\r\n\u003cli\u003eMake an array of your parents' names.\u003c/li\u003e\r\n\u003cli\u003eCombine these two arrays using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003econcat()\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eAdd your pets' names using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epush()\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eReverse the order of the array.\u003c/li\u003e\r\n\u003cli\u003eAccess one of your parents' names using the square bracket notation.\u003c/li\u003e\r\n\u003cli\u003eUpdate the name of one of your parents using the index and square bracket notation.\u003c/li\u003e\r\n\u003cli\u003eCheck out methods from the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype#Methods\" target=\"_blank\"\u003eMDN\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e(stick to the accessor and mutator methods sections). Try at least five of them.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"wednesday-practice-javascript-arrays"},{"id":1976,"title":"Wednesday: Looping in Arrays","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that you've got the basics of arrays under your belt, let's turn to a more advanced concept:\u003cspan\u003e l\u003c/span\u003e\u003cstrong\u003eooping\u003c/strong\u003e. Here's a very simple loop. Try it out in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsfiddle.net/\" target=\"_blank\"\u003eJSFiddle\u003c/a\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e languages = [\u003cspan class=\"hljs-string\"\u003e'HTML'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'CSS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'JavaScript'\u003c/span\u003e];\r\n  languages.\u003cspan class=\"hljs-keyword\"\u003eforEach\u003c/span\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(language)\u003c/span\u003e \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e'I love '\u003c/span\u003e + language + \u003cspan class=\"hljs-string\"\u003e'!'\u003c/span\u003e);\r\n  });\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's step through how this works:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate an array of strings.\u003c/li\u003e\r\n\u003cli\u003eCall the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on the array.\u003c/li\u003e\r\n\u003cli\u003ePass in a callback function to\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach\u003c/code\u003e, with a parameter called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguage\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eTake the first element in the array,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e'HTML'\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand assign it to\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguage\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003ePop up an alert that says you love HTML.\u003c/li\u003e\r\n\u003cli\u003eRepeat 4 and 5 for the other elements in\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguages\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch2\u003eAdding Numbers with Loops\u003c/h2\u003e\r\n\u003cp\u003eWe can use loops for more interesting problems, too. For example, we've written code to add two numbers, but what if we wanted to add an arbitrary amount of numbers?\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e total = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e summands = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e];\r\nsummands.\u003cspan class=\"hljs-keyword\"\u003eforEach\u003c/span\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(summand)\u003c/span\u003e \u003c/span\u003e{\r\n  total += summand;\r\n});\r\nalert(total);  \u003cspan class=\"hljs-comment\"\u003e// 15\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a variable named\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etotal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand set it to start out at 0. Each time through the loop we will increase its value so that this variable keeps track of the running total. The first time through the loop, the variable\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esummand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecomes 1, the second time it becomes 2, and so on.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/1nf3aey8izv87ej/forEach-loop-summands.png\" alt=\"forEach loop chart\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIt's conventional that an array name is\u003cspan\u003e \u003c/span\u003e\u003cem\u003eplural\u003c/em\u003e, and that the parameter to the function passed into\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehave a\u003cspan\u003e \u003c/span\u003e\u003cem\u003esingular name\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(e.g.,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esummands\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the array and\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esummand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the argument to the function). But for all JavaScript cares, the array\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esummands\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the argument to the function could be called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eapple\u003c/code\u003e, but that would make it slightly more difficult for other developers to pick up your code. Remember, we want to write clean, professional, easy-to-understand JavaScript.\u003ccode class=\"hljs javascript\"\u003e\u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003eYou might be getting tired of me pointing out the indentation, but I'm going to do it again because it's something worth taking your time to do right: everything inside the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is indented two spaces, because it's code that's inside the callback function, and everything in a function gets indented so that it's obvious what's\u003cspan\u003e \u003c/span\u003e\u003cem\u003ein\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe function and what's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoutside\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eit.\u003c/p\u003e","exportId":"wednesday-looping-in-arrays"},{"id":1977,"title":"Wednesday: Practice - Looping in Arrays","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Looping section, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow to use a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop\u003c/li\u003e\r\n\u003cli\u003eNaming conventions for arrays and the parameter in a loop\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAs you saw, loops can be really powerful! They're an incredibly important programming concept, and we'll be using them from here on out. Begin becoming comfortable utilizing loops by completing the exercises listed below. We'll begin with several exercises in the console and then move on to creating and updating small projects.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIf we used\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto loop through an array called \"kittens\", what should we call the parameter in the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction? Why?\u003c/li\u003e\r\n\u003cli\u003eWhat does the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e+=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator do?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eLooping Practice in the Console\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMake an array of your friends' names. Loop through it and\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ea greeting to each.\u003c/li\u003e\r\n\u003cli\u003eWrite a loop to multiply an arbitrary amount of numbers. This should look similar to the code to sum numbers from the lesson.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Information\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eRemember\u003c/strong\u003e: When choosing a name for the variables in your loop, remember that it is good practice to use a plural for the array and the singular form of that word for the loop.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e languages = [\u003cspan class=\"hljs-string\"\u003e'HTML'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'CSS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'JavaScript'\u003c/span\u003e];\r\n\u0026gt; languages.\u003cspan class=\"hljs-keyword\"\u003eforEach\u003c/span\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(language)\u003c/span\u003e \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e'I love '\u003c/span\u003e + language + \u003cspan class=\"hljs-string\"\u003e'!'\u003c/span\u003e);\r\n  });\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe array is named\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the parameter is the singular\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguage\u003c/code\u003e.\u003c/p\u003e","exportId":"wednesday-practice-looping-in-arrays"},{"id":1978,"title":"Wednesday: Array Mapping","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eWe just learned how to use the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to loop through every element of an array. Now let's briefly explore\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e, a frequently-used array method that allows us to loop through every element of an array and\u003cspan\u003e \u003c/span\u003e\u003cem\u003edo something\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto each element. Conveniently, the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod does not actually change the array it's called on, but it returns a new transformed array.\u003c/p\u003e\r\n\u003cp\u003eLet's say that we want to double every number in an array. We could do it with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis way:\u003c/p\u003e\r\n\u003cpre\u003evar numbers = [1,2,3,4,5];\u003cbr\u003evar doubledNumbers = [];\u003cbr\u003enumbers.forEach(function(number) {\u003cbr\u003e  doubledNumbers.push(number * 2);\u003cbr\u003e});\u003cbr\u003ealert(doubledNumbers);\u003c/pre\u003e\r\n\u003cp\u003eThis works fine, but by using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can make the intent clearer, and our code even cleaner:\u003c/p\u003e\r\n\u003cpre\u003evar numbers = [1,2,3,4,5];\u003cbr\u003e\u003cbr\u003evar doubledNumbers = numbers.map(function(number) {\u003cbr\u003ereturn number * 2;\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003ealert(doubledNumbers);\u003c/pre\u003e\r\n\u003cp\u003eHere instead of looping through an array, we're simply saying that we want to transform one array into another. Note that the original array has not been changed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs css\"\u003e\u0026gt; \u003cspan class=\"hljs-tag\"\u003edoubledNumbers\u003c/span\u003e;\r\n\u003cspan class=\"hljs-attr_selector\"\u003e[2, 4, 6, 8, 10]\u003c/span\u003e\r\n\u0026gt; \u003cspan class=\"hljs-tag\"\u003enumbers\u003c/span\u003e;\r\n\u003cspan class=\"hljs-attr_selector\"\u003e[1, 2, 3, 4, 5]\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe logic inside of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecan be as simple or as complicated as you want. Whatever you return will become the corresponding element of the new array. That is, when we say\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ereturn number * 2;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the example above, we're saying that each individual element of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray will be equivalent multiplying the corresponding element in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eold\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray by two.\u003c/p\u003e\r\n\u003cp\u003eSo, continuing with this example, the first element in the original array is 1. Since we're multiplying each element by 2 in the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, the first element in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray will be 2. The second element in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoriginal\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray is 2. So the second element in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray will be 4, and so on.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003eFor more information, check out the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"\u003e\u003cspan\u003e\u003c/span\u003emap entry\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ein the Mozilla Developer Network's JavaScript documentation.\u003c/p\u003e","exportId":"wednesday-array-mapping"},{"id":1979,"title":"Wednesday: Practice - Arrays","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: In the Array Mapping lesson we learned how to use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return a new array with some sort of manipulation or calculation performed on each element. Let's further hone our array mapping skills by completing the exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a callback function? How is it different from a plain ol' everyday function?\u003c/li\u003e\r\n\u003cli\u003eWhat portion of the following code is the callback function? What does this particular callback function do?\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tripledNumbers = numbers.map(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number * \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\r\n    });\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eDoes\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ealter the array it is called upon?\u003c/li\u003e\r\n\u003cli\u003eDiscuss with your partner when you would use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand when it might be better to use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eComplete the following in the JavaScript console or on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://jsfiddle.net/\" target=\"_blank\"\u003eJSFiddle\u003c/a\u003e:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMake an array of numbers, then use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return an array containing each of the original numbers + 1.\u003c/li\u003e\r\n\u003cli\u003eCreate an array of words. Use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return an array of the same words in all uppercase.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"wednesday-practice-arrays"},{"id":1980,"title":"Wednesday: Practice - forEach and Map","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: As we have seen, looping and mapping are powerful concepts that can manipulate large amounts of data relatively quickly. Practice each by completing the exercises below using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand/or\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eRemember,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eunderstanding\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis the goal here. You're absolutely not expected to complete everything listed on this page. In fact, there is often intentionally\u003cspan\u003e \u003c/span\u003e\u003cem\u003emore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtent than can reasonably be completed in a single day. (This also allows students an opportunity to later review concepts without having to repeat exercises they've previously done). Focus on understanding the concepts, not on speed.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e. When might you use one over another?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eGroceries\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate function that allows a user to input items they need at the store, separating each item with a comma.\u003c/li\u003e\r\n\u003cli\u003eWhen the user submits their grocery list, log each item to the console on a separate line. Make sure that the commas do not display in the console log.\u003c/li\u003e\r\n\u003cli\u003eIf you'd like to take this further, print the list in alphabetical order. \u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eHint: To do this, build an array of the inputted items. Read up on the \u003ca href=\"https://www.w3schools.com/jsref/jsref_split.asp\"\u003estring split method\u003c/a\u003e. Explore the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\"\u003earrays entry\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eof the Mozilla Developer Network JavaScript documentation to research what method might be used to sort arrays.\u003c/p\u003e\r\n\u003ch3\u003eWord Play\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a function where users may enter a sentence.\u003c/li\u003e\r\n\u003cli\u003eTurn that sentence into an array using the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\"\u003esplit method\u003c/a\u003e.\u003c/li\u003e\r\n\u003cli\u003eThen, loop through this array to build a\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray out of every word in the sentence that is 3 or more characters in length.\u003c/li\u003e\r\n\u003cli\u003eFinally, reverse the order of the new array,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\" target=\"_blank\"\u003ejoin\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eit back together into a string, and print it to the console.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eBuild a Deck\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop within another\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop to build an array representing a deck of cards. A deck consists of 52 cards - 13 ranks in each of 4 suits.\u003c/li\u003e\r\n\u003cli\u003eThen, display a list of every card in the deck. (Hint: Each element of the array should read something like \"ace of spades\" or \"4 of hearts\").\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThe start of your output should look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/uow14lm92e275xg/deck.png\" alt=\"deck\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003ch4\u003eFilter, Reduce\u003c/h4\u003e\r\n\u003cp\u003eLook into the Array\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\"\u003efilter\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\"\u003ereduce\u003c/a\u003e\u003cspan\u003e \u003c/span\u003emethods. Refactor some of the projects above to make use of these methods.\u003c/p\u003e\r\n\u003ch4\u003eWord Order\u003c/h4\u003e\r\n\u003cp\u003eCreate a function that lets users input a block of text and returns a list of all the unique words and how many times they appeared.\u003c/p\u003e\r\n\u003cp\u003eFor example, if the user inputs \"hello world world\", the console should show:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ehello 1\u003c/li\u003e\r\n\u003cli\u003eworld 2\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf you finish, and feel comfortable with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloops, try to complete the above exercise but instead order the list by the number of appearances - greatest to least. For words that appear the same amount of times, order by which word appeared first.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eHint (and sneak peek at next week): Try creating and playing with an object hash and its contents in the JavaScript console:\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e\u0026gt; words = {programming: \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, fun: \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e};\r\n\u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e {programming: \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, fun: \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e}\r\n\u0026gt; \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e.keys(words);\r\n[\u003cspan class=\"hljs-string\"\u003e\"programming\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"fun\"\u003c/span\u003e]\r\n\u0026gt; words.programming\r\n\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e\r\n\u0026gt; words.fun\r\n\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n\u0026gt; words.nothing\r\n\u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\nwords.fun\u0026gt;words.programming\r\n\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs the JavaScript business logic separate from the user interface logic?\u003c/li\u003e\r\n\u003cli\u003eAre variable names descriptive and easy to understand?\u003c/li\u003e\r\n\u003cli\u003eIs code properly indented throughout?\u003c/li\u003e\r\n\u003cli\u003eAre loops being used correctly? What about mapping?\u003c/li\u003e\r\n\u003cli\u003eAre there any loops that could instead be replaced with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e?\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"wednesday-practice-foreach-and-map"},{"id":1981,"title":"Wednesday: Looping with \"For\"","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eLet's continue with looping in Javascript.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a nice, easy-to-read, easy-to-understand method, but it's actually a pretty new addition to JavaScript. It also is limited for use on collections of information where processing iterates through each element in the collection. Let's take a look at a more traditional way of looping called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efor loop\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (var \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e \u0026lt;= \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\r\n  alert(\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e);\r\n}  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's how the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop works:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement takes three parameters: initialization, condition, and final expression.\u003c/li\u003e\r\n\u003cli\u003eThe initialization parameter lets you initialize a variable at the start of the \u003ccode class=\"\"\u003efor\u003c/code\u003e loop. In this case, we've initialized a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eindex\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat starts at 1. This is the starting place for the loop. The initialization parameter is executed\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe loop runs.\u003c/li\u003e\r\n\u003cli\u003eThe condition parameter tells the loop when to stop running - or more accurately when to keep running. The loop will stop when the condition is no longer true. In our example, when the index variable is NOT less than or equal to 3, the loop will stop. Until then, it will keep going. The condition is evaluated every time the loop runs.\u003c/li\u003e\r\n\u003cli\u003eThe final expression parameter usually changes the initial value in some way; often by incrementing or decrementing it. In our example, the index variable will be increased by 1\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter each time the loop is executed\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eEach time the loop runs, the code within the loop will pop up an alert with the number of the pass we're on (index).\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eHere's an example we saw in the last lesson re-written using a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop instead of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003evar languages = [\u003cspan class=\"hljs-string\"\u003e'HTML'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'CSS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Javascript'\u003c/span\u003e];\r\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (var \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e \u0026lt; languages.\u003cspan class=\"hljs-keyword\"\u003elength\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\r\n  alert(\u003cspan class=\"hljs-string\"\u003e'I love '\u003c/span\u003e + languages[\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e] + \u003cspan class=\"hljs-string\"\u003e'!'\u003c/span\u003e);\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThere is a new concept in this loop:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguages.length\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elength\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not a method. Notice it's missing the parentheses at the end. Length is a property on every array we create. Strings also have this property, e.g.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e'foobar'.length\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e languages = [\u003cspan class=\"hljs-string\"\u003e'HTML'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'CSS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Javascript'\u003c/span\u003e];\r\n\u0026gt; languages.length;\r\n\u003cspan class=\"hljs-number\"\u003e  3\u003c/span\u003e\r\n\u003cspan class=\"hljs-reserved\"\u003e\u0026gt; var\u003c/span\u003e school = \u003cspan class=\"hljs-string\"\u003e\"Moringa School\"\u003c/span\u003e;\r\n\u0026gt; school.length;\r\n  14  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we explore objects in the future, we will talk more about properties but for now, let's continue looping.\u003c/p\u003e\r\n\u003cp\u003eIn the \u003ccode class=\"\"\u003efor\u003c/code\u003e loop example above, we have an array containing 3 elements. When we first start the loop, we run our initialization statement (\u003ccode class=\"\"\u003evar index = 0\u003c/code\u003e), which creates a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eindex\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand initializes it with the value\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e0\u003c/code\u003e. We are now done with initialization, which only happens once, when we first enter the for loop. From now on the flow is:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCheck\u003cspan\u003e \u003c/span\u003econdition:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eindex \u0026lt; languages.length\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(continue to step 2 only if condition evaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etrue\u003c/code\u003e, otherwise exit out of the for loop)\u003c/li\u003e\r\n\u003cli\u003eExecute code block:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ealert('I love ' + languages[index] + '!');\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eExecute \"final expression\" update statement:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eindex += 1\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eRepeat, beginning with Step 1 above\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eThe first time through the loop index is 0, so languages[index] is \"HTML\". The second time through the loop index is 1, so languages[index] is \"CSS\". The third time through the loop index is 2, so \u003ccode class=\"hljs perl\"\u003elanguages[\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e]\u003c/code\u003e is \u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-string\"\u003e'Javascript'\u003c/span\u003e\u003c/code\u003e. The fourth time we try to enter the loop, \u003ccode class=\"hljs perl\"\u003e\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e\u003c/code\u003e is 3 which is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot less than\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguages.length \u003c/code\u003e(3), so we don't enter the loop again.\u003c/p\u003e\r\n\u003cp\u003eHere's a chart that may help illustrate the loop flow:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/1kh89c9j4hqbgif/for-loop-languages.png\" alt=\"for loop chart\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe previously used a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop to add all the elements of an array together. Let's rewrite that one too with a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003evar total = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\nvar summands = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e];\r\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (var \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e \u0026lt; summands.\u003cspan class=\"hljs-keyword\"\u003elength\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\r\n  total += summands[\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e];\r\n}\r\nalert(total); \u003cspan class=\"hljs-regexp\"\u003e//\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's a corresponding chart:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/ca68ui2w2q4wqx8/for-loop-summands.png\" alt=\"for loop summands charts\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNote that when\u003cspan\u003e \u003ccode class=\"hljs perl\"\u003e\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eis 0 here, \u003ccode class=\"hljs perl\"\u003esummands[\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e]\u003c/code\u003eis 1 because the first element of the array is 1.\u003cspan\u003e \u003ccode class=\"hljs perl\"\u003e\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eis just being used here to refer to which element of the array - it's a bit confusing in this case because the elements of the array are also numbers.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod would have worked just as well in those above cases, but sometimes you'll find yourself in situations where you need a regular\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop rather than a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop - for instance, when you need to run a loop a certain number of times, rather than looping over an array.\u003c/p\u003e\r\n\u003cp\u003eHere's a version of our sum code that uses a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop but doesn't require an array to loop through:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e total = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e currentNumber = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e; currentNumber \u0026lt;= \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e; currentNumber += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\r\n  total += currentNumber;\r\n}\r\nalert(\u003cspan class=\"hljs-string\"\u003e\"Total is: \"\u003c/span\u003e + total);\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen the loop begins we initialize our loop variable\u003cspan\u003e \u003ccode class=\"hljs coffeescript\"\u003ecurrentNumber\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eto 1. (Note that we could have used\u003cspan\u003e \u003ccode class=\"hljs perl\"\u003e\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eas the variable name here, but\u003cspan\u003e \u003ccode class=\"hljs coffeescript\"\u003ecurrentNumber\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eseems clearer since we'll be making use of the variable for something other than iterating through a loop; we'll be adding it to\u003cspan\u003e \u003ccode class=\"hljs coffeescript\"\u003etotal\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eeach time through the loop in addition to using it as an iterator.) We then execute our loop as long as\u003cspan\u003e \u003ccode class=\"hljs coffeescript\"\u003ecurrentNumber\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eis less than or equal to 5, iterating\u003cspan\u003e \u003ccode class=\"hljs coffeescript\"\u003ecurrentNumber\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eafter each run through the loop. Here's a chart showing the steps:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/uo80ur1fsffxl2e/for-loop-sum.png\" alt=\"for loop sum chart\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe first time through the loop,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 1, which is \u0026lt;= 5, so we go ahead and execute the statement in the code block:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etotal += currentNumber\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etotal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis now 1 after this first time through the loop. At the end of each time through the loop we're incrementing\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e, so\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis now 2.\u003c/p\u003e\r\n\u003cp\u003eThe second time through the loop,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 2, which is still \u0026lt;= 5, so again we execute\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etotal += currentNumber\u003c/code\u003e, setting total to 3. We again increment\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe third time through,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 3, so total now becomes 6. And we increment\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe fourth time through,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 4, so total becomes 10 and then we increment\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe fifth time through,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 5, so total becomes 15 and we increment\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe sixth time we try to start going through the loop,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 6, which is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026lt;= 5, so we're done with the for loop. We then show the user an alert that includes the total.\u003c/p\u003e","exportId":"wednesday-looping-with-for"},{"id":1982,"title":"Wednesday: Practice - Looping with For","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: In the Looping with For lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe three parameters of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elength\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty in JavaScript\u003c/li\u003e\r\n\u003cli\u003eHow to use a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop both with and without arrays\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePractice utilizing for loops in a variety of ways by completing the exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloops? Describe to your partner a specific case in which you would use one over the other.\u003c/li\u003e\r\n\u003cli\u003eHow does a for loop 'know' when to stop looping?\u003c/li\u003e\r\n\u003cli\u003eWhat else can we do with the value we initialize as the first parameter in a for loop?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eCount Up By\u003c/h3\u003e\r\n\u003cp\u003eCreate a program that takes two numbers - one to count to and another to determine what multiple to use to get there.\u003c/p\u003e\r\n\u003cp\u003eHere is some sample input:\u003c/p\u003e\r\n\u003cpre\u003eCount to: 30\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eCount by: 5\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOutput: 5, 10, 15, 20, 25, 30\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cbr\u003eCount to: 50\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eCount by: 7\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOutput: 7, 14, 21, 28, 35, 42, 49\u003c/pre\u003e\r\n\u003cp\u003eDon't forget to consider how to handle any input that might be submitted:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eempty values (user just presses enter)\u003c/li\u003e\r\n\u003cli\u003enon-numeric values\u003c/li\u003e\r\n\u003cli\u003enegative numbers\u003c/li\u003e\r\n\u003cli\u003ecount by number is larger than the count to numbers\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eTurn \u003ccode class=\"\"\u003eforEach\u003c/code\u003e into \u003ccode class=\"\"\u003efor\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eGo back to the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"modules/items/ic863191592517efb052fd0281588ce60\" target=\"_blank\"\u003elooping practice\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eproblems, and redo one of them with a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop instead of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop.\u003c/p\u003e\r\n\u003ch3\u003eWord Puzzle\u003c/h3\u003e\r\n\u003cp\u003eCreate a website that uses a method to replace vowels in a string with the dash symbol \"-\" to create a word puzzle to solve. Hide the original string when you show the resulting word puzzle, so that another person can try and guess it.\u003c/p\u003e\r\n\u003ch4\u003eExample:\u003c/h4\u003e\r\n\u003cp\u003e\u003cem\u003eString Input:\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\"Believe you can and you're halfway there. Robert Mugabe\"\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ePuzzle Output:\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\"B-l--v- y-- c-n -nd y--'r- h-lfw-y th-r-. R-b-rt M-g-b-\"\u003c/p\u003e\r\n\u003cp\u003eDo this\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewithout\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e\"regular expressions\".\u003c/p\u003e","exportId":"wednesday-practice-looping-with-for"},{"id":1983,"title":"Thursday: Behaviour Driven Development (BDD)","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eOne of the most difficult challenges facing us as developers is taking a problem we want to solve or a concept we want to realize and turning it into a set of specific programming tasks.\u003c/p\u003e\r\n\u003cp\u003eA common process to do this is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eBehavior-Driven Development\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(or\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Behavior-driven_development\" target=\"_blank\"\u003eBDD\u003c/a\u003e) and is used by developers across coding languages. In BDD, rather than thinking about the code first, the focus begins on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebehaviors\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat we want to see in our final application. We identify what the program\u003cspan\u003e \u003c/span\u003e\u003cem\u003eshould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edo before determining how to make it do it.\u003c/p\u003e\r\n\u003cp\u003eTo practice this, we'll imagine that we have been hired by a person born on February 29th. She would like to determine if any given year is a leap year (meaning it's a birthday year for her!). Here's a finished example of what she'd like:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%203%20Tuesday/leapyear.png\" alt=\"leapyear.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1798\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAnd after hitting a leap year.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%203%20Tuesday/leapyear_result.png\" alt=\"leapyear_result.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1797\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBefore we think about the programmatic elements, what\u003cspan\u003e \u003c/span\u003e\u003cem\u003eshould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea leap year program do? At its most basic, it will need to be able to take a year from the user and answer\u003cspan\u003e \u003c/span\u003e\u003cem\u003etrue\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003efalse\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the question: is this year a leap year? Our program will only be able to provide an answer once it successfully evaluates what the user provides as a year. Let's think of all of the possibilities we might get from a user and what the correct response should be for them.\u003c/p\u003e\r\n\u003ch2\u003eSpecifications\u003c/h2\u003e\r\n\u003cp\u003e\u003ca href=\"http://www.timeanddate.com/date/leapyear.html\" target=\"_blank\"\u003eTimeanddate.com\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eoffers us the 3 criteria that must be considered to determine if a year is a leap year:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe year is evenly divisible by 4;\u003c/li\u003e\r\n\u003cli\u003eIf the year can be evenly divided by 100, it is NOT a leap year, unless;\u003c/li\u003e\r\n\u003cli\u003eThe year is also evenly divisible by 400. Then it is a leap year.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTherefore, each time a user offers a year to evaluate, we will ultimately need to test the value against each of the leap year rules.\u003c/p\u003e\r\n\u003cp\u003eIn BDD, our next step is to generate examples of these rules one-by-one. These examples are also known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003especifications\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003especs\u003c/strong\u003e. We can create a table that helps us sort out the details of the specifications for each rule using the following pieces of information:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ethe behavior that we'll need to write code to handle\u003c/li\u003e\r\n\u003cli\u003ea sample of input that would demonstrate the behavior\u003c/li\u003e\r\n\u003cli\u003ethe expected output we'd get when the code is working correctly\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Week%203%20Tuesday/bdd-leap-year-grid.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"Leap year grid\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1897\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAlthough there are many other considerations for our final application (display, user interaction, form building, what if someone enters a letter?, etc), we will not worry about those until we have the core functionality in place. If we think of any additional functionality we need, we can add behaviors to our specification list as we go. When you code using BDD, it is good to get into the habit of making a note of all behaviors as you think of them, but staying focused on one task at a time.\u003c/p\u003e\r\n\u003cp\u003eLet's look at another example of specs organized on a table showing behavior, input and output.\u003c/p\u003e\r\n\u003ch3\u003eTitle Case\u003c/h3\u003e\r\n\u003cp\u003eIn this example, we want to build an application that will take a user's string of words and convert them to title case - capitalizing letters like we'd find in a book title. There are a few more rules for creating title-cased words from strings than Leap Year. Let's brainstorm the first several:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%203%20Tuesday/bdd-title-case-grid.png\" alt=\"bdd-title-case-grid.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1885\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs we did with the leap year application, we choose the simplest first - one word gets capitalized -\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ebeowulf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecomes\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eBeowulf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand go to the most complex. And as always, we may think of additional behaviors along the way: What if a user enters nothing? What about iPod or McDuff? Remember, let your brain keep brainstorming by adding new behaviors to your list but always stay focused on one specification at a time.\u003c/p\u003e","exportId":"thursday-behaviour-driven-development-bdd"},{"id":1985,"title":"Thursday: Practice - Leap Year, Pig Latin","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Focus on breaking your project down into small behavior examples and coding one behavior (also known as a \"specification\" or \"spec\") at a time. Make a list of specifications with input and output examples\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewriting any code. \u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003ePretend you have an application that counts the number of vowels in a string. This application has specs detailing each behavior it must exhibit. However, they're out of order! Reorder the following list of specs from the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esimplest possible behavior\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emost complex\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebehavior with your partner. Consult with other pairs, if necessary:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe program recognizes vowels in a multiple-word sentence, regardless of capitalization.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"CATS CATERED THE EVENT\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 7\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes a single vowel in a multiple-character word.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"cat\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 1\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes a single vowel.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"a\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 1\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes multiple vowels in a single word.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"cater\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 2\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes a single vowel, regardless of case.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"A\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 1\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes all vowels in a multiple-word sentence, regardless of inconsistent capitalization.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"CaTS CATEReD ThE EveNT\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 7\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program ignores non-alphabetical characters, since they cannot be vowels.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"4%\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 0\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes vowels in a multiple-word sentence.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"cats catered the event\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 7\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eLeap Year\u003c/h3\u003e\r\n\u003cp\u003eFollow along with the leap year lessons to build an application that identifies whether a given year is a leap year. Make each of the specs detailed in the leap year lessons \"pass\" (ie: your program returns the expected output for the expected input).\u003c/p\u003e\r\n\u003ch4\u003eSpecs from Leap Year Lessons\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe program should return when a year is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea leap year.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: 1993\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: false\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program should return 'true' for years divisible by 4, since those are leap years.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: 2004\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: true\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program should return 'false' for years divisible by 100, since those are not leap years.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: 1900\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: false\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program should return 'true' for years divisible by 400, since those are leap years.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: 2000\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: true\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAll specs should be listed in the project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eREADME.md\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003ch3\u003ePig Latin\u003c/h3\u003e\r\n\u003cp\u003eWrite a Pig Latin translator or should we say an\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"igPay atinLay anslatorTray\"\u003c/em\u003e?\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eRead all instructions carefully before beginning.\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch4\u003eHow Pig Latin Works\u003c/h4\u003e\r\n\u003cp\u003eFirst, here are the rules of Pig Latin:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor words beginning with a vowel, add \"ay\" to the end.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor words beginning with one or more consonants, move all of the first consecutive consonants to the end, and add \"ay\".\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf the first consonants include \"qu\", move the \"u\" along with the \"q\". Don't forget about words like \"squeal\" where \"qu\" doesn't come first!\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor words beginning with \"y\", treat \"y\" as a consonant.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003eInstructions\u003c/h4\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eBefore writing any code, make a list of specs detailing each behavior your program will have. Start with the simplest possible behavior, and slowly move up in complexity. To get you started, the first two specs are provided below.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eHave at least two other pairs check your specs before you begin coding.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eEnsure that each possible behavior is represented by a spec, and that they are ordered from simplest to most complex.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003ePlace your specs (and their example inputs and outputs) in your project's README.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCreate a basic function that accepts user input, and displays output. This will allow us to manually test each spec.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eSlowly add business logic. Begin by focusing on the behavior outlined in your first, most simple spec. Implement the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eleast amount of logic necessary\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto create this behavior.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eManually test this behaviour by inputting the example input described by the spec into your application, and confirm you receive the correct output.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eOnce behavior outlined by the first spec is successfully implemented, repeat steps 5 - 7 for each subsequent spec. Do not move onto the next spec until the previous one passes.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch4\u003eHelpful Hints\u003c/h4\u003e\r\n\u003cp\u003eWhen you get to consonants, don't try to solve it all at once. Instead, start with an example of a word that only has one consonant; then a word with two consonants; then a word with three; and then tackle the exceptions to the rule, like \"qu\" and \"y\". Once your application can successfully translate single words, work on translating entire sentences. The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.slice()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estring method may also come in handy.\u003c/p\u003e\r\n\u003ch4\u003eSpecs\u003c/h4\u003e\r\n\u003cp\u003eTo get you started, below are the first two \"plain English\" specs:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe program does nothing to non-alphabetical characters, since they do not contain consonants or vowels.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eExample Input:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e3\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eExample Output:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e3\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program adds \"ay\" to single-letter words beginning with a vowel.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eExample Input:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ei\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eExample Output:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eiay\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you are done with today's excercises, attempt the following as you explore further with regex.\u003c/p\u003e\r\n\u003ch4\u003eRefactor with Regular Expressions\u003c/h4\u003e\r\n\u003cp\u003eRefactor your code for the projects above using\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" target=\"_blank\"\u003eregular expressions\u003c/a\u003e. A handy place to try using regular expressions before implementing them is at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://rubular.com/\" target=\"_blank\"\u003eRubular\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch4\u003eBases\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eBinary\u003c/strong\u003e: Write a method to convert numbers from binary to decimal. The input should be a string, and the output an integer. Decimal is the normal system we use for counting. We start at 0, increment until we reach 9, and then reset back to 0 and add another number to the left. In binary, we also start at zero, but we only increment until we reach 1. Then we reset back to zero and add another number to the left.\u003c/p\u003e\r\n\u003cp\u003eHere are some example of numbers in decimal and binary:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs nginx\"\u003e\u003cspan class=\"hljs-title\"\u003eDecimal\u003c/span\u003e  Binary\r\n    \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e        \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\r\n    \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e        \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\r\n    \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e       \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\r\n    \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e       \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e\r\n    \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e      \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e\r\n  ...      ...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eTrinary\u003c/strong\u003e: You get where I'm going, right?\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eHexadecimal\u003c/strong\u003e: Here's what happens after 9...\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs nginx\"\u003e\u003cspan class=\"hljs-title\"\u003eDecimal\u003c/span\u003e  Hexadecimal\r\n  ...      ...\r\n   \u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e        \u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e        a\r\n  \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e        b\r\n  \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e        c\r\n  \u003cspan class=\"hljs-number\"\u003e13\u003c/span\u003e        d\r\n  \u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e        e\r\n  \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e        f\r\n  \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e       \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e       \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e\r\n  ...     ...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you get this far, write a method that takes two arguments: the number to be evaluated and the base you would like it to be evaluated in.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAre variable names descriptive and in lower camelCase?\u003c/li\u003e\r\n\u003cli\u003eDoes the code have proper indentation and spacing throughout?\u003c/li\u003e\r\n\u003cli\u003eAre \u003ccode class=\"\"\u003efor\u003c/code\u003e loops being used correctly?\u003c/li\u003e\r\n\u003cli\u003eAre\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach\u003c/code\u003e loops being used correctly?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs code broken down into plain English specs?\u003c/li\u003e\r\n\u003cli\u003eDo these specs accurately represent the behaviors required of the program?\u003c/li\u003e\r\n\u003cli\u003eAre there any additional specs you can think of?\u003c/li\u003e\r\n\u003cli\u003eDoes the application work as expected?\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"thursday-practice-leap-year-pig-latin"},{"id":1986,"title":"Thursday: Roman Numerals and Cryptosquare","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: If you have finished all of the exercises for the week, try these out for another challenge. Focus for these exercises (and all exercises going forward) on breaking your project down into small behavior examples and coding\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eone behavior at a time\u003c/strong\u003e. Make behavior grids before writing any code.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eExplain what behavior-driven development is. Why is it so beneficial?\u003c/li\u003e\r\n\u003cli\u003eReview the specifications each partner wrote in the \u003ca href=\"pages/thursday-practice-leap-year-pig-latin\"\u003eprevious lesson\u003c/a\u003e and discuss the following:\r\n\u003cul\u003e\r\n\u003cli\u003eIs each individual behavior listed as specific as possible? Does each represent\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebehavior, or multiple behaviors?\u003c/li\u003e\r\n\u003cli\u003eIs the simplest possible behavior listed first? If so, how do you know it's the simplest? If not, which one should come first?\u003c/li\u003e\r\n\u003cli\u003eHow did you ensure you wrote the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eleast\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eamount of code possible to make each pass? What did that look like?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eRoman Numerals\u003c/h3\u003e\r\n\u003cp\u003eWrite a method to convert numbers into Roman numerals. Roman numerals are based on seven symbols:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs javascript\"\u003e\u003cspan class=\"hljs-built_in\"\u003eSymbol\u003c/span\u003e  Value\r\n      I       \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\r\n      V       \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n      X       \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\r\n      L       \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e\r\n      C       \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e\r\n      D       \u003cspan class=\"hljs-number\"\u003e500\u003c/span\u003e\r\n      M       \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e000\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe most basic rule is that you add the value of all the symbols: so II is 2, LXVI is 66, etc.\u003c/p\u003e\r\n\u003cp\u003eThe exception is that there may not be more than three of the same characters in a row. Instead, you switch to subtraction. So instead of writing IIII for 4, you write IV (for 5 minus 1); and instead of writing LXXXX for 90, you write XC.\u003c/p\u003e\r\n\u003cp\u003eYou also have to separate ones, tens, hundreds, and thousands. In other words, 99 is XCIX, not IC. You cannot count higher than 3,999 in Roman numerals.\u003c/p\u003e\r\n\u003cp\u003eDraft some specifications and input-output examples to brainstorm the behaviors that you'll want to capture in your application. Tackle them one-by-one, worrying only about the future behaviors once the current example is implemented. All specifications should be listed in the project's README.md file.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not move on to the next exercise until you've completed the previous one\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch3\u003eCryptosquare\u003c/h3\u003e\r\n\u003cp\u003eA classic method for composing secret messages is called a\u003cspan\u003e \u003c/span\u003e\u003cem\u003esquare code\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe spaces and punctuation are removed from the English text and the characters are written into a square (or rectangle) and the entire message is downcased. For example, the sentence \"don't compare yourself to others, compare yourself to the person you were yesterday\" is 69 characters long, so it is written into a rectangle with 9 rows and 8 columns.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/cryptosquare.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"cryptosquare image\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/6831\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe coded message is obtained by reading down the columns going left to right. For example, the message above is coded as:\u003c/p\u003e\r\n\u003cp\u003e\"daeer leweo rlref rerne fsyts rdtyt coooe acooo utnyy ouomr hyemr tpseo spsha eput\"\u003c/p\u003e\r\n\u003cp\u003eWrite a program that outputs the encoded version of a given block of text. Again, identify each individual behavior this application should demonstrate, and write a specification (including an input/output example) for each. Tackle writing code for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebehavior at a time, and ensure your spec \"passes\" (you receive the correct output when you provide your input example) before moving to the next specification. List all specifications in the project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eREADME.md\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003eThe size of the square (number of columns) should be decided by the length of the message. If the message is a length that creates a perfect square (e.g. 4, 9, 16, 25, 36, etc), use that number of columns. If the message doesn't fit neatly into a square, choose the number of columns that corresponds to the smallest square that is larger than the number of characters in the message.\u003c/p\u003e\r\n\u003cp\u003eOutput the encoded text in groups of five letters. For example:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003eencrypt(\u003cspan class=\"hljs-string\"\u003e\"Have a nice day. Feed the dog \u0026amp; chill out!\"\u003c/span\u003e);\r\n      # =\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hifei acedl v...\"\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eGo back and tackle any\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFurther Exploration\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eexercises from previous days this week that you have not yet completed.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs code broken down into plain English specs? Do these specs accurately represent the behaviors required of the program?\u003c/li\u003e\r\n\u003cli\u003eAre variable names descriptive, and in lower camelCase?\u003c/li\u003e\r\n\u003cli\u003eIs code indented properly throughout?\u003c/li\u003e\r\n\u003cli\u003eDoes the application work as expected?\u003c/li\u003e\r\n\u003cli\u003eIs the code clean, well-refactored, and generally easy to follow?\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"thursday-roman-numerals-and-cryptosquare"},{"id":266,"title":"Friday: Independent Project - Triangle Tracker","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":24.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003ch2 style=\"text-align: left;\"\u003eTRIANGLE TRACKER\u003c/h2\u003e\r\n\u003ch4\u003eGOAL\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFor this week's Independent Project, we will be building an application that will help us know whether a triangle is isosceles, equilateral, scalene or NOT a triangle at all.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBased on the functionality of the application, key points to note are:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFor an equilateral triangle, all sides must be equal.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFor an isosceles triangle, two sides are exactly equal.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFor a scalene triangle, none of the sides is equal. However, the sum of any two sides of the triangle must be greater than the third side. \u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMost importantly, if the sum of any two sides of the triangle is equal to or less than the third remaining side, then a triangle CANNOT be formed using those values. (For example, the values 9,4 \u0026amp; 3 cannot form a triangle.)\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eUSER STORY\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs a user, I want to enter the length values of the three sides of my triangle in the application.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAfter submitting my values, the application should tell me what type of triangle my values will produce, whether an isosceles, equilateral, scalene or NO triangle at all.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHINT: For you to actualize your project, consider researching on how to use HTML input fields and how to link them to the business logic using javascript.  \u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003eOBJECTIVES\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project will be evaluated based on the following objectives:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project uses one or more javascript functions.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppropriate control flows and logical operators are used in the project.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project makes use of one or more arrays in javascript.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project uses a  HTML input to collect user data.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project uses a custom CSS stylesheet that incorporates cascading, box model and floats.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project works as expected, achieving the functionality required.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project demonstrates an understanding of the week's concepts. If requested, you should be able to explain your code to your instructor.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eTECHNICAL REQUIREMENTS\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eThe project contains a well-documented README file. This should have: \u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eProject name.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eProject description. \u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAuthor(s) information.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eSetup instructions - includes any scripts that need to be run if necessary.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBDD.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eTechnologies used.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eContact information.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eLicense and Copyright information.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003eThe project code is consistently indented and follows the language syntax.\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003eThe project is submitted in time. It should be submitted before 6:00 pm Friday unless otherwise stated.\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project code is pushed to Github and the project is deployed to gh-pages.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project name, description and URL to live site are provided on the Github repository.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCommits are made regularly with relevant and clear commit messages associated with them.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project should be polished in a portfolio-quality state.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e","exportId":"ic60e745b5529d2c11126c7bd05139504"}]},{"id":25,"name":"Week 3","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":true,"exportId":"i1d9157f3eedc1a88888a5ebe2ed89763","items":[{"id":1988,"title":"Monday: JavaScript for Web and Front-End Objectives","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan\u003eIn this section, we will be learning how to use the Bootstrap framework to style our pages, and how to use jQuery, an extensive JavaScript library to help make our web pages interactive.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eWe will start out by reviewing our HTML and CSS skills to learn how to use Bootstrap to create professional, responsive websites quickly and easily. If you need to spend some time reviewing HTML and CSS, please take some time to do that today - we will need those skills when we use jQuery.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThen we will move on to the basics of jQuery to make interesting, interactive pages:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eLearn key jQuery concepts like callbacks and event handlers.\u003c/li\u003e\r\n\u003cli\u003eShow, hide and toggle HTML elements.\u003c/li\u003e\r\n\u003cli\u003eUnderstand the Document Object Model (DOM) and how JavaScript changes the displayed page, not the HTML.\u003c/li\u003e\r\n\u003cli\u003eTraverse and manipulate the DOM.\u003c/li\u003e\r\n\u003cli\u003eCreate forms to gather input from the user.\u003c/li\u003e\r\n\u003cli\u003eManipulate the attributes of HTML elements.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThroughout all of this, we will understand how to good programming practices to separate our back-end and front-end code.\u003c/p\u003e","exportId":"monday-javascript-for-web-and-front-end-objectives"},{"id":1989,"title":"Monday: Introduction To Bootstrap","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eIf making websites look pretty is not your idea of a good time, don't worry: this isn't a design course. Still, there may come a time that you will need to understand enough CSS to be able to integrate a designer's CSS with your code. You may also be responsible for a project that requires you to make small changes to the CSS every now and then. Running into CSS is unavoidable as a web developer, and this is why it's so important for both web developers and designers to have some understanding of CSS basics.\u003c/p\u003e\r\n\u003cp\u003eFurthermore, you may want to build an app or website that looks nice, without spending a lot of time or effort on the user interface. In that case, front-end frameworks are immensely useful. We will spend this lesson learning what a front-end framework is, and getting familiar with one of the most popular front-end frameworks, Bootstrap.\u003c/p\u003e\r\n\u003ch2\u003eFront-end Frameworks\u003c/h2\u003e\r\n\u003cp\u003eWhen we use the term front-end in web development, we are talking about the parts of the website with which the user interacts: things like menus, buttons, images, navigation bars, and so on. The term framework refers to a package made of a structure of files and folders with pre-written code that can be used to get a project up and running more easily than building it from the ground up. Thus, a front-end framework is a set of code that helps us set up the front end of our websites. That is, the CSS, designs, layouts, and user interactions.\u003c/p\u003e\r\n\u003ch2\u003eBootstrap\u003c/h2\u003e\r\n\u003cp\u003eBootstrap is one of the most popular front-end frameworks. It allows developers to create clean, responsive, professional-looking websites relatively quickly and easily. Originally developed by Twitter as an internal tool to encourage consistency, Bootstrap was later released to the public as a free and open-source framework.\u003c/p\u003e\r\n\u003cp\u003eBootstrap is essentially a set of pre-built code that contains global CSS settings for various front-end elements in the form of fonts, colors, buttons, menus, table, a very useful grid system for page layout, and much more. One of the major advantages of using Bootstrap is that it is responsive, meaning that it has breakpoints and media queries built in, so any Bootstrap elements will automatically reformat according to the user's viewport size.\u003c/p\u003e\r\n\u003cp\u003eFeel free to visit Bootstrap's website\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://getbootstrap.com/docs/3.3/\" target=\"_blank\"\u003ehere\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand read more about it.\u003c/p\u003e\r\n\u003cp\u003eIf you're curious to see what Bootstrap can do, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://expo.getbootstrap.com/\" target=\"_blank\"\u003eSites Built With Bootstrap\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto see some of the possibilities.\u003c/p\u003e\r\n\u003cp\u003eOver the next few lessons, we will learn how to implement Bootstrap into our own web pages so that we can quickly create polished, professional sites with less effort than it would take to produce the same results on our own.\u003c/p\u003e","exportId":"monday-introduction-to-bootstrap"},{"id":1990,"title":"Monday: Installing Bootstrap","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that we've seen some of the benefits to using a front-end framework such as Bootstrap, let's walk through how to download it and use it in one of our own projects.\u003c/p\u003e\r\n\u003cp\u003eThere are several ways to go about using Bootstrap in our own projects. In this lesson, we will cover two of the simplest options.\u003c/p\u003e\r\n\u003cp\u003eFirst, navigate to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/\" target=\"_blank\"\u003eBootstrap's website\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDownload\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton on the front page. This will take you to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDownloads\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epage, which gives you three options to get started, each one suited for different skill levels and use cases.\u003c/p\u003e\r\n\u003cp\u003eClick on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDownload Bootstrap\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton in the first option. This will start a download of a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap-3.3.7-dist.zip\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(the version number at the time of this writing was 3.3.7, but your download may have a different number - that's perfectly fine). The extension of the download is\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.zip\u003c/em\u003e, which is a file format that compresses files to reduce their size, making downloads faster. In order to access the files it contains, we need to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eunzip\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe folder, which is as simple as double-clicking the downloaded folder.\u003c/p\u003e\r\n\u003ch2\u003eBootstrap Contents\u003c/h2\u003e\r\n\u003cp\u003eThe downloaded folder should contain folders named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003efonts\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e, each containing several files. The file structure looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-02-bootstrap_filestructure.png\" alt=\"MP-W1D4-02-bootstrap_filestructure.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1413\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eHere's a rundown of what each of these folders contain:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder contains the Bootstrap stylesheet in a variety of formats.\r\n\u003cul\u003e\r\n\u003cli\u003eThere are several files named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap\u003c/em\u003e. They are all different formats of the same stylesheet that we will be using in our projects.\u003c/li\u003e\r\n\u003cli\u003eThere are also several files named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap-theme\u003c/em\u003e. They are also different formats of the same stylesheet. This one is optional, and provides a visually-enhanced Bootstrap theme. It contains additional styles that work with animations and visual effects. For now, we will only focus on using the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.min\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eextension indicates a minified file. Minified means that characters not necessary for computers to understand the code have been removed (such as whitespace). The functionality stays the same, but the file is much smaller and faster to use.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.map\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles are used with development tools called CSS preprocessors, which extend the functionality of CSS. We will not be using CSS preprocessors in this course, so we will not use\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.map\u003c/em\u003efiles either.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003efonts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder contains a variety of useful icons, called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eglyphicons\u003c/em\u003e, in different formats. See the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/\" target=\"_blank\"\u003eBootstrap documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor the available icons. We will learn how to use these in an upcoming lesson.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder contains JavaScript code for animations and visual effects. You can see more information\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/javascript/\" target=\"_blank\"\u003ehere\u003c/a\u003e. For now, we will not focus on this folder as much and instead be getting familiar with the contents of the \u003cem\u003ecss\u003c/em\u003e folder to strengthen our basics.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdding Bootstrap to a Project\u003c/h2\u003e\r\n\u003cp\u003eIn our projects, we will be using either\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.min.css\u003c/em\u003e. These files both contain the same CSS, but the second one is a minified version.\u003c/p\u003e\r\n\u003cp\u003eThese files are CSS stylesheets just like the CSS we've been writing, and we include them in our projects in exactly the same way. To use either of these CSS files in a project, we simply need to add the file to the project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/p\u003e\r\n\u003cp\u003eNow that the stylesheet is in the project's \u003cem\u003ecss\u003c/em\u003e folder, we need to link it in in the website's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esection:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e =\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eExample Page Title\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou can actually link your own stylesheet along with Bootstrap's stylesheet. HTML allows you to link as many stylesheets as you want! Because of cascading, the order of the stylesheets matters, and your own custom stylesheets must be linked after the Bootstrap stylesheet. We'll learn more about using custom CSS alongside Bootstrap in an upcoming lesson.\u003c/p\u003e\r\n\u003ch2\u003eBootstrap CDN\u003c/h2\u003e\r\n\u003cp\u003eAnother option for linking Bootstrap in your project is to link to the CDN, which stands for content delivery network. We'll cover what this means in a second, but first, let's see how to include it. On the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u003ca href=\"http://getbootstrap.com/getting-started/#download\" target=\"_blank\"\u003eDownloads\u003c/a\u003e\u003c/em\u003e page (the same one we visited above) underneath the links to download the Bootstrap files, there is a list of CDN links:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-03-bootstrap_cdn_links.png\" alt=\"MP-W1D4-03-bootstrap_cdn_links.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1414\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eA CDN is a network of servers that store content and deliver it to users. In other words, the Bootstrap stylesheets are hosted online at the addresses above, and we can link to the online address instead of including the actual files in our project and linking to our local copies of the files.\u003c/p\u003e\r\n\u003cp\u003eNotice how the links from the Bootstrap website look similar to how we include stylesheets in our projects? We'll actually include them in the same way. Just copy and paste a CDN link into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof your webpage:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eintegrity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ecrossorigin\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"anonymous\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eExample Page Title\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor now, just use the first CDN link provided, because it does not include any JavaScript.\u003c/p\u003e\r\n\u003cp\u003eDepending on the size of the files, linking to the CDN can really cut down on the resources and time required to load a website. The downside of using the CDN is that you need an internet connection to use it because the project needs to access the stylesheet from the online location for the CSS to load.\u003c/p\u003e","exportId":"monday-installing-bootstrap"},{"id":1992,"title":"Monday: Bootstrap: The Basics","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that we've gone over what Bootstrap does, why we would want to use it, and how to add it to a project, let's create a new project and start using some of its features.\u003c/p\u003e\r\n\u003cp\u003eLet's create a webpage to practice using Bootstrap. Create a new project named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap-practice\u003c/em\u003e, and inside, create an HTML file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eAdd some basic starter code to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003eindex.html\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"utf-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's preview this site in our browser before adding Bootstrap. Load up\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein your browser:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-04-bootstrap_test_no_styling.png\" alt=\"MP-W1D4-04-bootstrap_test_no_styling.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs you may have anticipated, we have some headers, lists, and paragraphs, but nothing terribly exciting. Now let's add some Bootstrap! As we covered in the previous lesson on Installing Bootstrap lesson, first we need to download the Bootstrap package from the website, and move the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile into this project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/p\u003e\r\n\u003cp\u003eThen, add the link to the stylesheet in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esection of index.html:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we refresh the page, we can see that some styling has already been applied, without even needing to make any other changes:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-05-bootstrap_test_plusbootstrap.png\" alt=\"MP-W1D4-05-bootstrap_test_plusbootstrap.png\" width=\"1118\" height=\"582\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eContainer\u003c/h2\u003e\r\n\u003cp\u003eLet's start adding some Bootstrap styles to our page. One of the most commonly used Bootstrap elements is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003e. As the name suggests, it provides a container for content that sets the margins and padding according to the size of the user's viewport.\u003c/p\u003e\r\n\u003cp\u003eHere is how we add a container to our page:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      ...\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe have added a div inside of the page body with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003e, and placed all of the page content inside of that div.\u003c/p\u003e\r\n\u003cp\u003eGo ahead and refresh the page, and you should see that some space has been added around the page content.\u003c/p\u003e\r\n\u003cp\u003eRemember,\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis just a really big stylesheet. Do you recall how we added classes to HTML elements to style our pages? We add Bootstrap styles to our page in a similar way. The only difference is that instead of defining the styles for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass in our own stylesheet, they have already been written for us. All we need to do is include\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein our project, and we can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003eclass in the same way.\u003c/p\u003e\r\n\u003cp\u003eSee for yourself! Open up\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand search for the word \"container\". You can open the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSearch \u003c/em\u003epanel in Atom by typing \u003cstrong\u003eCtrl + F\u003c/strong\u003e or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003cem\u003eCmd\u003c/em\u003e + \u003cem\u003eF\u003c/em\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(the \"F\" here is for \"find\"). Alternatively, in the Atom menu, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFind\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFind in Buffer\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-05-find_container.gif\" alt=\"MP-W1D4-05-find_container.gif\" width=\"651\" height=\"430\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYou should see the following code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n\u003cspan class=\"hljs-class\"\u003e.container\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding-right\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003emargin-right\u003c/span\u003e: auto\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: auto\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-class\"\u003e.container\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e750px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e992px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-class\"\u003e.container\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e970px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e1200px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-class\"\u003e.container\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1170px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSee? There's nothing very special here! Just some predefined values for padding, margins, and width. Bootstrap is simply CSS that has already been written for us to serve a specific purpose.\u003c/p\u003e\r\n\u003cp\u003eAlso, notice that if we resize the browser window, the space around the content responds to the change in window size. As you can see in the Bootstrap code sample above, media queries are built right in! This means that when we use Bootstrap elements in our pages, they are already responsive.\u003c/p\u003e\r\n\u003ch2\u003eJumbotron\u003c/h2\u003e\r\n\u003cp\u003eAnother common Bootstrap element is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/#jumbotron\"\u003eJumbotron\u003c/a\u003e. Jumbotrons come in handy when you want to feature a portion of the page. They are often placed at the top of the page to act as the page header.\u003c/p\u003e\r\n\u003cp\u003eCan you guess how we add a Jumbotron section to our page? Much like the container, we simply add a div with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejumbotron\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass wherever we'd like it to appear on the page. Let's add one around the page header content for our page now:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"jumbotron\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    ...\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRefresh the page, and now we have a jumbotron at the top of our page.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-06-jumbotron.png\" alt=\"MP-W1D4-06-jumbotron.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eResize the browser window and notice that the Jumbotron is also responsive: the margins and font size change in response to the viewport size.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eWells\u003c/h2\u003e\r\n\u003cp\u003eAnother useful Bootstrap component for organizing your webpages is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/#wells\"\u003ewell\u003c/a\u003e. It makes the content of a div appear inset on the page. As with other Bootstrap effects, we add it to an element with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewell\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"well\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's what it looks like in our browser:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-07-well.png\" alt=\"MP-W1D4-07-well.png\"\u003e\u003c/p\u003e\r\n\u003ch2\u003ePanels\u003c/h2\u003e\r\n\u003cp\u003eAnother similar organization element is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/#panels\"\u003epanel\u003c/a\u003e. The panel wraps the contents of a div in a box, and also provides a section for a heading with a title and a footer.\u003c/p\u003e\r\n\u003cp\u003eFirst, we create the panel like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-default\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSimilarly to other Bootstrap elements, we added the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to the div. We also added a second class,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-default\u003c/code\u003e. By itself, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass describes the element, but does not actually have any features that appear on the screen. The second class,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-default\u003c/code\u003e, is called a helper class, which we will cover later in this lesson. It simply adds a border. You can add multiple Bootstrap classes to an element just like we did with our custom CSS classes.\u003c/p\u003e\r\n\u003cp\u003eWe can add heading and footer sections to a panel and format the body like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-default\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRefresh the page, and now the panel looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-08-panel.png\" alt=\"MP-W1D4-08-panel.png\"\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWe added a div with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-heading\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to format the area containing the heading.\u003c/li\u003e\r\n\u003cli\u003eWe added the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-title\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e, which adds a pre-styled heading. Note that the font size of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas overridden by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-title\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003c/li\u003e\r\n\u003cli\u003eWe added a div with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-body\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to format the area containing the panel's content.\u003c/li\u003e\r\n\u003cli\u003eWe added a div with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-footer\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto format an area for the panel's footer.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eGo ahead and resize the viewport and notice that all of these elements are responsive as well.\u003c/p\u003e\r\n\u003ch2\u003eHelper Classes\u003c/h2\u003e\r\n\u003cp\u003eAnother feature of Bootstrap is the wide variety of\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#helper-classes\"\u003ehelper classes\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eavailable to add to almost any element. As the name implies, these classes help us out by adding additional styles to the elements on a page.\u003c/p\u003e\r\n\u003cp\u003eLet's highlight a few list items on the page to remind us to come back to them later. We can do this by adding the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebg-danger\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to various\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags on the page, which will add a red background to the elements.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebg\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the class name stands for \"background\", and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edanger\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the name Bootstrap uses for this particular shade of red.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's what this looks like in the browser:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-09-helper_bg_danger.png\" alt=\"MP-W1D4-09-helper_bg_danger.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBootstrap comes with a number of preset color values for its elements that can come in handy:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprimary\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esuccess\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einfo\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewarning\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edanger\u003c/code\u003e. Let's add some color to the header of the same section, and use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebg-success\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to turn it green:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMany Bootstrap elements have helper classes built in. For example, we can add some color to our panel by adding the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-info\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elike this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003ePreviously, we used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-default\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, which only gave the div a border. We replaced that with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-info\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, and we can see the change when we refresh the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-10-panel_info.png\" alt=\"MP-W1D4-10-panel_info.png\" width=\"673\" height=\"196\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe panel is now blue!\u003c/p\u003e\r\n\u003cp\u003eAs we've seen in this lesson, Bootstrap is a useful tool to have in our arsenal as developers. We were able to quickly transform the layout and style of our pages - and make them responsive - simply by adding a few extra classes. Over the next few lessons, we will learn how to work with Bootstrap on a deeper level to make it work for us!\u003c/p\u003e\r\n\u003cp\u003eAs we move forward and build more websites, start using Bootstrap to quickly create polished, professional pages.\u003c/p\u003e","exportId":"monday-bootstrap-the-basics"},{"id":1993,"title":"Monday: Practice: Bootstrap Basics","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Start exploring Bootstrap by creating a web page that uses Bootstrap components.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003eHow do we add Bootstrap to a project?\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a CDN?\u003c/li\u003e\r\n\u003cli\u003eWhat are some benefits of using Bootstrap?\u003c/li\u003e\r\n\u003cli\u003eHow do we add Bootstrap features to our own projects?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eYour friend has a catering company and needs a website to get some more business. Design a website using Bootstrap. Pay attention to how the page is responsive right out of the box.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse a container to house the page content.\u003c/li\u003e\r\n\u003cli\u003eInclude a jumbotron to display the company's name and slogan.\u003c/li\u003e\r\n\u003cli\u003eUse panels to hold the meals offered by the company.\u003c/li\u003e\r\n\u003cli\u003eUse helper classes to highlight and emphasize various parts of the page.\u003c/li\u003e\r\n\u003cli\u003eBonus: see the notes on Bootstrap\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#type-blockquotes\" target=\"_blank\"\u003eblockquotes\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand see if you can figure out how to add some to the page to display customer testimonials.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-practice-bootstrap-basics"},{"id":1995,"title":"Monday: Navigating Bootstrap Documentation","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eAll right, we've gone over some of the basics of Bootstrap. But Bootstrap is a huge framework - the unminified CSS file alone has more than 6700 lines of code! It simply would not be feasible for us to cover every single feature.\u003c/p\u003e\r\n\u003cp\u003eInstead, we are going to spend some time in this lesson going over how to navigate and use the Bootstrap documentation. That way, you will be able to take advantage of any of the features provided by Bootstrap whenever you need to!\u003c/p\u003e\r\n\u003cp\u003eBeyond the scope of Bootstrap, the ability to efficiently navigate and reference documentation is one of the most important skills to build as a web developer. Even developers with years of experience don't just sit down and start coding everything from memory - often they have an idea of what they would like to accomplish, and getting there is a continual process of referencing documentation and experimenting with code until something works.\u003c/p\u003e\r\n\u003cp\u003eYou will undoubtedly need to navigate documentation both throughout your journey as a student at Moringa and as you start work as a developer. The documentation for Bootstrap is well-organized and contains clear explanations and examples. It's a great resource to start learning more about Bootstrap, but it's also a great way to start familiarizing yourself with the process of navigating documentation.\u003c/p\u003e\r\n\u003cp\u003eWe've actually already been navigating the Bootstrap documentation as we've been getting familiar with the framework over the past few lessons. We have referenced the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/getting-started/\" target=\"_blank\"\u003eGetting Started\u003c/a\u003e\u003cspan\u003e \u003c/span\u003epage, the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/\" target=\"_blank\"\u003eCSS\u003c/a\u003e\u003cspan\u003e \u003c/span\u003epage, and the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/\" target=\"_blank\"\u003eComponents\u003c/a\u003e\u003cspan\u003e \u003c/span\u003epage. Generally, the sections we will reference the most are the CSS and Components pages. The navigation bar at the top of the page includes links to each of these sections:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-11-navigation_links.png\" alt=\"MP-W1D4-11-navigation_links.png\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eCSS\u003c/h2\u003e\r\n\u003cp\u003eBootstrap's CSS section contains information on Bootstrap's extensions on standard HTML elements, such as headers, tables, buttons, images, the grid system, and so on.\u003c/p\u003e\r\n\u003ch2\u003eComponents\u003c/h2\u003e\r\n\u003cp\u003eThe components section includes resources on Bootstrap elements that exist on their own, and are not simply re-styled HTML elements. Many custom components have been created, including jumbotrons, panels, wells, navigation bars, icons, and more.\u003c/p\u003e\r\n\u003ch2\u003eNavigation Sidebar\u003c/h2\u003e\r\n\u003cp\u003eEach page of the Bootstrap documentation has a handy sidebar on the right of the page for easy navigation. You can see what features are available at a glance. Clicking on any item navigates to the documentation for that element.\u003c/p\u003e\r\n\u003ch3\u003eCSS\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-12-css_nav_sidebar.png\" alt=\"MP-W1D4-12-css_nav_sidebar.png\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eComponents\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-13-components_nav_sidebar.png\" alt=\"MP-W1D4-13-components_nav_sidebar.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eSelect\u003cspan\u003e \u003c/span\u003e\u003cem\u003eProgress bars\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eunder\u003cspan\u003e \u003c/span\u003e\u003cem\u003eComponents\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eso that we can walk through some of the features of the documentation together.\u003c/p\u003e\r\n\u003cp\u003eEvery entry in the Bootstrap documentation will contain a description of the element, sections with headings for each of the ways that you can customize the element, examples of what it looks like on the page, and code samples.\u003c/p\u003e\r\n\u003cp\u003eFor example, in the progress bars entry, we see that we have several options. The first two are\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBasic example\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003eWith label\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-14-progress_bars_example.png\" alt=\"MP-W1D4-14-progress_bars_example.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBoth examples show us what the component looks like on the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-15-progress_bars_example_02.png\" alt=\"MP-W1D4-15-progress_bars_example_02.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eUnderneath, some sample code is provided for you to use the element in your own page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-16-progress_bars_example_code.png\" alt=\"MP-W1D4-16-progress_bars_example_code.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eGo ahead and explore the documentation for yourself! You're not going to understand everything in the documentation at this point, and that's okay. Again, navigating documentation is a skill, and the only way to get better is to practice. As you start using Bootstrap in your own projects, explore the documentation and implement features beyond the ones we've covered over the past few lessons.\u003c/p\u003e\r\n\u003ch2\u003eJavaScript Documentation\u003c/h2\u003e\r\n\u003cp\u003eIt's worth noting that there are several Bootstrap elements that have visual effects or animations (such as dropdown menus, modal windows, etc.) - but these require JavaScript. We won't begin exploring JavaScript until next week, nor are you required to begin implementing any Bootstrap elements with visual effects.\u003c/p\u003e\r\n\u003cp\u003eHowever, if you'd like to optionally explore these effects and elements in your own projects, you're welcome to. Just note that any Bootstrap elements that have animations will not work unless Bootstrap's own JavaScript files are also linked.\u003c/p\u003e\r\n\u003cp\u003eFor now, the easiest way to do this is to include the CDN link to Bootstrap's JavaScript file in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003etags of your HTML document:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-17-bootstrap_js_cdn.png\" alt=\"MP-W1D4-17-bootstrap_js_cdn.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs you will soon experience, the web is constantly growing and evolving, and the best way to keep up is to be able to adapt to these changes. More likely than not, you will eventually be asked to use a language or technology you've never seen before. Practice navigating unfamiliar documentation now, and you'll be better prepared when the situation arises again.\u003c/p\u003e","exportId":"monday-navigating-bootstrap-documentation"},{"id":1996,"title":"Monday: Bootstrap Grid System","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eLining up a page exactly the way we want using only HTML and CSS can prove to be a challenging task. And then, making the layout responsive adds another level of complexity. For this reason, one of the most commonly-used features of Bootstrap is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#grid\" target=\"_blank\"\u003eGrid System\u003c/a\u003e. The grid system allows us to set up our page layout with an invisible grid to space and line up page content. As with other Bootstrap elements, the grid system is also responsive!\u003c/p\u003e\r\n\u003cp\u003eIn this lesson, we will learn how to implement this powerful feature in our own pages.\u003c/p\u003e\r\n\u003cp\u003eThe grid system consists of two parts: rows and columns. As with other Bootstrap features, they are simply div tags with either a row or column class.\u003c/p\u003e\r\n\u003ch2\u003eRows\u003c/h2\u003e\r\n\u003cp\u003eTo create a row in your page layout, add a div with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    ...\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSome important points to note about rows:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRows\u003cspan\u003e \u003c/span\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe placed inside of a container. The margins of the Bootstrap\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass are set in such a way that they do not work properly outside of a Bootstrap container.\u003c/li\u003e\r\n\u003cli\u003eRows act as wrappers for columns, and columns\u003cspan\u003e \u003c/span\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe be located inside of a row. Much like the relationship between the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, the padding of the Bootstrap\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolumn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass do not work properly when placed outside of a Bootstrap row. We will see how to use columns in the next section.\u003c/li\u003e\r\n\u003cli\u003eAny page content must be placed in\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecolumns\u003c/em\u003e, not directly in rows.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eColumns\u003c/h2\u003e\r\n\u003cp\u003eWhen using the Bootstrap grid system, any content on the page needs to reside inside of a column. Columns can display any valid HTML, including images, headers, panels, wells, and other divs.\u003c/p\u003e\r\n\u003cp\u003eColumns are customizable and give us flexibility with page layout, so they require some explanation.\u003c/p\u003e\r\n\u003cp\u003eThe pattern followed for column class names looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003ecol-\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emedia\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003equery\u003c/span\u003e\u0026gt;\u003c/span\u003e-\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ewidth\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe class always starts with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol\u003c/code\u003e, which stands for \"column\".\u003c/p\u003e\r\n\u003cp\u003eThe other two sections are placeholders:\u003c/p\u003e\r\n\u003ch3\u003eMedia Query\u003c/h3\u003e\r\n\u003cp\u003eThe media query portion of the class name has several options:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003exs\u003c/code\u003e: \"extra small\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003esm\u003c/code\u003e: \"small\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003emd\u003c/code\u003e: \"medium\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003elg\u003c/code\u003e: \"large\"\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThese refer to built-in Bootstrap media query values that can be applied to columns, which we will cover in more detail shortly.\u003c/p\u003e\r\n\u003ch3\u003eWidth\u003c/h3\u003e\r\n\u003cp\u003eBootstrap's grid system allows up to 12 columns across the page. Accordingly, the width portion of the class name may be any number from 1 to 12. The number represents the number of units that column takes up, out of a total 12 units. So for example, a row could fit 12 columns with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e1\u003c/code\u003e, 6 columns with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e2\u003c/code\u003e, 4 columns with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3\u003c/code\u003e, and so on.\u003c/p\u003e\r\n\u003ch4\u003eExamples\u003c/h4\u003e\r\n\u003cp\u003eLet's start with a column that spans the full width of a row. Since it will be the only column in its row, it needs to be 12 units wide, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\r\n  \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"row\"\u003c/span\u003e\u0026gt;\r\n     \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-12\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n  \u0026lt;/div\u0026gt;\r\n\u0026lt;/div\u0026gt;\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow let's look at an example on the opposite end, with 12 columns each with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e1\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\r\n   \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"row\"\u003c/span\u003e\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n   \u0026lt;/div\u0026gt;\r\n\u0026lt;/div\u0026gt;\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis HTML look appear something like this on the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-09-html_grid.png\" alt=\"MP-W1D4-09-html_grid.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf you do not want to use all 12 columns individually, you can group the columns together to create wider columns. For example, one row could contain a column with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e7\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand a column with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e, since 7 + 5 = 12. Here's some sample HTML to create these columns:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\r\n   \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"row\"\u003c/span\u003e\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-7\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-5\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n   \u0026lt;/div\u0026gt;\r\n\u0026lt;/div\u0026gt;\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's how that HTML would appear on the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-10-html_grid_02.png\" alt=\"MP-W1D4-10-html_grid_02.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eKeep in mind that the width values should add up to a total of 12 for a single row. If they add up to more than 12, then the columns will stack no matter the viewport size.\u003c/p\u003e\r\n\u003ch2\u003eAdding a grid to an existing page\u003c/h2\u003e\r\n\u003cp\u003eLet's get some practice using Bootstrap's grid system in a webpage. The\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epage from our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap-practice\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eproject from the previous lesson contains five sections that lend themselves well to the grid system. Let's organize those now, into two rows: the first one with 2 columns, and the second one with 3 columns.\u003c/p\u003e\r\n\u003cp\u003eIn this case, we want our columns to be equal.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor our first row, we want 2 columns. The full width of a Bootstrap grid row is 12 units, so we can divide 12 by 2 to give us 6. This means that each column should be 6 units wide.\u003c/li\u003e\r\n\u003cli\u003eFor our second row, we want 3 columns. Again, divide the total width of 12 by 3, which gives us 4. Each column should be 4 units wide.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFirst, we need to add two divs with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to give us our two rows. The first one will include the first two sections, and the second one will include the last three. Here's what that looks like:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"jumbotron\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"well\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eNulla Semper Lorem\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  ...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that when we refresh the page, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass by itself doesn't actually change the layout of our page. We still need to add columns. Let's format the first row:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"jumbotron\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"well\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  ...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we refresh the page, the first two sections should be next to each other in a row, each the width of half the page. The last three sections are still stacked on top of each other, so let's put those in columns. The entire page should now look like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"jumbotron\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"well\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eNulla Semper Lorem\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow our content is spaced neatly into two rows!\u003c/p\u003e\r\n\u003cp\u003eBecause we're experimenting, let's see what happens when we try to fill a row with columns that exceed 12 units. Looking at the second row, let's change the width of the last column to 6 instead of 4:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eNulla Semper Lorem\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we refresh the page, we see that the last column has created another row.\u003c/p\u003e\r\n\u003cp\u003eWhat happens when the column widths total less than 12? Let's try it out! I will change the widths to 2, 2, and 4:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eNulla Semper Lorem\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, the columns in the row do not span the width of the entire page, and are condensed to the left side of the page. This takes some degree of control away from our page layout, which is one of the great advantages of using the grid system in the first place. As you use the grid system in your own projects, try experimenting with the layout of the page by using different column sizes.\u003c/p\u003e\r\n\u003cp\u003eLet's revisit those media queries in the class name. How do we know which one we want to use?\u003c/p\u003e\r\n\u003cp\u003eBootstrap has four options for media queries, each corresponding to a standard size of device:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003exs\u003c/code\u003e: phones\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003esm\u003c/code\u003e: tablets\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003emd\u003c/code\u003e: desktops\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003elg\u003c/code\u003e: large desktops\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThese sizes instruct how narrow the page can be before the columns stack on top of one another. They refer to built-in breakpoints that are common for the viewport sizes listed above.\u003c/p\u003e\r\n\u003cp\u003eWhat does this look like? Remember how we used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia query for the columns in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e? The columns are side by side when the page is full size.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-10-responsive_grid_01.png\" alt=\"MP-W1D4-10-responsive_grid_01.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eHowever, start decreasing the width of your browser window. Once the page width is less than 992 pixels (the built-in value for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia query), the columns stack on top of each other, like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-11-responsive_grid_02.png\" alt=\"MP-W1D4-11-responsive_grid_02.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eSee the Bootstrap Grid documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#grid-media-queries\"\u003eMedia Queries\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor the specifics of how media queries are applied.\u003c/p\u003e","exportId":"monday-bootstrap-grid-system"},{"id":1997,"title":"Monday: Customizing Bootstrap Styles","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that we've been working with Bootstrap for the past few lessons, hopefully you can see the benefits for a front-end framework in getting a website up and running quickly. However, you may have noticed that because Bootstrap applies the same styles across the board, all of your webpages look pretty similar. You probably want some way to customize Bootstrap styles to make your site more your own.\u003c/p\u003e\r\n\u003cp\u003eIt's common to start with a framework like Bootstrap and then add your own styles to customize it. You could go into bootstrap.css and add your custom styles there. But it's a huge file with a lot of CSS to dig through, and often styles come from more than one location. Additionally, if Bootstrap came out with a new version, you would have to remember all the changes you made, and add them to the new stylesheet.\u003c/p\u003e\r\n\u003cp\u003eA better option is to leave the original file as it is, and create your own stylesheet to override Bootstrap's styles.\u003c/p\u003e\r\n\u003cp\u003eLet's try it out. Here's an example of how we could override Bootstrap's default styles to make our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003etags red and italicized:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"utf-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello Bootstrap!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd our custom stylesheet:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe important thing to remember when adding styles is that your custom stylesheet needs to be linked below the Bootstrap stylesheet. Remember from our discussion on cascading, how when multiple styles apply to an element, the one that's the farthest down in the CSS file takes precedence? This applies when we're linking stylesheets in the head as well.\u003c/p\u003e\r\n\u003cp\u003eThis is because stylesheets load in the order they appear on the page. So the Bootstrap stylesheet loads and instructs\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelements to look a certain way. Then the second stylesheet loads and also instructs\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelements to look a certain way. The rules from the second stylesheet override Bootstrap's rules simply because it loads last.\u003c/p\u003e\r\n\u003cp\u003eWhat do you think will happen if we reverse the order of the stylesheets? Try it out:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"utf-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello Bootstrap!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRefresh the page, and the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis black again, but the font style is still italic. Our custom styles are still loading, but Bootstrap's styles load last, so those are the styles that appear on the page. Bootstrap includes a rule for font color, but not for font style, which is why the font style remains but not the color.\u003c/p\u003e\r\n\u003cp\u003eThis is why we always link our custom stylesheets after Bootstrap!\u003c/p\u003e","exportId":"monday-customizing-bootstrap-styles"},{"id":1994,"title":"Monday: Practice: Customizing Bootstrap","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eGoal: Implement the Bootstrap grid in a project and understand how it works.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat are some of the benefits of using the Bootstrap grid system?\u003c/li\u003e\r\n\u003cli\u003eHow are rows used in the grid system?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol-md-4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol-md-12\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol-md-4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol-xs-4\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eHow many columns can fit in a row?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eContinue working on your friend's catering website.\u003c/p\u003e\r\n\u003cp\u003eFor the meals offered, include the following information: meal name, price, ingredients, allergens, and picture. Organize this information in a grid.\u003c/p\u003e\r\n\u003cp\u003eAdd your own stylesheet to customize the appearance of the site.\u003c/p\u003e","exportId":"monday-practice-customizing-bootstrap"},{"id":1998,"title":"Monday: Practice - Implementing Bootstrap","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Recreate an existing website using Bootstrap components, along with everything we have learned so far. Navigate the Bootstrap documentation to use new and unfamiliar components.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat setup needs to occur in order to use Bootstrap elements in a project?\u003c/li\u003e\r\n\u003cli\u003eWhat are some of the benefits of using Bootstrap?\u003c/li\u003e\r\n\u003cli\u003eHow do we ensure our own stylesheet takes precedence over Bootstrap's? Where does this occur?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eResort Website\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eRefactor your Resort website that you did to practice branching (refer to \u003c/span\u003e\u003ca href=\"pages/wednesday-practice-branching-and-merging?module_item_id=188\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/pages/wednesday-practice-branching-and-merging\" data-api-returntype=\"Page\"\u003ethis lesson\u003c/a\u003e\u003cspan\u003e), adding Bootstrap to it. Do not forget to make regular commits and push to your pair's remote repo on GitHub.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003eRecreate a Website\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003eRecreate the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Main_Page\"\u003eWikipedia Main Page\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eusing Bootstrap. The important thing to focus on here is the layout, not the functionality. Use divs, spans, classes, and floats along with the Bootstrap grid system to accomplish this. Add your own custom stylesheet as well.\u003c/p\u003e\r\n\u003cp\u003eFeel free to use dummy text and images for content. You can create a dummy link by using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehref\u003c/code\u003evalue like this:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a href=\"#\"\u0026gt;\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eIf you make it this far, great! The goal for the day is to get practice using Bootstrap and practice navigating the documentation. If you feel confident in your abilities, go ahead and move on to the next section.\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eInclude a detailed README with author names, project name, a description, setup instructions, and copyright information.\u003c/li\u003e\r\n\u003cli\u003eIf you finish early, go back to projects you worked on previously this week and add in Bootstrap.\u003c/li\u003e\r\n\u003cli\u003eBegin exploring the Bootstrap documentation. Try implementing elements we haven't explicitly covered here in our curriculum; whether in this site, or site from earlier this week.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-practice-implementing-bootstrap"},{"id":1999,"title":"Tuesday: Introduction to jQuery (Javascript Library)","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that we know a bit of JavaScript, let's learn jQuery, a JavaScript library that makes it easy to make web pages interactive. Let's start by learning how to pop up dialogue boxes when you click certain parts of the page.\u003c/p\u003e\r\n\u003cp\u003eImportant Note: jQuery is updated constantly! Faster than we can reasonably update this lesson! As such, make sure your \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tag links to the specific version and filename your project is using (e.g.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc=\"js/jquery-3.3.1.js\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc=\"js/jquery-2.10.1.js\"\u003c/code\u003e). The versions depicted in the \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tags in this lesson likely won't match the version in your project. In future, I recommend that you use a \u003ca href=\"https://code.jquery.com/\"\u003ejQuery CDN link\u003c/a\u003e which caches in the browser to enable fast load times for your web pages. Also, there is the shortcut of abbreviating\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$()\u003c/code\u003e. We've since updated this lesson's text to use the first, more explicit version after observing confusion from students. Know that these things are the same, and one is simply a shortcut for the other.\u003c/p\u003e\r\n\u003cp\u003eSet up a new project. (Make a project folder, create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejs\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecss\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimg\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolders inside of it, and initialize the git repository.) First, we need to add two files into our project's \u003cem\u003ejs\u003c/em\u003e folder - the jQuery library file and our custom scripts file. Go ahead and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jquery.com/download/\"\u003edownload jQuery\u003c/a\u003e. Choose the uncompressed, development version and save it into your project's \u003cem\u003ejs\u003c/em\u003e folder. Then, also inside your project's js folder, make an empty file called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escripts.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto store our own JavaScript code.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Wednesday/folder-structure.png\" alt=\"folder-structure.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1690\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBegin developing our page with this HTML in a file in our project directory:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML help\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML help\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThis is a very special page. If you click somewhere, it will tell you what type of HTML element you clicked on.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLook at this cute walrus!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan\u003e\u0026lt;script   \u003c/span\u003e\u003cspan\u003esrc=\"https://code.jquery.com/jquery-3.3.1.min.js\"\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eintegrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003ecrossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003cspan class=\"xml\"\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIt's important that our own \u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile goes after jQuery, as it will rely on jQuery functionality that must be loaded first. Make sure your link to the jQuery file is correct, with the version number matching what you downloaded.\u003cspan\u003e The \u003ccode\u003eintegrity\u003c/code\u003e and \u003ccode\u003ecrossorigin\u003c/code\u003e attributes are used for \u003ca href=\"https://www.w3.org/TR/SRI/\" target=\"_blank\"\u003eSubresource Integrity (SRI) checking\u003c/a\u003e. This allows browsers to ensure that resources hosted on third-party servers have not been tampered with. Use of SRI is recommended as a best-practice, whenever libraries are loaded from a third-party source.\u003c/span\u003e\u003cbr\u003eOkay, we're finally ready to use jQuery! Here's the code to type in \u003cem\u003escripts.js\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\njQuery(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{  \r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"h1\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is a header.\"\u003c/span\u003e);\r\n  });\r\n\r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is a paragraph.\"\u003c/span\u003e);\r\n  });\r\n\r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"img\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is an image.\"\u003c/span\u003e);\r\n  });\r\n});\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBe sure you're indenting correctly! The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003es are two spaces in, because they're inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efunction()\u003c/code\u003es. If we load up the page and click on different parts, we'll get dialog boxes popping up and telling us what they are. Hooray! Now, let's look more closely at how this works. Here we have a new function: the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejQuery()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction! One thing that the jQuery function does is to select HTML elements on the page, based on the argument you pass in to it. So the code\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejQuery(\"p\")\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselects all of the paragraphs on the page. After we select the elements, we use jQuery's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.click()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to attach an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eevent handler\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto each of the selected elements. The event handler \"listens\" to the elements and responds when they're clicked. Next, we need to tell jQuery what to do when the user clicks that element. We pass in a function as an argument. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efunction()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe're using here is just like the ones we practiced before, but we aren't assigning it to a variable and we're passing it as an argument to another function. This is called an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eanonymous callback function\u003c/strong\u003e. It is a callback function because it is not executed immediately; instead the function is passed into the jQuery\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to be executed at a future time - in the case of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.click()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, when that event handler is triggered by a user clicking on any of the selected elements. Inside the callback function, we can put whatever code we want, just like in the functions we wrote before. Here we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to pop up a dialog box with some helpful information. We could actually pop up two alerts, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003ejQuery(\u003cspan class=\"hljs-string\"\u003e\"h1\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  alert(\u003cspan class=\"hljs-string\"\u003e\"This is a header.\"\u003c/span\u003e);\r\n  alert(\u003cspan class=\"hljs-string\"\u003e\"I told you, THIS IS A HEADER!\"\u003c/span\u003e);\r\n});\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo reiterate, when you pass in a function as an argument to another function, the function being passed in is called a \u003cstrong\u003ecallback\u003c/strong\u003e. Phew! That's a lot of work just to make a few silly pop-ups. Fortunately, even though this might feel a bit overwhelming at first, most of the jQuery we'll write will look an awful lot like this, so you'll get the hang of it pretty quickly. Let's do a couple things to clean up our code. First, it feels a bit wrong to put our \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tags in the document body, where the content of the page lives. Let's move them up into the \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e, which is where we put information about the page that isn't displayed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e  \u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan\u003e  \u0026lt;script \u003c/span\u003e\u003cspan\u003esrc=\"https://code.jquery.com/jquery-3.3.1.min.js\" \u003c/span\u003e\u003cspan\u003eintegrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003ecrossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e  \u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e  \u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML help\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOh dear. Now, if we reload the page in our browser, nothing happens when we click anything. Let's review our JavaScript to see why this broke it. Remember that I said that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejQuery('p')\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill look for all of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags on the page? The web browser loads your page from the top of your HTML document to the bottom. So when we put our JavaScript in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e, rather than at the end of the document, there are no\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags yet, and so there's nothing for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.click()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto attach to. What we need to do is tell our JavaScript not to run until the document has finished loading. Fortunately, jQuery provides an easy way to do this:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003ejQuery(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"h1\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is a header.\"\u003c/span\u003e);\r\n  });\r\n\r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is a paragraph.\"\u003c/span\u003e);\r\n  });\r\n\r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"img\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is an image.\"\u003c/span\u003e);\r\n  });\r\n});\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we tell jQuery to look at the HTML document, and then we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.ready()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on it. When the document has finished loading, jQuery will run the callback function that is passed into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.ready()\u003c/code\u003e. And that function will run our code. Generally, it's a good idea to wrap your JavaScript in a function passed to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.ready()\u003c/code\u003e, so that it's executed after the page loads and you don't run into the problem we just had. Check out our page - it works again. There's a handy shortcut that most JavaScript developers use: instead of writing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejQuery()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eall of the time, we can simply use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"h1\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is a header.\"\u003c/span\u003e);\r\n  });\u003cbr\u003e\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is a paragraph.\"\u003c/span\u003e);\r\n  });\r\n\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"img\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is an image.\"\u003c/span\u003e);\r\n  });\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis isn't really necessary, but it saves us a little bit of repetitive typing and is how most people write the jQuery function. Here's one final trick I want to show you. If something on your page isn't working right, you can check in Chrome to make sure that you've attached the event listener correctly. Right-click the element you want to check, go to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect Element\u003c/em\u003e, and then, in the upper right corner of the box on the bottom, click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEvent Listeners\u003c/em\u003e. If you've attached the listener correctly, you should see it listed there.\u003c/p\u003e","exportId":"tuesday-introduction-to-jquery-javascript-library"},{"id":2000,"title":"Tuesday: jQuery - Simple Effects","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003ePopping up dialogue boxes isn't very interesting, so let's move on to actually manipulating our web page by showing and hiding elements. Here's the HTML for the page we'll work on:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;link href=\"css/bootstrap.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003cbr\u003e    \u0026lt;link href=\"css/styles.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026lt;brikicho\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;div class=\"container\"\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;peek-a-boo\u0026lt;/h1\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;p\u0026gt;Let's play peek-a-boo. Click here to see the surprise!\u0026lt;/p\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;img src=\"img/walrus.jpg\"\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e    \u0026lt;script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e    \u0026lt;script src=\"js/scripts.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt;\u003c/pre\u003e\r\n\u003cp\u003eMake sure that you have downloaded and correctly linked Bootstrap and jQuery. You will need these for pretty much every project.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eObviously, this doesn't work yet. The first thing we should do is to hide the walrus with a bit of CSS. As usual, we'll make a file called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estyles.css\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecss\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder. Then, we'll add a CSS rule to hide the image:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003eimg {\u003cbr\u003e  display: none;\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cp\u003eNow, we can use jQuery to show the walrus when you click the paragraph above it:\u003c/p\u003e\r\n\u003cpre\u003e$(document).ready(function() {\u003cbr\u003e  $(\"p\").click(function() {\u003cbr\u003e    $(\"img\").show();\u003cbr\u003e  });\u003cbr\u003e});\u003c/pre\u003e\r\n\u003cp\u003eVery nice! Here, we've used another jQuery function called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.show()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat will, obviously, show a hidden element.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eBut wouldn't it be nicer if the text of the paragraph changed, so after you clicked it, it said \"What a cute walrus! Click here to hide her again.\" Let's do that now. First, we need to make a couple changes to our HTML:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\u003c/code\u003e\u003ccode class=\"html hljs xml\"\u003e...\u003cbr\u003e\u003c/code\u003e\u0026lt;body\u0026gt;\u003cbr\u003e\u0026lt;div class=\"container\"\u0026gt;\u003cbr\u003e\u0026lt;h1\u0026gt;peek-a-boo\u0026lt;/h1\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;div class=\"walrus-hidden\"\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;Let's play peek-a-boo. Click here to see the surprise!\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;div class=\"walrus-showing\"\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;What a cute walrus! Click here to hide her again.\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;img src=\"img/walrus.jpg\"\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\u003cbr\u003e...\u003c/pre\u003e\r\n\u003cp\u003eNow we've wrapped our page in two\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003es: one for when the walrus is hidden, and one for when she's showing. Let's update our CSS to hide the walrus at first:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e.walrus-showing {\u003cbr\u003e  display: none;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e\u003c/pre\u003e\r\n\u003cp\u003eOne of the cool things about jQuery is that it uses the exact same selectors as CSS.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eNow, our code successfully changes the text that is shown above the walrus! Of course, it doesn't switch back and hide her again, so let's update our code once more to take care of that:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\".walrus-showing\"\u003c/span\u003e).toggle();\r\n    $(\u003cspan class=\"hljs-string\"\u003e\".walrus-hidden\"\u003c/span\u003e).toggle();\r\n  });\r\n});\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNice. Now everything works as planned.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThere's something I don't like about this page, though. Most users expect that when an element is clickable, it's a different color, and that when they hover their mouse over it, the cursor will change to a hand and the text will be underlined. Fortunately, this is easy to implement with CSS:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\u003c/code\u003ep {\u003cbr\u003ecursor: pointer;\u003cbr\u003ecolor: #0088cc;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ep:hover {\u003cbr\u003etext-decoration: underline;\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cp\u003eNow, this works, and it looks much better. But I'm still not satisfied. Here's why. Let's add another paragraph to this page:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e is an ancient game riddled in mystery and deceit. Though it appears to be an innocent children's pastime, you may change your mind when you learn of its treacherous history.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-hidden\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's play peek-a-boo. Click here to see the surprise!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-showing\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat a cute walrus! Click here to hide her again.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOh no! Our styling has run amok and is applied to the intro paragraph, which really shouldn't be clickable. And even worse: if you click it, it toggles the walrus! We really need to limit the scope of our CSS and JavaScript. Let's add some\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags to clean this up:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e is an ancient game riddled in mystery and deceit. Though it appears to be an innocent childrens' pastime, you may change your mind when you learn of its treacherous history.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-hidden\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's play peek-a-boo. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"clickable\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick here\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e to see the surprise!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-showing\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat a cute walrus! \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"clickable\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick here\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e to hide her again.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we can update our CSS:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-class\"\u003e.walrus-showing\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-class\"\u003e.clickable\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecursor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e pointer\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-hexcolor\"\u003e#0088cc\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003e.clickable\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003ehover {\r\n        text-decoration: underline\u003c/span\u003e\u003c/span\u003e;\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd JavaScript:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n    $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".clickable\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".walrus-showing\"\u003c/span\u003e).toggle();\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".walrus-hidden\"\u003c/span\u003e).toggle();\r\n      });\r\n    });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAh, that's much better now. When you're writing JavaScript (and CSS), it's a good idea to use classes to be specific about the elements you want to select. But keep in mind, if you have more than one thing on the page that can change, you might want to use one class for your CSS and another class for of each of the actions. For example, if your page had one place that let you show and hide a walrus, and another place that let you show and hide an ostrich, you might have both clickable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003es styled with the clickable class, but one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoggle-walrus\u003c/code\u003e, and the other with a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoggle-ostrich\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. Speaking of being specific, it feels wrong to me to use the classes\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-hidden\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-showing\u003c/code\u003e. We're supposed to use classes to identify similar parts of our pages that should look and act the same. For our clickable span, using a class makes perfect sense: we have two places on the page where we use it, and I can imagine that our website could potentially use it in many, many more places. But\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-hidden\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-showing\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereally couldn't be re-used anywhere else on this page - these sections should be unique. Often, this is the case with JavaScript: we want to identify a unique part of the page that should be changed when a unique event happens. For this case, we can use an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e. Check it out:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e is an ancient game riddled in mystery and deceit. Though it appears to be an innocent childrens' pastime, you may change your mind when you learn of its treacherous history.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-hidden\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's play peek-a-boo. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"clickable\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick here\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e to see the surprise!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-showing\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat a cute walrus! \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"clickable\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick here\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e to hide her again.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we change our CSS like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-id\"\u003e#walrus-showing\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd our JavaScript like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".clickable\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#walrus-showing\"\u003c/span\u003e).toggle();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#walrus-hidden\"\u003c/span\u003e).toggle();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSo, what's the difference between a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclass\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eID\u003c/code\u003e, except that we use a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto select a class and a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#\u003c/code\u003eto select an ID? Nothing, really, except that you can only use an ID once on a page, and you can use a class as many times as you want. But by using an ID, you can be clear that you're referring to one particular thing, rather than potentially referring to several. We could actually go one step further in thinking about how to make our code re-usable. Instead of calling the IDs\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-showing\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-hidden\u003c/code\u003e, we could call them\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einitially-hidden\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einitially-showing\u003c/code\u003e. That way, we could re-use this code on other pages that have the same kind of toggling functionality. Now, a quick lecture before you move on to practicing all that you've just learned. When we use JavaScript to manipulate the page, we haven't changed the source code. No matter how much we change the page with JavaScript, if you hit the Refresh button in your browser, it will go back to the initial state. What JavaScript is doing is manipulating the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDocument Object Model\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDOM\u003c/strong\u003e. The DOM is your browser's interpretation of the HTML it reads. If you inspect an element of the page, you're actually seeing the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDOM\u003c/strong\u003e, not the HTML. Try inspecting the page we've been working on, and then click the click here part that changes the page. You can see in the inspector that the DOM changes. Now, try these concepts out on your own pages. Add JavaScript to hide and show various elements. Use id's and classes to keep things neat and tidy. Additionally, here are a few other jQuery methods to try out:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode\u003efadeIn()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003efadeOut()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003efadeToggle()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eslideDown()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eslideUp()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eslideToggle()\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePlay around with them to get practice using these simple jQuery effects!\u003c/p\u003e","exportId":"tuesday-jquery-simple-effects"},{"id":2072,"title":"Tuesday: Practice - jQuery Effects","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: In the previous lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow to show and hide elements using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eshow\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003ehide\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eHow to toggle with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003etoggle\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eHow to style a link with CSS\u003c/li\u003e\r\n\u003cli\u003eHow to use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;span\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags to limit the scope of CSS and JavaScript\u003c/li\u003e\r\n\u003cli\u003eClasses are used for elements that show up in\u003cspan\u003e \u003c/span\u003e\u003cem\u003emultiple\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eplaces on our web page\u003c/li\u003e\r\n\u003cli\u003eIDs are used for an element that shows up only\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonce\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon our web page\u003c/li\u003e\r\n\u003cli\u003eWhen we use JavaScript to manipulate a web page, we are really manipulating the DOM, not just the HTML structure or styling.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow, let's begin to familiarize ourselves with jQuery by completing the exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do we tell jQuery which part of the page to add an effect to? What does the code look like?\u003c/li\u003e\r\n\u003cli\u003eWhat is the DOM? How do we interact with it?\u003c/li\u003e\r\n\u003cli\u003eWhen do we use an id? What about a class?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003ejQuery Effects Practice\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eImportant Note\u003c/strong\u003e: To use the jQuery Methods\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003efadeIn\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003efadeOut\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eslideDown\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e, or\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eslideUp\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eyou will need two separate\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eclick\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eJavaScript events (One for the in/out or down/up) whereas\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003etoggle\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eonly requires one\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eclick\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevent.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eOn the walrus page, add some clickable text that alternates between saying \"Hide/show images\", and toggles the images appropriately.\u003c/li\u003e\r\n\u003cli\u003eOn either the walrus page or the webpage from the previous exercise, try fading and sliding elements with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003efadeIn\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003efadeOut\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003efadeToggle\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eslideDown\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eslideUp\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eslideToggle\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eMake a webpage with a few different sections, where a few of the sections are hidden by default, with a bit of teaser text that expands when you click on it (e.g., \"Click to learn about the giant sandcastles of this fabulous country!\"). Be creative!\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"tuesday-practice-jquery-effects"},{"id":2001,"title":"Tuesday: jQuery - Adding and Removing Classes","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eAdding and removing classes can be a helpful tool. Let's start with this HTML:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan\u003e\u0026lt;script   \u003c/span\u003e\u003cspan\u003esrc=\"https://code.jquery.com/jquery-3.3.1.min.js\"\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eintegrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003ecrossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eColors\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat's your favorite color?\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eClick a button to choose what color you'd like this page to be:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-success\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"green\"\u003c/span\u003e\u0026gt;\u003c/span\u003eGreen\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-warning\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"yellow\"\u003c/span\u003e\u0026gt;\u003c/span\u003eYellow\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-danger\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"red\"\u003c/span\u003e\u0026gt;\u003c/span\u003eRed\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, some JavaScript:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#green\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"green-background\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#yellow\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"yellow-background\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#red\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"red-background\"\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we click the green button, for example, jQuery will add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreen-background\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e. Now, let's create the CSS classes to actually give the page the background color we want:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-class\"\u003e.green-background\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e green\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-class\"\u003e.yellow-background\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e yellow\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-class\"\u003e.red-background\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e red\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd our page works! But there's a problem. If we click any one button, everything is fine. But if we then click a button of a lighter color, it won't change the background. So if we click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eYellow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand then Red, it works. But if we click then click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eGreen\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eafter\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRed\u003c/em\u003e, nothing happens. We need to remove the other classes before applying the new class. Fortunately, that's easy:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#green\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).removeClass();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"green-background\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#yellow\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).removeClass();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"yellow-background\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#red\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).removeClass();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"red-background\"\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd now everything works perfectly!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003ccode\u003eremoveClass()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewithout an argument removes all classes from the selected element; if you'd like to just remove a specific class, you can pass it in as an argument (or pass in multiple classes separated by spaces).\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThere is another way to change the CSS of an element with jQuery:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"button#green\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).css(\u003cspan class=\"hljs-string\"\u003e\"background-color\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"green\"\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, this is a bad approach for real code, for two reasons. First, it's mixing our concerns. JavaScript is responsible for how the page behaves; CSS is responsible for how the page looks. Here, we've put something about how the page looks in our JavaScript. This makes it difficult for other programmers who might need to change this page in the future to know where to look for the appropriate code. Second, you lose one of the biggest powers of CSS: the ability to create a class and re-use that style across elements and pages. Here, when we've put a style in our JavaScript, it can't be re-used. So, when you want to change the style of your page, stick to adding and removing classes.\u003c/p\u003e","exportId":"tuesday-jquery-adding-and-removing-classes"},{"id":2073,"title":"Tuesday: Practice - Adding and Removing Classes","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eContinue to familiarize yourself with jQuery, and explore these important methods by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat can be accomplished by dynamically adding and removing classes with jQuery? Why would we want to do this?\u003c/li\u003e\r\n\u003cli\u003eWhen should we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.css()\u003c/code\u003e? Why do we use this particular method?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMost people like dark text on a light background, but some people prefer light text on a dark background. Update your dog blog or cat homepage to include a button that lets your users switch to light on dark.\u003c/li\u003e\r\n\u003cli\u003eNow, update this page so that users can switch back to the original color scheme.\u003c/li\u003e\r\n\u003cli\u003eUpdate your boring lecture page so that when somebody clicks on a paragraph, it highlights it and adds a box around the edges.\u003c/li\u003e\r\n\u003cli\u003eGet another pair to look at your work\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"tuesday-practice-adding-and-removing-classes"},{"id":2002,"title":"Tuesday: DOM Manipulation and Traversal","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eDOM Manipulation and Traversal\u003c/h2\u003e\r\n\u003cp\u003eIn this lesson, we are going to explore manipulating DOM elements by inserting new text with the jQuery\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Then we'll look at how to traverse the DOM in search of a specific element to remove it. Let's take a look at a visual representation of the DOM that you can use as reference for manipulation and traversal. Each element in the DOM, represented in each box below, can be a parent, child or sibling to other elements. Understanding the position of elements in the DOM will help you insert, locate and remove elements, as needed.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Wednesday/dom-visual-reference.png\" alt=\"dom-visual-reference.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1689\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIn the last lesson, we explored how to simply show and hide elements of the DOM. Now, let's get a little more advanced and insert content into the DOM. Here's some HTML we'll start with:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.10.2.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eTalk to the web page\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eTalk to the web page\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eClick a button to say something to the web page. See what it says back!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-primary\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"hello\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSay \"hello\"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-inverse\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goodbye\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSay \"goodbye\"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-danger\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stop\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSay \"stop copying me!\"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eYou said:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unstyled\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eThe web page said back:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unstyled\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, here's the JavaScript to make the buttons work:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#hello\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Hello!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#goodbye\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Goodbye!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#stop\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Stop copying me!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will insert the text of the argument it's given into to the top of \u0026lt;ul\u0026gt; as the first child of the \u0026lt;ul\u0026gt;. (As you might guess, there's also a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that would insert at the bottom as the last child of the \u0026lt;ul\u0026gt;; there are also\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.before()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.after()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods that would add the argument before or after the \u0026lt;ul\u0026gt; tag as siblings, rather than within it as children.) This is nice, but not a very fun conversation. Let's have the webpage say something different back to the user:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#hello\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Hello!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Why hello there!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#goodbye\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Goodbye!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Goodbye, dear user!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#stop\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Stop copying me!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Pardon me. I meant no offense.\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOf course, we need to change the \u0026lt;ul\u0026gt; tags to have IDs for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003euser\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewebpage\u003c/code\u003e. For the sake of brevity, I won't bother showing the updated HTML here. Go ahead and do that yourself.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eTHE CODE BELOW IS TRICKY. WE JUST WANT YOU TO KNOW THE STUFF ABOVE THIS POINT.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eNow that we know how to add to the DOM, let's learn how to remove from it. Let's make it so that when a user clicks a message, it disappears. First, we need to select each message. When I'm working on some tricky DOM manipulation, I usually start by selecting the element and changing its background color to green, just so that I know I have my selector working properly. You might think this bit of jQuery would work:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// previous code...\u003c/span\u003e\r\n        $(\u003cspan class=\"hljs-string\"\u003e'li'\u003c/span\u003e).css(\u003cspan class=\"hljs-string\"\u003e'background-color'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'green'\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBut it doesn't do what we want. This code is run right after the web page finishes loading\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e($(document).ready())\u003c/code\u003e. And after the page finishes loading, there are no \u0026lt;li\u0026gt; elements. The elements are only added after we click a button. So we need to move our new code to within the callback passed to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e. Let's start by just adding it to one of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"button#hello\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Hello!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Why hello there!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        $(\u003cspan class=\"hljs-string\"\u003e'li'\u003c/span\u003e).css(\u003cspan class=\"hljs-string\"\u003e'background-color'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'green'\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we click Say\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"hello\"\u003c/em\u003e, the messages are\u003cspan\u003e \u003c/span\u003e\u003cem\u003egreen\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's move to the next step - attaching an event handler in place of changing the background color. Again, in the spirit of taking one step at a time, we're not going to actually try to get the click to delete the element - instead, we're going to simply open a dialog box:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"button#hello\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;Hello!\u0026gt;\"\u003c/span\u003e);\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;Why hello there!\u0026gt;\"\u003c/span\u003e);\r\n        $(\u003cspan class=\"hljs-string\"\u003e'li'\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          alert(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we click Say\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"hello\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand then the message, we get our alert! But there's a problem: if we click the button twice, clicking the last message will open the alert twice. And if we click the button again, the last message will open the alert three times, and the middle message will open it twice. What's happening is that the first time we click the button,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$('li')\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eonly finds a single message in each list, and attaches an event handler. But the next time we click the button, that first message is already on the page, and a second event handler is attached to it. And each time we click the button again, another event handler is attached to every message on the page. What we want is to only attach handlers to the message we most recently inserted. Since we're inserting them at the top of each list, we can select one of the \u0026amp;li;ul\u0026gt;s, look through its child elements (the \u0026lt;li\u0026gt;s), and select the first one of them:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).children(\u003cspan class=\"hljs-string\"\u003e\"li\"\u003c/span\u003e).first().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e);\r\n      });\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).children(\u003cspan class=\"hljs-string\"\u003e\"li\"\u003c/span\u003e).first().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, each of the messages only opens a single dialog box when clicked.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eFinally, we should replace our callback with the actual code to delete the message:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).children(\u003cspan class=\"hljs-string\"\u003e\"li\"\u003c/span\u003e).first().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).remove();\r\n      });\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).children(\u003cspan class=\"hljs-string\"\u003e\"li\"\u003c/span\u003e).first().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).remove();\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eremove()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis pretty straightforward, but what is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e?\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a bit of a tricky concept in JavaScript, and I'm not going to give it a full explanation here. For now, you can think of it as referring to whatever was clicked on. We're done with this rather long lesson. Congrats on making it through!\u003c/p\u003e\r\n\u003ch2\u003ePractice: DOM Manipulation and Traversal\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the DOM manipulation lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe visual representation of the DOM's parent, child and sibling relationships\u003c/li\u003e\r\n\u003cli\u003eHow a child element will be inserted at the top of a \u0026lt;ul\u0026gt; tag with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand at the end with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eHow to correctly select DOM elements and delete them\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePractice manipulating the DOM with your partner by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e. Describe an example of using each.\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.before()\u003c/code\u003e? What about\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.after()\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eWrite a line of jQuery that selects an element on the DOM with the id of \"salad\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eDOM Manipulation Practice\u003c/h3\u003e\r\n\u003cp\u003ePractice adding some interactivity to your web pages\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ePractice selecting certain HTML elements and changing the background color to green.\u003c/li\u003e\r\n\u003cli\u003eNow practice removing those elements, just like in the lesson.\u003c/li\u003e\r\n\u003cli\u003eMake a \"cat vs dog\" page - if you click a button for the cat to meow, the dog should bark back, and vice versa. Use Bootstrap to style your pages!\u003c/li\u003e\r\n\u003cli\u003eIn addition to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e, you can add content before or after the selected tags (rather than within them) with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.before()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.after()\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eMake a page where if a user clicks on an element some sort of image gets inserted into the page before or after that element. Allow the new image to be removed by a click as well.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"tuesday-dom-manipulation-and-traversal"},{"id":2003,"title":"Tuesday: Variable Scope","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eHomework: Variable Scope\u003c/h2\u003e\r\n\u003cp\u003eBefore we move on, let's pause to discuss\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003evariable scope\u003c/strong\u003e. The scope of a variable defines where and when it is available to be used or modified. Scope can be global or local depending on how it is declared.\u003c/p\u003e\r\n\u003ch2\u003eGlobal Scope\u003c/h2\u003e\r\n\u003cp\u003eVariables declared outside of functions have\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eglobal scope\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich means that all code and functions can access them.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e globalString = \u003cspan class=\"hljs-string\"\u003e\"This is a global variable\"\u003c/span\u003e;\r\n\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esampleFunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(globalString);\r\n        globalString = \u003cspan class=\"hljs-string\"\u003e\"This is a global variable update!!\"\u003c/span\u003e;\r\n        alert(globalString);\r\n      }\r\n\r\n      alert(globalString);\r\n      sampleFunction();\r\n      alert(globalString);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's run this in JSFiddle and see what we get each time we ask for an alert.\u003c/p\u003e\r\n\u003ch2\u003eLocal Scope\u003c/h2\u003e\r\n\u003cp\u003eVariables declared inside of functions have\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elocal scope\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ewhich means they are only locally available during the execution of the function. When we look at a variable that is defined within a function, we find that it's scope ends when the function is finished processing. In fact, the variable is created and destroyed each time the function runs.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIf we move the variable declaration from the global to the local by adding it inside the function, let's see what happens:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esampleFunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e globalString = \u003cspan class=\"hljs-string\"\u003e\"This is a global variable\"\u003c/span\u003e;\r\n        alert(globalString);\r\n        globalString = \u003cspan class=\"hljs-string\"\u003e\"This is a global variable update!!\"\u003c/span\u003e;\r\n        alert(globalString);\r\n      }\r\n\r\n      alert(globalString);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNothing. Look in the console and the error\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eUncaught ReferenceError: globalString is not defined\u003c/code\u003e. We have not run the function so as the error message indicates,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eglobalString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas not actually been defined yet. It now has local scope.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's look at another example:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan\u003e\u0026lt;script   \u003c/span\u003e\u003cspan\u003esrc=\"https://code.jquery.com/jquery-3.3.1.min.js\" \u003c/span\u003e\u003cspan\u003eintegrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" \u003c/span\u003e\u003cspan\u003ecrossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eAn adventure in variable scope\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"click-one\"\u003c/span\u003e\u0026gt;\u003c/span\u003eclick me first\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"click-two\"\u003c/span\u003e\u0026gt;\u003c/span\u003eclick me second\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn your\u003cspan\u003e \u003c/span\u003e\u003cem\u003escript.js\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"div#click-one\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e whatToSay = \u003cspan class=\"hljs-string\"\u003e\"Hello!\"\u003c/span\u003e;\r\n          alert(whatToSay);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"div#click-two\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          alert(whatToSay);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eclick me first\u003c/em\u003e, a dialog box pops open that says \"Hello!\". If we then click click me second, what happens? Nothing. If we look to the JavaScript console, we find the familiar error\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUncaught ReferenceError: whatToSay is not defined\u003c/em\u003e. And that's true. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable is defined inside a function. Therefore, the program only knows about the variable while it is inside the function processing the code there. As soon as the function is complete, the variable is no longer defined; it's outside the limits of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e's variable scope.\u003c/p\u003e\r\n\u003ch2\u003eUnscoped variables (bad practice!)\u003c/h2\u003e\r\n\u003cp\u003eWhen you create a variable, it is important to declare it to the program using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIf you declare a variable by assigning it a value like this (without\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eNamer\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        sampleName = \u003cspan class=\"hljs-string\"\u003e\"Cindy Lou\"\u003c/span\u003e\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJavaScript will make it a global variable\u003cspan\u003e \u003c/span\u003e\u003cem\u003eautomatically\u003c/em\u003e, even if it is inside of a function. In the above function,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esampleName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewould become a global variable with global scope which allows any part of the code to access or modify it.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eThis is something you should\u003cspan\u003e \u003c/span\u003e\u003cem\u003enever\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edo. Always use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword to declare your variables and consciously determine whether their scope should be global or local.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's just carry this through so that you understand what's going on if you see it elsewhere:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"div#click-one\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          whatToSay = \u003cspan class=\"hljs-string\"\u003e\"Hello!\"\u003c/span\u003e;\r\n          alert(whatToSay);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"div#click-two\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          alert(whatToSay);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWith the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword removed from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e, if we click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eclick me first\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand then click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eclick me second\u003c/em\u003e, the dialog box will open up both times because it has defaulted to a global variable.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThis code is very small, so you may not see the problem with using a global variable. But imagine a code base that's thousands or tens of thousands of lines long. If you see a function that looks like:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(whatToSay);\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eit would be incredibly difficult to figure out where\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas defined. And if\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas used and changed in multiple places, it would be next to impossible to figure out where it's value was last set. (For a horror story on a missing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e, read Geoffrey Hayes's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.pixelstech.net/article/1320253282-How-One-Missing-%60var%60-Ruined-our-Launch\"\u003e\"How one missing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eruined our launch\"\u003c/a\u003estarting at the \"Seem kinda bad?\" paragraph.)\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eTo conclude, always create variables with either global or local scope using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword. Using scoped variables lets us easily follow the flow of our application and ensures our functions don't step on each other's execution in unexpected ways.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs jQuery used to hide and show definitions when flashcards are clicked on?\u003c/li\u003e\r\n\u003cli\u003eIs code indented properly throughout?\u003c/li\u003e\r\n\u003cli\u003eAre Git commit messages descriptive, and in the correct tense?\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"tuesday-variable-scope"},{"id":2074,"title":"Tuesday: Practice - More jQuery Basics","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ePractice jQuery basics by both creating a website that hides/shows various elements, and contains definitions of common jQuery and JavaScript terms.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a function? How do we create one? How do we call one?\u003c/li\u003e\r\n\u003cli\u003eWhat does it mean when we say \"Business Logic\" when referring to JavaScript?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between JavaScript and jQuery?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eFlashcard Site\u003c/h3\u003e\r\n\u003cp\u003eMake a webpage that is a flashcard site for learning JS \u0026amp; jQuery. On your site, a user should be able to click on a term or concept to see the definition appear. When they click on the definition, the original term should appear again. Here is a list of (some) terms and concepts that you have learned so far:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eJavascript (JS)\u003c/li\u003e\r\n\u003cli\u003eOperators\u003c/li\u003e\r\n\u003cli\u003eVariables\u003c/li\u003e\r\n\u003cli\u003eVariable naming conventions\u003c/li\u003e\r\n\u003cli\u003eFunctions\u003c/li\u003e\r\n\u003cli\u003eStrings\u003c/li\u003e\r\n\u003cli\u003eMethods\u003c/li\u003e\r\n\u003cli\u003eArguments\u003c/li\u003e\r\n\u003cli\u003eParameters\u003c/li\u003e\r\n\u003cli\u003eReturn\u003c/li\u003e\r\n\u003cli\u003eChaining methods\u003c/li\u003e\r\n\u003cli\u003eStrings\u003c/li\u003e\r\n\u003cli\u003eBooleans\u003c/li\u003e\r\n\u003cli\u003eUndefined\u003c/li\u003e\r\n\u003cli\u003eNaN\u003c/li\u003e\r\n\u003cli\u003eEscape\u003c/li\u003e\r\n\u003cli\u003eAlert\u003c/li\u003e\r\n\u003cli\u003eComments\u003c/li\u003e\r\n\u003cli\u003ejQuery\u003c/li\u003e\r\n\u003cli\u003eAttributes\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eRemember to start this project in its own directory, make it a Git repository and make frequent commits as you are building your site. Use Bootstrap as well. Feel free to add to this site later to help you study and remember key ideas of JavaScript and jQuery.\u003c/p\u003e","exportId":"tuesday-practice-more-jquery-basics"},{"id":2004,"title":"Wednesday: Forms","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eSo far, the only way we've been able to capture user input is by using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e. Let's learn about forms so that we can build more interesting pages.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eHave you ever played Mad Libs? You're prompted to fill out a list of nouns, verbs, adjectives, etc., and then copy them onto another piece of paper that contains a story, missing those crucial words that you are now providing. The idea is to pick bizarre words without knowing what the story is, and then when you fill them in, the results can be hilarious.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's make a page that mimics the Mad Libs format:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;html\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e   \u0026lt;head\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;link href=\"css/bootstrap.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;link href=\"css/styles.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;script   src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;script src=\"js/scripts.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;title\u0026gt;A fantastical adventure\u0026lt;/title\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e   \u0026lt;/head\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e   \u0026lt;body\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;div class=\"container\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e         \u0026lt;h1\u0026gt;Fill in the blanks to write your story!\u0026lt;/h1\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e         \u0026lt;div id=\"blanks\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e            \u0026lt;form\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;div class=\"form-group\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;label for=\"person1\"\u0026gt;A name\u0026lt;/label\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;input id=\"person1\" class=\"form-control\" type=\"text\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;div class=\"form-group\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;label for=\"person2\"\u0026gt;Another name\u0026lt;/label\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;input id=\"person2\" class=\"form-control\" type=\"text\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;div class=\"form-group\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;label for=\"animal\"\u0026gt;An animal\u0026lt;/label\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;input id=\"animal\" class=\"form-control\" type=\"text\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;div class=\"form-group\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;label for=\"exclamation\"\u0026gt;An exclamation\u0026lt;/label\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;input id=\"exclamation\" class=\"form-control\" type=\"text\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;div class=\"form-group\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;label for=\"verb\"\u0026gt;A past tense verb\u0026lt;/label\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;input id=\"verb\" class=\"form-control\" type=\"text\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;div class=\"form-group\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;label for=\"noun\"\u0026gt;A noun\u0026lt;/label\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;input id=\"noun\" class=\"form-control\" type=\"text\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;button type=\"submit\" class=\"btn\"\u0026gt;Show me the story!\u0026lt;/button\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e            \u0026lt;/form\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e         \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e         \u0026lt;div id=\"story\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e            \u0026lt;h1\u0026gt;A fantastical adventure\u0026lt;/h1\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e            \u0026lt;p\u0026gt;One day, \u0026lt;span class=\"person1\"\u0026gt;\u0026lt;/span\u0026gt; and \u0026lt;span class=\"person2\"\u0026gt;\u0026lt;/span\u0026gt; were walking through the woods, when suddenly a giant \u0026lt;span class=\"animal\"\u0026gt;\u0026lt;/span\u0026gt; appeared. \"\u0026lt;span class=\"exclamation\"\u0026gt;\u0026lt;/span\u0026gt;\", \u0026lt;span class=\"person1\"\u0026gt;\u0026lt;/span\u0026gt; cried. The two of them \u0026lt;span class=\"verb\"\u0026gt;\u0026lt;/span\u0026gt; as quickly possible, and when they were safe, \u0026lt;span class=\"person1\"\u0026gt;\u0026lt;/span\u0026gt; and \u0026lt;span class=\"person2\"\u0026gt;\u0026lt;/span\u0026gt; gave each other a giant \u0026lt;span class=\"noun\"\u0026gt;\u0026lt;/span\u0026gt;.\u0026lt;/p\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e         \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e   \u0026lt;/body\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eHere, I've used some Bootstrap classes to make the form look nice; you can read more about them in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#forms\" target=\"_blank\"\u003eBootstrap Form Documentation\u003c/a\u003e.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's make the story hidden to start:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e#story {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  display: none;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, our JavaScript needs to get the value from the form inputs, insert them into the \u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003es where the information should go, and then un-hide the story itself. We know how to insert text into our pages, so let's get that working before we try to get the data from the form:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$(document).ready(function() {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e    $(\"#blanks form\").submit(function() {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".person1\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".person2\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".animal\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".exclamation\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".verb\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".noun\").append(\"blah blah\");\u003cbr\u003e\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\"#story\").show();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e    });\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e});\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esubmit()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction attaches an event listener for when a form is submitted. It's different from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction because a form can be submitted by clicking the submit button, of course, but it can also be submitted by pressing \u003cem\u003eEnter\u003c/em\u003e while a form field is selected. But when we submit the form, the story briefly flashes and then disappears. What's happening is that, by default, forms try to send the information somewhere, and since we haven't told it where to submit to, the page just refreshes and erases our hard work. If you look in the URL bar, you can see that there's a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e?\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eat the end of the address now. This is your clue that the form has been submitted to nowhere and the page refreshed. We need to prevent the default action for the form:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$(document).ready(function() {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e    $(\"#blanks form\").submit(function(event) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".person1\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".person2\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".animal\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".exclamation\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".verb\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".noun\").append(\"blah blah\");\u003cbr\u003e\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\"#story\").show();\u003cbr\u003e\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        event.preventDefault();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e    });\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e});\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 1rem;\"\u003eNotice that we've added a parameter event to the callback function we passed \u003c/span\u003eto\u003cspan style=\"font-size: 1rem;\"\u003e \u003c/span\u003e\u003ccode\u003esubmit()\u003c/code\u003e\u003cspan style=\"font-size: 1rem;\"\u003e \u003c/span\u003emethod\u003cspan style=\"font-size: 1rem;\"\u003e. When the form is submitted, jQuery runs the callback function and passes in something as an argument. We don't know what this \"something\" is - we just know that it somehow represents the event of the form being submitted, and so we give the parameter the \u003c/span\u003ename\u003cspan style=\"font-size: 1rem;\"\u003e event. And we know that if we call the \u003c/span\u003emethod\u003cspan style=\"font-size: 1rem;\"\u003e \u003c/span\u003e\u003ccode\u003epreventDefault()\u003c/code\u003e\u003cspan style=\"font-size: 1rem;\"\u003e \u003c/span\u003eon\u003cspan style=\"font-size: 1rem;\"\u003e this event thing, it will stop the form from submitting.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 1rem;\"\u003eThis is a pretty confusing concept. If you aren't at least 70% clear on the previous paragraph, stop and re-read it, slowly and carefully. If you are at least 70% clear, come back and re-read it a couple more times after you finish this lesson. You might also re-visit the lesson on \u003ca href=\"modules/items/if66512394ffac0e83ff00474f70160c1\"\u003eWriting Functions\u003c/a\u003e, which includes an explanation of arguments and parameters. Now, we need to actually get the values from the form. If we open up the JavaScript console on the page and run:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; $(\u003cspan class=\"hljs-string\"\u003e\"input#person1\"\u003c/span\u003e).val();\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can see that this jQuery method returns the value from the input as a string. Since the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eappend()\u003c/code\u003emethod takes a string as an argument, we can update our code like this:\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$(document).ready(function() {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e    $(\"#blanks form\").submit(function(event) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var person1Input = $(\"input#person1\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var person2Input = $(\"input#person2\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var animalInput = $(\"input#animal\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var exclamationInput = $(\"input#exclamation\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var verbInput = $(\"input#verb\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var nounInput = $(\"input#noun\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".person1\").append(person1Input);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".person2\").append(person2Input);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".animal\").append(animalInput);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".exclamation\").append(exclamationInput);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".verb\").append(verbInput);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".noun\").append(nounInput);\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\"#story\").show();\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        event.preventDefault();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e    });\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e});\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eNow our page works. Hooray!\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThere's one last thing to fix, though. If you don't refresh the page and you change the value of one of the inputs, it just adds it after the first value, instead of replacing it. We need to replace the existing text rather than just appending to it:\u003ccode class=\"javascript hljs\"\u003e\u003cbr\u003e\u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$(document).ready(function() {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e    $(\"#blanks form\").submit(function(event) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var person1Input = $(\"input#person1\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var person2Input = $(\"input#person2\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var animalInput = $(\"input#animal\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var exclamationInput = $(\"input#exclamation\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var verbInput = $(\"input#verb\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var nounInput = $(\"input#noun\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".person1\").text(person1Input);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".person2\").text(person2Input);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".animal\").text(animalInput);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".exclamation\").text(exclamationInput);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".verb\").text(verbInput);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".noun\").text(nounInput);\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\"#story\").show();\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        event.preventDefault();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e    });\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e});\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e","exportId":"wednesday-forms"},{"id":2005,"title":"Wednesday: Refactoring - Don't Repeat Yourself","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eRefactoring with Loops\u003c/h2\u003e\r\n\u003cp\u003eOne thing I didn't particularly like about our Mad Libs code is all the duplication:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e person1Input = $(\u003cspan class=\"hljs-string\"\u003e\"input#person1\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e person2Input = $(\u003cspan class=\"hljs-string\"\u003e\"input#person2\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e animalInput= $(\u003cspan class=\"hljs-string\"\u003e\"input#animal\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e exclamationInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#exclamation\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e verbInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#verb\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nounInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#noun\"\u003c/span\u003e).val()\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".person1\"\u003c/span\u003e).text(person1Input);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".person2\"\u003c/span\u003e).text(person2Input);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".animal\"\u003c/span\u003e).text(animalInput);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".exclamation\"\u003c/span\u003e).text(exclamationInput);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".verb\"\u003c/span\u003e).text(verbInput);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".noun\"\u003c/span\u003e).text(nounInput);\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n      event.preventDefault();\r\n    });\r\n  });\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's refactor this using arrays and looping:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n      blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#\"\u003c/span\u003e + blank).val();\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput);\r\n      });\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n      event.preventDefault();\r\n    });\r\n  });\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eThe Importance of DRY Code (\"Don't Repeat Yourself!\")\u003c/h2\u003e\r\n\u003cp\u003eI'm going to end this lesson with a short lecture. One of the best definitions of \"good code\" I've heard states that the one thing that's certain about software, is that it changes. There will always be new features to add and bugs to fix. Often, the people working on the software will change, and even if they don't, the original developers will need to modify code they wrote months or years ago, code that they sometimes can't even remember writing.\u003c/p\u003e\r\n\u003cp\u003eOne of things I really like about the new, looping version of the Madlibs JavaScript is that there's no repetition in the code, which makes it easy to change. Before, we did the same thing 6 times: get the value of the input, then put in in the appropriate blank space. If we want to change something - like, I don't know, capitalize all the text before inserting it onto the page (obviously this is contrived, but hopefully you get the idea) - then we have to change all 6 places. In this small example, the only room for error is maybe forgetting to update one line, although that would be embarrassing. But as your programs get more complex, you'll see that, if you have repetitive code, it becomes very difficult to maintain, and you will regularly update one place and fail to update another - or worse yet, update them in different ways that cause incompatibilities down the road.\u003c/p\u003e\r\n\u003cp\u003eThere's a principle in software development called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDon't Repeat Yourself\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDRY\u003c/strong\u003e. DRY code is easy to change because you only have to make any change in one place. One way we DRY up our code is by taking repetitive bits of code and extracting them into a function. Another way is by taking something we do several times and by turning it into a loop. Whenever you finish writing some code, you should always look back to see if there is any way you can DRY it up.\u003c/p\u003e\r\n\u003cp\u003eAlso, remember how I harped on about using descriptive variable names? \"Easy to change\" doesn't just mean clean code - if you can't figure out what a variable is for or what a function does based on its name, then it's harder to change it down the road, when you might not remember exactly how your code works (or when somebody else is trying to change your code).\u003c/p\u003e","exportId":"wednesday-refactoring-dont-repeat-yourself"},{"id":2006,"title":"Thursday: Separation of User Interface and Business Logic","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that we know how to use jQuery to gather input from forms, let's return to our calculator app. We should already have the business logic in place, but it still needs a user interface.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eRemember, just as we discussed previously,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebusiness (or back-end) logic\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ehandles calculations and manipulation of data 'behind the scenes', and\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003euser interface (or front-end) logic\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ehandles interacting with the user, including gathering user input, updating and displaying information on the page, etc. Furthermore, our project should be organized in a manner that keeps these two types of logic distinctly\u003cspan\u003e \u003c/span\u003eseparate.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we'll walk through adding user interface (front-end) logic to our existing calculator application, further explore the differences between business and user interface logic, and address how to keep them properly separated. For now we will focus exclusively on our addition functionality. In subsequent lessons we'll expand our user interface to support subtraction, division and multiplication too.\u003c/p\u003e\r\n\u003ch2\u003eLinking Resources\u003c/h2\u003e\r\n\u003cp\u003eClone your existing calculator application, and we'll pick up right where we left off. (If you're concerned your previous calculator project may not contain the correct code, don't worry! All necessary code for a functioning calculator is present in this lesson for review.) If you were able to complete all directions in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/monday-calculator-business-logic?module_item_id=1919\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/pages/monday-calculator-business-logic\" data-api-returntype=\"Page\"\u003e\u003cspan\u003ePractice: Calculator Business Logic\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eexercise, your project should already contain an HTML file. Let's update its \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e section to link to everything our application will need. This includes a link to Bootstrap, our own CSS stylesheet, the jQuery library, and our own custom JavaScript \u003cem\u003escripts.js\u003c/em\u003e file. Here's an example HTML file with these resources correctly linked:\u003c/p\u003e\r\n\u003cpre\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e     \u0026lt;title\u0026gt;Calculator\u0026lt;/title\u0026gt;\u003cbr\u003e     \u0026lt;link href=\"css/bootstrap.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003cbr\u003e     \u0026lt;link href=\"css/styles.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003cbr\u003e     \u0026lt;script   src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e     \u0026lt;script src=\"js/scripts.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e     \u0026lt;h1\u0026gt;Calculator\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt;\u003c/pre\u003e\r\n\u003cp\u003eDo note that the file above assumes you've downloaded\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto your project's \u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder and the latest version of jQuery into your project's \u003cem\u003ejs\u003c/em\u003e folder, as we've covered in previous lessons. You should already have a\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in your js folder containing the JavaScript business logic we wrote in the previous calculator exercise. Additionally, make sure the link to jQuery comes before the link to your own\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. Because we're going to write code in\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat will use jQuery, our application must load the jQuery library before it loads\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e. If jQuery isn't loaded beforehand, our application won't know what to do when it reaches the jQuery code in\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebecause it won't even know what jQuery is yet!\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAlways link any scripts files that use jQuery after you link the jQuery library itself.\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdding Forms\u003c/h2\u003e\r\n\u003cp\u003eNow that we have our necessary resources in place, let's begin adding to our application's HTML. Instead of asking the user to provide our calculator numbers with dialog boxes, let's allow them to submit numbers through our actual HTML web page. To do this, we'll add an HTML form. Since we're focusing only on creating a user interface for our addition functionality for now, we'll give this form the id\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd\u003c/code\u003e. We'll use this id to target the form later on in our jQuery code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\u003c/code\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;html\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e   \u0026lt;head\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;title\u0026gt;Calculator\u0026lt;/title\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;link href=\"css/bootstrap.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;link href=\"css/styles.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;script   src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;script src=\"js/scripts.js\"\u0026gt;\u0026lt;/script\u0026gt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e   \u0026lt;/head\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e   \u0026lt;body\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;h1\u0026gt;Calculator\u0026lt;/h1\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;form id=\"add\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e         \u0026lt;div class=\"form-group\"\u0026gt; \u0026lt;label for=\"add1\"\u0026gt;1st number:\u0026lt;/label\u0026gt; \u0026lt;input id=\"add1\" class=\"form-control\" type=\"text\"\u0026gt; \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e         \u0026lt;div class=\"form-group\"\u0026gt; \u0026lt;label for=\"add2\"\u0026gt;2nd number:\u0026lt;/label\u0026gt; \u0026lt;input id=\"add2\" class=\"form-control\" type=\"text\"\u0026gt; \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e         \u0026lt;button type=\"submit\" class=\"btn\"\u0026gt;Add!\u0026lt;/button\u0026gt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;/form\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e   \u0026lt;/body\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003ctable\u003e\u003c/table\u003e\r\n\u003ch2\u003eAdding User Interface Logic\u003c/h2\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile should already contain some code. If you successfully completed the previous calculator exercise, the business logic present in your \u003cem\u003escripts.js\u003c/em\u003e file should look similar to this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003c/code\u003e\u003cspan style=\"font-weight: 400;\"\u003evar add = function(number1, number2) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  return number1 + number2;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e};\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003evar subtract = function(number1, number2) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  return number1 - number2;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e};\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003evar multiply = function(number1, number2) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  return number1 * number2;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e};\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003evar divide = function(number1, number2) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  return number1 / number2;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e};\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd the code currently responsible for gathering user input should resemble this:\u003c/p\u003e\r\n\u003cpre\u003evar number1 = parseInt(prompt(\"Enter a number:\"));\u003cbr\u003evar number2 = parseInt(prompt(\"Enter another number:\"));\u003cbr\u003ealert(add(number1, number2));\u003c/pre\u003e\r\n\u003cp\u003eIf your calculator's business logic doesn't resemble the examples above yet, pause here and take some time to review the example code, or revisit the \u003ca href=\"pages/monday-calculator-business-logic?module_item_id=1919\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/pages/monday-calculator-business-logic\" data-api-returntype=\"Page\"\u003ePractice: Calculator Business Logic\u003c/a\u003e exercise before moving forward. We'll continue to add to this calculator project in future lessons, so make sure your version is up-to-date.\u003c/p\u003e\r\n\u003ch2\u003eGathering Form Input with jQuery\u003c/h2\u003e\r\n\u003cp\u003eNow, let's change the logic responsible for interacting with the user. Let's add functionality to gather information the user has supplied in our new form when they hit 'submit'. This will be much nicer than relying on those pesky pop-up dialog boxes. We'll begin by moving our existing user interface logic into a function passed to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e. We only want logic responsible for interacting with the user in this block of code that begins with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e. The business logic code should not be within this function, but the jQuery user interface logic should. This is because it's fine if the business logic functions are loaded into the computer's memory\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe HTML finishes rendering, but we don't want to begin dealing with input or output until the HTML document is fully loaded. Otherwise, we could hit some pretty big errors. Our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile should now look like this (although you don't need the comments; those are just for reference here in this lesson):\u003c/p\u003e\r\n\u003cpre\u003e// Business (or back-end) logic:\u003cbr\u003e\u003cbr\u003evar add = function(number1, number2) {\u003cbr\u003e return number1 + number2;\u003cbr\u003e};\u003cbr\u003evar subtract = function(number1, number2) {\u003cbr\u003e return number1 - number2;\u003cbr\u003e};\u003cbr\u003evar multiply = function(number1, number2) {\u003cbr\u003e return number1 * number2;\u003cbr\u003e};\u003cbr\u003evar divide = function(number1, number2) {\u003cbr\u003e return number1 / number2;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003e// Everything below this line is user interface (or front-end) logic:\u003cbr\u003e\u003cbr\u003e$(document).ready(function() {\u003cbr\u003e var number1 = parseInt(prompt(\"Enter a number:\"));\u003cbr\u003e var number2 = parseInt(prompt(\"Enter another number:\"));\u003cbr\u003e alert(add(number1, number2));\u003cbr\u003e});\u003c/pre\u003e\r\n\u003cp\u003eNow, let's add code to gather the data users provide in our form. Before we add this directly into\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e, let's experiment in the console. Visit your HTML page, and enter some values in the form. Then, if we open the JavaScript console on that same page we can test out the following jQuery to see what will successfully return the input we've placed in the form. Let's try out the following lines of jQuery:\u003c/p\u003e\r\n\u003cpre\u003e$(\"#add1\").val();\u003cbr\u003e$(\"#add2\").val();\u003c/pre\u003e\r\n\u003cp\u003eHere, we're targeting two HTML form elements in each of the two lines listed above. An input with the id of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand an input with the id of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.val()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto fetch the current value of that form.\u003c/p\u003e\r\n\u003cp\u003eAnd hey, it works! We can see that each of these two lines of jQuery successfully returned the value currently present in the respective form fields. Now that we know these two lines of code gather the information we need, we can include them in our user interface logic:\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-size: 1rem;\"\u003e\u003cspan style=\"font-size: 10pt;\"\u003e$(document).ready(function()\u003c/span\u003e {\u003c/span\u003e\u003cbr\u003e  var number1 = parseInt($(\"#add1\").val());\u003cbr\u003e  var number2 = parseInt($(\"#add2\").val());\u003cbr\u003e  alert(add(number1, number2));\u003cbr\u003e});\u003c/pre\u003e\r\n\u003cp\u003eHere, we're replacing the values retrieved via\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edialog boxes with jQuery to instead retrieve these values from our form. We still need\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecause, like the information we gathered with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edialog boxes, content gathered from form inputs is also always in string format, and our calculator's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction requires numbers.\u003c/p\u003e\r\n\u003ch2\u003eWaiting for Users to Submit Form\u003c/h2\u003e\r\n\u003cp\u003eNow, if we open our HTML file in the browser, it displays our form, but immediately greets us with an alert reading\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e. Even though we're now waiting for the HTML document to finish loading!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Thursday/no-submit-listener-resulting-in-NaN-alert.png\" alt=\"no-submit-listener-resulting-in-NaN-alert.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1716\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis is because we're not actually waiting for the user to submit the form, and the alert above is being triggered\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe HTML loads, but before the user has time to fill our form out! Our code is grabbing the empty form inputs and attempting to add them together, resulting in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evalue we see here. Ideally, we want to wait until the user actually submits the form. Let's add a form submit event handler and its accompanying\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eevent.preventDefault()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe discussed in the \u003ca href=\"pages/wednesday-forms?module_item_id=67\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/pages/wednesday-forms\" data-api-returntype=\"Page\"\u003eForms\u003c/a\u003e lesson:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003c/code\u003evar add = function(number1, number2) {\u003cbr\u003ereturn number1 + number2;\u003cbr\u003e};\u003cbr\u003evar subtract = function(number1, number2) {\u003cbr\u003ereturn number1 - number2;\u003cbr\u003e};\u003cbr\u003evar multiply = function(number1, number2) {\u003cbr\u003ereturn number1 * number2;\u003cbr\u003e};\u003cbr\u003evar divide = function(number1, number2) {\u003cbr\u003ereturn number1 / number2;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003e$(document).ready(function() {\u003cbr\u003e$(\"form#add\").submit(function(event) {\u003cbr\u003eevent.preventDefault();\u003cbr\u003evar number1 = parseInt($(\"#add1\").val());\u003cbr\u003evar number2 = parseInt($(\"#add2\").val());\u003cbr\u003ealert(add(number1, number2));\u003cbr\u003e});\u003cbr\u003e});\u003c/pre\u003e\r\n\u003ch2\u003eDisplaying Results Directly in HTML\u003c/h2\u003e\r\n\u003cp\u003eIf we refresh our page and try again, everything should work correctly this time:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Week%202%20Thursday/calculator-dialog-with-correct-answer.png\" alt=\"calculator-dialog-with-correct-answer.png\" width=\"516\" height=\"327\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1691\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe don't see that alert dialog box with the result until\u003cspan\u003e \u003c/span\u003eafter we provide two numbers and submit the form. Perfect!\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eHowever, that pop-up\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edialog doesn't make for the nicest user interface. Instead, let's display our calculator's answer directly in our HTML web page and bypass the need for pop-up dialogs all together. This is also part of the user interface logic. Below the form, let's add in an empty div where we may place the result. We'll give it an id of\u003cspan\u003e \u003ccode\u003eoutput\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003ein order to target it using jQuery:\u003c/p\u003e\r\n\u003cpre\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e     \u0026lt;title\u0026gt;Calculator\u0026lt;/title\u0026gt;\u003cbr\u003e     \u0026lt;link href=\"css/bootstrap.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003cbr\u003e     \u0026lt;link href=\"css/styles.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003cbr\u003e     \u0026lt;script   src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e     \u0026lt;script src=\"js/scripts.js\"\u0026gt;\u0026lt;/script\u0026gt; \u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e     \u0026lt;h1\u0026gt;Calculator\u0026lt;/h1\u0026gt;\u003cbr\u003e     \u0026lt;form id=\"add\"\u0026gt;\u003cbr\u003e        \u0026lt;div class=\"form-group\"\u0026gt; \u0026lt;label for=\"add1\"\u0026gt;1st number:\u0026lt;/label\u0026gt; \u0026lt;input id=\"add1\" class=\"form-control\" type=\"text\"\u0026gt; \u0026lt;/div\u0026gt;\u003cbr\u003e        \u0026lt;div class=\"form-group\"\u0026gt; \u0026lt;label for=\"add2\"\u0026gt;2nd number:\u0026lt;/label\u0026gt; \u0026lt;input id=\"add2\" class=\"form-control\" type=\"text\"\u0026gt; \u0026lt;/div\u0026gt;\u003cbr\u003e        \u0026lt;button type=\"submit\" class=\"btn\"\u0026gt;Add!\u0026lt;/button\u0026gt; \u003cbr\u003e     \u0026lt;/form\u0026gt;\u003cbr\u003e     \u0026lt;div id=\"output\"\u0026gt; \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt;\u003c/pre\u003e\r\n\u003cp\u003eAnd, instead of popping up that \u003cspan\u003e\u003ccode\u003ealert\u003c/code\u003e\u003c/span\u003e dialog, we'll simply replace the contents of our new\u003cspan\u003e \u003ccode\u003eoutput\u003c/code\u003e\u003c/span\u003e div\u003cspan\u003e \u003c/span\u003ewith the result, using jQuery's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.text()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Let's also assign the result of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.add()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to the variable name result, then simply insert result directly onto our page in order to make our code clean and easy to follow:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003c/code\u003e\u003ccode class=\"javascript hljs\"\u003e\u003c/code\u003evar add = function(number1, number2) {\u003cbr\u003ereturn number1 + number2;\u003cbr\u003e};\u003cbr\u003evar subtract = function(number1, number2) {\u003cbr\u003ereturn number1 - number2;\u003cbr\u003e};\u003cbr\u003evar multiply = function(number1, number2) {\u003cbr\u003ereturn number1 * number2;\u003cbr\u003e};\u003cbr\u003evar divide = function(number1, number2) {\u003cbr\u003ereturn number1 / number2;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003e$(document).ready(function() {\u003cbr\u003e$(\"form#add\").submit(function(event) {\u003cbr\u003eevent.preventDefault();\u003cbr\u003evar number1 = parseInt($(\"#add1\").val());\u003cbr\u003evar number2 = parseInt($(\"#add2\").val());\u003cbr\u003evar result = add(number1, number2);\u003cbr\u003e$(\"#output\").text(result);\u003cbr\u003e});\u003cbr\u003e});\u003c/pre\u003e\r\n\u003cp\u003eNow, we should be able to run our application in the browser, insert two numbers into the form fields, and submit the form to see our answer added to the page.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Thursday/calculator-result-added-directly-to-page.png\" alt=\"calculator-result-added-directly-to-page.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1692\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYou may have noticed that our calculator's user interface only offers the option to add two numbers together; despite our business logic containing functions that offer subtraction, multiplication, and division too. In future lessons we'll add support for users to choose which mathematic operation they'd like to execute on the provided numbers, instead of defaulting to addition.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eBut for now, we have a fully functioning addition calculator, complete with a user interface. That's awesome!\u003c/p\u003e\r\n\u003ch2\u003eSeparation of Logic Review\u003c/h2\u003e\r\n\u003cp\u003eLet's take a moment to review the manner we organized our business and user interface logic:\u003c/p\u003e\r\n\u003cpre\u003e// Business (or back-end) logic:\u003cbr\u003evar add = function(number1, number2) {\u003cbr\u003e  return number1 + number2;\u003cbr\u003e};\u003cbr\u003evar subtract = function(number1, number2) {\u003cbr\u003e  return number1 - number2;\u003cbr\u003e};\u003cbr\u003evar multiply = function(number1, number2) {\u003cbr\u003e  return number1 * number2;\u003cbr\u003e};\u003cbr\u003evar divide = function(number1, number2) {\u003cbr\u003e  return number1 / number2;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003e// User interface (or front-end) logic:\u003cbr\u003e$(document).ready(function() {\u003cbr\u003e  $(\"form#add\").submit(function(event) {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    var number1 = parseInt($(\"#add1\").val());\u003cbr\u003e    var number2 = parseInt($(\"#add2\").val());\u003cbr\u003e    var result = add(number1, number2);\u003cbr\u003e    $(\"#output\").text(result);\u003cbr\u003e  });\u003cbr\u003e});\u003c/pre\u003e\r\n\u003cp\u003eWe can see that the business logic and user interface logic are in distinctly separate sections of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. The user interface sections is responsible for gathering user-provided values, parsing them into integers, and calling our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction when the user submits a form. It also displays the result of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction directly on the page for the user to view. Essentially, this section is handling all interactivity with our user. It can call a back-end function (as seen in the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar result = add(number1, number2);\u003c/code\u003e), but the function is not defined here in this block of code. That's the responsibility of the business, or back-end logic.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThe business logic contains functions for all capabilities our calculator will eventually have. It instructs our application what to do when a user opts to add two numbers, versus what to do when a user opts to divide two numbers (a feature we'll add later on). However, notice that it does not contain anything that interacts with the user. All logic here occurs 'behind the scenes'. The user interface logic may call one of the business logic's functions when necessary, but the functions themselves are defined in the back-end or business logic.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThis is ideal separation between front and back-end logic. They're distinctly separate areas of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003efile, are responsible for distinctly different things, and our front-end logic simply calls functions defined in the back-end when necessary.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eNow that we've created a working application with functioning front-end and back-end logic, revisit the Business and User Interface Logic if necessary.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003eBefore we move on make sure to also take a look at the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/\"\u003ejQuery documentation\u003c/a\u003e. It may feel a bit overwhelming at first, since it contains many concepts we haven't yet covered, but that's absolutely okay! Reading documentation is an incredibly important part of programming, so begin to familiarize yourself with it now. Not everything may make sense, but you'll be surprised at the amount you do understand after only a few weeks of programming! In particular, check out the sections on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/effects/\"\u003eEffects\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/events/mouse-events/\"\u003eMouse Events\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/events/form-events/\"\u003eForm Events\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/manipulation/\"\u003eManipulation\u003c/a\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/traversing/\"\u003eTraversing\u003c/a\u003e. Consider trying out some of the methods listed here your next projects! And in the future, when you're trying to figure out how to do something with jQuery, the documentation is always the first place to look.\u003c/p\u003e","exportId":"thursday-separation-of-user-interface-and-business-logic"},{"id":2007,"title":"Thursday: Practice - Calculator User Interface","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eContinue to practice implementing jQuery and developing good organizational habits of separating front and back-end code by adding additional features to our ongoing calculator project, and completing the additional exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do the user interface and business logic 'communicate'?\u003c/li\u003e\r\n\u003cli\u003eWhat does\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edo? What can occur if we forget to add it?\u003c/li\u003e\r\n\u003cli\u003eIs the following code user interface or business logic? Why? How can you tell?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"form#some-form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e someInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#some-input\"\u003c/span\u003e).val();\r\n        event.preventDefault();\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eCalculator User Interface\u003c/h3\u003e\r\n\u003cp\u003eIn the calculator user interface lesson, we built a site that collected two numbers from a form and then added them together by calling our pre-existing business logic\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.add()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Now it's your turn:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFollow along with the lesson to build out user interface logic for your calculator's addition capacity.\u003c/li\u003e\r\n\u003cli\u003eNow build out the user interface for subtraction, multiplication and division. You already have the business logic done. For now just have four separate forms - one for addition, one for subtraction, one for multiplication and one for division. In your JavaScript code, you'll need a form submit event handler for each form. (Soon, when we learn about branching, we'll adjust this to use just one form and allow the user to choose whether they want to add, subtract, multiply or divide.)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eAdditional jQuery Forms Practice\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd a form to each of the websites you are currently building. For example, on the resort website, the form should be used to submit a query from users wishing to find out more about your resort.\u003c/li\u003e\r\n\u003cli\u003eThank them for their query, and be sure to use their full name. Then reprint their address as a confirmation of receiving their question details. Go as wild as you can with the forms.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"thursday-practice-calculator-user-interface"},{"id":2008,"title":"Thursday: Form Input Types","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eForm Input Types\u003c/h2\u003e\r\n\u003cp\u003eWe've already seen how to gather input from text fields, but there are a variety of other types of form fields as well: Select boxes, radio buttons and checkboxes are perhaps the most prominent. HTML5, finalized in 2014 and now widely supported, also introduced a number of additional input types, including date, color, email, tel, url, number, and many others. See the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\"\u003eMDN\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor a full list of HTML input types. Bootstrap also has more information about them\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#forms-controls\"\u003ehere\u003c/a\u003e. Generally as you come across the need to gather input in a particular way, you'll do some research to figure out how to read input in that way. We'll introduce a few of the most common input field types. But first, a note of warning:\u003c/p\u003e\r\n\u003ch2\u003eAlways\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eyour Number Values\u003c/h2\u003e\r\n\u003cp\u003eJust because you mark your HTML input field as\u003cspan\u003e \u003c/span\u003e\u003cem\u003enumber, date\u003c/em\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cem\u003etel\u003c/em\u003e, don't expect it to come in as the JavaScript\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enumber\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003etype. Marking it in your html as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etype=\"number\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust means that the browser will do some preliminary checking to encourage the user to enter a number rather than some text. But when you use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.val()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto read the input, it will still come in as a JavaScript\u003cspan\u003e \u003c/span\u003e\u003cem\u003estring\u003c/em\u003e, not a\u003cspan\u003e \u003c/span\u003e\u003cem\u003enumber\u003c/em\u003e. The HTML input types mostly just help indicate to the user what type of input is expected and/or allow the user to more easily enter a value such as a date or color.\u003c/p\u003e\r\n\u003ch2\u003eSelect Boxes\u003c/h2\u003e\r\n\u003cp\u003eSimple select boxes (where the user can only select one item) are pretty easy to implement.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Week%202%20Thursday/select-box-form-input.png\" alt=\"select-box-form-input.png\" width=\"400\" height=\"115\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1697\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis goes inside the form in your html:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eselect\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"beverage\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003eCoffee\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003eTea\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003eKombucha\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003eWater\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eselect\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd this is one way to read out the value in your form submit event handler:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e beverage = $(\u003cspan class=\"hljs-string\"\u003e\"#beverage\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you wanted to instead give each option a value different from the text the user sees, you could change your select to look like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eselect\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"beverage\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\u0026gt;\u003c/span\u003eCoffee\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"2\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTea\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"3\"\u003c/span\u003e\u0026gt;\u003c/span\u003eKombucha\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4\"\u003c/span\u003e\u0026gt;\u003c/span\u003eWater\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eselect\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when you gather the input with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(\"#beverage\").val()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eyou'll get \"1\", \"2\", \"3\" or \"4\". Note that they still come in as strings, so in this case you would probably want to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto convert the inputted data to a number.\u003c/p\u003e\r\n\u003ch2\u003eRadio Buttons\u003c/h2\u003e\r\n\u003cp\u003eRadio buttons allow the user to select one and only one option from a list.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Thursday/radio-button-form-input.png\" alt=\"radio-button-form-input.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1696\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eHere's an example of doing radio buttons (this would go inside the form in your html):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"flavor\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"chocolate\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echecked\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          Chocolate\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"flavor\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vanilla\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          Vanilla\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"flavor\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"cookiesandcream\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          Cookies \u0026amp; Cream\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd a way to read the value selected:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javasript hljs javascript\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e flavor = $(\u003cspan class=\"hljs-string\"\u003e\"input:radio[name=flavor]:checked\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eCheckboxes\u003c/h2\u003e\r\n\u003cp\u003eCheckboxes work similarly to radio buttons, but allow users to select multiple options. Because we want to be able to collect all of a user's selections, we will first need to learn about something called an array, which we will do shortly. In its simplest form, an array is simply a list of multiple items packaged together.\u003c/p\u003e\r\n\u003ch2\u003eDate\u003c/h2\u003e\r\n\u003cp\u003eThe date input type provides an easier interface for users to browse, select, and input dates:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Thursday/date-select-form-input.png\" alt=\"date-select-form-input.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1694\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"born\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDate of birth:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"born\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"date\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dob = $(\u003cspan class=\"hljs-string\"\u003e\"#born\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eColor\u003c/h2\u003e\r\n\u003cp\u003eYou may not have seen this one before! The color form input type, when clicked, opens a special panel where users can fine-tune and select specific colors:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Thursday/color-select-form-input.png\" alt=\"color-select-form-input.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1693\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"color\"\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat is your favorite color?\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"color\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"color\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e favoriteColor = $(\u003cspan class=\"hljs-string\"\u003e\"#color\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e","exportId":"thursday-form-input-types"},{"id":2009,"title":"Thursday: Practice - Form Input Types","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eExplore using jQuery to gather a variety of form input types by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do we gather form input from a select (ie: dropdown) box? How does this differ from a basic input (ie: text) field?\u003c/li\u003e\r\n\u003cli\u003eWhat does\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e:checked\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erefer to when gathering input from radio buttons?\u003c/li\u003e\r\n\u003cli\u003eIf we\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eincludetype=\"number\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein an HTML form field, do we still need to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.parseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen retrieving the value (assuming we need a number)?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eSurvey\u003c/h3\u003e\r\n\u003cp\u003eUse a form to let the user fill out a survey. Ask them to fill in their name, their favorite foods, their favorite music, and any other information you feel like. Include all form input types we've covered so far (except checkboxes; we'll learn more about those next week!)\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs the user interface logic and business logic separated? Is there anything you can spot that is in an incorrect place?\u003c/li\u003e\r\n\u003cli\u003eIs code indented correctly throughout?\u003c/li\u003e\r\n\u003cli\u003eAre variable names descriptive of what they represent? Is it easy to tell what each is referring to?\u003c/li\u003e\r\n\u003cli\u003eIs a form successfully gathering input from users?\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"thursday-practice-form-input-types"},{"id":2010,"title":"Thursday: Debugging in Javascript","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eDebugging in Javascript\u003c/h2\u003e\r\n\u003cp\u003eAs you start writing more and more complex JavaScript, you'll run into increasingly difficult bugs and problems. Here are some approaches to debugging when something goes wrong.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eAs an example, let's use our Madlibs page, but with some errors I've introduced for us to debug. Here's the code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/code\u003e\u003ccode class=\"html hljs xml\"\u003e\u003cspan\u003e          \u0026lt;script   \u003c/span\u003e\u003cspan\u003esrc=\"https://code.jquery.com/jquery-3.3.1.min.js\" \u003c/span\u003e\u003cspan\u003eintegrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" \u003c/span\u003e\u003cspan\u003ecrossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;         \u003cbr\u003e\u003c/span\u003e\u003c/code\u003e\u003ccode class=\"html hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e          \u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scipts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e          \u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eA fantastical adventure\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e         \u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e         \u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e          \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e           \u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eFill in the blanks to write your story!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e           \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"blanks\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e             \u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAnother name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAn animal\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAn exclamation\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA past tense verb\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA noun\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eShow me the story!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e             \u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e            \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e            \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"story\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e             \u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eA fantastical adventure\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e             \u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eOne day, \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e and \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e were walking through the woods, when suddenly a giant \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e appeared. \"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\", \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e cried. The two of them \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e as quickly possible, and when they were safe, \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e and \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e gave each other a giant \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e             \u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e            \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e           \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e          \u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e        \u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eand for \u003cem\u003escripts.js\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).sho();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen I load up this page, fill out the form, and click the submit button, nothing happens. Time to debug! The first step of debugging is to look for error messages. If we open up the JavaScript console, sure enough, there's an error:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGET file:///Users/ian/coderamp/debug/js/scipts.js index.html:7\u003c/code\u003e. This error tells us that the browser tried to get the file\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escipts.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebut couldn't find it. And hey, that's our problem - we left the\u003cspan\u003e \u003c/span\u003e\u003cem\u003er\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eout of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escripts.js\u003c/code\u003e. I can't tell you how many times I've seen students spend a long time debugging, just to find out they mis-spelled a filename, which also applies to the whole lot of you :-). Let's fix that typo and reload the page.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eGreat, no more errors in the JavaScript console. But when we submit our form, again, we get nothing. Let's use another tactic: pausing on exceptions. If we open our JavaScript console and switch to the tab on the top that says Sources, there's a button on the top right that looks like an octagon with a pause button. If we click it twice, it turns purple. This will cause JavaScript to stop running whenever there's an error. If we submit our form, sure enough, it pauses on and highlights the offending line. I've mis-typed the method name:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(\"#story\").sho()\u003c/code\u003e; should be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(\"#story\").show();\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's fix this and move forward. Now, we don't have any errors, but we still aren't seeing the story. Let's try another tactic: checking to see what code is executed. I do that by adding an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto a couple points in my code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          alert(\u003cspan class=\"hljs-string\"\u003e'Got to beginning of form submit!'\u003c/span\u003e);\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n          alert(\u003cspan class=\"hljs-string\"\u003e'Got to end of form submit!'\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, when I submit my form, I can see if all my code is run, or if the form breaks at some point in the middle. In this case, both dialog boxes open up. So there's nothing actually breaking or not getting run in my code. That should be a clue to step back and review the documentation for the tools I'm using to make sure I haven't left anything out. If I look back at the lesson on forms with jQuery, I can see that I forgot to include\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eevent.preventDefault()\u003c/code\u003e. Let's add that:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd now our paragraph with the story finally shows!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eBut, there's still a problem: none of what we type actually gets put into the story. Something is going wrong, but it's hard to tell what by just looking at our code. Wouldn't it be nice if we could drop in and run just one line of our code at a time, to see what's going wrong? Chrome has a handy tool called the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edebugger\u003c/code\u003ekeyword to do just that. Here's how to use it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003edebugger\u003c/span\u003e;\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, whenever Chrome JavaScript engine hits the debugger keyword, it will pause execution and let us run whatever code we please. This only happens when the JavaScript console window is open, so let's make sure that it is. Now, when we submit the form, we get the same kind of screen we got when we paused on the exception. Down in the bottom left, there's a little arrow and some lines. Clicking that will open up a JavaScript console below our code. Here, we can run JavaScript as if we were at the exact point where the debugger keyword is.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's copy and paste the next line of code:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar userInput = $(\"input.\" + blank).val();\u003c/code\u003e. Hm, it returns\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e. I would have expected it to return the first person's name. Let's type blank so that we can see what the value of that variable is. Sure enough, it's person1. Let's just run $(\"input.\" + blank); to make sure that we're selecting the correct element. Oh, this is the problem - we're getting back an empty array. That's not what we wanted. If we look back at our HTML, we can see that our inputs have IDs, not classes, so we should be using #s, not .s in our jQuery selector. Let's try changing that in the debugger console: sure enough,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(\"input#\" + blank);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns the proper element. If we go back to our code, remove the debugger and update our selector, our page now works.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOne last helpful JavaScript debugging tool I'll tell you about is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e. Let's go back to before we used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edebugger\u003c/code\u003e, and try\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(userInput);\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we submit our form, the JavaScript console now says\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e6 undefined scripts.js:7\u003c/code\u003e. In other words, undefined was logged 6 times from line 7 of scripts.js. If we fix our code but leave the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein, the proper values get logged to the console.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eGenerally, I use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen there's a little piece of information I need to know that will help me debug, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edebugger\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen I need to explore my code to know what's going wrong.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eJust as a reminder, a useful debugging technique we explored before is changing the background color of an element to make sure you correctly selected what you were trying to, or checking in the Chrome developer tools under\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEvent Listeners\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eAnd those are the most important tricks of the trade for debugging.\u003c/p\u003e","exportId":"thursday-debugging-in-javascript"},{"id":2011,"title":"Discussion: HTML Forms","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eWarm Up\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eWhy does variable scope matter?\u003c/li\u003e\n\u003cli\u003eWhat happens when you don't use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto declare a variable? Why is that bad?\u003c/li\u003e\n\u003cli\u003eThere are two alerts that display the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erabbitName\u003c/code\u003e, one when the function runs and one at the end of the code. What value do you expect at each alert? (Use JSFiddle to test your theories.)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e rabbitName = \u003cspan class=\"hljs-string\"\u003e\"Njoro\"\u003c/span\u003e;\n\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehoppity\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        alert(rabbitName);\n        rabbitName=\u003cspan class=\"hljs-string\"\u003e\"Fredi\"\u003c/span\u003e;\n      }\n\n      hoppity();\n      alert(rabbitName);\n    \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat values do you expect at these alerts?\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e rabbitName = \u003cspan class=\"hljs-string\"\u003e\"Njoro\"\u003c/span\u003e;\n\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehoppity\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e rabbitName = \u003cspan class=\"hljs-string\"\u003e\"Tanu\"\u003c/span\u003e\n        alert(rabbitName);\n        rabbitName=\u003cspan class=\"hljs-string\"\u003e\"Fredi\"\u003c/span\u003e;\n      }\n\n      hoppity();\n      alert(rabbitName);\n    \u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eWhy do you need\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eevent.preventDefault()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen working with jQuery forms?\u003c/li\u003e\n\u003c/ul\u003e","exportId":"iceabe33ee77ccc9edfd195c98ed31460"},{"id":112,"title":"Thursday: Catch-up Day","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eCatch Up Day\u003c/h2\u003e\r\n\u003cp\u003eTake this day to do a review of this week's work and also the previous weeks' content. Take time and go through the further exploration sections and make sure that you are at par with what we are learning everyday. The technical mentors will be there to assist you as you cover what you did not understand and any other incomplete projects and exercises.\u003c/p\u003e\r\n\u003cp\u003eRemember, the ABC of a software developer is \"Always Be Coding\". Have fun!! :)\u003c/p\u003e","exportId":"thursday-catch-up-day"},{"id":267,"title":"Friday: Independent Project - Quiz Board","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":22.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003ch3\u003eQuiz Board\u003c/h3\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eYour high school has started an after-school computer club and they need your help! The club is finishing a course on JavaScript and they need a quiz for students to take at the end. They have asked you to create a page that contains questions about JavaScript. .\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cstrong\u003eGoal\u003c/strong\u003e:  The goal of this project is to create a project that allows the user to answer questions from a multiple choice questions that you would have created\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cstrong\u003eRequirements\u003c/strong\u003e\u003c/h2\u003e\r\n\u003cp\u003eAs a user, I would like have the freedom to choose the answers to a question. This means you will create  questions and the provide multiple choice to those questions. Lets take an example:\u003c/p\u003e\r\n\u003cp\u003eWhat is the other name for JavaScript?\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eECMAScript\u003c/li\u003e\r\n\u003cli\u003eVue\u003c/li\u003e\r\n\u003cli\u003eI don't know\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBreak the program down into simple, individual behaviors with input/output examples. Begin with the simplest possible behavior. List these behaviors (also known as \"specs\" or \"specifications\") in the project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eREADME.md\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003ch3\u003eExample Layout\u003c/h3\u003e\r\n\u003cp\u003eInitially, the website should have a form of questions with multiple choice answers as shown below:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/rsz_quizboard.png\" alt=\"rsz_quizboard.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/7324\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAfter filling up the form, the form should hide and then display the score. Each question should have a scope point allocated to it. For example, If you have answered question 1 correctly you will be awarded 20 points. :\u003cbr\u003e\u003cimg src=\"viewer/files/rsz_results_quiz_board.png\" alt=\"rsz_results_quiz_board.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/7325\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eAnd so on...\u003c/p\u003e\r\n\u003cp\u003eYour final application is not required to look like the example. Make it look better!\u003c/p\u003e\r\n\u003ch3\u003eExample Specifications Section in README\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/y3s9xmnmpl6yqfi/example-specs-in-readme.png\" alt=\"example-specs-in-readme-file\"\u003e\u003c/p\u003e\r\n\u003cp\u003eInclude similar specifications in your README for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebehaviors your program demonstrates.\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you finish meeting the objectives for this project, consider adding additional features, such as:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRecreate the example layout.\u003c/li\u003e\r\n\u003cli\u003eAdd images and other custom aesthetics.\u003c/li\u003e\r\n\u003cli\u003eImplement different behaviors/effects/images for different inputs.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eObjectives\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eYour code will be reviewed for the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eJavaScript business logic and user interface logic are separate.\u003c/li\u003e\r\n\u003cli\u003eBootstrap classes are used to style your page.\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003ejQuery effects are used\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003eForm gathers input from the user\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003eVariable names are descriptive and use lower camel case (e.g. myVariableExample) \u003cspan style=\"font-weight: 400;\"\u003eare descriptive of what they represent\u003c/span\u003e.\u003c/li\u003e\r\n\u003cli\u003eCode has proper indentation and spacing.\u003c/li\u003e\r\n\u003cli\u003eAll previous objectives have been met.\u003c/li\u003e\r\n\u003cli\u003eProject is broken down into \"plain English\" specs, listed in README.\u003c/li\u003e\r\n\u003cli\u003ePage incorporates a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eIndentation and spacing of HTML and CSS is accurate and consistent.\u003c/li\u003e\r\n\u003cli\u003eCommits are made regularly with clear messages associated with them\u003c/li\u003e\r\n\u003cli\u003eProject is deployed to GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eProject works as expected.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of week’s concepts. If prompted, you are able to discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject submittion time. It is to be submitted by 6pm onFriday unless otherwise stated\u003c/li\u003e\r\n\u003cli\u003eA project README that includes:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://gist.github.com/PurpleBooth/109311bb0361f32d87a2\"\u003eHere is an example\u003c/a\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eproject or program name\u003c/li\u003e\r\n\u003cli\u003eauthor name\u003c/li\u003e\r\n\u003cli\u003edescription of project\u003c/li\u003e\r\n\u003cli\u003eproject setup instructions\u003c/li\u003e\r\n\u003cli\u003elink to live site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003ecopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eProject is in a polished, portfolio-quality state.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003e(Suggestions for what this can mean: Intuitive, easy to follow layout. Simple yet polished styling. Form field labels where appropriate. Form fields that are validated correctly, and get cleared after submitting. Detailed, well put together readme. No typos. And much more.)\u003c/em\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eSubmission of Independent Projects\u003c/h2\u003e\r\n\u003cp\u003eIndependent Projects must be submitted by\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e6pm on Friday.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(For Moringa prep part-time students, code review and deadlines will be discussed in class.)\u003c/p\u003e\r\n\u003cp\u003eComplete the following steps to submit your project:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eBefore you start working on your project,create a github repository for your project\u003c/li\u003e\r\n\u003cli\u003eStart working on your project\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eBefore pushing your final code to Github,\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eat 5pm do a final check for each objective. Spend a few minutes checking indentation, removing commented-out code, creating a detailed README, etc. Your project should be polished and complete.\u003c/li\u003e\r\n\u003cli\u003e\u003cstrong\u003ePush the final code to your GitHub repo by 6pm local time.\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eEven if you are not completely done working on your project, push anyways which will communicate to your TM how much you have completed\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"i1132a4c6f26441f01cff15ecaadc8d6f"}]},{"id":26,"name":"Week 4","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":true,"exportId":"i8cc52d30f3269797c8cf847b330ec0ef","items":[{"id":2120,"title":"Monday: Object Oriented and Git Collaboration Objectives","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe've learned about JavaScript data types like strings, numbers, and booleans. We have also learned about JavaScript arrays which are collections of indexed data. This week we are going to learn about JavaScript \u003c/span\u003e\u003cstrong\u003eobjects\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e which collect data AND functions into a single \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eobject\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e unit. We will see how business logic and user interface logic work together in the creation and updating of objects.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the end of the week, you should be able to:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ebuild JavaScript objects with constructors\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eadd methods to JavaScript objects by creating prototypes\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe will also expand our Git skillset and learn how to do more complex collaboration.\u003c/p\u003e","exportId":"monday-object-oriented-and-git-collaboration-objectives"},{"id":1147,"title":"Monday: Team Week - Project Pitch","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eIn the final week of this course we will be working on web applications in groups of four. In preparation, we'll take the coming week to generate ideas and sign up for teams, so we'll be organized and ready to go first thing Monday of week 5!\u003c/p\u003e\r\n\u003ch2\u003eHomework \u003c/h2\u003e\r\n\u003cp\u003eGenerate an idea you would like to help develop into a working application. It could be a game, a new business idea, something educational, something fun, something to help others or something to change the world, an application or website a friend or family member could use, etc.\u003c/p\u003e\r\n\u003ch3\u003ePast Student Work\u003c/h3\u003e\r\n\u003cp\u003eHere are just a few examples of the types of projects past students have built during Team Week:\u003c/p\u003e\r\n\u003ch4\u003e\u003cstrong\u003eSites to plan activities\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eVacations, camping trips, road trips, weddings, pub crawls, organizing your friends together for a weekend.\u003c/p\u003e\r\n\u003ch4\u003e\u003cstrong\u003eRide sharing\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eA car pooling site fro people using the same routes\u003c/p\u003e\r\n\u003ch4\u003e\u003cstrong\u003eApps to lend a hand\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eLocate stolen bikes, missing pets, organize resources after natural disasters,\u003c/p\u003e\r\n\u003ch4\u003e\u003cstrong\u003eTools to connect people\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eHelping musicians find other musicians for jam sessions, puppy playdate finders, dating sites, interest-based meetups or communication tools, virtual study groups.\u003c/p\u003e\r\n\u003ch4\u003e\u003cstrong\u003eGames\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eText-oriented games like \"Choose your own adventure\"-style storytelling games, room escape, RPGs, word games, Oregon Trail.\u003c/p\u003e\r\n\u003cp\u003eDigital versions of your favorite games, such as Clue, Poker, Magic, Chess, Monopoly, Cards Against Humanity, Breakout, matching games, etc.\u003c/p\u003e\r\n\u003ch4\u003e\u003cstrong\u003eProductivity Tools\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eChecklists, organizers, note-taking, household grocery or to-do lists.\u003c/p\u003e\r\n\u003ch4\u003e\u003cstrong\u003eWebsites for real people\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eWebsites and apps for local businesses, family friends, etc.\u003c/p\u003e\r\n\u003ch2\u003eTimeline for This Week\u003c/h2\u003e\r\n\u003ch3\u003eMonday and Tuesday\u003c/h3\u003e\r\n\u003ch4\u003e\u003cstrong\u003e\u003cem\u003eBrainstorm Ideas\u003c/em\u003e\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eStarting Monday morning (today), begin listing project ideas on the glass wall including:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eA title and brief description of the project\u003c/li\u003e\r\n\u003cli\u003eYour name\u003c/li\u003e\r\n\u003cli\u003eThe language you are learning\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eOver the first two days of the week, ideas will be added and updated on the board. Students may sign up as they see projects that interest them. Talk to potential groups; ask questions; sign up for a project you feel most interested in and passionate about!\u003c/p\u003e\r\n\u003ch3\u003eWednesday\u003c/h3\u003e\r\n\u003ch4\u003e\u003cstrong\u003e\u003cem\u003eSign Up\u003c/em\u003e\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eEveryone is required to sign up for a team no later than Wednesday. Remember,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eall teams should contain 4 students.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf a team already has 4 people, it is full and cannot take on additional members. Sign up by entering your full name next to a project.\u003c/p\u003e\r\n\u003ch3\u003eThursday\u003c/h3\u003e\r\n\u003ch4\u003e\u003cstrong\u003e\u003cem\u003eConfirmation\u003c/em\u003e\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eOn Thursday Technical Mentors will confirm all teams have 4 members and a project idea to begin working on next week. If teams are short of members we'll help facilitate connecting with additional teammates, or re-arranging teams as necessary.\u003c/p\u003e\r\n\u003cp\u003eWhile you won't begin work on your project until the following Monday, you're encouraged to trade contact information with your teammates, and start any planning or brainstorming outside of class!\u003c/p\u003e","exportId":"monday-team-week-project-pitch"},{"id":898,"title":"Monday: Announcement","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\n\u003cstrong\u003eCongratulations\u003c/strong\u003e, you're almost done with this module! \u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003eA few updates/reminders for this week:\u003c/div\u003e\r\n\u003cdiv\u003e- All Independent Projects must be complete and reviewed by Technical Mentors before Tuesday of next week\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003eLet your TM know if you have any questions. Have a great week, keep up the great work.\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\u0026lt;3\u003c/div\u003e","exportId":"monday-announcement"},{"id":2264,"title":"Monday: JavaScript Objects","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eJavaScript is an object-oriented programming language. Though we may not have realized it, we've already been working with JavaScript objects when we use data types like strings and numbers, or when we use a data collection like arrays. Even the functions we write are also objects in JavaScript. In this lesson, we will explore what it means to be an object in JavaScript.\u003c/p\u003e\r\n\u003cp\u003ePreviously, we have had variables that have stored strings, numbers, Booleans, arrays and functions. What happens when we want a variable to store much more information about the \"thing\" the variable represents? For example, if\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyou\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewere a variable and we wanted to store information about you (your name, your course level, your planned track, your enrollment status) in the single variable \"moringaStudent\" - we'd need more than a single string or a single array, we'd need an object!\u003c/p\u003e\r\n\u003cp\u003eIn technical terminology, objects are containers that\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eencapsulate\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edata - meaning all of the relevant data and functions for the thing that the variable name represents are kept together in a \"capsule\", better known as an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eobject\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat can be created and manipulated in our programs as a single unit.\u003c/p\u003e\r\n\u003cp\u003eHere is an example of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003emoringaStudent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e moringaStudent = {\r\n  firstName: \u003cspan class=\"hljs-string\"\u003e\"Charlie\"\u003c/span\u003e,\r\n  lastName: \u003cspan class=\"hljs-string\"\u003e\"Obina\"\u003c/span\u003e,\r\n  level: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\r\n  track: [\u003cspan class=\"hljs-string\"\u003e\"Prep\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"JavaScript\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"Python\", \"Django\"\u003c/span\u003e],\r\n  enrollmentStatus: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n};  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's take a look at how this object is defined. We have our variable\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003emoringaStudent\u003c/code\u003e. We assign it the value of an object by using the curly braces,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e{ }\u003c/code\u003e. This is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eliteral notation\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand we have used it previously to create strings by using quotes,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e\" \"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand arrays by using brackets,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e[ ]\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eInside the curly braces are five properties for our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003emoringaStudent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject: first name, last name, level, track, and enrollment status. Every property of a JavaScript object consists of a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ekey-value\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003epair. The\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ekey\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the variable that describes the kind of information to be stored. The\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003evalue\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the specific value of the key. So, in our example, the first name property has a key called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efirstName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand a value of \"Charlie\", the last name property has a key\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elastName\u003c/code\u003e, with a value of \"Obina\" and so on, with the remaining keys\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elevel\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrack\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eenrollmentStatus\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eEach key-value pair is separated by a colon. And pairs are separated from each other with a comma.\u003c/p\u003e\r\n\u003cp\u003eWe could write our object like this and it would also work:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e moringaStudent = {firstName: \u003cspan class=\"hljs-string\"\u003e\"Charlie\"\u003c/span\u003e, lastName: \u003cspan class=\"hljs-string\"\u003e\"Obina\"\u003c/span\u003e, level: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, track: [\"Prep\",\"JavaScript\",\"Python\", \"Django\"], enrollmentStatus: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e};  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, the formatting of the object with each property indented two spaces on a separate line is a convention used when writing JavaScript objects to make it easy to see each property. Imagine an object with hundreds of properties written on the same line. It would be a bit of a challenge to sort out the details.\u003c/p\u003e\r\n\u003cp\u003eProperty keys are always a JavaScript string (though quotes are not needed in this context) that starts with a letter. Property values can be any data type: strings, numbers, Booleans, arrays or even functions. When the value of a property is a function, we call it a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emethod\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eHere is an object with one property and one method. This method when called will make my cat \"speak\" by writing \"Meow\" to the console. (Previously, we have used\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003econsole.log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust for debugging, but we can use it for any message we'd like to see in the console.)\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myCat = {\r\n  name: \u003cspan class=\"hljs-string\"\u003e\"Kitty Kanyau\"\u003c/span\u003e,\r\n  speak: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Meow!\"\u003c/span\u003e);\r\n  }\r\n};  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo keep it simple, you can think of properties as nouns, and methods as verbs or actions.\u003c/p\u003e\r\n\u003cp\u003eSo, once we have an object, how do we use it? What do we do with the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ename\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003espeak\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod?\u003c/p\u003e\r\n\u003cp\u003eTo access properties and methods on objects, we can use either\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edot notation\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebracket notation\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; myCat.name\r\n  \u003cspan class=\"hljs-string\"\u003e\"Kitty Kanyau\"\u003c/span\u003e\r\n\u0026gt; myCat[\u003cspan class=\"hljs-string\"\u003e'name'\u003c/span\u003e]\r\n  \u003cspan class=\"hljs-string\"\u003e\"Kitty Kanyau\"\u003c/span\u003e\r\n\u0026gt; myCat.speak()\r\n  Meow!\r\n\u0026gt; myCat[\u003cspan class=\"hljs-string\"\u003e'speak'\u003c/span\u003e]()\r\n  Meow!  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eDot notation is easier to write and read, but bracket notation will additionally allow us to use properties with special characters, or select properties using variables. Until we need the additional functionality, we'll stick with dot notation.\u003c/p\u003e\r\n\u003cp\u003eLet's create an empty new dog object. We use the curly braces to signal JavaScript to create a new object.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog = {};\r\n  \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe built-in JavaScript function that creates a new dog object returns the value of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eundefined\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebut if we type\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can see that an empty object has been created for the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable.\u003c/p\u003e\r\n\u003cp\u003eNow, let's give our dog some properties using dot notation. Here, our values are a string and a number\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; dog.name = \u003cspan class=\"hljs-string\"\u003e\"Bark Simba\"\u003c/span\u003e\r\n  \u003cspan class=\"hljs-string\"\u003e\"Bark Simba\"\u003c/span\u003e\r\n\u0026gt; dog.age = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's add an array for a property value:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; dog.colors = [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e]\r\n  [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e]  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe value of a property comes with all of the functionality of its type. For example, we are able to use indexing on the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecolors\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray as we've done with other arrays.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; dog.colors[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]\r\n  \u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e\r\n\u0026gt; dog.colors[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]\r\n  \u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can use array methods on\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecolors\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elike\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003epush\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003ewhich returns the new length of the array:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; dog.colors.push(\u003cspan class=\"hljs-string\"\u003e\"gray\"\u003c/span\u003e);\r\n  \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e\r\n\u0026gt; dog.colors\r\n  [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"gray\"\u003c/span\u003e]  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNumber methods on\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eage\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; dog.age = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n\u0026gt; dog.age + \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can also update any property by reassigning its value:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs bash\"\u003e\u0026gt; dog.name = \u003cspan class=\"hljs-string\"\u003e\"Rex\"\u003c/span\u003e\r\n  \u003cspan class=\"hljs-string\"\u003e\"Rex\"\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add a method to our dog. This will be a property with a function as a value. In this case, we'll give our dog some\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ehowl\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunctionality.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs javascript\"\u003e\u0026gt; dog.howl = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{ \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Aaaaaaaaaaaoooooooooooo!\"\u003c/span\u003e) }\r\n\u0026gt; dog.howl()\r\n  Aaaaaaaaaaaoooooooooooo!  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWith objects, we can use properties within other properties. What if we decided we wanted to calculate our dog's age in human years? Let's add another method to our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; dog.humanYears = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age * \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e}\r\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age * \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e}  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ehumanYears\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction has a keyword of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e. When\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis used in an object's method, it always refers to the object on which the method is called. So, when we run\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog.humanYears()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill always refer to the object,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog\u003c/code\u003e. (\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecan also be used in other places, but it gets tricky depending on its context and we won't cover it in detail here.)\u003c/p\u003e\r\n\u003cp\u003eNow when we run\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog.humanYears()\u003c/code\u003e, we get 35.\u003c/p\u003e\r\n\u003ch3\u003eAdditional Practice\u003c/h3\u003e\r\n\u003cp\u003eIn the JavaScript console, practice creating objects of your own. Feel free to follow along with this lesson or explore some objects of your own. Here is some guided practice to try.\u003c/p\u003e\r\n\u003cp\u003eCreate an object that stores information about a flower including name, color, and height.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eChange the color of your flower using dot notation.\u003c/li\u003e\r\n\u003cli\u003eChange the height of your flower using bracket notation.\u003c/li\u003e\r\n\u003cli\u003eAdd a property that indicates what kind of creatures help the flower with pollination. This includes bees, butterflies, and birds.\u003c/li\u003e\r\n\u003cli\u003eAdd one more creature to your list: humans\u003c/li\u003e\r\n\u003cli\u003eWrite a method that allows the flower to grow. After the method is run, the height value should be increased.\u003c/li\u003e\r\n\u003cli\u003eView all of the properties and methods for your flower object.\u003c/li\u003e\r\n\u003cli\u003eExplore viewing, adding and updating more properties and methods on your flower object.\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli\u003eTry using some of the string, number and array methods you have used before on the properties that store these types of data.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-javascript-objects"},{"id":143,"title":"Monday: Literal Notation vs Constructors","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eLiteral Notation\u003c/h2\u003e\r\n\u003cp\u003eIn the previous lesson, we created objects using\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eliteral notation\u003c/strong\u003e. Let's explore further examples of what literal notation looks like, and how the process of creating objects may be streamlined by using constructors.\u003c/p\u003e\r\n\u003cp\u003eLet's say a dog walker wants to keep track of all dogs they walk.\u003c/p\u003e\r\n\u003cp\u003eWe'll create a dog object using literal notation:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog1 = {\r\n  name: \u003cspan class=\"hljs-string\"\u003e\"Falcor\"\u003c/span\u003e,\r\n  colors: [\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e],\r\n  age: \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\r\n};  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we'll create another:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog2 = {\r\n  name: \u003cspan class=\"hljs-string\"\u003e\"Nola\"\u003c/span\u003e,\r\n  colors: [\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e],\r\n  age: \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e,\r\n};  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd another:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog3 = {\r\n  name: \u003cspan class=\"hljs-string\"\u003e\"Patsy\"\u003c/span\u003e,\r\n  colors: [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e],\r\n  age: \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e,\r\n};  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou may notice that this is getting a little repetitive. All of these dogs have the same attributes, and therefore this involves typing\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ename\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecolors\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eage\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eover and over again, each time we want to create a new dog. Good news is, there is a much faster way to make\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects! Instead of using literal notation to manually create each individual\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, we can use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eConstructor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas a blueprint.\u003c/p\u003e\r\n\u003ch2\u003eConstructors\u003c/h2\u003e\r\n\u003cp\u003eWe will write a constructor to create\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects momentarily, but first, what\u003cspan\u003e \u003c/span\u003e\u003cem\u003eis\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea constructor? The next lesson will introduce constructors and demonstrate how we can use constructors and prototypes to make our lives easier.\u003c/p\u003e\r\n\u003cp\u003eAfter we write a constructor we'll be able to create the same dogs we created in literal notation above, with these three simple lines of code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog1 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Falcor\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog2 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Nola\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog3 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Patsy\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e);  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you can see, this is\u003cspan\u003e \u003c/span\u003e\u003cem\u003efar\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eless code, and it's much more scaleable!\u003c/p\u003e","exportId":"monday-literal-notation-vs-constructors"},{"id":144,"title":"Monday: Constructors and Prototypes","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow, let's explore how JavaScript uses constructors as blueprints for the creation of many new objects, and prototypes for adding methods to objects.\u003c/p\u003e\r\n\u003cp\u003eLet's start by taking a look at how some of the built-in JavaScript objects work.\u003c/p\u003e\r\n\u003ch2\u003eConstructors\u003c/h2\u003e\r\n\u003cp\u003eIf we look at the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\"\u003eMDN documentation for\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eString\u003c/code\u003e\u003c/a\u003e, we see that\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003econstructor\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003efor creating string objects. A constructor is a function that can be invoked using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003enew\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword to create new objects. To visually identify constructor functions, they are conventionally named with a capital first letter.\u003c/p\u003e\r\n\u003cp\u003ePreviously, we have created strings simply by adding\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e\" \"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earound the characters we want to identify as strings. This is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eliteral notation\u003c/strong\u003e. It triggers JavaScript to construct a string object with the String constructor. But we could also use the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor function directly:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e testGreeting = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eString\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n\r\n\u0026gt; testGreeting\r\n  \u003cspan class=\"hljs-built_in\"\u003eString\u003c/span\u003e {length: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, [[PrimitiveValue]]: \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e}  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOr this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e testGreeting2 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eString\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"Hello!\"\u003c/span\u003e);\r\n  \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n\r\n\u0026gt; testGreeting2\r\n  \u003cspan class=\"hljs-built_in\"\u003eString\u003c/span\u003e {\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"H\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"e\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"l\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"l\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"o\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"!\"\u003c/span\u003e, length: \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e, [[PrimitiveValue]]: \u003cspan class=\"hljs-string\"\u003e\"Hello!\"\u003c/span\u003e}  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn these two examples, we see the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor is called with the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003enew\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword. The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eString\u003c/code\u003e constructor function added 2 properties to both objects -\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elength\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e[[PrimitiveValue]]\u003c/code\u003e. For\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etestGreeting2\u003c/code\u003e, where we provided a value as the argument, the constructor also added properties for the index positions of each character.\u003c/p\u003e\r\n\u003cp\u003eIn the case of creating a new String, it was actually easier to use the literal notation. But with more complex objects it will often be easier to use constructors when creating new objects that all have the same blueprint.\u003c/p\u003e\r\n\u003cp\u003eLet's make a constructor of our own. We'll imagine that we need to create many dogs from a dog blueprint since we know that all dogs will have the same properties. The difference from dog to dog will be in the values for those properties. Rather than repeating all of the code for each dog, we'll make a constructor function that we can use over and over again.\u003c/p\u003e\r\n\u003cp\u003eHere is a constructor function for\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat will initialize a new dog object with its attributes assigned to the values passed into the constructor function.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDog\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ename, colors, age\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name = name;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.colors = colors;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age = age;\r\n}  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen to create a new dog we can do the following:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myPuppy = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Ernie\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e);  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can access the name of the new dog:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; myPuppy.name;\r\n  \u003cspan class=\"hljs-string\"\u003e\"Ernie\"\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe colors of the new dog:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; myPuppy.colors;\r\n  [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e]  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd its age:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; myPuppy.age;    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003emyPuppy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject here is considered an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einstance\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eof the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype. A constructor is the blueprint that specifies how to create an object. You can think of the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor here as a factory that can be used repeatedly to build a bunch of dog objects, using the constructor as a blueprint. Each dog object is an\u003cspan\u003e \u003c/span\u003e\u003cem\u003einstance\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype, so you have one\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype, defined by a constructor, with potentially many instances of that type.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDog\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ename, colors, age\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name = name;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.colors = colors;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age = age;\r\n}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e falcor = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Falcor\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nola = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Nola\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e patsy = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Patsy\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e);  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJust to reiterate, the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor above is used as a kind of factory or blueprint by each of the three lines below in order to construct the three dog objects. The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalcor\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003enola\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003epatsy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects are three instances of the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype. Each object that is an instance of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ename\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty, a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecolors\u003c/code\u003e property and an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eage\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty. For example:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; falcor.name\r\n  \u003cspan class=\"hljs-string\"\u003e\"Falcor\"\u003c/span\u003e\r\n\u0026gt; nola.name\r\n  \u003cspan class=\"hljs-string\"\u003e\"Nola\"\u003c/span\u003e\r\n\u0026gt; nola.age\r\n  \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e\r\n\u0026gt; patsy.colors\r\n  [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e]  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we know how to create new objects with properties, but what about an object's methods? Let's take a look at methods for \u003ccode class=\"prettyprint\"\u003eString\u003c/code\u003e and \u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e next.\u003c/p\u003e\r\n\u003ch2\u003ePrototypes\u003c/h2\u003e\r\n\u003cp\u003eWe know that JavaScript also has a number of built-in string methods for each new String created. When we show our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etestGreeting2\u003c/code\u003e, those methods are not listed in the curly braces. This is because the constructor function is only used to create a new object's properties.\u003c/p\u003e\r\n\u003cp\u003eTo define methods, JavaScript employs\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eprototypes\u003c/strong\u003e. If we look at the methods for\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\"\u003eMDN\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eagain, we see that they are all listed with the notation, String.prototype.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eA prototype is just an object from which other objects inherit methods\u003c/em\u003e. So, all instances of the String constructor inherit from the String.prototype (just as all instances of Dog will inherit from Dog.prototype). When you call a method, JavaScript first looks at the methods on the object, and if it doesn't find them there, it looks to the prototype.\u003c/p\u003e\r\n\u003cp\u003eLet's take a look at how this works with our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etestGreeting2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estring object.\u003c/p\u003e\r\n\u003cp\u003eWe can run any of the String.prototype methods on the string \u003ccode class=\"prettyprint\"\u003etestGreeting2\u003c/code\u003e which currently has a value of \"Hello!\". Let's try\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.toUpperCase()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; testGreeting2.toUpperCase();\r\n  \u003cspan class=\"hljs-string\"\u003e\"HELLO!\"\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we execute this, JavaScript first searches the properties of the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etestGreeting2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. It doesn't find it. It then goes to the String.prototype object, finds the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etoUpperCase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod there, and processes the function as requested.\u003c/p\u003e\r\n\u003cp\u003eLet's add a custom method to String.prototype:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-built_in\"\u003eString\u003c/span\u003e.prototype.addExcitement = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{ \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e + \u003cspan class=\"hljs-string\"\u003e\"!!!!!!!!!\"\u003c/span\u003e };\r\n\r\n\u0026gt; testGreeting2.addExcitement();\r\n  \u003cspan class=\"hljs-string\"\u003e\"Hello!!!!!!!!!!\"\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs soon as the new method is added, all current and future instances of String will have access to it. Now I can run\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etestGreeting2.addExcitement()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand get\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eHello!!!!!!!!!\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eIf I create a new string, it, too, will have access to the prototype's\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.addExcitement()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newGreeting = \u003cspan class=\"hljs-string\"\u003e\"Jambo\"\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n\r\n\u0026gt; newGreeting.addExcitement();\r\n  \u003cspan class=\"hljs-string\"\u003e\"Jambo!!!!!!!!!\"\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe might think, why wouldn't methods just be added to the constructor instead of having a separate prototype object? If all methods were added to the constructor, EVERY new object would create additional function objects for EVERY method. By adding them to a shared prototype, the function objects are created once and shared by all of the instances, which is more efficient.\u003c/p\u003e\r\n\u003cp\u003eLet's look at our Dog again. We can add our original methods to the Dog.prototype so that all dogs have these behaviors available to them.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003eDog.prototype.speak = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Woof!\"\u003c/span\u003e);\r\n}\r\n\r\nDog.prototype.humanYears = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age * \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e;\r\n} \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode class=\"prettyprint\"\u003emyPuppy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecan now speak:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; myPuppy.speak();\r\n  Woof!  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eand have its age calculated in human years:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; myPuppy.humanYears();\r\n  \u003cspan class=\"hljs-number\"\u003e21\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eEvery new dog will also have these methods.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt;\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newPuppy = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Goliath\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"gray\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n\r\n\u0026gt; newPuppy.speak();\r\n  Woof!\r\n\r\n\u0026gt; newPuppy.humanYears();\r\n  \u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn summary, every time we create a new dog using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003enew\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword, it calls the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor, which provides the blueprint for creating an instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype, giving it certain properties. The new instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype also automatically gains access to all methods defined on the shared\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e prototype.\u003c/p\u003e","exportId":"monday-constructors-and-prototypes"},{"id":145,"title":"Monday: Address Book with Constructors","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that we have a basic understanding of JavaScript objects, let's put them to work! In the next few lessons we'll build an address book application to store contact information for our friends and acquaintances. Once complete, our application will look and function something like\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://mgoren.github.io/address-book/address-book.html\" target=\"_blank\"\u003ethis\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eSince each contact will have multiple properties, we will use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eJavaScript objects to encapsulate data. And since each contact will have the same properties (such as name, phone number, etc.) we can create a single\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor to make many unique contacts with the same properties. This means we will have a single function that defines every property for a contact object.\u003c/p\u003e\r\n\u003cp\u003eEach entry in our address book (or,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject) should have a first name and last name. As such, we'll begin creating our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efirstName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elastName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperties, and include additional properties later on. We'll also create a prototype that retrieves a contact object's full name.\u003c/p\u003e\r\n\u003ch2\u003eContact Constructor\u003c/h2\u003e\r\n\u003cp\u003eBefore we begin, let's experiment in the JavaScript console:\u003c/p\u003e\r\n\u003cp\u003eHere's a basic \u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName = first;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName = last;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's copy and paste this into the JavaScript console so that we can explore how this works before beginning our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{ \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName = first; \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName = last; }\r\n\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e ada = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Contact(\u003cspan class=\"hljs-string\"\u003e\"Ada\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Lovelace\"\u003c/span\u003e);\r\n\u0026gt; ada.firstName\r\n  \u003cspan class=\"hljs-string\"\u003e\"Ada\"\u003c/span\u003e\r\n\u0026gt; ada.lastName\r\n  \u003cspan class=\"hljs-string\"\u003e\"Lovelace\"\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhenever a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject is created, it is initialized with whatever first and last names we pass into the constructor as arguments. The line\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003evar ada = new Contact(\"Ada\", \"Lovelace\");\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecreates a new \u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e object by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor and passing it the strings \"Ada\" and \"Lovelace\". The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eada.firstName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty becomes \"Ada\" and the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eada.lastName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty becomes \"Lovelace\".\u003c/p\u003e\r\n\u003cp\u003eThe JavaScript console can also display a summary of the object, which is useful for debugging:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; ada\r\n  Contact {firstName: \u003cspan class=\"hljs-string\"\u003e\"Ada\"\u003c/span\u003e, lastName: \u003cspan class=\"hljs-string\"\u003e\"Lovelace\"\u003c/span\u003e}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we can see that the variable\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eada\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eholds an object that is an\u003cspan\u003e \u003c/span\u003e\u003cem\u003einstance\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype and that it has two properties -\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efirstName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the value \"Ada\" and\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elastName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the value \"Lovelace\".\u003c/p\u003e\r\n\u003cp\u003eNow that we've experimented with our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor, let's begin building our address book. First, we'll need to set up our JavaScript project directory. The image below details all files that will be used in our application:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/fvztlsg7bewqnd3/address-book-initial-files.png\" alt=\"Address book project directory\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eNote: Because we will continue to build on this same address book project over the next few lessons, example repositories will be linked throughout for reference. These are simply a snapshot of the project at the given point in development; you're not required to do anything with these repositories.\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/cngondo/address-book\" target=\"_blank\"\u003e\u003cstrong\u003eExample GitHub Address Book Repo with Initial Files\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eNow, let's place our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor into\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName = first;\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName = last;\r\n  }\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eUser Interface Logic\u003c/h2\u003e\r\n\u003cp\u003eNow that our JavaScript\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor is in place, let's incorporate it into a web page through the user interface. First, we'll create a basic form that allows users to enter a contact's first and last names. Each new contact created through this form will be added to an ongoing list of\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtacts.\u003c/p\u003e\r\n\u003cp\u003eWe'll begin by adding this form, and a place to append newly-created contacts to:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003eaddress-book.html\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-html hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.12.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eAddress book\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eAddress book\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n       \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eAdd a contact:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-contact\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-first-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003eFirst name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-first-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-last-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003eLast name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-last-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAdd\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eContacts:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"contacts\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, the empty\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e\"contacts\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis where each new contact will be appended.\u003c/p\u003e\r\n\u003cp\u003eNext, we need some JavaScript in our jQuery callback that will collect the user input from the form, and assign it to variables. We'll use the input to create new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects with our constructor. Then, we'll append the new objects to our list for display to the user.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-comment\"\u003e// business logic\u003c/span\u003e\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName = first;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName = last;\r\n}\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e// user interface logic\u003c/span\u003e\r\n$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"form#new-contact\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n    event.preventDefault();\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedFirstName = $(\u003cspan class=\"hljs-string\"\u003e\"input#new-first-name\"\u003c/span\u003e).val();\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedLastName = $(\u003cspan class=\"hljs-string\"\u003e\"input#new-last-name\"\u003c/span\u003e).val();\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newContact = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Contact(inputtedFirstName, inputtedLastName);\r\n\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"ul#contacts\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;\u0026lt;span class='contact'\u0026gt;\"\u003c/span\u003e + newContact.firstName + \u003cspan class=\"hljs-string\"\u003e\"\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input#new-first-name\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input#new-last-name\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n  });\r\n}); \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we fire up our web page, each time we add a contact it is appended to the contact list. The line\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003evar newContact = new Contact(inputtedFirstName, inputtedLastName)\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecreates a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor and passing it the inputted data. The variable\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003enewContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enow refers to that newly created contact object, which knows its own \u003ccode class=\"prettyprint\"\u003efirstName\u003c/code\u003e and \u003ccode class=\"prettyprint\"\u003elastName\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWhat we've developed so far\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe accomplished without objects and just jQuery. Let's add another feature to our page that better illustrates how objects make a difference in managing and displaying data. When a user clicks on a contact in the list, they will see the contact's first and last names in a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ediv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the right of our form.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll update our HTML to add the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e\u0026lt;div\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhere the contact details will be shown. (This will be a second column, so it should go inside the\u003cspan\u003e \u003c/span\u003e\u003cem\u003erow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ediv but after the closing of the existing\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecol-md-6\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ediv.):\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003eaddress-book.html\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-html hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"show-contact\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eFirst name: \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"first-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLast name: \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"last-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll hide the \"show\" area at first, and add a class to make some elements look clickable:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-css hljs\"\u003e\u003cspan class=\"hljs-id\"\u003e#show-contact\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n}\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-class\"\u003e.contact\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecursor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e pointer\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-hexcolor\"\u003e#0088cc\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003e.contact\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003ehover {\r\n  text-decoration: underline\u003c/span\u003e\u003c/span\u003e;\r\n}  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eInside our form submit callback, after the code that appends the new contact to the list, we'll add this JavaScript to show the contact information when it is clicked:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e$(\u003cspan class=\"hljs-string\"\u003e\".contact\"\u003c/span\u003e).last().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"#show-contact\"\u003c/span\u003e).show();\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"#show-contact h2\"\u003c/span\u003e).text(newContact.firstName);\r\n  $(\u003cspan class=\"hljs-string\"\u003e\".first-name\"\u003c/span\u003e).text(newContact.firstName);\r\n  $(\u003cspan class=\"hljs-string\"\u003e\".last-name\"\u003c/span\u003e).text(newContact.lastName);\r\n});  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we didn't add\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elast()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e$(\".contact\")\u003c/code\u003e, each time a new contact was added, every element with the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass would show the information of the most recently added contact on click. By adding\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elast()\u003c/code\u003e, we only bind the event to most recently-inserted contact.\u003c/p\u003e\r\n\u003cp\u003eCan you imagine trying to keep track of everything on this page using just jQuery? Whew!\u003c/p\u003e\r\n\u003ch2\u003eBusiness Logic - Prototype Method\u003c/h2\u003e\r\n\u003cp\u003eInstead of listing only the first name in our list of contacts, let's create a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprototype so we can easily see the full name of each person in our address book. We don't need to add a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty, because each contact\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eincludes a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efirstName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elastName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty. We just need to add a prototype method that returns the full name based on those two properties.\u003c/p\u003e\r\n\u003cp\u003eWe'll add the following prototype method to the business logic section of our scripts:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-comment\"\u003e// business logic\u003c/span\u003e\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName = first;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName = last;\r\n}\r\n\r\nContact.prototype.fullName = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName + \u003cspan class=\"hljs-string\"\u003e\" \"\u003c/span\u003e + \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you can see, this method is meant to be called upon a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, and simply returns the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e's\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efirstName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elastName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperties concatenated together.\u003c/p\u003e\r\n\u003cp\u003eRemember, a prototype method is a method meant to be called on a specific type of object. For instance, the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects in our address book.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullName()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a prototype method because it's specifically meant to return the full name of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. Therefore, we define it in a special way that denotes the type of object this method is meant for when we state\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact.prototype.fullName = function()\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eUser Interface Logic to Use Prototype Method\u003c/h2\u003e\r\n\u003cp\u003eLet's also update our user interface logic to use our new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullName()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003cp\u003eThis line of code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javacript\"\u003e...\r\n  $(\"ul#contacts\").append(\"\u0026lt;li\u0026gt;\u0026lt;span class='contact'\u0026gt;\" + newContact.firstName + \"\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt;\");\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eShould be changed to reflect the following:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javacript\"\u003e...\r\n  $(\"ul#contacts\").append(\"\u0026lt;li\u0026gt;\u0026lt;span class='contact'\u0026gt;\" + newContact.fullName() + \"\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt;\");\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis will append the contact's full name, as returned from our new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullName()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprototype to our list of contacts, instead of just their first name. Perfect! In upcoming lessons we'll continue to build our address book application by adding address properties to\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects.\u003c/p\u003e","exportId":"monday-address-book-with-constructors"},{"id":2013,"title":"Monday: Places Visited","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice creating objects in JavaScript. Get comfortable with gathering input from a form and creating an object with that input, which you can then display on your website. Continue to write specifications that outline the intended behaviors for each application you write, and list them in your project's README.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between creating an object using literal notation, and creating an object using a constructor?\u003c/li\u003e\r\n\u003cli\u003eWhat benefits do constructors offer?\u003c/li\u003e\r\n\u003cli\u003eWhat is a prototype? How does it differ from a constructor?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eAddress Book\u003c/h3\u003e\r\n\u003cp\u003eFollow along with the lesson to create an address book application using constructors and prototypes.\u003c/p\u003e\r\n\u003ch3\u003ePlaces You've Been\u003c/h3\u003e\r\n\u003cp\u003eCreate a website where you can keep track of all the places you've been. Each destination should be an object with multiple properties, like location, landmarks, time of year, notes, etc. Display those properties when a user clicks on a place's name. Complete the business logic for your place object first, before tackling the user interface. Additionally, make sure to include specifications with example input and output in your project's README.\u003c/p\u003e\r\n\u003ch3\u003eTo Do List\u003c/h3\u003e\r\n\u003cp\u003eMake a to do list webpage where people can add tasks to create a list of things to do. Add an option for users to indicate a task is done. Use jQuery to remove the task from the \"to do\" list. Make sure to identify specific behaviors your program should demonstrate, and create specifications with example input and output. List these in the project's README.\u003c/p\u003e\r\n\u003ch3\u003ePeer Code Review\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDo JavaScript objects drive application logic?\u003c/li\u003e\r\n\u003cli\u003eAre constructors and prototypes used successfully?\u003c/li\u003e\r\n\u003cli\u003eAre plain English specs present in the README?\u003c/li\u003e\r\n\u003cli\u003eDoes the application work as expected?\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-places-visited"},{"id":1586,"title":"Tuesday: Git Collaboration","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch3\u003e\u003cspan\u003eObjectives\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003eIn this lesson, we will:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eFork a project from Moringa School's GitHub account to your account\u003c/li\u003e\r\n\u003cli\u003eMake changes to the fork (the repository you forked to your Github account)\u003c/li\u003e\r\n\u003cli\u003eAttempt to merge the changes you made with the Moringa School Github repository. \u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003e\u003cspan\u003eForking a repository\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e A\u003cspan\u003e \u003c/span\u003e\u003cem\u003efork\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis a copy of a repository. Most commonly, forks are used to propose changes to someone's project or to use someone else's project as a starting point for your own idea. \u003c/p\u003e\r\n\u003cp\u003eTo get started, open the\u003cspan\u003e \u003c/span\u003e\u003ca class=\"m_2563112663368369639external\" href=\"https://github.com/moringaschool/hello-world\" target=\"_blank\" data-saferedirecturl=\"https://www.google.com/url?hl=en\u0026amp;q=https://github.com/moringaschool/hello-world\u0026amp;source=gmail\u0026amp;ust=1521294038762000\u0026amp;usg=AFQjCNFoBBSE0L-z6lxGnIxTBo7mPHv9mQ\"\u003e\u003cspan\u003eGitHub repository\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"m_2563112663368369639gmail-ui-icon m_2563112663368369639gmail-ui-icon-extlink m_2563112663368369639gmail-ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ewe will be working with in the lesson. On the top right corner of your screen you should see a button with the text 'Fork' as shown in the image below. Clicking on this button should start the process of copying the project/repository to your own account. This is the \u003cstrong\u003e\u003ca class=\"m_2563112663368369639external\" href=\"https://en.wikipedia.org/wiki/Open-source_software\" target=\"_blank\" data-saferedirecturl=\"https://www.google.com/url?hl=en\u0026amp;q=https://en.wikipedia.org/wiki/Open-source_software\u0026amp;source=gmail\u0026amp;ust=1521294038762000\u0026amp;usg=AFQjCNHNIDIN7ZgkrO8_KuV-Wjc4c3kypg\"\u003e\u003cspan\u003eopen source\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"m_2563112663368369639gmail-ui-icon m_2563112663368369639gmail-ui-icon-extlink m_2563112663368369639gmail-ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e \u003c/strong\u003eadvantage of sharing projects on Github allowing people to collaborate on their work.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/fork-button-1.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"fork-button-1.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eClick on that button which should result in a modal prompting you to choose the account you  want to fork to. Select your account name which should take you to the repo you forked in your account. This may take a couple of seconds so be patient as the process takes place. To know that the forking process is complete, check the top left corner of your repo as shown in the image below. \u003c/p\u003e\r\n\u003cp\u003e \u003cimg src=\"viewer/files/Tuesday%20Content%20Images/after-fork.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"after-fork.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIt shows that you are now working on your forked version that was forked from\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa school/hello-world.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDisclaimer: \u003c/strong\u003eIt says 'iantheninja'\u003c/em\u003e because I (iantheninja) am the one who did the forking. \u003cem\u003e \u003c/em\u003eHaving copied Moringa School's repo to your own account, we can then proceed to\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eclone\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eit like we learned to do in the previous lesson. Remember that\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecloning makes a copy in a location on your device\u003c/strong\u003e, in this case your laptop. \u003c/p\u003e\r\n\u003cp\u003eRun the `\u003cem\u003egit clone\u003c/em\u003e` command to clone the repo to your preferred location. At this point, you should have a\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-projects \u003c/em\u003efolder which should host all projects you are going to work on at Moringa School. If you do not have such a folder, make sure you create one right now. Make sure to clone the repository to that directory (\u003cem\u003emoringa-school-projects\u003c/em\u003e) to avoid making a mess of your folder structure. Take the next 5 minutes and figure out if you and your pair partner can figure out how to correctly clone the repo. \u003c/p\u003e\r\n\u003cp\u003e[\u003cem\u003e5 minute practice session\u003c/em\u003e] \u003c/p\u003e\r\n\u003cp\u003eConfirm that you did the right thing by opening the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-projects\u003c/em\u003e folder\u003cem\u003e \u003c/em\u003eand checking that you have the hello-world project. If you did not nail the task (cloning the repo), here's a bit of guidance to assist you. Follow the following steps:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eOpen the terminal application. \u003c/li\u003e\r\n\u003cli\u003eNavigate to the moringa-school-projects folder from the terminal. Remember to use the \u003cem\u003ecd \u003c/em\u003eand \u003cem\u003emkdir\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecommands where necessary.\u003c/li\u003e\r\n\u003cli\u003eRun the command; \r\n\u003cpre\u003e\u003cem\u003egit clone \u003ca class=\"m_2563112663368369639external\" href=\"https://github.com/iantheninja/hello-world.git\" target=\"_blank\" data-saferedirecturl=\"https://www.google.com/url?hl=en\u0026amp;q=https://github.com/iantheninja/hello-world.git\u0026amp;source=gmail\u0026amp;ust=1521294038763000\u0026amp;usg=AFQjCNE6RcHdhXraD54cFZQIt_x3RIVmwg\"\u003e\u003cspan\u003ehttps://github.com/\u003cstrong\u003eyour-username\u003c/strong\u003e/hello-world.git\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"m_2563112663368369639gmail-ui-icon m_2563112663368369639gmail-ui-icon-extlink m_2563112663368369639gmail-ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003c/em\u003e\u003c/pre\u003e\r\n(remember to replace '\u003cstrong\u003e\u003cem\u003eyour-username\u003c/em\u003e\u003c/strong\u003e' with your GitHub username to prevent cloning the wrong repository)\u003c/li\u003e\r\n\u003cli\u003eNavigate to inside the cloned repository by using the change directory (\u003cem\u003ecd\u003c/em\u003e) command. \u003c/li\u003e\r\n\u003cli\u003eOpen your editor by using the command '\u003cem\u003eatom .\u003c/em\u003e' for atom users or '\u003cem\u003ecode .\u003c/em\u003e' for visual studio code users.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTo check that you did the right thing, run the command '\u003cem\u003egit remote -v\u003c/em\u003e' which should return the url of your forked repository in your account on GitHub. In my case the value returned was as shown in the image below. \u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/remote-output.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"remote-output.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe only difference between the output above and yours should be the username value of the url. Instead of '\u003cem\u003eiantheninja\u003c/em\u003e', you should have your username.  \u003c/p\u003e\r\n\u003cp\u003eNow that we have the project in our computers, let's do something interesting with it. We will be altering some information inside of the project. Open the file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eREADME.md i\u003c/em\u003en your text editor and add your name or username in the '#Authors' section of the file. Refer to the image shown below.\u003c/p\u003e\r\n\u003cp\u003e \u003cimg src=\"viewer/files/Tuesday%20Content%20Images/author-section.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"author-section.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eMake your username a clickable link by making the following modification and add it below the original author of the project. Instead of adding your username below the one that's currently in the README, make it (your username) a link that redirects a visitor to your GitHub profile. Take the next 2 minutes discussing what the appropriate markdown modification would be. You can refer to\u003cspan\u003e \u003c/span\u003e\u003ca class=\"m_2563112663368369639external\" href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#links\" target=\"_blank\" data-saferedirecturl=\"https://www.google.com/url?hl=en\u0026amp;q=https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet%23links\u0026amp;source=gmail\u0026amp;ust=1521294038763000\u0026amp;usg=AFQjCNExZ8SCsbiUCd122DP6qlz3TsFTrg\"\u003e\u003cspan\u003ethis\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"m_2563112663368369639gmail-ui-icon m_2563112663368369639gmail-ui-icon-extlink m_2563112663368369639gmail-ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e handy link that has instructions on how to create clickable links in markdown.\u003c/p\u003e\r\n\u003cp\u003e[\u003cem\u003e2 minute practice session\u003c/em\u003e] \u003c/p\u003e\r\n\u003cp\u003eTo make the username displayed on the file clickable, it has to change to:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/readmelinkadded.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"readmelinkadded.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAfter modifying your project, add, commit and push the changes to your GitHub fork in your account. If pushing to GitHub fails, check where your remote points by running the command we used earlier '\u003cem\u003egit remote -v\u003c/em\u003e'. If it points to '\u003ca href=\"https://github.com/\" target=\"_blank\" data-saferedirecturl=\"https://www.google.com/url?hl=en\u0026amp;q=https://github.com/\u0026amp;source=gmail\u0026amp;ust=1521294038763000\u0026amp;usg=AFQjCNET6HwDI2s4WRmLk52L5ZsItupZXQ\"\u003ehttps://github.com/\u003c/a\u003e\u003cem\u003eiantheninja/hello-world\u003c/em\u003e', or '\u003cspan\u003e\u003ca href=\"https://github.com/moringaschool\" target=\"_blank\" data-saferedirecturl=\"https://www.google.com/url?hl=en\u0026amp;q=https://github.com/moringaschool\u0026amp;source=gmail\u0026amp;ust=1521294038763000\u0026amp;usg=AFQjCNG0VfX13WfgeUH_N-iOtaPUEj7AKw\"\u003ehttps://github.com/moringaschool\u003c/a\u003e\u003c/span\u003e\u003cem\u003e/hello-world\u003c/em\u003e', you probably made a mistake at some point but it's equally easy to fix it. \u003c/p\u003e\r\n\u003ch3\u003eRemoving a remote\u003c/h3\u003e\r\n\u003cp\u003eTo fix the problem mentioned above, remove the remote url called '\u003cem\u003eorigin\u003c/em\u003e' by running the command '\u003cem\u003egit remote rm origin\u003c/em\u003e'. The '\u003cem\u003egit remote\u003c/em\u003e' portion of the command tells git that we want to modify our remote url in some way. The '\u003cem\u003erm\u003c/em\u003e' flag is short form for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eremove \u003c/em\u003ewhich you can actually also use\u003ci\u003e.\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eIf you were to use the command with '\u003cem\u003eremove' \u003c/em\u003einstead, your command in full would be '\u003cem\u003egit remote remove origin'. \u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003eRunning the command\u003cspan\u003e \u003c/span\u003e\u003cem\u003e'git remote -v' \u003c/em\u003eafter removing your remote should not give any response showing that you have no remote repository linked or associated with your\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e directory. To learn more about working with remotes, you can visit\u003cspan\u003e \u003c/span\u003e\u003ca class=\"m_2563112663368369639external\" href=\"https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes\" target=\"_blank\" data-saferedirecturl=\"https://www.google.com/url?hl=en\u0026amp;q=https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes\u0026amp;source=gmail\u0026amp;ust=1521294038763000\u0026amp;usg=AFQjCNFU6oNpL17IvllwMTLdSlf0XelhVA\"\u003e\u003cspan\u003ethis link\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"m_2563112663368369639gmail-ui-icon m_2563112663368369639gmail-ui-icon-extlink m_2563112663368369639gmail-ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand spend the next few minutes practicing.\u003c/p\u003e\r\n\u003cp\u003eTo add the appropriate remote, open your 'hello-world' forked repository in your browser and copy the url provided by GitHub by clicking on the green button shown in the image below. Make sure you are in your account as highlighted in the image below to avoid any errors. \u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/cloning-link.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"cloning-link.png\"\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003c/h3\u003e\r\n\u003ch3\u003ePull Requests\u003c/h3\u003e\r\n\u003cp\u003eA good/ super cool way of collaborating is by using \u003cstrong\u003epull requests. \u003c/strong\u003ePull requests are used to propose changes to a certain repository. The order of proposing changes is:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eForking the repository which we learned earlier in the lesson\u003c/li\u003e\r\n\u003cli\u003eMaking the fix; which we did when we added our clickable usernames to the author's section of the README\u003c/li\u003e\r\n\u003cli\u003eSubmitting a pull request which is what we are just about to do.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eAfter Moringa School, if your project manager likes your work after you make a pull request, they might \u003cstrong\u003epull \u003c/strong\u003eyour additions/fixes into the original repository. \u003c/p\u003e\r\n\u003cp\u003eTo make a pull request, click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e'New pull request' \u003c/em\u003ebutton in your GitHub repo. \u003c/p\u003e\r\n\u003cp\u003e \u003cimg src=\"viewer/files/Tuesday%20Content%20Images/newpullrequest.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"newpullrequest.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eOn clicking the button, the page should redirect to a pull request \u003cem\u003e'configuration' \u003c/em\u003eGitHub page. You should be able to see which project and\u003cspan\u003e \u003c/span\u003e\u003ca class=\"m_2563112663368369639external\" href=\"https://git-scm.com/book/en/v1/Git-Branching-What-a-Branch-Is\" target=\"_blank\" data-saferedirecturl=\"https://www.google.com/url?hl=en\u0026amp;q=https://git-scm.com/book/en/v1/Git-Branching-What-a-Branch-Is\u0026amp;source=gmail\u0026amp;ust=1521294038763000\u0026amp;usg=AFQjCNE1QByWL4rjuwLJhaNqWCplMtnOZw\"\u003e\u003cspan\u003ebranch\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"m_2563112663368369639gmail-ui-icon m_2563112663368369639gmail-ui-icon-extlink m_2563112663368369639gmail-ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eyou want merged with the original (Moringa School) master. So far we are working with one branch (the master). We will learn in future lessons what branches are and why they're super useful to a developer's workflow. \u003c/p\u003e\r\n\u003cp\u003eIt should look like the image shown below. If it does not, figure out where you made a misstep with your pair partner and make a correction.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/mergeconfig.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"mergeconfig.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eMerge conflicts\u003c/h3\u003e\r\n\u003cp\u003eA big pain point for developers working with git is resolving merge conflicts. Merge conflicts usually happen when your current branch (master branch at\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour-account/hello-world\u003c/em\u003e) and the branch you want to merge into (master at\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringaschool/hello-world\u003c/em\u003e) have diverged. Hold up, what does this mean? It means, you have commits in your current branch which are not in the other branch and vice versa.\u003c/p\u003e\r\n\u003cp\u003eFrom the image above, you can see a warning/error message with the text\u003cspan\u003e \u003c/span\u003e\u003cem\u003e'X can't automatically merge. Don't worry, you can still create the pull request'\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eNote: you might not have conflicts or errors in your project in which case you should just proceed with making a pull request. This is to help you figure out what to do if this happens. \u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eClick on the big green button with the title\u003cspan\u003e \u003c/span\u003e\u003cem\u003e'Create pull request'. \u003c/em\u003eThis should redirect you to a page that let's you know what the problem with your merge could be. You should see the page shown in the image below. \u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/resolveconflicts.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"resolveconflicts.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eClick on the button that say's\u003cspan\u003e \u003c/span\u003e\u003cem\u003e'Resolve conflicts' \u003c/em\u003eon the right of the image shown above. This should redirect you to the page where you are supposed to make changes to the file with conflicts. In my file, this is how that file looks like. \u003c/p\u003e\r\n\u003cp\u003e \u003cimg src=\"viewer/files/Tuesday%20Content%20Images/readmeconflicts.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"readmeconflicts.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eSo, what seems to be the problem over here. notice the '\u0026lt;\u0026lt;\u0026lt;\u0026lt; master', '====', and '\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; master' text added to our file. All of these have a purpose. In this file, we have text that was originally in the master branch. Then, we have text that is pulled into the file from our attempted pull request. Text between the '\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; master' and '======' represents what was originally in the file. Text between the '======' and '\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; master' signs represents new content that are going to be added to the file. \u003c/p\u003e\r\n\u003cp\u003eIt's up to the developer to figure out what they want to keep in the file and make a commit message to help people contributing to the project to understand what happened during the merge. Let's go ahead and do that.\u003c/p\u003e\r\n\u003cp\u003eWe are going to keep content in the lower block and delete the upper block since we no longer need it. Make sure to delete the '\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; master', '======' and '\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; master' signs. The only thing in the author section should be what's shown in the image below.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/aftereditmerge.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"aftereditmerge.png\"\u003e \u003c/p\u003e\r\n\u003cp\u003eAfter making those changes, our file is now ready to be committed and merged. To do this, click on the button titled '\u003cem\u003eMark as resolved\u003c/em\u003e'. This should redirect you to a page that checks if the changes you made resolved the conflict. If you followed this process, you should see the following on your GitHub page. \u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/allconflictsresolved.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"allconflictsresolved.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf you select '\u003cem\u003eCommit merge'\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eyou should be redirected to the page where merging the repos is done. Since you are attempting to merge your version of the repo (hello-world), with the master at Moringa School, we will probably decline the request since this may result in a lot of pull requests and conflicts to match. \u003c/p\u003e\r\n\u003cp\u003eThis is the same procedure that you will use when working with your pair and collaborating on the various exercises you are going to have at Moringa School. One person among the two of you, or in the group project, will need to initialize (create the repository), in their account that will act as the main repo. Everyone in the group should then fork the repository to their own accounts and work from there. It's advisable to integrate your work with the main repository as frequently as possible. This is part of a higher level concept known as \u003cstrong\u003econtinuous integration\u003c/strong\u003e. This prevents attempts to merge dozens of commits into the main repository where huge merge conflicts are bound to happen. Especially when working in a team.\u003c/p\u003e","exportId":"tuesday-git-collaboration"},{"id":2267,"title":"Tuesday: Advanced Functions","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eFunctions are values, just like numbers, strings, arrays and objects. They can be saved to variables:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e say_hi = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e)\r\n}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e greeter = say_hi\r\n\r\nsay_hi()\r\ngreeter()\r\n\r\nsay_hi = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'meh'\u003c/span\u003e)\r\n}\r\n\r\nsay_hi() \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\r\ngreeter() \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThey can be passed as arguments (inputs) to functions:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e runner = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003efn\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'Invoking a function now!'\u003c/span\u003e)\r\n  fn()\r\n}\r\n\r\nrunner( \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{ \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'okay'\u003c/span\u003e) } )\r\nrunner(say_hi)\r\nrunner(greeter)\r\n\r\nrunner( say_hi() ) \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eExercise\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eWrite a function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eanswer_logger\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat takes a function as input, runs it, and places the return value from that function invocation into a div#answer\u003c/p\u003e\r\n\u003cp\u003eWe can test\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eanswer_logger\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eusing the following code, we should not need to change it at all.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003eanswer_logger(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"I should appear in div#answer!\"\u003c/span\u003e\r\n})\u003c/code\u003e\u003c/pre\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eWrite a function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eanswer_collector\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat takes an array of functions as an input and runs each of them, in turn. Each time you run a function, collect its return value and add it to a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresults_array\u003c/code\u003e. Return the results array from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eanswer_collector\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe can test\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eanswer_collector\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith this code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e fn1 = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"this should be the first value in results array\"\u003c/span\u003e\r\n}\r\n\r\nanswer_collector([fn1, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{ \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"this should be the second value in results array\"\u003c/span\u003e }])\u003c/code\u003e\u003c/pre\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eNot only can functions be passed as inputs, they can also be returned as outputs.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e returns_a_func = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{ \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'BOOP!'\u003c/span\u003e) }\r\n}\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e// have we booped yet?\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e booper = returns_a_func()\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e// how about now?\u003c/span\u003e\r\nbooper()\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFunction define their own local\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003escope\u003c/strong\u003e. Variables declared within a function invocation are available only inside of that function. It's as if invocations are surrounded by one-way mirrors, they can see out and access variables named in their parent scope, but code running outside can't see in to access parameters or variables defined inside.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e word = \u003cspan class=\"hljs-string\"\u003e'original'\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e phrase = \u003cspan class=\"hljs-string\"\u003e\" is the word\"\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e word_changer = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003enew_word\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e word = new_word\r\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(word + phrase)\r\n}\r\n\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(word + phrase) \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(new_word + phrase) \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\r\nword_changer(\u003cspan class=\"hljs-string\"\u003e'changed'\u003c/span\u003e)\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(word + phrase) \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(new_word + phrase) \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e// what's different here?\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e leaky_word_changer = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003enew_word\u003c/span\u003e) \u003c/span\u003e{\r\n    word = new_word\r\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(word + phrase)\r\n}\r\n\r\nleaky_word_changer(\u003cspan class=\"hljs-string\"\u003e'changed'\u003c/span\u003e)\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(word + phrase) \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(new_word + phrase) \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eExercise\u003c/strong\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWrite a function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esecret_keeper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat defines a variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esecret\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einside its code block.\u003c/li\u003e\r\n\u003cli\u003eTry to access the secret variable from outside the function scope using your JS console. Make sure it's safe!\u003c/li\u003e\r\n\u003cli\u003eAllow the user to invoke\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esecret_keeper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith two strings as arguments\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$().append()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethe two strings to the page with the secret word in between\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eReturned functions retain scope access at the point they were defined. This is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eclosure\u003c/strong\u003e. The scope chain is established at the point WHERE THE KEYWORD\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efunction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eIS WRITTEN, not where it is invoked.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e returns_a_func = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e word = \u003cspan class=\"hljs-string\"\u003e'I can see inside'\u003c/span\u003e\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{ \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'BOOP! '\u003c/span\u003e + word) }\r\n}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e word = \u003cspan class=\"hljs-string\"\u003e'I can see outside'\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e new_booper = returns_a_func()\r\nnew_booper() \u003cspan class=\"hljs-comment\"\u003e// what does this log? why?\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e returns_a_func = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{ \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log( \u003cspan class=\"hljs-string\"\u003e\"The number is: \"\u003c/span\u003e + number) }\r\n}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number = \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e fn = returns_a_func()\r\nfn() \u003cspan class=\"hljs-comment\"\u003e// what will this log? why?\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e func_runner = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efunc\u003c/span\u003e)\u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number = \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e\r\n  func()\r\n}\r\n\r\nfunc_runner(fn) \u003cspan class=\"hljs-comment\"\u003e// what will this log? why?\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eExercise\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eWrite a function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emultiplies_by\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat takes a number as input and returns a function that, when invoked with a second number as an argument multiplies the two numbers together.\u003c/p\u003e\r\n\u003cp\u003eWe can test\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emultiplies_by\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith this code, we should not need to change it at all.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e times5 = multiplies_by(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e)\r\ntimes5(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e) \u003cspan class=\"hljs-comment\"\u003e// 20\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e times10 = multiplies_by(\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e)\r\ntimes10(\u003cspan class=\"hljs-number\"\u003e32\u003c/span\u003e) \u003cspan class=\"hljs-comment\"\u003e// 320\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e","exportId":"tuesday-advanced-functions"},{"id":2268,"title":"Tuesday: Functional Programming with Underscore","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eUnderscore is a JavaScript Library (like jQuery). It provides a bunch of pre-written code for solving common programming challenges. While jQuery helps web developers interact with the DOM, Underscore focuses on providing useful helpers for\u003cspan\u003e \u003c/span\u003e\u003ca class=\"popup\" href=\"http://en.wikipedia.org/wiki/Functional_programming\"\u003efunctional-style programming\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eInclude the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://underscorejs.org/\" target=\"_blank\"\u003eUnderscore library\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ein an empty HTML document, along with an array of products (you can use your own from the e-commerce exercise or use\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringaprep-ft.herokuapp.com/students/products.js\" target=\"_blank\"\u003ethis one\u003c/a\u003e) and try the following:\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003efirst:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ePass\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.first()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethe array of products and display the returned object in a \"featured\" section of your site.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003elast:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ePass\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.last()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethe array of products and display the returned object in a \"clearance\" section of your site.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003efilter:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.filter()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto display only products that belong to the \"books\" category.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003ereject:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.reject()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto display only products that are priced below $20.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003euniq:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.uniq()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto ensure that their are no duplicate selling points in any products before displaying them.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003emap:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto grab the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epicture_url\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof all products for sale, assign each to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty of a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag and return that DOM element. Pass the result of calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edirectly into a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$('#container').append()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eexpression to create a photo montage.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003epluck:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.pluck()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto quickly retrieve a list of the names of all products for sale to list them in an index\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003ereduce:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ePass a shopping cart (array of objects) to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.reduce()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand use it to add up the total price of the order.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003econtains:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eDetermine if the order\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.contains()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ea copy of 'Twilight'. If so, display a drastic message to the user asking them to re-evaluate their life choices.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eevery:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.every()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto determine if every item in the order has a price tag less than $10. If so, call the user a cheapskate!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003esome:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.some()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto determine if any item in the order has a price tag of $100 or more. If so, chide the user for their profligacy!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eextend:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.extend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto merge two objects together. What would this be good for?\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eReimplementing Underscore\u003c/h3\u003e\r\n\u003cp\u003eOk, now that we've tried them all out, let's try rebuilding a few from scratch. Download\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringaprep-ft.herokuapp.com/students/underbar.html\" target=\"_blank\"\u003ethe following HTML document\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand open it in your code editor to get started\u003c/p\u003e","exportId":"tuesday-functional-programming-with-underscore"},{"id":146,"title":"Tuesday: To-Do List and Movie Tickets","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003ePractice and Code\u003c/h2\u003e\r\n\u003ch3\u003eTo Do List\u003c/h3\u003e\r\n\u003cp\u003eMake a to do list webpage where people can add tasks to create a list of things to do. Add an option for users to indicate a task is done. Use jQuery to remove the task from the \"to do\" list. Make sure to identify specific behaviors your program should demonstrate, and create specifications with example input and output. List these in the project's README.\u003c/p\u003e\r\n\u003ch3\u003eMovie Tickets\u003c/h3\u003e\r\n\u003cp\u003eCreate a webpage where a user can select the name of a movie, the time of day that they would like to see the movie and their age. The webpage should let them know how much their movie ticket will cost, based on those three factors. Consider that non-\"first-release\" movies, matinee and senior tickets tend to be cheaper than the regular priced ticket. Your constructor and prototype could be called Ticket and you can come up with the formula for determining how the price is calculated depending on the input from the user.\u003c/p\u003e","exportId":"tuesday-to-do-list-and-movie-tickets"},{"id":147,"title":"Wednesday: Objects Within Objects","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eLet's learn how to create an object that contains another object, then we'll use this to build out an address book.\u003c/p\u003e\r\n\u003cp\u003eWe'll begin by making some objects that represent cities and countries:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nbo = { name: \u003cspan class=\"hljs-string\"\u003e\"Nairobi\"\u003c/span\u003e };\u003cbr\u003evar mba = { name: \"Mombasa\" };\u003cbr\u003evar kis = { name: \"Kisumu\" };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e qsi = { name: \u003cspan class=\"hljs-string\"\u003e\"Moshi\"\u003c/span\u003e };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dar = { name: \u003cspan class=\"hljs-string\"\u003e\"Dar Es Salaam\"\u003c/span\u003e };\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e kenya = { name: \u003cspan class=\"hljs-string\"\u003e\"Kenya\"\u003c/span\u003e };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tanzania = { name: \u003cspan class=\"hljs-string\"\u003e\"Tanzania\"\u003c/span\u003e };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e rwanda = { name: \u003cspan class=\"hljs-string\"\u003e\"Rwanda\"\u003c/span\u003e };    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eVery often, we'll want to create associations between objects; for example, we may want to know a list of cities in a particular country. Here's how we can do this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003evar nbo = { name: \"Nairobi\" };\u003cbr\u003evar mba = { name: \"Mombasa\" };\u003cbr\u003evar kis = { name: \"Kisumu\" };\u003cbr\u003evar qsi = { name: \"Moshi\" };\u003cbr\u003evar dar = { name: \"Dar Es Salaam\" };\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e kenya = { name: \u003cspan class=\"hljs-string\"\u003e\"Kenya\"\u003c/span\u003e, cities: [nbo, mba, kis] };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tanzania = { name: \u003cspan class=\"hljs-string\"\u003e\"Tanzania\"\u003c/span\u003e, cities: [qsi, dar] };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e rwanda = { name: \u003cspan class=\"hljs-string\"\u003e\"Rwanda\"\u003c/span\u003e, cities: [] };    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIt's very common to have a property of an object that's an array with other objects contained within it. Now we can do things like list all of the cities we know about for a country:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003ekenya.cities.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ecity\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Let's go to \"\u003c/span\u003e + city.name + \u003cspan class=\"hljs-string\"\u003e\"!\"\u003c/span\u003e);\r\n});    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can also add cities to a country after the object is initially created:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e kgl = { name: \u003cspan class=\"hljs-string\"\u003e\"Kigali\"\u003c/span\u003e };\r\nrwanda.cities.push(kgl);    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode class=\"prettyprint\"\u003erwanda.cities\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns an array, and then we\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003epush()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethe new object onto the array.\u003c/p\u003e\r\n\u003cp\u003eLet's look at one more example before applying this to our address book:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tomatoes = { name: \u003cspan class=\"hljs-string\"\u003e\"Tomatoes\"\u003c/span\u003e, price: \u003cspan class=\"hljs-number\"\u003e300\u003c/span\u003e };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e potatoes = { name: \u003cspan class=\"hljs-string\"\u003e\"Potatoes\"\u003c/span\u003e, price: \u003cspan class=\"hljs-number\"\u003e150\u003c/span\u003e };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e onions = { name: \u003cspan class=\"hljs-string\"\u003e\"Onions\"\u003c/span\u003e, price: \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e };\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e groceryStore = { name: \u003cspan class=\"hljs-string\"\u003e\"Mama's Corner Market\"\u003c/span\u003e, products: [tomatoes, potatoes, onions] };\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e iPhone = { name: \u003cspan class=\"hljs-string\"\u003e\"iPhone\"\u003c/span\u003e, price: \u003cspan class=\"hljs-number\"\u003e699\u003c/span\u003e };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e android = { name: \u003cspan class=\"hljs-string\"\u003e\"Android\"\u003c/span\u003e, price: \u003cspan class=\"hljs-number\"\u003e499\u003c/span\u003e };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e windowsPhone = { name: \u003cspan class=\"hljs-string\"\u003e\"Windows Phone\"\u003c/span\u003e, price: \u003cspan class=\"hljs-number\"\u003e399\u003c/span\u003e };\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e phoneStore = { name: \u003cspan class=\"hljs-string\"\u003e\"RadioShack\"\u003c/span\u003e, products: [iPhone, android, windowsPhone] };\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e stores = [groceryStore, phoneStore];\r\n\r\nstores.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003estore\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(store.name + \u003cspan class=\"hljs-string\"\u003e\" sells:\"\u003c/span\u003e);\r\n  store.products.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eproduct\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(product.name);\r\n  });\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"\\n\"\u003c/span\u003e);\r\n});    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're looping through each store and displaying its name, and then within each store, looping through each of its products and displaying their names.\u003c/p\u003e","exportId":"wednesday-objects-within-objects"},{"id":148,"title":"Wednesday: Address Book: Business Logic","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eOur address book is great at keeping track of our contacts' full names; but conspicuously enough, it's missing any actual addresses! Let's add this functionality now.\u003c/p\u003e\r\n\u003cp\u003eIf you think about it, addresses have properties of their own. They have a street, a city, and a county. Because every address will have these same properties, let's create\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects. Then, we'll associate these\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects with the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject to which the address belongs. When we're done, we'll have a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject with an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty. This\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty will be an array that eventually contains multiple \u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects.\u003c/p\u003e\r\n\u003cp\u003eIn our app, we want to associate\u003cspan\u003e \u003c/span\u003e\u003cem\u003emultiple\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects to each of our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects, since a user may have a personal address, a work or business address, a mailing address, etc. that are all different.\u003c/p\u003e\r\n\u003cp\u003eBefore returning to our project, let's experiment with inserting \u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects\u003cspan\u003e \u003c/span\u003e\u003cem\u003einto\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects in the JavaScript console.\u003c/p\u003e\r\n\u003ch2\u003eBusiness Logic - Contact \u0026amp; Address Constructors\u003c/h2\u003e\r\n\u003cp\u003ePreviously we defined our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName = first;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName = last;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBut now we want each\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto contain not only a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efirstName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elastName\u003c/code\u003e, but an array of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects too. When we first create a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e, this array will start out empty. Then, when the user provides addresses for the particular\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e, we will create a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eout of each, and push it to that\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e's\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray.\u003c/p\u003e\r\n\u003cp\u003eTo do this, let's make sure each new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject is initialized with an empty\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray. We'll add the following to the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName = first;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName = last;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.addresses = [];\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we will still create\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects the exact same way as before:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e jane = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Contact(\u003cspan class=\"hljs-string\"\u003e\"Jane\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Njeri\"\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBut now if we look at our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ejane\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, we'll see that it now includes an empty\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; jane\r\n  Contact {firstName: \u003cspan class=\"hljs-string\"\u003e\"Jane\"\u003c/span\u003e, lastName: \u003cspan class=\"hljs-string\"\u003e\"Njeri\"\u003c/span\u003e, addresses: \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou may have noticed we did\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epass in an empty array as an argument when we created our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eJane\u003c/code\u003eobject in the line\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003evar jane = new Contact(\"Jane\", \"Njeri\");\u003c/code\u003e. Since we're defining the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty as the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esame thing every single time\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe create a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e, there is no reason to require an empty array as an\u003cspan\u003e \u003c/span\u003e\u003cem\u003eargument\u003c/em\u003e. Instead, it's much more efficient to have our constructor automatically create an\u003cspan\u003e \u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eproperty and assign it to be an empty array.\u003c/p\u003e\r\n\u003cp\u003eNow we need to write an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor. At a minimum, each\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject will need to know its own street, city, and county. We can create an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor that will add each of those properties to every\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject created.\u003c/p\u003e\r\n\u003cp\u003eThis should look fairly similar to our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor. When our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor is called to create a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, we will provide it with parameters for a street, city and county. It will then set corresponding street, city and county properties on the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject it's creating as equivalent to the arguments that were passed in.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAddress\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003estreet, city, county\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.street = street;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.city = city;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.county = county;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's put this together in the JavaScript console.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll create our two\u003cspan\u003e \u003c/span\u003e\u003cem\u003econstructors\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003e    this\u003c/span\u003e.firstName = first;\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003e    this\u003c/span\u003e.lastName = last;\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003e    this\u003c/span\u003e.addresses = [];\u003cbr\u003e  }\r\n\u0026gt; \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAddress\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003estreet, city, county\u003c/span\u003e) \u003c/span\u003e{\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003e    this\u003c/span\u003e.street = street;\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003e    this\u003c/span\u003e.city = city;\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003e    this\u003c/span\u003e.county = county;\u003cbr\u003e  }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll create a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject and an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e jane = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Contact(\u003cspan class=\"hljs-string\"\u003e\"Jane\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Njeri\"\u003c/span\u003e);\r\n\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e home = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Address(\u003cspan class=\"hljs-string\"\u003e\"671 Ngong Road\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Nairobi\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Nairobi\"\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, let's double-check that these objects have been created correctly:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; jane\r\n  Contact {firstName: \u003cspan class=\"hljs-string\"\u003e\"Jane\"\u003c/span\u003e, lastName: \u003cspan class=\"hljs-string\"\u003e\"Njeri\"\u003c/span\u003e, addresses: \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]}\r\n\r\n\u0026gt; home\r\n  Address {street: \u003cspan class=\"hljs-string\"\u003e\"671 Ngong Road\"\u003c/span\u003e, city: \u003cspan class=\"hljs-string\"\u003e\"Nairobi\"\u003c/span\u003e, county: \u003cspan class=\"hljs-string\"\u003e\"Nairobi\"\u003c/span\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLooks good! Now, let's associate this particular\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe've just created by adding the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject to our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject's\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; jane.addresses.push(home);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFinally, we'll check that our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ejane\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject's\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray does indeed contain an object:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; jane\r\n  Contact {firstName: \u003cspan class=\"hljs-string\"\u003e\"Jane\"\u003c/span\u003e, lastName: \u003cspan class=\"hljs-string\"\u003e\"Njeri\"\u003c/span\u003e, addresses: \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can see that\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ejane\u003c/code\u003e's addresses array does now contain one element. Just to be sure it all worked, we can look and see the contents of that first array element, too:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; jane.addresses[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]\r\n  Address {street: \u003cspan class=\"hljs-string\"\u003e\"671 Ngong Road\"\u003c/span\u003e, city: \u003cspan class=\"hljs-string\"\u003e\"Nairobi\"\u003c/span\u003e, county: \u003cspan class=\"hljs-string\"\u003e\"Nairobi\"\u003c/span\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd sure enough it contains an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject with the correct information. Now, if we needed to access the individual elements of the address we could do the following:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; jane.addresses[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e].street\r\n\u003cspan class=\"hljs-string\"\u003e  \"671 Ngong Road\"\u003c/span\u003e\r\n\u0026gt; jane.addresses[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e].city\r\n\u003cspan class=\"hljs-string\"\u003e  \"Nairobi\"\u003c/span\u003e\r\n\u0026gt; jane.addresses[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e].county\r\n\u003cspan class=\"hljs-string\"\u003e  \"Nairobi\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd of course we can still access\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ejane\u003c/code\u003e's other properties the same as we've done previously:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; jane.firstName\r\n\u003cspan class=\"hljs-string\"\u003e  \"Jane\"\u003c/span\u003e\r\n\u0026gt; jane.lastName\r\n\u003cspan class=\"hljs-string\"\u003e  \"Njeri\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow that we've seen how this works, let's incorporate it into our address book application.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll update our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor to initialize all\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects with an empty\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e array property:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName = first;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName = last;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.addresses = [];\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll add our new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAddress\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003estreet, city, county\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.street = street;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.city = city;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.county = county;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAwesome! In the next section, we'll update the user interface logic to support our new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efeature.\u003c/p\u003e","exportId":"wednesday-address-book-business-logic"},{"id":149,"title":"Wednesday: Address Book: User Interface Logic","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that we have a constructor in place to create\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects, let's add user interface logic to collect address details for each new contact we create. Additionally, we'll also add code to display a contact's addresses when their name is clicked.\u003c/p\u003e\r\n\u003ch2\u003eUpdating HTML\u003c/h2\u003e\r\n\u003cp\u003eTo accomplish this, we'll need the following HTML elements:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eForm input fields to collect the data for the properties defined in our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor: street, city, and county.\u003c/li\u003e\r\n\u003cli\u003eAn \"Another Address\" button, so our users may add more than one address to a contact.\u003c/li\u003e\r\n\u003cli\u003eA place to display a contact's addresses in our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eshow-contact\u003c/code\u003e\u003cspan\u003e div \u003c/span\u003eon the right side of the screen.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eHere are the HTML updates to add these three elements:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eaddress-book.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-html hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.12.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eAddress book\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eAddress book\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eAdd a contact:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-contact\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-first-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003eFirst name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-first-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-last-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003eLast name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-last-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-addresses\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-address\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-street\"\u003c/span\u003e\u0026gt;\u003c/span\u003eStreet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control new-street\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-city\"\u003c/span\u003e\u0026gt;\u003c/span\u003eCity\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control new-city\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-county\"\u003c/span\u003e\u0026gt;\u003c/span\u003eCounty\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control new-county\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-primary\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add-address\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAnother address\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAdd\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eContacts:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"contacts\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"show-contact\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eFirst name: \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"first-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLast name: \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"last-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eAddresses:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"addresses\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we have fields to collect address data for street, city, and county, and a place to display them. We also have the button to allow a user to add multiple addresses, but it does not currently have any jQuery listeners to\u003cspan\u003e \u003c/span\u003e\u003cem\u003edo\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eanything when the button is clicked.\u003c/p\u003e\r\n\u003ch2\u003ejQuery Click Listener\u003c/h2\u003e\r\n\u003cp\u003eLet's incorporate jQuery to show new fields for another address when the user clicks the \"Another Address\" button we've just added.\u003c/p\u003e\r\n\u003cp\u003eWhen the form first loads, it will display one set of address form fields, like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/e8xecmvc31208t3/address-book-form.png\" alt=\"address-book-new-contact-form\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThen, when they click the button labeled \"Another address\", a second set of address form fields will be added, like so:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/hpyk6qtj9m8xuu8/address-book-form-with-additional-fields.png\" alt=\"address-book-new-contact-form-additional-address-fields\"\u003e\u003c/p\u003e\r\n\u003cp\u003eTo do this, we'll add the following code to the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e$(document).ready\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback function. Note that it should\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ereside in the form submit listener callback function. This is because the button must be functional\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe submit the form; after all, if the user wants to add two different addresses to a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e, they'll need to be able to hit the \"Another Address\" button to receive more address form fields\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esubmitting the form to create the new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"#add-address\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"#new-addresses\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e'\u0026lt;div class=\"new-address\"\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;div class=\"form-group\"\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;label for=\"new-street\"\u0026gt;Street\u0026lt;/label\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;input type=\"text\" class=\"form-control new-street\"\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/div\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;div class=\"form-group\"\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;label for=\"new-city\"\u0026gt;City\u0026lt;/label\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;input type=\"text\" class=\"form-control new-city\"\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/div\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;div class=\"form-group\"\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;label for=\"new-county\"\u0026gt;County\u0026lt;/label\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;input type=\"text\" class=\"form-control new-county\"\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/div\u0026gt;'\u003c/span\u003e +\r\n                               \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/div\u0026gt;'\u003c/span\u003e);\r\n  });\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen appending a large amount of HTML with jQuery, we'll break it into smaller strings on different lines, using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator to concatenate them, as you see above. This makes it more readable than if it was all on a single line. For further readability, we keep the spacing and indentation the same as our other HTML.\u003c/p\u003e\r\n\u003ch2\u003ejQuery Form Submit Listener\u003c/h2\u003e\r\n\u003cp\u003eNext, we'll add jQuery logic to our form submit listener in order to collect and utilize the address information provided by the user. Previously, when the form was submitted, we collected the first and last name and created a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject with that data. Now we must\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eloop through the address form fields to collect\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethat\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einformation, create\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects, and push them onto the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject's\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty.\u003c/p\u003e\r\n\u003cp\u003eThe code to accomplish this can be seen below. It should reside\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe line that creates a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e. (However, note that you will not\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyet\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esee the results of this, because we haven't added code to display the address information yet. We'll do this momentarily!)\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e...\r\n$(\u003cspan class=\"hljs-string\"\u003e\".new-address\"\u003c/span\u003e).each(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedStreet = $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).find(\u003cspan class=\"hljs-string\"\u003e\"input.new-street\"\u003c/span\u003e).val();\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedCity = $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).find(\u003cspan class=\"hljs-string\"\u003e\"input.new-city\"\u003c/span\u003e).val();\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedCounty = $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).find(\u003cspan class=\"hljs-string\"\u003e\"input.new-county\"\u003c/span\u003e).val();\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newAddress = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Address(inputtedStreet, inputtedCity, inputtedCounty);\r\n  newContact.addresses.push(newAddress);\r\n});\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've created a loop that cycles through each DOM element with the class\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003enew-address\u003c/code\u003e. Much like looping through all elements of an array with the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, as we learned last week, we can look through all elements of a given jQuery class with the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eeach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. However, instead of taking a parameter that each element is assigned to, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword to refer to the current element. (That is, when we use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.forEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe say something like\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ekittens.forEach(function(kitten){ ...\u003c/code\u003e. We have the opportunity to provide a parameter that each individual element of the array will use as a variable name. \"kitten\", in this case. When using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eeach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein jQuery we\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecannot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eprovide a custom parameter in this fashion, and instead must use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e, as seen in the code above.)\u003c/p\u003e\r\n\u003cp\u003eWe also are using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efind()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in the code above, which looks through all child elements of the provided element for any\u003cspan\u003e \u003c/span\u003e\u003cem\u003eother\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eelements that match the criteria provided as an argument. There's a\u003ccode class=\"prettyprint\"\u003echildren()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, too, but\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003echildren()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill only traverse down a\u003cspan\u003e \u003c/span\u003e\u003cem\u003esingle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elevel, whereas\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efind()\u003c/code\u003ewill look through children, their children, and so on. Since our inputs are nested within\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eform-group\u003c/code\u003e\u003ccode class=\"prettyprint\"\u003e\u0026lt;div\u0026gt;\u003c/code\u003es, we need to traverse down two levels. Therefore, we use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efind()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003echildren()\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eDisplaying Addresses\u003c/h2\u003e\r\n\u003cp\u003eFinally, we need to display each of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e's addresses alongside their name.\u003c/p\u003e\r\n\u003cp\u003eWe'll do this in a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith an id of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e. To accomplish this, we'll place the following code inside the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.contact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclick listener:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e...\r\n$(\u003cspan class=\"hljs-string\"\u003e\"ul#addresses\"\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\nnewContact.addresses.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eaddress\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"ul#addresses\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;\"\u003c/span\u003e + address.street + \u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e + address.city + \u003cspan class=\"hljs-string\"\u003e\" \"\u003c/span\u003e + address.County + \u003cspan class=\"hljs-string\"\u003e\"\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n});\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003ePhew! That was a lot to take in!\u003c/p\u003e\r\n\u003cp\u003eFor reference, here is the complete jQuery code that incorporates all changes we've made so far. (It also includes 3 lines at the end to clear the 3 address fields after the form is submitted)\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e...\r\n$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"#add-address\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"#new-addresses\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e'\u0026lt;div class=\"new-address\"\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;div class=\"form-group\"\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;label for=\"new-street\"\u0026gt;Street\u0026lt;/label\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;input type=\"text\" class=\"form-control new-street\"\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/div\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;div class=\"form-group\"\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;label for=\"new-city\"\u0026gt;City\u0026lt;/label\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;input type=\"text\" class=\"form-control new-city\"\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/div\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;div class=\"form-group\"\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;label for=\"new-county\"\u0026gt;County\u0026lt;/label\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;input type=\"text\" class=\"form-control new-county\"\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/div\u0026gt;'\u003c/span\u003e +\r\n                               \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/div\u0026gt;'\u003c/span\u003e);\r\n  });\r\n\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"form#new-contact\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n    event.preventDefault();\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedFirstName = $(\u003cspan class=\"hljs-string\"\u003e\"input#new-first-name\"\u003c/span\u003e).val();\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedLastName = $(\u003cspan class=\"hljs-string\"\u003e\"input#new-last-name\"\u003c/span\u003e).val();\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newContact = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Contact(inputtedFirstName, inputtedLastName);\r\n\r\n    $(\u003cspan class=\"hljs-string\"\u003e\".new-address\"\u003c/span\u003e).each(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedStreet = $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).find(\u003cspan class=\"hljs-string\"\u003e\"input.new-street\"\u003c/span\u003e).val();\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedCity = $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).find(\u003cspan class=\"hljs-string\"\u003e\"input.new-city\"\u003c/span\u003e).val();\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedCounty = $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).find(\u003cspan class=\"hljs-string\"\u003e\"input.new-county\"\u003c/span\u003e).val();\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newAddress = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Address(inputtedStreet, inputtedCity, inputtedCounty)\r\n      newContact.addresses.push(newAddress)\r\n    });\r\n\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"ul#contacts\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;\u0026lt;span class='contact'\u0026gt;\"\u003c/span\u003e + newContact.fullName() + \u003cspan class=\"hljs-string\"\u003e\"\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n\r\n    $(\u003cspan class=\"hljs-string\"\u003e\".contact\"\u003c/span\u003e).last().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#show-contact\"\u003c/span\u003e).show();\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#show-contact h2\"\u003c/span\u003e).text(newContact.fullName());\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".first-name\"\u003c/span\u003e).text(newContact.firstName);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".last-name\"\u003c/span\u003e).text(newContact.lastName);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#addresses\"\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n      newContact.addresses.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eaddress\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#addresses\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;\"\u003c/span\u003e + address.street + \u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e + address.city + \u003cspan class=\"hljs-string\"\u003e\" \"\u003c/span\u003e + address.county + \u003cspan class=\"hljs-string\"\u003e\"\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n      });\r\n    });\r\n\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input#new-first-name\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input#new-last-name\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input.new-street\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input.new-city\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input.new-county\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n\r\n  });\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur address book application is almost complete! Let's add a few finishing touches: In this lesson we'll write an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprototype method called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullAddress()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat will return all properties of an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003eobject as a single string. It will work just like the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullName()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we added to the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e prototype in previous lessons.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll add the prototype itself to the business logic section of our scripts:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003eAddress.prototype.fullAddress = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.street + \u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e + \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.city + \u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e + \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.county;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, on the front-end, we can replace\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddress.street + \", \" + address.city + \" \" + address.county\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddress.fullAddress()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThis line:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e$(\u003cspan class=\"hljs-string\"\u003e\"ul#addresses\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;\"\u003c/span\u003e + address.street + \u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e + address.city + \u003cspan class=\"hljs-string\"\u003e\" \"\u003c/span\u003e + address.county + \u003cspan class=\"hljs-string\"\u003e\"\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003ebecomes:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e$(\u003cspan class=\"hljs-string\"\u003e\"ul#addresses\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;\"\u003c/span\u003e + address.fullAddress() + \u003cspan class=\"hljs-string\"\u003e\"\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd it still works!\u003c/p\u003e\r\n\u003cp\u003eThese\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullName()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullAddress()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods may seem unnecessary, but doing as much of the work as possible in the business logic is a great habit to get into. This keeps your front-end logic can be as clear as possible, and independent of the back-end as much as possible. You may be tired of hearing it, but remember:\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAlways keep your business and user interface logic well separated!\u003c/em\u003e\u003c/p\u003e","exportId":"wednesday-address-book-user-interface-logic"},{"id":2272,"title":"Wednesday: Address Book: Refactoring","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eThe jQuery section of our address book application is becoming a little cumbersome. Let's refactor to improve its readability and efficiency. After all, we always want to write clean, easy-to-read code with well-separated business and user interface logic. It's easier to read, easier to collaborate on, and generally appears much more professional in nature.\u003c/p\u003e\r\n\u003cp\u003eBy pulling some of the code into functions\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoutside\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof the event listener we can actually pre-process it\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe document is ready. Then, for the code within the event listener, we can simply call the pre-processed functions.\u003c/p\u003e\r\n\u003cp\u003eFor example, we can create a function to reset the fields:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eresetFields\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input#new-first-name\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input#new-last-name\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input.new-street\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input.new-city\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input.new-county\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n}\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we can remove the lines of code previously responsible for resetting the fields from the form submit callback, and simply call\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eresetFields()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead. Easy enough!\u003c/p\u003e","exportId":"wednesday-address-book-refactoring"},{"id":2273,"title":"Wednesday: Practice: Address Book","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: The goal for today is to practice creating objects using constructors and prototypes. Practice adding properties and methods to objects and calling out those properties and methods in your webpage.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between a Constructor and Prototype?\u003c/li\u003e\r\n\u003cli\u003eWhen would you use a Constructor, and when would you use a Prototype?\u003c/li\u003e\r\n\u003cli\u003eWhat functionality do they offer?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eAddress Book\u003c/h3\u003e\r\n\u003cp\u003eFollow along with the Address Book lessons to add Address objects and support for multiple addresses. Complete these items for it too:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd address type to the addresses entered\u003c/li\u003e\r\n\u003cli\u003eRemove any additional address fields when the form is submitted. (One way to do this would be to use the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/not/\" target=\"_blank\"\u003e.not()\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/remove/\" target=\"_blank\"\u003e.remove()\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efunctions.)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf you wish, work on these too:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRefactor some of the other sections of the jQuery into functions as we did with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eresetFields()\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eTry a jQuery method from either the CSS or Effects options in the documentation (e.g.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efadeIn()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.css()\u003c/code\u003e)\u003c/li\u003e\r\n\u003cli\u003eTry a jQuery method from the Events options (e.g.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ehover()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.keypress()\u003c/code\u003e)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the web app work as expected?\u003c/li\u003e\r\n\u003cli\u003eIs business logic and user interface logic kept separate?\u003c/li\u003e\r\n\u003cli\u003eWere constructors and prototypes used to create new objects?\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"wednesday-practice-address-book"},{"id":150,"title":"Thursday: Bank Account","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003ePractice and Code\u003c/h2\u003e\r\n\u003ch3\u003eBank Account\u003c/h3\u003e\r\n\u003cp\u003eUse constructor functions and prototypes to create a webpage where a user can create a single bank account with an initial deposit amount. Then allow the user to make withdrawals, deposits and see the balance of the account. Remember to create a BankAccount constructor and a prototype that includes methods for deposit and withdrawal and any other properties needed. Here is an example wireframe to help you visualize the app:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%204%20Thursday/bank%20account.png\" alt=\"bank account.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYour project is not required to look like this; this is only an example.\u003c/p\u003e","exportId":"thursday-bank-account"},{"id":2257,"title":"Thursday: Defining a Problem Statement","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eSession Objective\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBy the end of the session, groups should be able to create a problem statement for their group project that addresses the gap, impact, and the solution in a clear and concise way.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup Task #1\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn your respective project groups, go through and discuss:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat is a problem statement.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample of a good problem statement.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eExamples of bad problem statements.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat is a problem statement?\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA concise and clear explanation as to why an application or project needs to be built or developed. \u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eExamples of good problem statements.\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTwo out of five people use a taxi. However, to request for a taxi, an average person has to stand on the street to hail a ride. Sometimes, it takes a considerable amount of time to get a ride and the pricing tends to be expensive and irregular. Also, weather conditions and safety can be a big issue to finding a taxi in Nairobi.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThat is why our team came up with Uber, an application that allows users to find taxis in a more affordable and efficient way with their safety also guaranteed.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhy is the Uber problem statement a good one?\u003c/span\u003e\u003c/h3\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Gap\u003c/span\u003e\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eIdentifies the gap which is in the private transport sector i.e. it identifies the problem that has been observed \u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eImpact\u003c/span\u003e\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eShows the impact that this gap has on the users e.g. time, affordability, efficiency\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eSolution\u003c/span\u003e\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eProvides a solution, the Uber application, that is efficient, offering affordable prices and guarantees safety for the users.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eConcise \u0026amp; Clear\u003c/span\u003e\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eThe problem statement is clear, brief and direct to the point.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eExamples of bad problem statements\u003c/span\u003e\u003c/h2\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCurrently, Brand Spark website needs a ‘fresh look’. We propose a complete redesign of the website in order to make it better.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo fulfill Moringa prep requirements in order to graduate we decided to build a game that is fun and different from what is currently available. \u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup Task #2\u003c/span\u003e\u003c/h1\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eUsing the Uber problem statement as a reference, what makes the above 2 bad problem statements bad? Discuss.\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eAre they concise and clear? Do they clearly outline the reason \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e‘why’\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e behind building the projects and the impact expected?.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup Task #3\u003c/span\u003e\u003c/h1\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eSelect one person from your group and use their laptop to:\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eGo to \u003c/span\u003e\u003ca href=\"https://drive.google.com\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eGoogle Drive\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e and create a new Google document.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eSave the document as “MPFT[Cohort #] - Group Project Name.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs a group discuss the components that make a good problem statement and complete the tasks assigned.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eComponents of a good problem statement\u003c/span\u003e\u003c/h2\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eA good problem statement should be able to address the following:\u003c/span\u003e\u003c/h3\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eA Gap\u003c/span\u003e\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eThis captures the motivation behind building a certain application. Keep asking yourself ‘\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhy?\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e’ There must be \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esomething \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ethat is driving the application you are building.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eYou have either identified a sector/area that a problem is situated e.g. payment sector, transport sector, medical field, tourism industry e.t.c.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eOther reasons for building an application might be for example, building a game in order to improve your technical competence. \u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup Task #4\u003c/span\u003e\u003c/h1\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eDiscuss the reason or motivation behind building your group project.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eType down the reason in the google document you created.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/h3\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eImpact \u003c/span\u003e\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat impact does building this project have either on the users the project is targeting or on you as a group.\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eDoes it showcase your technical strength?, Does it challenge your thinking?, Does it prove that you can learn a new technology in a short span of time? e.t.c.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAre there any benefits for the users who will interact with your application/website? E.g. time/cost efficient e.t.c\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eOR/AND\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eExplain the consequences of the gap in the specific industry.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eState the user/stakeholder that is directly affected by this gap. For example, people in general or people in certain groups (age, gender, occupation e.t.c.)\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eUse your market research to quantify the impact of the gap.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup Task #5\u003c/span\u003e\u003c/h1\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eDepending on the type of project you are working on, discuss the impact that the gap has on the people it is directly affecting.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eOR\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe impact that this project has made in you as a group especially if it doesn't directly solve a problem in the society.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eType down the impact in the google document.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eSolution\u003c/span\u003e\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow that you have identified the motivation/reason behind building your application, it’s time to introduce your idea and state how it will bridge the ‘gap.’ \u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis could be by addressing a need not currently met or by providing certain benefits to the users of your application\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup Task #6\u003c/span\u003e\u003c/h1\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eDiscuss the solution that your project is offering to the user.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eType down the solution in the google document.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eClear and Concise\u003c/span\u003e\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eA good problem statement should be brief but still elaborate, informative and clear.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup Task #7\u003c/span\u003e\u003c/h1\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eRead through your groups problem statement and ensure that it is brief, clear and to the point.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup Task #8\u003c/span\u003e\u003c/h1\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow that you are done creating the problem statement for your group project, read it out loud as a group. Does it make sense or sound good to the ear?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eEnsure that it meets the above components of a good problem statement\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMake corrections if any.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eRead it out loud once more and make sure it is perfect.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCongratulations!! You just created your projects problem statement.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat is the importance of the activity you just completed?\u003c/span\u003e\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eA good problem statement helps you define and understand a problem in order to work towards the intended solution.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eA good problem statement helps an audience understand the necessity and importance of the project that your team is working on.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"thursday-defining-a-problem-statement"},{"id":268,"title":"Friday: Independent Project - Pig Dice","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":24.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003ch2\u003eProject\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: The goal of this project is to exercise your JavaScript programming skills with constructors, prototypes, objects, properties, methods, jQuery and DOM manipulation and traversal.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eFirst, carefully read the project description below. You may discuss it with your previous pairs. Then, group up for a collective whiteboard session. Discuss the following; map out a basic approach on a whiteboard, collaborate, and get creative!\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat will happen when a user clicks \"Play\"?\u003c/li\u003e\r\n\u003cli\u003eWhat objects will you need? What functions?\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli\u003eHow will these be triggered throughout the gameplay?\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli\u003eHow will information be collected from the user? How will it be displayed?\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli\u003eWhen you have a broad overview of how you want to build your game, identify the simplest behavior, and perhaps what behaviors to tackle after that. Remember to start simple and work one step at a time.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003ePig Dice\u003c/h3\u003e\r\n\u003cp\u003eWrite a program where two users can play\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Pig_%28dice_game%29\" target=\"_blank\"\u003ePig dice\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eagainst each other. Don't forget to write plain English specifications with example inputs and outputs before you begin coding!\u003c/p\u003e\r\n\u003ch4\u003eFurther Exploration\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd options to play one of the other variations of Pig Dice using two or more dice\u003c/li\u003e\r\n\u003cli\u003eAdd option to play the computer - easy or hard levels:\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eEasy\u003c/strong\u003e: Computer always stops after second roll.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eHard\u003c/strong\u003e: Computer uses strategy based on current total and rolled dice.\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eYour project will be evaluated for the following:\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eBootstrap classes are used to style your page.\u003c/li\u003e\r\n\u003cli\u003ePage incorporates a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eIndentation and spacing of HTML and CSS is accurate and consistent.\u003c/li\u003e\r\n\u003cli\u003eCommits are made regularly with clear messages associated with them\u003c/li\u003e\r\n\u003cli\u003eProject is deployed to GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eProject works as expected.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of week’s concepts. If prompted, you are able to discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject submittion time. It is to be submitted by 6pm onFriday unless otherwise stated\u003c/li\u003e\r\n\u003cli\u003eA project README that includes:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://gist.github.com/PurpleBooth/109311bb0361f32d87a2\"\u003eHere is an example\u003c/a\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eproject or program name\u003c/li\u003e\r\n\u003cli\u003eauthor name\u003c/li\u003e\r\n\u003cli\u003edescription of project\u003c/li\u003e\r\n\u003cli\u003eproject setup instructions\u003c/li\u003e\r\n\u003cli\u003elink to live site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003ecopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eProject is in a polished, portfolio-quality state.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003e(Suggestions for what this can mean: Intuitive, easy to follow layout. Simple yet polished styling. Form field labels where appropriate. Form fields that are validated correctly, and get cleared after submitting. Detailed, well put together readme. No typos. And much more.)\u003c/em\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eSubmission of Independent Projects\u003c/h2\u003e\r\n\u003cp\u003eIndependent Projects must be submitted by\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e6pm on Friday.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(For Moringa prep part-time students, code review and deadlines will be discussed in class.)\u003c/p\u003e\r\n\u003cp\u003eComplete the following steps to submit your project:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eBefore you start working on your project, create a Github repository for your project\u003c/li\u003e\r\n\u003cli\u003eSubmit your project -- use the top right button\u003cstrong\u003e (Submit Assignment)\u003c/strong\u003e\n\u003c/li\u003e\r\n\u003cli\u003eStart working on your project\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eBefore pushing your final code to Github,\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eat 5pm do a final check for each objective. Spend a few minutes checking indentation, removing commented-out code, creating a detailed README, etc. Your project should be polished and complete.\u003c/li\u003e\r\n\u003cli\u003e\u003cstrong\u003ePush the final code to your GitHub repo by 6pm local time.\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eEven if you are not completely done working on your project, push anyways which will communicate to your TM how much you have completed\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"i6738612b529467812ceaeeebf51cb730"},{"id":2014,"title":"AJAX and JSON","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eAJAX\u003c/strong\u003e is a means of interacting with servers behind the scenes using JavaScript without having to reload the page. This allows you to create complex interactive web apps that behave like desktop apps. One famous example is Gmail, which allows you to read, write, and receive emails, all without the need for refreshing the page.\u003c/p\u003e\r\n\u003cp\u003eVisit the following URL in your browser:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://openweathermap.org\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand create an account to get an API key\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%204%20Monday/weatherapi.png\" alt=\"weatherapi.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/2137\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAdd the API key to the end of the following link then load on your browser\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003ehttp://api.openweathermap.org/data/2.5/weather?q=San%20Francisco\u0026amp;mode=json\u0026amp;units=imperial\u0026amp;APPID=API_KEY\u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eWhat does the %20 represent in the\u003cspan\u003e \u003c/span\u003e\u003ca class=\"popup\" href=\"http://en.wikipedia.org/wiki/Query_string\"\u003equery string\u003c/a\u003e? (hint: try\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eencodeURI(\"San Francisco\")\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein your JS console, then google it)\u003c/p\u003e\r\n\u003cp\u003eNow try the following line of code in your console:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e$.ajax({\r\n  method: \u003cspan class=\"hljs-string\"\u003e'GET'\u003c/span\u003e,\r\n  url: \u003cspan class=\"hljs-string\"\u003e'http://api.openweathermap.org/data/2.5/weather?q=San%20Francisco\u0026amp;mode=json\u0026amp;units=imperial\u0026amp;APPID=API-KEY'\u003c/span\u003e,\r\n  success: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eweather_data\u003c/span\u003e)\u003c/span\u003e{\r\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(weather_data)\r\n  }\r\n})\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOpen your Network tab and initiate the AJAX request again to see the network request and response in action.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%204%20Monday/ajax.png\" alt=\"ajax.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/2136\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe most common thing to do with data returned from an AJAX request is show it to the user. We can use jQuery to do this, but only in the callback function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eto_be_run_on_server_response\u003c/code\u003e. If we try to use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eweather_data\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoutside that function, we won't have the response from the server yet.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e to_be_run_on_server_response = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eweather_data\u003c/span\u003e)\u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e'#container'\u003c/span\u003e).append(weather_data.main.temp)\r\n}\r\n\r\n$.get(\u003cspan class=\"hljs-string\"\u003e'http://api.openweathermap.org/data/2.5/weather?q=San%20Francisco\u0026amp;mode=json\u0026amp;units=imperial\u0026amp;APPID=API-KEY'\u003c/span\u003e).success(to_be_run_on_server_response)\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eExercise:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eCreate a simple weather page that shows the following data.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003ecurrent temperature\u003c/li\u003e\r\n\u003cli\u003etoday's high and low temperatures\u003c/li\u003e\r\n\u003cli\u003ethe description of current weather conditions\u003c/li\u003e\r\n\u003cli\u003ecurrent wind speed\u003c/li\u003e\r\n\u003cli\u003eThe time of sunrise and sunset. (hint:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enew Date(weatherData.sys.sunrise * 1000)\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e)\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eAllow the user to click a button or link to show the weather in a different city\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewithout reloading the page\u003c/strong\u003e. You will need to do the following:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate one or more links across the top of the page with names of alternate cities.\u003c/li\u003e\r\n\u003cli\u003eSet up click handlers on the links that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eevent.preventDefault()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto prevent the browser from changing pages.\u003c/li\u003e\r\n\u003cli\u003eClear the current contents of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#container\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eTell the user that data is currently being fetched.\u003c/li\u003e\r\n\u003cli\u003eWhen data returns from the weather server, display it on the page\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cstrong\u003eExtra Credit:\u003c/strong\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eRefactor your code so there is only a single click handler that understands which city's data is being requested based on what element received the click event.\u003c/li\u003e\r\n\u003cli\u003eRefactor your code so that all you need to do is add a new anchor tag to the page and all other functionality will work automatically.\u003c/li\u003e\r\n\u003cli\u003eRefactor your code so that there exists an array of city names and all links and click events are generated dynamically on page load\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eNow let's try more complex interaction using a\u003cspan\u003e \u003c/span\u003e\u003ca class=\"popup\" href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\"\u003eRESTful API\u003c/a\u003e, which is to say a set of endpoints, available over a network, that serve JSON data in a predictable format based on that resource's name. (e.g. a post with the id of 7 is available at the path\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e/posts/7\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003eHere the server lives at\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://jsonplaceholder.typicode.com\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the path to the info we want is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e/posts/1\u003c/code\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e$.ajax({\r\n  method: \u003cspan class=\"hljs-string\"\u003e'GET'\u003c/span\u003e,\r\n  url: \u003cspan class=\"hljs-string\"\u003e'http://jsonplaceholder.typicode.com/posts/1'\u003c/span\u003e,\r\n  success: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003edata\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(data)\r\n  }\r\n})\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eUsing\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsonplaceholder.typicode.com/\"\u003ePlaceHolder JSON\u003c/a\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eRetrieve the post with id of 1 from the server, in the success callback, display it on the page.\u003c/li\u003e\r\n\u003cli\u003eRetrieve the post with id of 2 from the server, in the success callback, display it on the page.\u003c/li\u003e\r\n\u003cli\u003eAbstract the success callback out into a separate function called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eplace_post_on_page\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eUsing a for loop, use AJAX calls to fetch posts with ids from 1 to 10 and pass them to your\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eplace_post_on_page\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to display them on the page. Do they always appear in the same order? Why is this?\u003c/li\u003e\r\n\u003cli\u003eNow instead, use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e/posts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eendpoint to get all posts and display only their titles on the page. This is often called the \"index\" view.\u003c/li\u003e\r\n\u003cli\u003eWhen a visitor clicks on the title of a post, clear the content area and replace it with the full information for that post, displaying all of its properties. This is often called the \"show\" view.\u003c/li\u003e\r\n\u003cli\u003eAllow the user to navigate back to the \"index\" view from the \"show\" view.\u003c/li\u003e\r\n\u003cli\u003eNetwork requests are expensive and slow. Refactor your code such that once you've fetched data once, it's cached as a javascript object and accessible immediately when the user moves back and forth between 'show' and 'index' views.\u003c/li\u003e\r\n\u003cli\u003eWhen showing an individual post, fetch all '/comments' and append the ones whose 'postId' property matches the post's id.\u003c/li\u003e\r\n\u003cli\u003eFetch information about the user who made the post. Display their name and email under the post.\u003c/li\u003e\r\n\u003cli\u003eCreate a simple login form where users can input their email address and password (let's say their password is their zip code, which we can also find on the user objects) such that visitors can see all of their own posts and comments after they log in.\u003c/li\u003e\r\n\u003cli\u003eCreate forms to allow users to create a new post or edit existing posts, pointing the forms to the appropriate RESTful endpoints using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$.post()\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eAbout JSON (a look under the hood)\u003c/h3\u003e\r\n\u003cp\u003eBecause we can only send strings of text (or binary data) over a network, not arrays and objects in memory, modern sites convert their data to JSON (JavaScript Object Notation) format, and your jQuery\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$.ajax()\u003c/code\u003ecallback converts it back to arrays, objects and primitive values. Check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://learnxinyminutes.com/docs/json/\"\u003ethis example\u003c/a\u003e. Here is what is happening for you behind the scenes (try it out in your console with the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringaprep-ft.herokuapp.com/students/products.js\" target=\"_blank\"\u003e\u003ccode\u003eproducts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efrom your e-commerce site):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-comment\"\u003e// run these one line at a time in your console.\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e// the server does this before sending information over the wire\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e products_array_represented_as_json_string = \u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.stringify(products)\r\n\u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e products_array_represented_as_json_string\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e// $.ajax() converts incoming JSON strings back into arrays, objects and primitive values before passing it into your callback function.\u003c/span\u003e\r\n\u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.parse(products_array_represented_as_json_string)\u003c/code\u003e\u003c/pre\u003e","exportId":"ajax-and-json"}]},{"id":122,"name":"Week 5","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":true,"exportId":"ida9d28c36a1c294a65728c2ec8c6c0f7","items":[{"id":1141,"title":"Monday: Team Week Objectives","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eYou're a team and you're building something awesome!\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eSpend time together as a team brainstorming your vision. Decide how you want to communicate and work together over the next 4 days. All ideas should be welcome and all members given roles. You can change partners daily or play to the strengths and preferences of your team members (business logic vs user interface logic). Remember that in addition to coding skills, communication is one of the most important elements of building great applications. Let your team be one that fosters direct, honest communication and encourages every member's voice!\u003c/p\u003e\r\n\u003cp\u003eFor the presentation/demonstration, determine what the minimum viable product for demonstration is.. A minimum viable product, or MVP, is a development approach where an application is created with the minimum sufficient features necessary to demonstrate it to users and/or investors. Additional features are implemented when/if time and resources allow. When you create an MVP, it should be a prototype of your idea and have the basic core elements in place so your audience (e.g. peers, investors, clients, future employers, future users, etc.) can understand what your vision is. Try to be both ambitious and realistic. Use a whiteboard or paper or online storyboard application if that would help everyone with the overview and the plan!\u003c/p\u003e\r\n\u003cp\u003eYou are going to create something incredible. Dive in!\u003c/p\u003e\r\n\u003ch2\u003eCode Review Objectives\u003c/h2\u003e\r\n\u003cp\u003eAt the end of the week, you will present your group project on Friday, where it will be reviewed for the following objective:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eParticipation in creating and presenting a project, and collaborating effectively with teammates.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003ch2\u003eMarket Research\u003c/h2\u003e\r\n\u003cp\u003eOur project ideas are coming together and we have an MVP. Before we start building anything, we need to take a look at the market for our product. One thing to consider is the competition: does this product already exist? If it does, that's okay! Many apps in the real world are variations of one another. How many apps have you seen for playing music or requesting a taxi have can you think of? If this is the case, then think about how the user experience be improved or made unique. We also want to consider what kinds of customers our product going to serve. For example, let's say we want to build an event-planning application. How would the presentation and extra features differ if we were building it for:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003esports teams?\u003c/li\u003e\r\n\u003cli\u003etechnology meetups?\u003c/li\u003e\r\n\u003cli\u003eoutdoors enthusiasts?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eTask:\u003c/strong\u003e\u003cspan\u003e Spend half an hour as a team researching your idea online and refining your MVP according to your findings.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003eProject Pitch\u003c/h3\u003e\r\n\u003cp\u003eSo, you have an idea for the app you'd like to build as a team. If we recall our earlier discussion about the MVP, we need to understand what our user wants before actually building anything. What's the best way to do that? By talking to users!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eTask:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eFor the next two hours, we're going to go out and do just that. Go out in groups (at least two people) to an area with potential users you can ask questions about your product. Designate one group member as the note-taker to record answers to questions.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eApproach someone and introduce yourselves and your project\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eExample: \"Hi there! We are [your names] and we're students at Moringa School. We're building an application and we are hoping to get some opinions on it.\"\u003c/li\u003e\r\n\u003cli\u003eAsk them for their time politely\r\n\u003cul\u003e\r\n\u003cli\u003eSet a timeline for the pitch, and don't go over your time limit - respect their time\u003c/li\u003e\r\n\u003cli\u003eExample: \"Would you mind if we take three minutes of your time?\"\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eIntroduce the problem you're setting out to solve\u003c/li\u003e\r\n\u003cli\u003eInstead of asking questions about an already-finished application, ask about ways to solve the problem. You're still in the planning phase - user experience research about the finished product will come later.\u003c/li\u003e\r\n\u003cli\u003eMake it a conversation. Ask open-ended questions - you'll get more information that way\r\n\u003cul\u003e\r\n\u003cli\u003eInstead of \"What is your favorite ice cream flavor?\" try, \"Can you tell me about a dessert you would go out of your way to try again?\"\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eHave a few questions ready. Some themes to think about:\r\n\u003cul\u003e\r\n\u003cli\u003eAccessibility: are you able to use this technology? Example: Do you have a phone or laptop with internet access?\u003c/li\u003e\r\n\u003cli\u003eRelevance: Is your project relevant? Example: For a money tracking app: how do you use money (mPesa, credit card, cash)?\u003c/li\u003e\r\n\u003cli\u003eUsability: do you have a system for doing this? Would you have to change a lot of things in your life to use this app? Can you integrate it into your life?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThank them for their time\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eTask:\u003c/strong\u003e\u003cspan\u003e Now that you've conducted market research, re-evaluate your MVP and integrate your findings into your user stories. Feel free to divide your user stories into sections: \"MVP\" and \"Bonus features\". What did you get right the first time around? Did any findings surprise you? Were you making any assumptions in your product design?\u003c/span\u003e\u003c/p\u003e","exportId":"monday-team-week-objectives"},{"id":1519,"title":"Monday: Git Collaboration Workflow","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003cstrong\u003eGit Collaboration Workflow\u003c/strong\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen we work on a development project as a collaborator, we have commit privileges to the master repository on GitHub. The development workflow for collaborators in a team takes advantage of some Git functionality that we don't often use on pair projects: \u003c/span\u003e\u003cstrong\u003eBranching\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cstrong\u003emerging\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Below is a \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egeneral\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e outline of this workflow. Use this lesson as a reference when working on your group project this week:\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cstrong\u003eGit Team Workflow\u003c/strong\u003e\u003c/h3\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e1. Setup Github Repo\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBuild a repo on Github and add all team members as collaborators. Clone the GitHub master repo to each pair's desktop with \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git clone \u0026lt;repo-url\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Navigate to the project with \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ cd \u0026lt;project-directory-name\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e2. Create Branches\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eEach pair creates (and switches to) their own feature branch locally by running \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git checkout -b \u0026lt;branch-name\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Note that repos come with a master branch by default; you will not need to create one manually.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eTip: If you're ever uncertain which branch you're currently on, run \u003c/span\u003e\u003c/i\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git branch\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e3. Code\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003ePairs complete work on their own branches, adding and committing throughout the process.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e4. Pull Origin Master into Local Master\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBefore pushing work, pairs pull any new code teammates may have merged into the Github master branch (AKA \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eorigin master\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e or \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eremote master\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e) into their local master branch.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis is done by navigating into local master with \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git checkout master\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, then running \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git pull origin master\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. This pulls code from Github's master into the local master.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eGenerally speaking, this command triggers one of the following three results:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ci\u003eExample A -\u003c/i\u003e\u003c/strong\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e Pulling down no new changes\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. There is no new content to pull into the local branch, it is already up-to-date.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e$ \u003c/strong\u003e\u003cstrong\u003egit checkout master\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   Switched\u003c/strong\u003e\u003cstrong\u003e to branch \u003c/strong\u003e\u003cstrong\u003e'master'\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   Your\u003c/strong\u003e\u003cstrong\u003e branch is up-to-date with \u003c/strong\u003e\u003cstrong\u003e'origin/master'\u003c/strong\u003e\u003cstrong\u003e.\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e$ \u003c/strong\u003e\u003cstrong\u003egit pull origin master\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   From\u003c/strong\u003e \u003cstrong\u003ehttps:\u003c/strong\u003e\u003cstrong\u003e/\u003c/strong\u003e\u003cstrong\u003e/github.com/test\u003c/strong\u003e\u003cstrong\u003e-user/my_project\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   * branch            master     -\u0026gt; \u003c/strong\u003e\u003cstrong\u003eFETCH_HEAD\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   Already\u003c/strong\u003e\u003cstrong\u003e up-to-date.\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003cbr\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ci\u003eExample B -\u003c/i\u003e\u003c/strong\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e Pulling down new changes with no merge conflicts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. There was new content from the Github's master (also known as \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eorigin master\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e), but Git was able to merge it into the branch automatically.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e$ \u003c/strong\u003e\u003cstrong\u003egit checkout master\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   Switched\u003c/strong\u003e\u003cstrong\u003e to branch \u003c/strong\u003e\u003cstrong\u003e'master'\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e$ \u003c/strong\u003e\u003cstrong\u003egit pull origin master\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  remote:\u003c/strong\u003e \u003cstrong\u003eCounting\u003c/strong\u003e \u003cstrong\u003eobjects:\u003c/strong\u003e \u003cstrong\u003e3\u003c/strong\u003e\u003cstrong\u003e, done.\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  remote:\u003c/strong\u003e \u003cstrong\u003eCompressing\u003c/strong\u003e \u003cstrong\u003eobjects:\u003c/strong\u003e \u003cstrong\u003e100\u003c/strong\u003e\u003cstrong\u003e% (\u003c/strong\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003cstrong\u003e/\u003c/strong\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003cstrong\u003e), done.\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  remote:\u003c/strong\u003e \u003cstrong\u003eTotal\u003c/strong\u003e \u003cstrong\u003e3\u003c/strong\u003e\u003cstrong\u003e (delta \u003c/strong\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003cstrong\u003e), reused \u003c/strong\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003cstrong\u003e (delta \u003c/strong\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003cstrong\u003e), pack-reused \u003c/strong\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  Unpacking\u003c/strong\u003e \u003cstrong\u003eobjects:\u003c/strong\u003e \u003cstrong\u003e100\u003c/strong\u003e\u003cstrong\u003e% (\u003c/strong\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003cstrong\u003e/\u003c/strong\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003cstrong\u003e), done.\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  From\u003c/strong\u003e \u003cstrong\u003ehttps:\u003c/strong\u003e\u003cstrong\u003e/\u003c/strong\u003e\u003cstrong\u003e/github.com/test\u003c/strong\u003e\u003cstrong\u003e-user/my_project\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  * branch            master     -\u0026gt; \u003c/strong\u003e\u003cstrong\u003eFETCH_HEAD\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e     \u003c/strong\u003e\u003cstrong\u003e2833\u003c/strong\u003e\u003cstrong\u003ed6c..\u003c/strong\u003e\u003cstrong\u003e51\u003c/strong\u003e\u003cstrong\u003ef2f03  master     -\u0026gt; origin/master\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  Updating\u003c/strong\u003e \u003cstrong\u003e2833\u003c/strong\u003e\u003cstrong\u003ed6c..\u003c/strong\u003e\u003cstrong\u003e51\u003c/strong\u003e\u003cstrong\u003ef2d03\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  Fast\u003c/strong\u003e\u003cstrong\u003e-forward\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  README\u003c/strong\u003e\u003cstrong\u003e.md | \u003c/strong\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003cstrong\u003e +\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  1\u003c/strong\u003e\u003cstrong\u003e file changed, \u003c/strong\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003cstrong\u003e insertion(+)\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  create mode \u003c/strong\u003e\u003cstrong\u003e100644\u003c/strong\u003e \u003cstrong\u003eREADME\u003c/strong\u003e\u003cstrong\u003e.md\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ci\u003eExample C -\u003c/i\u003e\u003c/strong\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e Pulling down new changes with merge conflicts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. There was new content from the Github's master, but Git was \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003enot\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e able to merge it into the branch automatically. The user will need to do so by hand.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e$ \u003c/strong\u003e\u003cstrong\u003egit checkout master\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   Switched\u003c/strong\u003e\u003cstrong\u003e to branch \u003c/strong\u003e\u003cstrong\u003e'master'\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e$ \u003c/strong\u003e\u003cstrong\u003egit pull origin master\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   From\u003c/strong\u003e \u003cstrong\u003ehttps:\u003c/strong\u003e\u003cstrong\u003e/\u003c/strong\u003e\u003cstrong\u003e/github.com/test\u003c/strong\u003e\u003cstrong\u003e-user/my_project\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e* branch            master     -\u0026gt; \u003c/strong\u003e\u003cstrong\u003eFETCH_HEAD\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  Auto\u003c/strong\u003e\u003cstrong\u003e-merging index.html\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  CONFLICT\u003c/strong\u003e\u003cstrong\u003e (content)\u003c/strong\u003e\u003cstrong\u003e:\u003c/strong\u003e \u003cstrong\u003eMerge\u003c/strong\u003e\u003cstrong\u003e conflict \u003c/strong\u003e\u003cstrong\u003ein\u003c/strong\u003e\u003cstrong\u003e index.html\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  Automatic\u003c/strong\u003e\u003cstrong\u003e merge failed; fix conflicts \u003c/strong\u003e\u003cstrong\u003eand\u003c/strong\u003e \u003cstrong\u003ethen\u003c/strong\u003e\u003cstrong\u003e commit the result.\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e5. Resolve Conflicts (if necessary)\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf conflicts occur (as seen in Example C above), conflict tags will appear in the impacted files:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e...\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   This \u003c/strong\u003e\u003cstrong\u003eis\u003c/strong\u003e\u003cstrong\u003e code \u003c/strong\u003e\u003cstrong\u003efrom\u003c/strong\u003e\u003cstrong\u003e the local master branch!\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e=======\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   This \u003c/strong\u003e\u003cstrong\u003eis\u003c/strong\u003e\u003cstrong\u003e code \u003c/strong\u003e\u003cstrong\u003efrom\u003c/strong\u003e\u003cstrong\u003e the origin master branch!\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e....\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003cbr\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eContent above the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e=======\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e refers to code being merged \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003einto\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e (in this case, local master). Content below is code being merged \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003ein\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e to this branch (from Github's master). Resolve these conflicts by replacing everything between \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e with the code you ultimately want in the project's 'final draft' or master. Then remove conflict tags, and commit the changes.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e6. Merge\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow that local master is up-to-date with Github/origin master, pairs must ensure new code integrates successfully with master. Experimenting must take place here in the feature branch before allowing new code into master.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo merge master into the feature branch, pairs navigate to said branch with \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git checkout \u0026lt;branch-name\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, and merge master into it with \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git merge master\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis will result in one of the three responses detailed in Step 5. If greeted by something similar to Example C, pairs repeat Step 6 to resolve conflicts.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e7. Add New Code to Master\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003ePairs ensure the application still looks and functions correctly after integrating new code. When/if everything works as desired, new code may be added to master.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThere are two primary ways to do this: Through a Github pull request, or by merging into master directly and pushing the updated master to Github. If teammates are not physically present to review and merge code together it's recommended to submit a pull request to allow other collaborators a chance to review new content.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eOne\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e of the following two sets of steps are taken:\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003ePull Requests\u003c/span\u003e\u003c/h2\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003ea. Push Branch to Github\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eMaster code has been merged into the feature branch successfully, and any subsequent refactoring committed. The feature branch is then pushed directly to Github by running \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git push origin \u0026lt;branch-name\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eb. Pull Request\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA pull request is created by navigating to the feature branch on Github, selecting \"New Pull Request\" , clicking \"Create Pull Request\", and including a description of new features in the resulting form. Finally, \"Create Pull Request\" will create and send the request to project collaborators.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003ec. Review and Merge\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eRepo owners and collaborators may then view this notification for more information, and options to merge the request into master. More information on that is available \u003c/span\u003e\u003ca href=\"https://help.github.com/articles/merging-a-pull-request/\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ehere\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eMerge to Master\u003c/span\u003e\u003c/h3\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003ea. Merge Feature into Master\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eMaster code has been merged into the feature branch successfully, and any subsequent refactoring committed. Contents of this feature branch are then merged directly into master by switching to master with\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git checkout master\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, and merging the appropriate feature branch into master with \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git merge \u0026lt;branch-name\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAgain, the result should be very similar to one of the code snippets listed in Step 5. If examples A or B are received, there is either nothing new to merge or new code was merged automatically. If something akin to example C is received, pairs must repeat Step 6 in order to resolve any merge conflicts.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e8. Delete\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf merging was successful, the feature branch may be deleted if it is no longer in use. The easiest way to do this is through the GitHub repo. Simply visit the repository, and select the \"branches\" option:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThen, in the \"branches\" area of your GitHub repository, select the red delete icon next to the branch your group would like to delete:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Agile%20content/delete%20option.png\" alt=\"delete option.png\" width=\"824\" height=\"161\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/2509\" data-api-returntype=\"File\"\u003e\u003c/span\u003e\u003c/p\u003e","exportId":"monday-git-collaboration-workflow"},{"id":1520,"title":"Monday: Agile","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eAgile \u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAgile management, agile process management, or simply agile, refers to an iterative, incremental method of managing the design and build activities of engineering, information technology and other business areas that aim to provide a new product or service development in a highly flexible and interactive manner.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAgile, being a framework has many sub-frameworks:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eXP\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eSCRUM\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eDSDM\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCrystal\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFDD\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe will concentrate on SCRUM, the most widely used sub-framework of Agile.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eSoftware Project Life Cycle (Sprint)\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA sprint (or iteration) is the basic unit of development in SCRUM. The sprint is a timeboxed effort (a timebox is a short, fixed duration periods of time in which activities or work are undertaken); this means that sprints are restricted to a specific duration. The duration is fixed in advance for each sprint and is normally between one week and one month, with two weeks being the most common.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe phases of a sprint or Software Development Life Cycle (SDLC) are:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003ePlan:\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e During this phase, the scope of the project is defined and a project management plan is developed. It involves identifying the cost, quality, available resources, and a realistic timetable. The project plans also includes establishing baselines or performance measures. These are generated using the scope, schedule and cost of a project. A baseline is essential to determine if a project is on track.At this time, roles and responsibilities are clearly defined, so everyone involved knows what they are accountable for. \u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eAnalysis:\u003c/strong\u003e \u003cspan style=\"font-weight: 400;\"\u003eThe goal of system analysis is to determine where the problem is. This step involves breaking down the problem  in different pieces to analyze the situation, analyzing project goals, breaking down what needs to be created and attempting to engage users so that definite requirements can be defined.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eDesign:\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e Project design is an early phase of the project where a project's key features, structure, criteria for success, and major deliverables are all planned out. The point is to develop one or more designs which can be used to achieve the desired project goals.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eDevelopment:\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e This is the phase where deliverables are developed and completed. This often feels like the meat of the project since a lot is happening during this time, like status reports and meetings, development updates, and performance reports.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eTesting: \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003eSoftware testing is a process of executing a program or application with the intent of finding the software bugs. It can also be stated as the process of validating and verifying that a software program or application or product: Meets the business and technical requirements that guided its design and development.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eDeploy (demo):\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e Shipping tested code or product for customer use.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eAgile Principles\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe following principles are based on the agile manifesto. A formal proclamation of four key values and 12 principles to guide an iterative and people-centric approach to software development.\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eIndividuals and interactions over processes and tools: \u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBuild projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe best architectures, requirements and design emerge from self organizing teams .\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly (retrospective in the sprint cycle, a concept that we will cover later). \u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAgile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe most efficient \u0026amp; effective method of conveying info to and within a development team is a face-to-face conversation (co-location). \u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003eWorking software over comprehensive documentation:\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWorking Software is the primary measure of progress.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur highest priority is to satisfy the customer through the early \u0026amp; continuous delivery of valuable software.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eDeliver working Software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eContinuous attention to technical excellence and good design enhances agility.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eSimplicity, the art of maximizing the amount of work not done, is essential (design for today). \u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eCustomer collaboration over contract negotiation: \u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBusiness people and developers must work together daily throughout the project.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003eResponding to change over following a plan:\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eWelcome changes in requirements, even late in development. Agile processes harness change for the customer's competitiveadvantage..\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eSCRUM Overview \u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003eSCRUM is a structured process sub-framework of agile used  to develop \u0026amp; sustain complex products . SCRUM is a sum of roles, events, artifacts and rules . Using these, the SCRUM team iteratively builds increments of the solution, involving the customer frequently to ensure they are creating the right product.\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eSCRUM Roles \u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003eDuring the sprint cycle, we will have various individual in the SCRUM team taking up various roles. Each person has or sub-team has a task that they will oversee.\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eDevelopment Team \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003eA SCRUM team is a collection of individuals working together to deliver the requested and committed product increments, as set in the sprint backlog. To work effectively it is important for a SCRUM Team that everyone within the team:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFollows a common goal:\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe team must be cross-functional in that, people with different functional expertise working toward a common goal. It may include people from finance, marketing, operations, and human resources departments.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAdheres to the same norms and rules\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eShows respect to each other\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe optimum number of a SCRUM team should be between 3 to 9 members.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eSCRUM Master \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe SCRUM master is a facilitator for an agile development team. They have a deep understanding of SCRUM principles and how to enact them in a team.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe SCRUM master is responsible for:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e Helping the team to reach a consensus for what can be achieved during a specific sprint.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eHelping the team to reach consensus during the daily stand up.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eHelping the team to stay focused and follow the agreed-upon rules for daily SCRUMs.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eRemoving obstacles that are impeding the team's progress.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eProtecting the team from outside distractions.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eProduct Owner \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe SCRUM product owner is typically a project's key stakeholder. Part of the product owner responsibilities is to have a vision of what he or she wishes to build, in conjunction with the customer’s vision, and convey that vision to the SCRUM team. This is key to successfully starting any agile software development project. The agile product owner does this in part through the product backlog, which is a prioritized features list for the product.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eSCRUM Events \u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003ePrescribed events are used in SCRUM to create regularity and to minimize the need for meetings not defined in SCRUM. All events are time-boxed events, such that every event has a maximum duration. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eOther than the Sprint itself, which is a container for all other events, each event in SCRUM is a formal opportunity to inspect and adapt something. These events are specifically designed to enable critical transparency and inspection. Failure to include any of these events results in reduced transparency and is a lost opportunity to inspect and adapt.\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eSprint \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe heart of Scrum is a Sprint, a time-box of one month or less during which a \"Done\" ,which means it must be in useable condition and meet the Scrum Team's definition of \"Done\", useable, and potentially releasable product increment (a sum of all the Product Backlog items completed during a Sprint and the value of the increments of all previous Sprints) is created. The best Sprints have consistent durations throughout a development effort. A new Sprint starts immediately after the conclusion of the previous Sprint.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSprints contain and consist of the Sprint Planning, daily stand up, the development work, the Sprint Review, and the Sprint Retrospective.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDuring the Sprint:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eNo changes are made that would endanger the sprint goal.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eQuality goals do not decrease.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eScope may be clarified and re-negotiated between the Product Owner and Development Team as more is learned.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eSprint Planning \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe work to be performed in the Sprint is planned at the Sprint Planning. This plan is created by the collaborative work of the entire Scrum Team. The output of this is called the sprint backlog. The Sprint Goal is an objective set for the Sprint that can be met through the implementation of Product Backlog. It provides guidance to the Development Team on why it is building the Increment. It is created during the Sprint Planning meeting. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSprint Planning is time-boxed to a maximum of eight hours for a one-month Sprint. For shorter Sprints, the event is usually shorter. The Scrum Master ensures that the event takes place and that attendants understand its purpose. The Scrum Master teaches the Scrum Team to keep it within the time-box.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eSprint Planning answers the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat can be delivered in the Increment resulting from the upcoming Sprint?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eHow will the work needed to deliver the Increment be achieved?\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eDaily Stand-up\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Daily Scrum is a 15-minute time-boxed event for the Development Team to synchronize activities and create a plan for the next 24 hours. This is done by inspecting the work since the last Daily Scrum and forecasting the work that could be done before the next one. The Daily Scrum is held at the same time and place each day to reduce complexity. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eDuring the meeting, the Development Team members explain:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat did I do yesterday that helped the Development Team meet the Sprint Goal?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat will I do today to help the Development Team meet the Sprint Goal?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eDo I see any impediment that prevents me or the Development Team from meeting the Sprint Goal?\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eSprint Review/Demo\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA Sprint Review is held at the end of the Sprint to inspect the Increment and adapt the Product Backlog if needed. During the Sprint Review, the Scrum Team and stakeholders collaborate about what was done in the Sprint. Based on that and any changes to the Product Backlog during the Sprint, attendees collaborate on the next things that could be done to optimize value. This is an informal meeting, not a status meeting, and the presentation of the Increment is intended to elicit feedback and foster collaboration. A demo of the increment is to be show at this point as per the MVPs (discussed later) set.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis is a four-hour time-boxed meeting for one-month Sprints. For shorter Sprints, the event is usually shorter. The Scrum Master ensures that the event takes place and that attendants understand its purpose. The Scrum Master teaches all to keep it within the time-box.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Sprint Review includes the following elements:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAttendees include the Scrum Team and key stakeholders invited by the Product Owner;\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Product Owner explains what Product Backlog items have been “Done” and what has not been “Done”;\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Development Team discusses what went well during the Sprint, what problems it ran into, and how those problems were solved;\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Development Team demonstrates the work that it has “Done” and answers questions about the Increment;\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Product Owner discusses the Product Backlog as it stands. He or she projects likely completion dates based on progress to date (if needed);\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe entire group collaborates on what to do next, so that the Sprint Review provides valuable input to subsequent Sprint Planning;\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eReview of how the marketplace or potential use of the product might have changed what is the most valuable thing to do next; and,\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eReview of the timeline, budget, potential capabilities, and marketplace for the next anticipated release of the product.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe result of the Sprint Review is a revised Product Backlog that defines the probable Product Backlog items for the next Sprint. The Product Backlog may also be adjusted overall to meet new opportunities.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eSprint Retrospective \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Sprint Retrospective is an opportunity for the Scrum Team to inspect itself and create a plan for improvements to be enacted during the next Sprint.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Sprint Retrospective occurs after the Sprint Review and prior to the next Sprint Planning. This is a three-hour time-boxed meeting for one-month Sprints. For shorter Sprints, the event is usually shorter. The Scrum Master ensures that the event takes place and that attendants understand its purpose. The Scrum Master teaches all to keep it within the time-box. The Scrum Master participates as a peer team member in the meeting from the accountability over the Scrum process.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe purpose of the Sprint Retrospective is to:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eInspect how the last Sprint went with regards to people, relationships, process, and tools;\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eIdentify and order the major items that went well and potential improvements; and,\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreate a plan for implementing improvements to the way the Scrum Team does its work.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eSCRUM Artifacts \u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eScrum Artifacts provide key information that the Scrum Team and the stakeholders need to be aware of for understanding the product under development, the activities done, and the activities being planned in the project.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eProduct Backlog \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Product Backlog is an ordered list of everything that might be needed in the product and is the single source of requirements for any changes to be made to the product. The Product Owner is responsible for the Product Backlog, including its content, availability, and ordering.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Product Backlog lists all features, functions, requirements, enhancements, and fixes that constitute the changes to be made to the product in future releases. Product Backlog items have the attributes of a description, order, estimate and value.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eSprint Backlog \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Sprint Backlog is the set of Product Backlog items selected for the Sprint, plus a plan for delivering the product Increment and realizing the Sprint Goal. The Sprint Backlog is a forecast by the Development Team about what functionality will be in the next Increment and the work needed to deliver that functionality into a “Done” Increment.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Sprint Backlog makes visible all of the work that the Development Team identifies as necessary to meet the Sprint Goal. The Sprint Backlog is a plan with enough detail that changes in progress can be understood in the Daily Scrum.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eIncrement\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Increment is the sum of all the Product Backlog items completed during a Sprint and the value of the increments of all previous Sprints. At the end of a Sprint, the new Increment must be “Done,” which means it must be in useable condition and meet the Scrum Team’s definition of “Done.” It must be in useable condition regardless of whether the Product Owner decides to actually release it.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eUser Stories \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA user story is a tool used in Agile software development to capture a description of a software feature from an end-user perspective. The user story describes the type of user, what they want and why. A user story helps to create a simplified description of a requirement. A user story should be small enough to complete in a sprint, or else it is split into another sprint.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFormat: As a \u0026lt;ROLE\u0026gt; I want to do \u0026lt;FEATURE\u0026gt; so that I can do \u0026lt;REASON/BENEFIT\u0026gt; . WHO wants WHAT \u0026amp; WHY. WHY is optional, but recommended \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs a user, I can backup my entire hard drive.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs a frequent traveler, I want to reserve a hotel room\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eMinimum Viable Product: MVP \u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA great place to start thinking about the project we are about to create is the minimum viable product, or MVP. As the name implies, this is the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eminimum\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e or most basic version of an application that fulfills its goals. That is, the problem the application is meant to solve, or the service it is supposed to offer to the user.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's look at an example of an MVP. Consider the following example from Gerry Clapp's response to the question \"\u003c/span\u003e\u003ca href=\"https://www.quora.com/What-is-a-minimum-viable-product\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat is a Minimum Viable Product\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e?\" on Quora:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's pretend you're building a startup with the goal of creating the best donut ever.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe product team starts off by building a plain donut. At this point it's considered an MVP. The product works, but it's probably not quite the best donut product out there. Now the team can ask their customers questions about the donut, like:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat do like the most about the donut?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf you could choose any topping, what topping would you add?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWould you prefer a donut in a different shape?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAnd, so on.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eUsing this newfound validated learning from their customers, the team can create a better donut. But, depending on the context of the customers that provided feedback, the team can have wildly varying results:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn this particular case, it's to add candy sprinkles.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn a different market, with different customers, those customers may [have] wanted a chocolate donut.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf the team spoke to customers in another country, they may [have] wanted a strawberry donut.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFrom this example, we can see that creating an MVP has some benefits:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eWe complete a functional product sooner.\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e While it may not be the best donut ever or have all the features we would like, it is better to prioritize building a functioning prototype with fewer features than to attempt adding too many features and fail to produce a working project by the deadline. You can always add extra features after the MVP is finished.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eWe can collect user feedback before adding extra features. \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003eAfter creating the MVP, we can beta-test it with sample users, and their feedback to understand what kinds of features they actually want. They may have thought of something you hadn't considered!\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eStory Points\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA story point is an arbitrary measure used by SCRUM teams. This is used to measure the effort required to implement a story.In simple terms it's a number that tells the team how hard the story is.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch1\u003e\u003cstrong\u003eEngineering Practices\u003c/strong\u003e\u003c/h1\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eContinuous Integration (CI)\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eContinuous Integration (CI) is a development practice that requires developers to integrate code into a shared repository several times a day. Each check-in is then verified by an automated build, allowing teams to detect problems early. By integrating regularly, you can detect errors quickly, and locate them more easily.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe practices\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMaintain a single source repository\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAutomate the build\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMake your build self-testing\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eEvery commit should build on an integration machine\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eKeep the build fast\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eTest in a clone of the production environment\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMake it easy for anyone to get the latest executable version\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eEveryone can see what’s happening \u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAutomate deployment\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eTools \u003c/span\u003e\u003c/h2\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eInformation Radiator\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAn information radiator, also known as a Big Visible Chart (BVC), is a large graphical representation of project information kept plainly in sight within an agile development team’s shared workspace.The purpose of information radiators is to help keep the team focused on what really needs their attention and to promote transparency.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cstrong\u003eKanban/Task board\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA Kanban board is a work and workflow visualization tool that enables you to optimize the flow of your work. Physical Kanban boards, like the one pictured below, typically use sticky notes on a whiteboard to communicate status, progress, and issues.\u003c/span\u003e\u003cbr\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Agile%20content/Tools.png\" alt=\"Tools.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/2506\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003ePersonas\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA user persona is a representation of the goals and behavior of a hypothesized group of users. In most cases, personas are synthesized from data collected from interviews with users. The most important reason to create personas is to set a common understand of the final user. So that a coherent strategy is defined that will result in a product/service that is user oriented and meet the user goals.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Agile%20content/personas.png\" alt=\"personas.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/2507\" data-api-returntype=\"File\"\u003e\u003c/span\u003e\u003c/p\u003e","exportId":"monday-agile"},{"id":1142,"title":"Thursday: Team Week Presentation","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eToday, teams will give an informal presentation and demonstration of their project to staff and students at their work stations. Determine how you want to present and demonstrate your work. Each team member may speak or a spokesperson may be designated for the group.\u003c/p\u003e\r\n\u003cp\u003ePlan to spend less than 5 minutes covering the following information:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eTeam Members\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e- Who worked on the project? What was each person's role?\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eProject Name and Objective\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e- Why did you choose this project? What purpose does it fulfill? Relate to the audience here - why should they care about your work?\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eDemonstration\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e- Walk through a live demo and describe the unique and important features of your work. If you did anything interesting with technology, talk about it here.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eProcess\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e- Describe how the team development process worked in your group.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eChallenges\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e- Share the biggest challenges you faced.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eQuestions and Answers \u003c/strong\u003e- Allow a bit of time at the end for any questions your audience may have.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"thursday-team-week-presentation"},{"id":1143,"title":"Thursday: Team Week Code Review","type":"Assignment","indent":0,"locked":false,"submissionTypes":null,"graded":true,"pointsPossible":0.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003ch2\u003eCode Review\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eGroup projects count as one of your required code reviews, and must be submitted on time. Remember, successful completion of each code review is required to pass the course.\u003c/p\u003e\r\n\u003cp\u003eYour presentation on at the end of the project will take the place of a one-on-one code review with your instructor. You will receive feedback directly.\u003c/p\u003e\r\n\u003ch3\u003eObjectives\u003c/h3\u003e\r\n\u003cp\u003eYour code will be reviewed for the following objective:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eParticipation in creating and presenting a project; including collaborating effectively with teammates.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"i746f50c45d7d4cbfe6cc141b06e3ad29"},{"id":1144,"title":"Thursday: Team Week Project Submission","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":9.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan\u003eThis rubric is a technical retrospective of the technical group dynamics and application of concepts that were gone through the module. Submit the link of your GitHub repo and deployed site to your TM, and review the scores in your groups.\u003c/span\u003e\u003c/p\u003e","exportId":"i786ee54e4d8a2efbf09e0fa7afd1ae8a"},{"id":1145,"title":"Thursday: Team Week Retrospective","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a text entry box","graded":true,"pointsPossible":25.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan\u003eThis rubric describes different parts of being a team member. Review the categories and score descriptions, and fill one out for each of your teammates. The review is anonymous and does not count for any final grade, so that you can give candid and honest feedback to help each other grow.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eSubmit your name in the \u003cstrong\u003eSubm\u003c/strong\u003e\u003c/span\u003e\u003cspan\u003e\u003cstrong\u003eit assignment\u003c/strong\u003e section\u003c/span\u003e\u003c/p\u003e","exportId":"i0b3761a968403d8d18af4b93c8f8e08c"}]},{"id":197,"name":"JavaScript Pre-Work","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"i223e6d75b692959801e3b7294288230c","items":[{"id":1747,"title":"Monday: Node Installation","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003ch2\u003eInstallations\u003c/h2\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003ch3\u003eNode.\u003c/h3\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eNode is a server-side runtime environment for Javascript. It allows us to run Javascript code on the terminal.\u003c/p\u003e\r\n\u003ch3\u003eLinux Installation\u003c/h3\u003e\r\n\u003ch4\u003eStep 1: Visit the node download page \u003c/h4\u003e\r\n\u003cp\u003e\u003ca class=\"external\" href=\"https://nodejs.org/en/download/package-manager/\" target=\"_blank\"\u003e\u003cspan\u003ehttps://nodejs.org/en/download/package-manager/\u003cspan class=\"screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003ch4\u003eStep 2: Scroll down to \u003cem\u003eInstalling Node.js via package manager \u003c/em\u003elink.\u003c/h4\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://moringaschool.instructure.com/courses/18/file_contents/course%20files/Selection_002.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"Selection_002.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1$IMS-CC-FILEBASE$/Selection_002.png\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003ch1 id=\"header-installing-node-js-via-package-manager\"\u003e \u003c/h1\u003e\r\n\u003ch4\u003eStep 3: Install Node for your system\u003c/h4\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://moringaschool.instructure.com/courses/18/file_contents/course%20files/Selection_003.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"Selection_003.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1$IMS-CC-FILEBASE$/Selection_003.png\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003ch4\u003eStep 4: Confirming Installation\u003c/h4\u003e\r\n\u003cp\u003ejames@james-Inspiron-15-3552:~$ npm -v\u003cbr\u003e5.5.1\u003cbr\u003ejames@james-Inspiron-15-3552:~$ node -v\u003cbr\u003ev9.2.0\u003cbr\u003e\u003cbr\u003eWe run npm\u003cem\u003e\u003cspan\u003e \u003c/span\u003e-v\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto check the version of Node Package Manager Installed. And node -v to\u003cspan\u003e \u003c/span\u003e\u003cbr\u003echeck if Node is installed.\u003cbr\u003e\u003cbr\u003eYou should have node version higher than 9+ and npm\u003cem\u003e\u003cspan\u003e \u003c/span\u003e5+\u003c/em\u003e\u003c/p\u003e\r\n\u003ch3\u003eOSX Installation\u003c/h3\u003e\r\n\u003cp\u003eTo install Node on Mac systems follow the Instructions from this\u003cspan\u003e \u003c/span\u003e\u003ca class=\"external\" href=\"http://blog.teamtreehouse.com/install-node-js-npm-mac\" target=\"_blank\"\u003e\u003cspan\u003eTreeHouse Blog\u003cspan class=\"screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e","exportId":"monday-node-installation"},{"id":1748,"title":"Monday: Angular Installations","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eAngular Installation\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eAngular is a platform that makes it easy to build applications with the web. It is an Open source web framework that was developed and maintained by Google.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eWe will install\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAngular CLI (Command Line Interface)\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat will help us create and develop our\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eAngular apps.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan\u003e1. Installation\u003c/span\u003e\u003c/h4\u003e\r\n\u003cpre\u003e\u003cspan\u003ejames@james-Inspiron-15-3552:~$ npm install -g @angular/cli\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eThis command will install the Angular CLI.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan\u003e2. Confirmation\u003c/span\u003e\u003c/h4\u003e\r\n\u003cpre\u003e\u003cspan\u003ejames@james-Inspiron-15-3552:~$ ng\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eThis will bring up a screen to show all the available\u003cem\u003e ng\u003c/em\u003e commands.\u003c/span\u003e \u003c/p\u003e","exportId":"monday-angular-installations"},{"id":1749,"title":"Monday: Watchman Installations","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003cspan\u003eWatchman\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eWatchman exists to watch files and record when they change. It can also trigger actions (such as rebuilding assets) when matching files change.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003eLinux Installation\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ cd ~\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ git clone https://github.com/facebook/watchman.git\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003e\u003cspan\u003ecd\u003c/span\u003e\u003cspan\u003e watchman/\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ git checkout v4.7.0\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ sudo apt-get install -y autoconf automake build-essential python-dev\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ ./autogen.sh\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ ./configure\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ make\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ sudo make install\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ watchman --version\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e 999999 \u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\u003cspan\u003e sudo tee -a /proc/sys/fs/inotify/max_user_watches  \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e 999999 \u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\u003cspan\u003e sudo tee -a  /proc/sys/fs/inotify/max_queued_events \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e 999999 \u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\u003cspan\u003e sudo tee  -a /proc/sys/fs/inotify/max_user_instances \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e watchman  shutdown-server\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003eMac Installation\u003c/span\u003e\u003c/h3\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ brew update\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan\u003e$ brew install watchman\u003c/span\u003e\u003c/pre\u003e","exportId":"monday-watchman-installations"},{"id":1750,"title":"Tuesday: ES6 And TypeScript","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003cspan\u003eES6 And TypeScript\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eES6\u003c/strong\u003e\u003cspan\u003e is the upcoming sixth major release of \u003c/span\u003e\u003ci\u003e\u003cspan\u003eECMAScript\u003c/span\u003e\u003c/i\u003e\u003cspan\u003e which is the official name of JavaScript. The current version of Javascript that is supported by the most browsers is ES5.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eTypeScript\u003c/strong\u003e\u003cspan\u003e is a \u003c/span\u003e\u003ci\u003e\u003cspan\u003esuperset\u003c/span\u003e\u003c/i\u003e\u003cspan\u003e of ES6. Since most browsers do not support TypeScript we have to convert it to normal Javascript. The Process of converting TypeScript to normal ES5 is called \u003c/span\u003e\u003cstrong\u003etranspilation\u003c/strong\u003e\u003cspan\u003e.  You can read the difference between \u003c/span\u003e\u003ca class=\"external\" href=\"https://www.stevefenton.co.uk/2012/11/compiling-vs-transpiling/\" target=\"_blank\"\u003e\u003cspan\u003eTranspilation and Compilation from here (Links to an external site.)Links to an external site.\u003cspan class=\"screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eInstalling Typescript:\u003c/span\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ npm install -g typescript \u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003e# Install typescript and the typescript transpiler\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ tsc -v\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003eVersion 2.6.1\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan\u003e# Confirming Installation (tsc = typescript compiler)\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e \u003c/p\u003e","exportId":"tuesday-es6-and-typescript"},{"id":1751,"title":"Tuesday: Running TypeScript Apps","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eRunning TypeScript Apps\u003c/h2\u003e\r\n\u003cp\u003eWe first need to create a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello.ts. \u003c/em\u003eInside it, we write the following code.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003ehello.ts\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003econsole.log('I am a Typescript example');\u003c/pre\u003e\r\n\u003cp\u003eTo transpile the file, we run the following command in the terminal:\u003c/p\u003e\r\n\u003cpre\u003e$  tsc hello.ts\u003c/pre\u003e\r\n\u003cp\u003eThis converts the Typescript file to a normal JavaScript file, which is stored as\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello.js.\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003eWe can now run the Javascript file in the terminal.\u003c/p\u003e\r\n\u003cpre\u003e$ node hello.js\u003cbr\u003eI am a Typescript example\u003c/pre\u003e","exportId":"tuesday-running-typescript-apps"},{"id":1752,"title":"Tuesday: Introduction to ES6- Let Keyword","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003cspan\u003eLet keyword\u003c/span\u003e\u003c/h2\u003e\r\n\u003ch3\u003e\u003cspan\u003eScope\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eA scope is the lifecycle of a variable that is where a variable is visible and accessible and for how long.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eJavascript typically has 2 scopes:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cstrong\u003eglobal scope\u003c/strong\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cstrong\u003efunction scope\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch4\u003e\u003cspan\u003eGlobal scope\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan\u003eThe global scope means a variable is accessible in the whole file and can be used anywhere in the file.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003evar name = 'James'\r\n\r\nfunction changeName(){\r\n  name = 'Hames'\r\n}\r\nchangeName()\r\nconsole.log(name) //Hames\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eHere create a global variable \u003c/span\u003e\u003cstrong\u003e\u003ci\u003ename.\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e We then create a\u003c/span\u003e\u003cstrong\u003e\u003ci\u003e\u003cspan\u003e \u003c/span\u003echangeName\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e function that takes the global variable\u003c/span\u003e\u003cstrong\u003e\u003ci\u003e\u003cspan\u003e \u003c/span\u003ename\u003cspan\u003e \u003c/span\u003e\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003eand changes its value. We then call the function and log the variable.  We can run the file in the terminal\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ node global-scope.js\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch4\u003e\u003cspan\u003eFunction Scope\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan\u003eVariables defined in a function are only accessible to that function. They cannot be called outside of the function.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003evar name = 'James'\r\n\r\nfunction changeName(){\r\n  var name = 'Hames'\r\n}\r\nchangeName()\r\nconsole.log(name)// James\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eIn this example, we initialize the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003ename\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e variable as a global scope with the value \u003c/span\u003e\u003cstrong\u003e\u003ci\u003e\"James\"\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e. We then initialize another variable \u003c/span\u003e\u003cstrong\u003e\u003ci\u003ename\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e inside the\u003c/span\u003e\u003cstrong\u003e\u003ci\u003e\u003cspan\u003e \u003c/span\u003echangeName\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003efunction with the name \u003c/span\u003e\u003cstrong\u003e\u003ci\u003e\"Hames\"\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e. We then call the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003echangeName\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e function and log the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003ename\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e variable. But this time we get the name \u003c/span\u003e\u003cstrong\u003e\u003ci\u003e\"James\"\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e that is defined in the\u003c/span\u003e\u003cstrong\u003e\u003cspan\u003e \u003c/span\u003eglobal scope\u003c/strong\u003e\u003cspan\u003e. The \u003c/span\u003e\u003cstrong\u003e\u003ci\u003ename\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evariable defined in the function is contained only in that function.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eThe \u003c/span\u003e\u003cstrong\u003eLet\u003c/strong\u003e\u003cspan\u003e keyword is a new ES6 keyword to initialize variables. It allows \u003c/span\u003e\u003cstrong\u003eblock scoping\u003cspan\u003e \u003c/span\u003e\u003c/strong\u003e\u003cspan\u003ethat means variables are contained within blocks\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cstrong\u003e\u003ci\u003e{ }\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e{\r\nlet name = 'James'\r\n}\r\nfunction changeName(){\r\n  var name = 'Hames'\r\n}\r\nchangeName()\r\nconsole.log(name) //undefined\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWhen we define the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003ename\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e variable inside the blocks and when we try to log the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003ename\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e variable get an \u003c/span\u003e\u003cstrong\u003e\u003ci\u003eundefined\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e result. This is because the variable defined is only defined in the block.\u003c/span\u003e\u003c/p\u003e","exportId":"tuesday-introduction-to-es6-let-keyword"},{"id":1753,"title":"Tuesday: Introduction to ES6 -Const Keyword","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003cspan\u003eConst Keyword\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eThe \u003c/span\u003e\u003cstrong\u003e\u003ci\u003econst\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e keyword declares a variable as a constant over time.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ca class=\"external\" href=\"https://gist.github.com/mbuthiya/2d9259344b85864c7aa6b71528f04284#file-init-js)\" target=\"_blank\"\u003e\u003cspan\u003e\u003cspan class=\"screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003econst name // Syntax Error\r\nconst name = 'James'\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eTo define a \u003c/span\u003e\u003cstrong\u003e\u003ci\u003econst\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evariable we have to initialize it with a value. If we don't assign it a value we get a syntax error. Like the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003elet\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e keyword, the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003econst\u003cspan\u003e \u003c/span\u003e\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003ekeyword also creates block-level scoping for the variables.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ci\u003eConst\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e variables are \u003c/span\u003e\u003cstrong\u003eimmutable,\u003cspan\u003e \u003c/span\u003e\u003c/strong\u003e\u003cspan\u003ethe variable does not change over time. This only means that the const variable has to point to the same thing. But that value it points to can change over time.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ca class=\"external\" href=\"https://gist.github.com/mbuthiya/45915971c7514d5ef66263a38db68abf#file-const-change-js)\" target=\"_blank\"\u003e\u003cspan\u003e\u003cspan class=\"screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003econst person = {};\r\nperson.name ='James';\r\nconsole.log(person); // { name: 'James' }\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eHere we see even when we define a variable as a \u003c/span\u003e\u003cstrong\u003e\u003ci\u003econst\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e we can still change the value. To make a const object truly unchangeable is use the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003eObject.freeze( )\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003efunction.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ca class=\"external\" href=\"https://gist.github.com/mbuthiya/a11d0fa89e4a79bf3afb254f0329dc54#file-object-freeze-js)\" target=\"_blank\"\u003e\u003cspan\u003e\u003cspan class=\"screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003econst person = Object.freeze({});\r\nperson.name ='James';\r\nconsole.log(person); // {}\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eThe \u003c/span\u003e\u003cstrong\u003e\u003ci\u003eObject.freeze( )\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e function is used when we initialize the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003econst\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e object. It prevents us from changing the value of the variable later on. We use \u003c/span\u003e\u003cstrong\u003e\u003ci\u003e\"use strict\"\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003erule on top of the javascript file to make the file throw an error.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ca class=\"external\" href=\"https://gist.github.com/mbuthiya/c8c6e9527edd2ab831f0d6cc9c038fdc#file-strict-js)\" target=\"_blank\"\u003e\u003cspan\u003e\u003cspan class=\"screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\"use strict\"\r\nconst person = Object.freeze({});\r\nperson.name ='James';\r\nconsole.log(person); //TypeError: Cannot add property name, object is not extensible\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eNow when we try to change the value of the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003econst\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e object get a \u003c/span\u003e\u003cstrong\u003e\u003ci\u003eTypeError.\u003c/i\u003e\u003c/strong\u003e\u003c/p\u003e","exportId":"tuesday-introduction-to-es6-const-keyword"},{"id":1754,"title":"Wednesday:Template Strings and Variable substitution","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003cspan\u003eTemplate Strings and Variable substitution\u003c/span\u003e\u003c/h2\u003e\r\n\u003ch3\u003e\u003cspan\u003eTemplate Strings\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eIn ES5 we write multiline strings using the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003e+\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e concatenation. In ES6 we get to introduce to a new syntax to write multiline strings,\u003c/span\u003e\u003cstrong\u003e\u003cspan\u003e \u003c/span\u003ebackticks\u003c/strong\u003e\u003cspan\u003e(\u003c/span\u003e\u003cstrong\u003e\u003ci\u003e`\u003cspan\u003e \u003c/span\u003e\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003elet multiline =`Hi I am a\r\n    Multiline\r\n    String and I use backticks to make sure\r\n    I can go anywhere\r\n    `\r\nconsole.log(multiline);\r\n/*Hi I am a\r\n    Multiline\r\n    String and I use backticks to make sure\r\n    I can go anywhere*/\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWe see we can write multiline strings in our code using the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003ebackticks.\u003c/i\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003eVariable Substitution\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eES6 also provides us with a way to embed variables into our strings. It follows the following format \u003c/span\u003e\u003cstrong\u003e\u003ci\u003e${name-of-variable}\u003c/i\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cpre\u003econst name = 'James Muriuki'\r\nlet introduction = `Hi, my name is ${name}`\r\nconsole.log(introduction); //Hi, my name is James Muriuki\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e","exportId":"wednesday-template-strings-and-variable-substitution"},{"id":1755,"title":"Wednesday: Fat Arrow Function","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003cspan\u003eFat Arrow Function\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eIn Javascript functions can be passed like all other values.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003efunction ping (){\r\n  setTimeout(function(){\r\n    console.log(\"Ping\")\r\n  },1000);\r\n}\r\nping()// waits one second then pings\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWe pass in an anonymous function as an argument to the\u003c/span\u003e\u003cstrong\u003e\u003ci\u003e\u003cspan\u003e \u003c/span\u003esetTimeout()\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e function. ES6 provides a new way to define anonymous functions. we call it the \u003c/span\u003e\u003cstrong\u003efat arrow syntax (=\u0026gt;).  \u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003efunction ping (){\r\n  setTimeout(()=\u0026gt;{console.log(\"Ping\")},1000);\r\n}\r\nping()\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eIf we have only one expression we can eliminate the curly braces altogether.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003efunction ping (){\r\n  setTimeout(()=\u0026gt;console.log(\"Ping\"),1000);\r\n}\r\nping()//ping\u003c/pre\u003e","exportId":"wednesday-fat-arrow-function"},{"id":1756,"title":"Wednesday: Destructuring","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003cspan\u003eDestructuring\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eThis a process in ES6 where we extract values into variables from data stored in objects and arrays\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003eObject Destructuring\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eLet us see an example of object destructuring.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003econst person={\"first\":\"James\",\"last\":\"Muriuki\"};\r\nconst {first:firstname,last:lastname}=person;\r\nconsole.log(firstname);// James\r\nconsole.log(lastname); // Muriuki\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eWe create an object \u003c/span\u003e\u003cstrong\u003e\u003ci\u003eperson\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e and pass in a \u003c/span\u003e\u003cstrong\u003e\u003ci\u003efirst\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e and \u003c/span\u003e\u003cstrong\u003e\u003ci\u003elast\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e property. Then we extract the values and map them to new variables \u003c/span\u003e\u003cstrong\u003e\u003ci\u003efirstname\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e and \u003c/span\u003e\u003cstrong\u003e\u003ci\u003elastname.\u003c/i\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003econst {first:firstname}=person\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eThe above expression translates to \"Extract property \u003c/span\u003e\u003cstrong\u003e\u003ci\u003efirst\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e from object\u003c/span\u003e\u003ci\u003e\u003cspan\u003e person\u003c/span\u003e\u003c/i\u003e\u003cspan\u003e and map it to a new variable \u003c/span\u003e\u003cstrong\u003e\u003ci\u003efirstname\u003c/i\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003eArray Destructuring\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eUnlike the Object counterpart array destructuring is based on index.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003econst num =[1,2]\r\nconst[a,b]=num\r\nconsole.log(a);\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eIn array destructuring we map the values to the corresponding index of the value in the array.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","exportId":"wednesday-destructuring"},{"id":1757,"title":"Thursday: Looping","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003cspan\u003eLooping\u003c/span\u003e\u003c/h2\u003e\r\n\u003ch3\u003e\u003cspan\u003eFor-In loops\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eThe for-in loop is designed to loop over an object and its properties.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003econst person={\"first\":\"James\",\"last\":\"Muriuki\"}\r\n\r\nfor(let prop in person){\r\n  console.log(prop)\r\n}\r\n\r\n// first\r\n// last\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWe loop over the properties inside the object.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003eFor-Of loops\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eFor-of loop allows us to easily loop over arrays\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003econst numbers=[1,2,3,4,5,6,7,8,9,10]\r\nfor (let num of numbers){\r\n  console.log(num);\r\n}\r\n/*\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10*/\u003c/pre\u003e","exportId":"thursday-looping"},{"id":1758,"title":"Thursday: Promises","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003cspan\u003ePromises\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eSynchronous Task\u003c/strong\u003e\u003cspan\u003e - The Program has to wait for the previous task to finish before it moves on to the next part\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eAsynchronous Tasks\u003c/strong\u003e\u003cspan\u003e - The program moves to the next line of code before the task is completed.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eIn ES6 we get introduced to \u003c/span\u003e\u003cstrong\u003ePromises\u003c/strong\u003e\u003cspan\u003e. A promise is a placeholder for a future value\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eWe create promises using the \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e keyword.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003evar promise = new Promise((resolve,reject)=\u0026gt;{})\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eThe promise instance takes a function as a parameter and that function has 2 arguments. \u003c/span\u003e\u003cspan\u003eresolve\u003c/span\u003e\u003cspan\u003e and \u003c/span\u003e\u003cspan\u003ereject\u003c/span\u003e\u003cspan\u003e which are both functions.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eInside that inner function that we pass as a parameter is where we perform our asynchronous tasks. We usually return the promise from a function.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003efunction asycTask(){\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    var promise = new Promise((resolve,reject)=\u0026gt;{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        setTimeout(()=\u0026gt;{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            console.log(\"Action complete\");\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            resolve();\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        },1000);\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    });\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    return promise;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWe call the \u003c/span\u003e\u003cspan\u003eresolve\u003c/span\u003e\u003cspan\u003e function after the async task has been completed.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003efunction asycTask(){\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    var promise = new Promise((resolve,reject)=\u0026gt;{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        setTimeout(()=\u0026gt;{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            try{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e             console.log(\"Action complete\");\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e             resolve();\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            }catch(err){\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e              reject()\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            }\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        },1000);\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    });\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    return promise;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWhen we encounter an error we call the \u003c/span\u003e\u003cspan\u003ereject\u003c/span\u003e\u003cspan\u003e function.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003ePromise Notifications\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eA promise object has a then function that alerts us whether our asnc function has successfully completed or not.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003efunction asycTask(){\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    var promise = new Promise((resolve,reject)=\u0026gt;{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        setTimeout(()=\u0026gt;{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            try{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e             console.log(\"Action complete\");\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e             resolve();\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            }catch(err){\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e              reject()\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            }\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        },1000);\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    });\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    return promise;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003easycTask().then(()=\u0026gt;{console.log('Event was successful')},()=\u0026gt;{console.log('Event failed')},)\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eThe \u003c/span\u003e\u003cspan\u003ethen\u003c/span\u003e\u003cspan\u003e method takes on 2 anonymous functions as arguments. The first one is called if the Asynchronous Task was a success the second is called when the task fails.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eWe can also pass in values to the \u003c/span\u003e\u003cspan\u003eresolve\u003c/span\u003e\u003cspan\u003e and \u003c/span\u003e\u003cspan\u003ereject\u003c/span\u003e\u003cspan\u003e function and then can be used by the \u003c/span\u003e\u003cspan\u003ethen\u003c/span\u003e\u003cspan\u003e function’s arguments.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003efunction asycTask(){\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    var promise = new Promise((resolve,reject)=\u0026gt;{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        setTimeout(()=\u0026gt;{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            try{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e             console.log(\"Action complete\");\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e             resolve(\"Success\");\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            }catch(err){\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e              reject(err)\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            }\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        },1000);\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    });\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    return promise;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003easycTask().then((val)=\u0026gt;{console.log(val)},(err)=\u0026gt;{console.log(err)},)\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWe place the values inside the \u003c/span\u003e\u003cspan\u003eresolve\u003c/span\u003e\u003cspan\u003e and \u003c/span\u003e\u003cspan\u003ereject\u003c/span\u003e\u003cspan\u003e functions and log them when we call our \u003c/span\u003e\u003cspan\u003ethen\u003c/span\u003e\u003cspan\u003e function.\u003c/span\u003e\u003c/p\u003e","exportId":"thursday-promises"},{"id":1759,"title":"Friday:Types","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003cspan\u003eTypes\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eBefore we dive into writing Angular code we have to understand \u003c/span\u003e\u003cspan\u003etypes\u003c/span\u003e\u003cspan\u003e in Typescript. Typescript transpilation performs type checks on the code. Types define what category a variable falls in.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eThere are several supported types:\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003e1. Basic types\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eThese include \u003c/span\u003e\u003cspan\u003eboolean\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003elet age: number = 19;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eage = '19' // TypeError\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eHere we assign the variable \u003c/span\u003e\u003cspan\u003eage\u003c/span\u003e\u003cspan\u003e to a type \u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003cspan\u003e. If we put any other type of value we get a \u003c/span\u003e\u003cspan\u003eTypeError\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003elet name: string = \"James\";\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003elet isMale:boolean = true;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan\u003e2. Arrays Types\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eWe can define the variable will be of type array in two ways we can either use the \u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003cspan\u003e brackets or \u003c/span\u003e\u003cspan\u003eArray\u0026lt;type\u0026gt;\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003elet numbers: number[] = [1,2,3,4,5];\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan\u003elet numbers: Array\u0026lt;number\u0026gt; =[1,2,3,4,5];\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan\u003e3. Function Type\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eWe can define a variable as a function using the \u003c/span\u003e\u003cspan\u003eFunction\u003c/span\u003e\u003cspan\u003e type keyword.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003elet funct : Function= ()=\u0026gt; console.log(\"Functioning\");\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan\u003e4. Enum Types\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eEnums are datatypes in ES6 that consist of named values that behave like constants.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003eenum Compass{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    North,\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    South,\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    East,\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    West\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003elet northStar: Compass = Compass.North;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan\u003e5. Class Types\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eWe can define a variable as a type of a class by using the class name.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003eclass Car{}\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003elet volvo : Car;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWe can also get an array of variables that belong to a particular class.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003eclass Car{}\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003elet bazzar : Car[];\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan\u003e6. Any Type\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eIf we do not know the type a particular variable belongs to it can be any.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003elet name: any ='James';\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003ename = 1;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eNotice we can assign the variable with the type \u003c/span\u003e\u003cspan\u003eany\u003c/span\u003e\u003cspan\u003e with a value of different types and not get an error\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003e7. Void type\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eVoid type is used in functions when we do not expect any return.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003efunction sayPsst():void{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    console.log('Psst')\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/pre\u003e","exportId":"friday-types"}]}],"pages":[{"exportId":"friday-independent-project-portfolio-landing-page","title":"Friday: Independent Project: Portfolio Landing Page","type":"WikiPage","content":"\u003ch2\u003ePortfolio Landing Page\u003c/h2\u003e\r\n\u003cp\u003eCongratulations on beginning your journey toward becoming a developer! As a developer, you need a web portfolio to showcase your work. Today, you will be creating the landing page for your programming portfolio.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eRequirements\u003c/h3\u003e\r\n\u003cp\u003eHere are the requirements for your page:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eYour name\u003c/li\u003e\r\n\u003cli\u003eAn image of you or something that represents who you are\u003c/li\u003e\r\n\u003cli\u003eA list of projects you have created with active links to them (either on GitHub or GitHub pages)\r\n\u003cul\u003e\r\n\u003cli\u003eFor each, include a brief description of the project and what languages it uses\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eAn \"About Me\" section including:\r\n\u003cul\u003e\r\n\u003cli\u003eYour background (for example, your education, job experience, a paragraph on why you decided to take a class on programming, etc.)\u003c/li\u003e\r\n\u003cli\u003eYour current interests/hobbies/skills\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eDeploy your site onto GitHub pages so that a live site can be viewed at\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour-username.github.io/portfolio\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(for example)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eObjectives\u003c/h3\u003e\r\n\u003cp\u003eIn addition to these requirements, your portfolio will be evaluated on the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSome of the most common HTML tags are incorporated, including:\r\n\u003cul\u003e\r\n\u003cli\u003ep, h, ul, ol, li, em, strong, a, img, div, span\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eBootstrap classes are used to style your page.\u003c/li\u003e\r\n\u003cli\u003ePage incorporates a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eIndentation and spacing of HTML and CSS is accurate.\u003c/li\u003e\r\n\u003cli\u003eCommits are made regularly with clear messages associated with them\u003c/li\u003e\r\n\u003cli\u003eProject is deployed to GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eA project README that includes:\r\n\u003cul\u003e\r\n\u003cli\u003eproject or program name\u003c/li\u003e\r\n\u003cli\u003eauthor name\u003c/li\u003e\r\n\u003cli\u003edescription of project\u003c/li\u003e\r\n\u003cli\u003eproject setup instructions\u003c/li\u003e\r\n\u003cli\u003elink to live site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003ecopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eSubmission of Independent Projects\u003c/h2\u003e\r\n\u003cp\u003eIndependent Projects must be submitted by 6pm on Friday. (For Moringa Prep part-time students, code review and deadlines will be discussed in class.)\u003c/p\u003e\r\n\u003cp\u003eComplete the following steps to submit your project:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eBefore you start working on your project,create a GitHub repository for your project\u003c/li\u003e\r\n\u003cli\u003eFill this\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://submit-ip.moringaschool.com/\" target=\"_blank\"\u003eform.\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eStart working on your project\r\n\u003cul\u003e\r\n\u003cli\u003eBefore pushing your final code to GitHub, at 5pm do a final check for each objective. Spend a few minutes checking indentation, removing commented-out code, creating a detailed README, etc. Your project should be polished and complete.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003ePush the final code to your GitHub repo by 6pm local time.\r\n\u003cul\u003e\r\n\u003cli\u003eEven if you are not completely done working on your project, push anyways which will communicate to your TM how much you have completed\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e","frontPage":false},{"exportId":"thursday-class-vs-id","title":"Thursday: Class vs. ID","type":"WikiPage","content":"\u003cp\u003eBefore we go on, let's talk about the difference between assigning a class to an HTML tag and assigning an id to an HTML tag. For the remainder of this section you can ignore IDs and continue using classes, but a brief explanation is in order, as you are likely to find references to IDs when reading resources online.\u003c/p\u003e\r\n\u003cp\u003eBoth classes and IDs can be targeted by CSS rules (classes with a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand IDs with a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esymbol). For example, both paragraph tags below are styled the same, though one is referenced by class and the other by ID.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eSome Exciting Red Text\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"line1\"\u003c/span\u003e\u0026gt;\u003c/span\u003eThis text will appear red.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"line2\"\u003c/span\u003e\u0026gt;\u003c/span\u003eThis text will also be red. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.line1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-id\"\u003e#line2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe important difference is that IDs are unique, while classes are not unique. We can use the same class on multiple elements, while IDs must be unique to a single element on the page. IDs may appear to work even when duplicated on the same page, but duplicate IDs can lead to inconsistent behavior and hard-to-find bugs.\u003c/p\u003e\r\n\u003cp\u003eIf in doubt, use a class.\u003c/p\u003e","frontPage":false},{"exportId":"monday-jsfiddle","title":"Monday: JSFiddle","type":"WikiPage","content":"\u003cp\u003eIn the Writing Functions lesson we wrote all of our functions in the JavaScript Console. This works for very simple functions that can be written on a single line, but it quickly becomes unwieldy as we want to write longer functions. There are a few solutions. You can write your functions in Atom and then copy \u0026amp; paste into the JavaScript console. Or you can try out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsfiddle.net/\" target=\"_blank\"\u003eJSFiddle\u003c/a\u003e, a useful tool for experimenting with JavaScript. With JSFIddle, you can write code in the JavaScript box and then execute it by clicking the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRun\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton on the menu bar at the top of the JSFiddle page.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Tuesday/jsfiddle-screenshot.png\" alt=\"jsfiddle-screenshot.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1686\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eType this out in the JavaScript box at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsfiddle.net/\" target=\"_blank\"\u003eJSFiddle\u003c/a\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003evar saySomething = function(whatToSay) {\u003cbr\u003ealert(whatToSay);\u003cbr\u003e};\u003cbr\u003evar add = function(number1, number2) {\u003cbr\u003ereturn number1 + number2;\u003cbr\u003e};\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode class=\"javascript hljs\"\u003e\u003c/code\u003eWriting out functions on multiple lines is clearer even with these simple functions; it will be essential when you begin writing more complex functions. Hit the \u003cem\u003eRun\u003c/em\u003e button and ... nothing happens. This is because we have simply defined two functions and made them available for future use. We have not yet called the functions, so the code inside of them has not yet been executed. Now add this line after the other lines:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003esaySomething(\u003cspan class=\"hljs-string\"\u003e\"hi\"\u003c/span\u003e);    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHit the \u003cem\u003eRun\u003c/em\u003e button again and you should see an alert pop up.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eNow add another line:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003eadd(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e);    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHit \u003cem\u003eRun\u003c/em\u003e and you should still see your alert pop up, but the new line you added doesn't appear to do anything. This is because our \u003ccode\u003eadd()\u003c/code\u003e method\u003cspan\u003e \u003c/span\u003ereturns\u003cspan\u003e \u003c/span\u003ethe result, but we don't do anything with that return value. When we run this code directly in the JavaScript console, the console automatically displays any return value. But in \"real life\" programming if we want to display something, we have to tell the computer to do that. We have a variety of options available to us. We could, for instance, assign the return value to a variable and then display it by calling the built-in JavaScript \u003ccode\u003ealert()\u003c/code\u003efunction.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e result = add(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e);\r\nalert(result);\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we hit \u003cem\u003eRun\u003c/em\u003e we should get an alert with our result, 8. If you aren't seeing the alert, make sure that you didn't delete your\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction definition code. Let's update our little program to make use of both functions:\u003c/p\u003e\r\n\u003cpre\u003evar saySomething = function(whatToSay) {\u003cbr\u003ealert(whatToSay);\u003cbr\u003e};\u003cbr\u003evar add = function(number1, number2) {\u003cbr\u003ereturn number1 + number2;\u003cbr\u003e};\u003cbr\u003evar result = add(3, 5);\u003cbr\u003evar outputText = \"The sum is \" + result + \".\";\u003cbr\u003esaySomething(outputText);\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar result = add(3, 5);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eline calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, passing it 2 arguments - the number 3 and the number 5. Our \u003ccode\u003eadd()\u003c/code\u003e function at this point assigns the first argument (\u003ccode\u003e3\u003c/code\u003e) to the parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the second argument (\u003ccode\u003e5\u003c/code\u003e) to the parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber2\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction then returns the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e8\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(in this case), which our code assigns to the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresult\u003c/code\u003e. Hence the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresult\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable is now the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e8\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThe next line -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar outputText = \"The sum is \" + result + \".\";\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- concatenates three things together into a new string, which it then assigns to the new variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoutputText\u003c/code\u003e. Note that result above is not in quotes. If you wrote\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar outputText = \"The sum is \" + \"result\" + \".\";\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethen \u003ccode\u003eoutputText\u003c/code\u003e would be the string \u003ccode\u003eThe sum is result.\u003c/code\u003e. But because we did not put \u003ccode\u003eresult\u003c/code\u003e in quotes, the computer understands the result variable's value (\u003ccode\u003e8\u003c/code\u003e) should be substituted here. Hence the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoutputText\u003c/code\u003e variable is assigned the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"The sum is 8.\"\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThe last line -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething(outputText);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- calls our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, passing it the value that the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoutputText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis standing in for - the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"The sum is 8.\"\u003c/code\u003e. Our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction assigns that string passed in to the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e. It then calls the built-in JavaScript function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein order to pop up a dialog box with that string.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eIf desired, you could refactor those last three lines into one line:\u003c/p\u003e\r\n\u003cpre\u003evar saySomething = function(whatToSay) {\u003cbr\u003ealert(whatToSay);\u003cbr\u003e};\u003cbr\u003evar add = function(number1, number2) {\u003cbr\u003ereturn number1 + number2;\u003cbr\u003e};\u003cbr\u003esaySomething(\"The sum is \" + add(3,5) + \".\");\u003c/pre\u003e\r\n\u003cp\u003eThat \u003cstrong\u003erefactored\u003c/strong\u003e line calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaySomething()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and passes it a string, which is concatenated together from 3 parts. The first part is just the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"The sum is \"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the last part is just the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\".\"\u003c/code\u003e. The second part is the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e8\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecause that is the return value of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction when passed the arguments\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e. Hence the concatenated string:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"The sum is 8.\"\u003c/code\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-logical-operators","title":"Tuesday: Logical Operators","type":"WikiPage","content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSo far, we've been able to translate some of our decisions into code with comparisons such as \"Are these things equal?\" with \u003ccode\u003e===\u003c/code\u003e and \"Is this thing greater than this other thing?\" with \u003ccode\u003e\u0026gt;\u003c/code\u003e. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can make our decisions more complex by adding multiple comparisons to the mix. If we want to say \"Both of these things\" or \"Either of these things\", we can translate those statements into JavaScript with \u003cstrong\u003elogical operators\u003c/strong\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHere are different logical operators and what they mean.\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e: both of these things must be true\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e||\u003c/code\u003e: either of these things may be true\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFor example, let's expand on the example from the previous lesson and turn it into an application that will tell us what to wear based on the weather. We'll start with the first \u003ccode\u003eelse if\u003c/code\u003e, which tells us to wear a jacket if the temperature is low. We should wear a jacket if it's cold out - but we should also wear one if it's raining. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's also create a variable named \u003ccode\u003eraining\u003c/code\u003e for whether or not it's raining. Because there are two possibilities (either it's raining or it's not raining), \u003ccode\u003eraining\u003c/code\u003e will be a boolean.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003evar temperature = 10;\u003cbr\u003evar raining = true;\u003cbr\u003eif (temperature \u0026lt; 0) {\u003cbr\u003e  console.log(\"Brr! Don't freeze out there!\");\u003cbr\u003e} else if (temperature \u0026lt; 15 \u0026amp;\u0026amp; raining === true) {\u003cbr\u003e console.log(\"Don't forget a jacket!\");\u003cbr\u003e} else if (temperature \u0026lt; 25) {\u003cbr\u003e console.log(\"Have a nice day :)\");\u003cbr\u003e} else {\u003cbr\u003e console.log(\"Keep cool today!\");\u003cbr\u003e}\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen we run this code, \"Don't forget a jacket!\" print to the console because \u003ccode\u003etemperature\u003c/code\u003e is less than 15, and \u003ccode\u003eraining\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eChange the temperature to 16 and run the code again. The code skips all the way to the \u003ccode\u003eelse\u003c/code\u003e statement to print \"Keep cool today!\". However, I think that \"Don't forget a jacket!\" is still an appropriate message for this weather - it should print if \u003ccode\u003etemperature\u003c/code\u003e is less than 15 _or_ if it's raining. Here is how we would use the **OR** operator to accomplish this (I've used an ellipsis \u003ccode\u003e...\u003c/code\u003e in the following code snippet to make the code sample shorter):\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e} else if (temperature \u0026lt; 15 || raining === true) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  console.log(\"Don't forget a jacket!\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can add as many statements with logical operators as we need. For example, we can add a condition to make sure that the message \"Don't forget a jacket\" will not print if the temperature is greater than 25:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e} else if (temperature \u0026lt; 15 || raining === true) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  console.log(\"Don't forget a jacket!\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNote: \u003ccode\u003eif/else\u003c/code\u003e statements check the \"true-ness\" or \"false-ness\" of an expression, so we can simplify the condition like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e} else if (temperature \u0026lt; 15 || raining) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  console.log(\"Don't forget a jacket!\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThere's no need to say \u003ccode\u003eraining === true\u003c/code\u003e because \u003ccode\u003eraining\u003c/code\u003e by itself evaluates to true.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThere's one more operator that we haven't mentioned: the \u003ccode\u003e!\u003c/code\u003e (pronounced \"bang\") or \u003cstrong\u003enot\u003c/strong\u003e operator. To see how it works, let's pretend that we want to change the above code to execute if \u003ccode\u003eraining === false\u003c/code\u003e. Here's how we could use \u003ccode\u003e!\u003c/code\u003e to say the same thing:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e} else if (temperature \u0026lt; 15 || ! raining) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  console.log(\"Don't forget a jacket!\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e...\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHere is a table of various operations with logical operators for reference:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cimg src=\"viewer/files/Screenshot%20from%202018-07-29%2018-56-00.png\" alt=\"Logical operators table\" width=\"511\" height=\"157\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/6848\" data-api-returntype=\"File\"\u003e\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-git-collaboration-workflow","title":"Monday: Git Collaboration Workflow","type":"WikiPage","content":"\u003ch2\u003e\u003cstrong\u003eGit Collaboration Workflow\u003c/strong\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen we work on a development project as a collaborator, we have commit privileges to the master repository on GitHub. The development workflow for collaborators in a team takes advantage of some Git functionality that we don't often use on pair projects: \u003c/span\u003e\u003cstrong\u003eBranching\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cstrong\u003emerging\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Below is a \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003egeneral\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e outline of this workflow. Use this lesson as a reference when working on your group project this week:\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cstrong\u003eGit Team Workflow\u003c/strong\u003e\u003c/h3\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e1. Setup Github Repo\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBuild a repo on Github and add all team members as collaborators. Clone the GitHub master repo to each pair's desktop with \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git clone \u0026lt;repo-url\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Navigate to the project with \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ cd \u0026lt;project-directory-name\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e2. Create Branches\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eEach pair creates (and switches to) their own feature branch locally by running \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git checkout -b \u0026lt;branch-name\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Note that repos come with a master branch by default; you will not need to create one manually.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eTip: If you're ever uncertain which branch you're currently on, run \u003c/span\u003e\u003c/i\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git branch\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e3. Code\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003ePairs complete work on their own branches, adding and committing throughout the process.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e4. Pull Origin Master into Local Master\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBefore pushing work, pairs pull any new code teammates may have merged into the Github master branch (AKA \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eorigin master\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e or \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eremote master\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e) into their local master branch.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis is done by navigating into local master with \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git checkout master\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, then running \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git pull origin master\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. This pulls code from Github's master into the local master.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eGenerally speaking, this command triggers one of the following three results:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ci\u003eExample A -\u003c/i\u003e\u003c/strong\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e Pulling down no new changes\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. There is no new content to pull into the local branch, it is already up-to-date.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e$ \u003c/strong\u003e\u003cstrong\u003egit checkout master\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   Switched\u003c/strong\u003e\u003cstrong\u003e to branch \u003c/strong\u003e\u003cstrong\u003e'master'\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   Your\u003c/strong\u003e\u003cstrong\u003e branch is up-to-date with \u003c/strong\u003e\u003cstrong\u003e'origin/master'\u003c/strong\u003e\u003cstrong\u003e.\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e$ \u003c/strong\u003e\u003cstrong\u003egit pull origin master\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   From\u003c/strong\u003e \u003cstrong\u003ehttps:\u003c/strong\u003e\u003cstrong\u003e/\u003c/strong\u003e\u003cstrong\u003e/github.com/test\u003c/strong\u003e\u003cstrong\u003e-user/my_project\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   * branch            master     -\u0026gt; \u003c/strong\u003e\u003cstrong\u003eFETCH_HEAD\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   Already\u003c/strong\u003e\u003cstrong\u003e up-to-date.\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003cbr\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ci\u003eExample B -\u003c/i\u003e\u003c/strong\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e Pulling down new changes with no merge conflicts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. There was new content from the Github's master (also known as \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eorigin master\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e), but Git was able to merge it into the branch automatically.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e$ \u003c/strong\u003e\u003cstrong\u003egit checkout master\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   Switched\u003c/strong\u003e\u003cstrong\u003e to branch \u003c/strong\u003e\u003cstrong\u003e'master'\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e$ \u003c/strong\u003e\u003cstrong\u003egit pull origin master\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  remote:\u003c/strong\u003e \u003cstrong\u003eCounting\u003c/strong\u003e \u003cstrong\u003eobjects:\u003c/strong\u003e \u003cstrong\u003e3\u003c/strong\u003e\u003cstrong\u003e, done.\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  remote:\u003c/strong\u003e \u003cstrong\u003eCompressing\u003c/strong\u003e \u003cstrong\u003eobjects:\u003c/strong\u003e \u003cstrong\u003e100\u003c/strong\u003e\u003cstrong\u003e% (\u003c/strong\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003cstrong\u003e/\u003c/strong\u003e\u003cstrong\u003e2\u003c/strong\u003e\u003cstrong\u003e), done.\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  remote:\u003c/strong\u003e \u003cstrong\u003eTotal\u003c/strong\u003e \u003cstrong\u003e3\u003c/strong\u003e\u003cstrong\u003e (delta \u003c/strong\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003cstrong\u003e), reused \u003c/strong\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003cstrong\u003e (delta \u003c/strong\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003cstrong\u003e), pack-reused \u003c/strong\u003e\u003cstrong\u003e0\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  Unpacking\u003c/strong\u003e \u003cstrong\u003eobjects:\u003c/strong\u003e \u003cstrong\u003e100\u003c/strong\u003e\u003cstrong\u003e% (\u003c/strong\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003cstrong\u003e/\u003c/strong\u003e\u003cstrong\u003e3\u003c/strong\u003e\u003cstrong\u003e), done.\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  From\u003c/strong\u003e \u003cstrong\u003ehttps:\u003c/strong\u003e\u003cstrong\u003e/\u003c/strong\u003e\u003cstrong\u003e/github.com/test\u003c/strong\u003e\u003cstrong\u003e-user/my_project\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  * branch            master     -\u0026gt; \u003c/strong\u003e\u003cstrong\u003eFETCH_HEAD\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e     \u003c/strong\u003e\u003cstrong\u003e2833\u003c/strong\u003e\u003cstrong\u003ed6c..\u003c/strong\u003e\u003cstrong\u003e51\u003c/strong\u003e\u003cstrong\u003ef2f03  master     -\u0026gt; origin/master\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  Updating\u003c/strong\u003e \u003cstrong\u003e2833\u003c/strong\u003e\u003cstrong\u003ed6c..\u003c/strong\u003e\u003cstrong\u003e51\u003c/strong\u003e\u003cstrong\u003ef2d03\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  Fast\u003c/strong\u003e\u003cstrong\u003e-forward\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  README\u003c/strong\u003e\u003cstrong\u003e.md | \u003c/strong\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003cstrong\u003e +\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  1\u003c/strong\u003e\u003cstrong\u003e file changed, \u003c/strong\u003e\u003cstrong\u003e1\u003c/strong\u003e\u003cstrong\u003e insertion(+)\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  create mode \u003c/strong\u003e\u003cstrong\u003e100644\u003c/strong\u003e \u003cstrong\u003eREADME\u003c/strong\u003e\u003cstrong\u003e.md\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ci\u003eExample C -\u003c/i\u003e\u003c/strong\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e Pulling down new changes with merge conflicts\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. There was new content from the Github's master, but Git was \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003enot\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e able to merge it into the branch automatically. The user will need to do so by hand.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e$ \u003c/strong\u003e\u003cstrong\u003egit checkout master\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   Switched\u003c/strong\u003e\u003cstrong\u003e to branch \u003c/strong\u003e\u003cstrong\u003e'master'\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e$ \u003c/strong\u003e\u003cstrong\u003egit pull origin master\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   From\u003c/strong\u003e \u003cstrong\u003ehttps:\u003c/strong\u003e\u003cstrong\u003e/\u003c/strong\u003e\u003cstrong\u003e/github.com/test\u003c/strong\u003e\u003cstrong\u003e-user/my_project\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e* branch            master     -\u0026gt; \u003c/strong\u003e\u003cstrong\u003eFETCH_HEAD\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  Auto\u003c/strong\u003e\u003cstrong\u003e-merging index.html\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  CONFLICT\u003c/strong\u003e\u003cstrong\u003e (content)\u003c/strong\u003e\u003cstrong\u003e:\u003c/strong\u003e \u003cstrong\u003eMerge\u003c/strong\u003e\u003cstrong\u003e conflict \u003c/strong\u003e\u003cstrong\u003ein\u003c/strong\u003e\u003cstrong\u003e index.html\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e  Automatic\u003c/strong\u003e\u003cstrong\u003e merge failed; fix conflicts \u003c/strong\u003e\u003cstrong\u003eand\u003c/strong\u003e \u003cstrong\u003ethen\u003c/strong\u003e\u003cstrong\u003e commit the result.\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e5. Resolve Conflicts (if necessary)\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf conflicts occur (as seen in Example C above), conflict tags will appear in the impacted files:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e...\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   This \u003c/strong\u003e\u003cstrong\u003eis\u003c/strong\u003e\u003cstrong\u003e code \u003c/strong\u003e\u003cstrong\u003efrom\u003c/strong\u003e\u003cstrong\u003e the local master branch!\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e=======\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e   This \u003c/strong\u003e\u003cstrong\u003eis\u003c/strong\u003e\u003cstrong\u003e code \u003c/strong\u003e\u003cstrong\u003efrom\u003c/strong\u003e\u003cstrong\u003e the origin master branch!\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003c/strong\u003e\u003cstrong\u003e....\u003c/strong\u003e\u003cstrong\u003e\u003cbr\u003e\u003cbr\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eContent above the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e=======\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e refers to code being merged \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003einto\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e (in this case, local master). Content below is code being merged \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003ein\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e to this branch (from Github's master). Resolve these conflicts by replacing everything between \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e with the code you ultimately want in the project's 'final draft' or master. Then remove conflict tags, and commit the changes.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e6. Merge\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow that local master is up-to-date with Github/origin master, pairs must ensure new code integrates successfully with master. Experimenting must take place here in the feature branch before allowing new code into master.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo merge master into the feature branch, pairs navigate to said branch with \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git checkout \u0026lt;branch-name\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, and merge master into it with \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git merge master\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis will result in one of the three responses detailed in Step 5. If greeted by something similar to Example C, pairs repeat Step 6 to resolve conflicts.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e7. Add New Code to Master\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003ePairs ensure the application still looks and functions correctly after integrating new code. When/if everything works as desired, new code may be added to master.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThere are two primary ways to do this: Through a Github pull request, or by merging into master directly and pushing the updated master to Github. If teammates are not physically present to review and merge code together it's recommended to submit a pull request to allow other collaborators a chance to review new content.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eOne\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e of the following two sets of steps are taken:\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003ePull Requests\u003c/span\u003e\u003c/h2\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003ea. Push Branch to Github\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eMaster code has been merged into the feature branch successfully, and any subsequent refactoring committed. The feature branch is then pushed directly to Github by running \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git push origin \u0026lt;branch-name\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eb. Pull Request\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA pull request is created by navigating to the feature branch on Github, selecting \"New Pull Request\" , clicking \"Create Pull Request\", and including a description of new features in the resulting form. Finally, \"Create Pull Request\" will create and send the request to project collaborators.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003ec. Review and Merge\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eRepo owners and collaborators may then view this notification for more information, and options to merge the request into master. More information on that is available \u003c/span\u003e\u003ca href=\"https://help.github.com/articles/merging-a-pull-request/\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ehere\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eMerge to Master\u003c/span\u003e\u003c/h3\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003ea. Merge Feature into Master\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eMaster code has been merged into the feature branch successfully, and any subsequent refactoring committed. Contents of this feature branch are then merged directly into master by switching to master with\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git checkout master\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, and merging the appropriate feature branch into master with \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e$ git merge \u0026lt;branch-name\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAgain, the result should be very similar to one of the code snippets listed in Step 5. If examples A or B are received, there is either nothing new to merge or new code was merged automatically. If something akin to example C is received, pairs must repeat Step 6 in order to resolve any merge conflicts.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e8. Delete\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf merging was successful, the feature branch may be deleted if it is no longer in use. The easiest way to do this is through the GitHub repo. Simply visit the repository, and select the \"branches\" option:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThen, in the \"branches\" area of your GitHub repository, select the red delete icon next to the branch your group would like to delete:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Agile%20content/delete%20option.png\" alt=\"delete option.png\" width=\"824\" height=\"161\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/2509\" data-api-returntype=\"File\"\u003e\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-practice-with-indentation-and-spacing-cookie-recipe","title":"Tuesday: Practice with Indentation and Spacing - Cookie Recipe","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eContinue developing good indentation and spacing habits while simultaneously exploring the anatomy of a basic website, and practice cloning Git repositories. These skills will be used nonstop during your time at Moringa School.\u003c/p\u003e\r\n\u003cp\u003eNow it's time to practice using Git clone and honing your HTML skills by fixing some indentation and spacing. There is a\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/iantheninja/cookie-recipe/blob/master/cookie-recipe.html\"\u003ecookie repository\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eon GitHub that contains an HTML file with terrible indentation, spacing and HTML tag placement. It really needs your help.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git clone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto clone the repository onto your desktop.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBe sure you have changed into your\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emoringa-school-projects\u003c/strong\u003e\u003cspan\u003e folder \u003c/span\u003eor the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDocuments\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edirectory before cloning the repository so that \u003cstrong\u003e\u003cspan style=\"color: #ff0000;\"\u003eyou do not accidentally clone the cookie repository inside of an existing project folder\u003c/span\u003e\u003c/strong\u003e.\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eAsk a peer if you're not sure if you are cloning the repository into the correct place.\u003c/li\u003e\r\n\u003cli\u003eCreate a new remote repository on your own GitHub for this project and link it to your local project folder by creating a remote (using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit remote add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand).\u003c/li\u003e\r\n\u003cli\u003eGo through the HTML file and fix every indentation error. Commit the changes. THEN...\u003c/li\u003e\r\n\u003cli\u003eGo through the HTML file and fix every spacing error. Commit the changes. THEN ...\u003c/li\u003e\r\n\u003cli\u003eGo through the HTML file and fix every tag placement error. Commit the changes.\u003c/li\u003e\r\n\u003cli\u003eHave a TM come by and check your file for any errors that you have missed.\u003c/li\u003e\r\n\u003cli\u003ePush your changes to the remote you created in your own GitHub account.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eToday (and always!), focus on making sure that\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof your code is properly indented and spaced and your HTML tags are properly placed around the content they contain.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-practice-cascading-and-inheritance","title":"Thursday: Practice: Cascading and Inheritance","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice identifying HTML selectors using CSS, and understand various rules of cascading.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003eDiscuss the following questions with your partner:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhy is it a bad idea to use inline styling?\u003c/li\u003e\r\n\u003cli\u003eWhat is meant by specificity? How is it related to cascading?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCSS Diner\u003c/h3\u003e\r\n\u003cp\u003e\u003ca href=\"http://flukeout.github.io/\"\u003eCSS Diner\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eis a game that will let you hone your chops at using CSS selectors. Click the link and proceed through the game with your partner, switching places at each level.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eAnimal Shelter\u003c/h3\u003e\r\n\u003cp\u003eCreate a webpage for an animal shelter that features the animals available for adoption on the home page. Use divs and floats to give each animal its own profile section. Change the styles of the elements on the page using cascading.\u003c/p\u003e\r\n\u003ch3\u003ePast Projects\u003c/h3\u003e\r\n\u003cp\u003eTake a look at some of your past projects and try to find places where you could rewrite the page using cascading.\u003c/p\u003e","frontPage":false},{"exportId":"friday-types","title":"Friday:Types","type":"WikiPage","content":"\u003ch2\u003e\u003cspan\u003eTypes\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eBefore we dive into writing Angular code we have to understand \u003c/span\u003e\u003cspan\u003etypes\u003c/span\u003e\u003cspan\u003e in Typescript. Typescript transpilation performs type checks on the code. Types define what category a variable falls in.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eThere are several supported types:\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003e1. Basic types\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eThese include \u003c/span\u003e\u003cspan\u003eboolean\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003elet age: number = 19;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eage = '19' // TypeError\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eHere we assign the variable \u003c/span\u003e\u003cspan\u003eage\u003c/span\u003e\u003cspan\u003e to a type \u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003cspan\u003e. If we put any other type of value we get a \u003c/span\u003e\u003cspan\u003eTypeError\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003elet name: string = \"James\";\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003elet isMale:boolean = true;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan\u003e2. Arrays Types\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eWe can define the variable will be of type array in two ways we can either use the \u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003cspan\u003e brackets or \u003c/span\u003e\u003cspan\u003eArray\u0026lt;type\u0026gt;\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003elet numbers: number[] = [1,2,3,4,5];\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan\u003elet numbers: Array\u0026lt;number\u0026gt; =[1,2,3,4,5];\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan\u003e3. Function Type\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eWe can define a variable as a function using the \u003c/span\u003e\u003cspan\u003eFunction\u003c/span\u003e\u003cspan\u003e type keyword.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003elet funct : Function= ()=\u0026gt; console.log(\"Functioning\");\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan\u003e4. Enum Types\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eEnums are datatypes in ES6 that consist of named values that behave like constants.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003eenum Compass{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    North,\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    South,\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    East,\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    West\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003elet northStar: Compass = Compass.North;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan\u003e5. Class Types\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eWe can define a variable as a type of a class by using the class name.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003eclass Car{}\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003elet volvo : Car;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWe can also get an array of variables that belong to a particular class.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003eclass Car{}\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003elet bazzar : Car[];\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan\u003e6. Any Type\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eIf we do not know the type a particular variable belongs to it can be any.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003elet name: any ='James';\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003ename = 1;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eNotice we can assign the variable with the type \u003c/span\u003e\u003cspan\u003eany\u003c/span\u003e\u003cspan\u003e with a value of different types and not get an error\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003e7. Void type\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eVoid type is used in functions when we do not expect any return.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003efunction sayPsst():void{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    console.log('Psst')\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/pre\u003e","frontPage":false},{"exportId":"ajax-and-json","title":"AJAX and JSON","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eAJAX\u003c/strong\u003e is a means of interacting with servers behind the scenes using JavaScript without having to reload the page. This allows you to create complex interactive web apps that behave like desktop apps. One famous example is Gmail, which allows you to read, write, and receive emails, all without the need for refreshing the page.\u003c/p\u003e\r\n\u003cp\u003eVisit the following URL in your browser:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://openweathermap.org\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand create an account to get an API key\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%204%20Monday/weatherapi.png\" alt=\"weatherapi.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/2137\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAdd the API key to the end of the following link then load on your browser\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003ehttp://api.openweathermap.org/data/2.5/weather?q=San%20Francisco\u0026amp;mode=json\u0026amp;units=imperial\u0026amp;APPID=API_KEY\u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eWhat does the %20 represent in the\u003cspan\u003e \u003c/span\u003e\u003ca class=\"popup\" href=\"http://en.wikipedia.org/wiki/Query_string\"\u003equery string\u003c/a\u003e? (hint: try\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eencodeURI(\"San Francisco\")\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein your JS console, then google it)\u003c/p\u003e\r\n\u003cp\u003eNow try the following line of code in your console:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e$.ajax({\r\n  method: \u003cspan class=\"hljs-string\"\u003e'GET'\u003c/span\u003e,\r\n  url: \u003cspan class=\"hljs-string\"\u003e'http://api.openweathermap.org/data/2.5/weather?q=San%20Francisco\u0026amp;mode=json\u0026amp;units=imperial\u0026amp;APPID=API-KEY'\u003c/span\u003e,\r\n  success: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eweather_data\u003c/span\u003e)\u003c/span\u003e{\r\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(weather_data)\r\n  }\r\n})\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOpen your Network tab and initiate the AJAX request again to see the network request and response in action.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%204%20Monday/ajax.png\" alt=\"ajax.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/2136\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe most common thing to do with data returned from an AJAX request is show it to the user. We can use jQuery to do this, but only in the callback function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eto_be_run_on_server_response\u003c/code\u003e. If we try to use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eweather_data\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoutside that function, we won't have the response from the server yet.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e to_be_run_on_server_response = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eweather_data\u003c/span\u003e)\u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e'#container'\u003c/span\u003e).append(weather_data.main.temp)\r\n}\r\n\r\n$.get(\u003cspan class=\"hljs-string\"\u003e'http://api.openweathermap.org/data/2.5/weather?q=San%20Francisco\u0026amp;mode=json\u0026amp;units=imperial\u0026amp;APPID=API-KEY'\u003c/span\u003e).success(to_be_run_on_server_response)\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eExercise:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eCreate a simple weather page that shows the following data.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003ecurrent temperature\u003c/li\u003e\r\n\u003cli\u003etoday's high and low temperatures\u003c/li\u003e\r\n\u003cli\u003ethe description of current weather conditions\u003c/li\u003e\r\n\u003cli\u003ecurrent wind speed\u003c/li\u003e\r\n\u003cli\u003eThe time of sunrise and sunset. (hint:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enew Date(weatherData.sys.sunrise * 1000)\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e)\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eAllow the user to click a button or link to show the weather in a different city\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewithout reloading the page\u003c/strong\u003e. You will need to do the following:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate one or more links across the top of the page with names of alternate cities.\u003c/li\u003e\r\n\u003cli\u003eSet up click handlers on the links that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eevent.preventDefault()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto prevent the browser from changing pages.\u003c/li\u003e\r\n\u003cli\u003eClear the current contents of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#container\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eTell the user that data is currently being fetched.\u003c/li\u003e\r\n\u003cli\u003eWhen data returns from the weather server, display it on the page\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cstrong\u003eExtra Credit:\u003c/strong\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eRefactor your code so there is only a single click handler that understands which city's data is being requested based on what element received the click event.\u003c/li\u003e\r\n\u003cli\u003eRefactor your code so that all you need to do is add a new anchor tag to the page and all other functionality will work automatically.\u003c/li\u003e\r\n\u003cli\u003eRefactor your code so that there exists an array of city names and all links and click events are generated dynamically on page load\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eNow let's try more complex interaction using a\u003cspan\u003e \u003c/span\u003e\u003ca class=\"popup\" href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\"\u003eRESTful API\u003c/a\u003e, which is to say a set of endpoints, available over a network, that serve JSON data in a predictable format based on that resource's name. (e.g. a post with the id of 7 is available at the path\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e/posts/7\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003eHere the server lives at\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://jsonplaceholder.typicode.com\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the path to the info we want is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e/posts/1\u003c/code\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e$.ajax({\r\n  method: \u003cspan class=\"hljs-string\"\u003e'GET'\u003c/span\u003e,\r\n  url: \u003cspan class=\"hljs-string\"\u003e'http://jsonplaceholder.typicode.com/posts/1'\u003c/span\u003e,\r\n  success: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003edata\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(data)\r\n  }\r\n})\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eUsing\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsonplaceholder.typicode.com/\"\u003ePlaceHolder JSON\u003c/a\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eRetrieve the post with id of 1 from the server, in the success callback, display it on the page.\u003c/li\u003e\r\n\u003cli\u003eRetrieve the post with id of 2 from the server, in the success callback, display it on the page.\u003c/li\u003e\r\n\u003cli\u003eAbstract the success callback out into a separate function called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eplace_post_on_page\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eUsing a for loop, use AJAX calls to fetch posts with ids from 1 to 10 and pass them to your\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eplace_post_on_page\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to display them on the page. Do they always appear in the same order? Why is this?\u003c/li\u003e\r\n\u003cli\u003eNow instead, use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e/posts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eendpoint to get all posts and display only their titles on the page. This is often called the \"index\" view.\u003c/li\u003e\r\n\u003cli\u003eWhen a visitor clicks on the title of a post, clear the content area and replace it with the full information for that post, displaying all of its properties. This is often called the \"show\" view.\u003c/li\u003e\r\n\u003cli\u003eAllow the user to navigate back to the \"index\" view from the \"show\" view.\u003c/li\u003e\r\n\u003cli\u003eNetwork requests are expensive and slow. Refactor your code such that once you've fetched data once, it's cached as a javascript object and accessible immediately when the user moves back and forth between 'show' and 'index' views.\u003c/li\u003e\r\n\u003cli\u003eWhen showing an individual post, fetch all '/comments' and append the ones whose 'postId' property matches the post's id.\u003c/li\u003e\r\n\u003cli\u003eFetch information about the user who made the post. Display their name and email under the post.\u003c/li\u003e\r\n\u003cli\u003eCreate a simple login form where users can input their email address and password (let's say their password is their zip code, which we can also find on the user objects) such that visitors can see all of their own posts and comments after they log in.\u003c/li\u003e\r\n\u003cli\u003eCreate forms to allow users to create a new post or edit existing posts, pointing the forms to the appropriate RESTful endpoints using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$.post()\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eAbout JSON (a look under the hood)\u003c/h3\u003e\r\n\u003cp\u003eBecause we can only send strings of text (or binary data) over a network, not arrays and objects in memory, modern sites convert their data to JSON (JavaScript Object Notation) format, and your jQuery\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$.ajax()\u003c/code\u003ecallback converts it back to arrays, objects and primitive values. Check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://learnxinyminutes.com/docs/json/\"\u003ethis example\u003c/a\u003e. Here is what is happening for you behind the scenes (try it out in your console with the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringaprep-ft.herokuapp.com/students/products.js\" target=\"_blank\"\u003e\u003ccode\u003eproducts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efrom your e-commerce site):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-comment\"\u003e// run these one line at a time in your console.\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e// the server does this before sending information over the wire\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e products_array_represented_as_json_string = \u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.stringify(products)\r\n\u003cspan class=\"hljs-keyword\"\u003etypeof\u003c/span\u003e products_array_represented_as_json_string\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e// $.ajax() converts incoming JSON strings back into arrays, objects and primitive values before passing it into your callback function.\u003c/span\u003e\r\n\u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.parse(products_array_represented_as_json_string)\u003c/code\u003e\u003c/pre\u003e","frontPage":false},{"exportId":"thursday-practice-leap-year-pig-latin","title":"Thursday: Practice - Leap Year, Pig Latin","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Focus on breaking your project down into small behavior examples and coding one behavior (also known as a \"specification\" or \"spec\") at a time. Make a list of specifications with input and output examples\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewriting any code. \u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003ePretend you have an application that counts the number of vowels in a string. This application has specs detailing each behavior it must exhibit. However, they're out of order! Reorder the following list of specs from the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esimplest possible behavior\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emost complex\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebehavior with your partner. Consult with other pairs, if necessary:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe program recognizes vowels in a multiple-word sentence, regardless of capitalization.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"CATS CATERED THE EVENT\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 7\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes a single vowel in a multiple-character word.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"cat\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 1\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes a single vowel.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"a\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 1\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes multiple vowels in a single word.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"cater\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 2\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes a single vowel, regardless of case.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"A\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 1\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes all vowels in a multiple-word sentence, regardless of inconsistent capitalization.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"CaTS CATEReD ThE EveNT\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 7\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program ignores non-alphabetical characters, since they cannot be vowels.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"4%\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 0\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program recognizes vowels in a multiple-word sentence.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: \"cats catered the event\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: 7\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eLeap Year\u003c/h3\u003e\r\n\u003cp\u003eFollow along with the leap year lessons to build an application that identifies whether a given year is a leap year. Make each of the specs detailed in the leap year lessons \"pass\" (ie: your program returns the expected output for the expected input).\u003c/p\u003e\r\n\u003ch4\u003eSpecs from Leap Year Lessons\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe program should return when a year is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea leap year.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: 1993\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: false\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program should return 'true' for years divisible by 4, since those are leap years.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: 2004\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: true\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program should return 'false' for years divisible by 100, since those are not leap years.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: 1900\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: false\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program should return 'true' for years divisible by 400, since those are leap years.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInput Example\u003c/strong\u003e: 2000\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOutput Example\u003c/strong\u003e: true\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAll specs should be listed in the project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eREADME.md\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003ch3\u003ePig Latin\u003c/h3\u003e\r\n\u003cp\u003eWrite a Pig Latin translator or should we say an\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"igPay atinLay anslatorTray\"\u003c/em\u003e?\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eRead all instructions carefully before beginning.\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch4\u003eHow Pig Latin Works\u003c/h4\u003e\r\n\u003cp\u003eFirst, here are the rules of Pig Latin:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor words beginning with a vowel, add \"ay\" to the end.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor words beginning with one or more consonants, move all of the first consecutive consonants to the end, and add \"ay\".\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf the first consonants include \"qu\", move the \"u\" along with the \"q\". Don't forget about words like \"squeal\" where \"qu\" doesn't come first!\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor words beginning with \"y\", treat \"y\" as a consonant.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003eInstructions\u003c/h4\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eBefore writing any code, make a list of specs detailing each behavior your program will have. Start with the simplest possible behavior, and slowly move up in complexity. To get you started, the first two specs are provided below.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eHave at least two other pairs check your specs before you begin coding.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eEnsure that each possible behavior is represented by a spec, and that they are ordered from simplest to most complex.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003ePlace your specs (and their example inputs and outputs) in your project's README.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCreate a basic function that accepts user input, and displays output. This will allow us to manually test each spec.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eSlowly add business logic. Begin by focusing on the behavior outlined in your first, most simple spec. Implement the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eleast amount of logic necessary\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto create this behavior.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eManually test this behaviour by inputting the example input described by the spec into your application, and confirm you receive the correct output.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eOnce behavior outlined by the first spec is successfully implemented, repeat steps 5 - 7 for each subsequent spec. Do not move onto the next spec until the previous one passes.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch4\u003eHelpful Hints\u003c/h4\u003e\r\n\u003cp\u003eWhen you get to consonants, don't try to solve it all at once. Instead, start with an example of a word that only has one consonant; then a word with two consonants; then a word with three; and then tackle the exceptions to the rule, like \"qu\" and \"y\". Once your application can successfully translate single words, work on translating entire sentences. The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.slice()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estring method may also come in handy.\u003c/p\u003e\r\n\u003ch4\u003eSpecs\u003c/h4\u003e\r\n\u003cp\u003eTo get you started, below are the first two \"plain English\" specs:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe program does nothing to non-alphabetical characters, since they do not contain consonants or vowels.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eExample Input:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e3\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eExample Output:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e3\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe program adds \"ay\" to single-letter words beginning with a vowel.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eExample Input:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ei\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eExample Output:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eiay\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you are done with today's excercises, attempt the following as you explore further with regex.\u003c/p\u003e\r\n\u003ch4\u003eRefactor with Regular Expressions\u003c/h4\u003e\r\n\u003cp\u003eRefactor your code for the projects above using\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" target=\"_blank\"\u003eregular expressions\u003c/a\u003e. A handy place to try using regular expressions before implementing them is at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://rubular.com/\" target=\"_blank\"\u003eRubular\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch4\u003eBases\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eBinary\u003c/strong\u003e: Write a method to convert numbers from binary to decimal. The input should be a string, and the output an integer. Decimal is the normal system we use for counting. We start at 0, increment until we reach 9, and then reset back to 0 and add another number to the left. In binary, we also start at zero, but we only increment until we reach 1. Then we reset back to zero and add another number to the left.\u003c/p\u003e\r\n\u003cp\u003eHere are some example of numbers in decimal and binary:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs nginx\"\u003e\u003cspan class=\"hljs-title\"\u003eDecimal\u003c/span\u003e  Binary\r\n    \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e        \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\r\n    \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e        \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\r\n    \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e       \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\r\n    \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e       \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e\r\n    \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e      \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e\r\n  ...      ...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eTrinary\u003c/strong\u003e: You get where I'm going, right?\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eHexadecimal\u003c/strong\u003e: Here's what happens after 9...\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs nginx\"\u003e\u003cspan class=\"hljs-title\"\u003eDecimal\u003c/span\u003e  Hexadecimal\r\n  ...      ...\r\n   \u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e        \u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e        a\r\n  \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e        b\r\n  \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e        c\r\n  \u003cspan class=\"hljs-number\"\u003e13\u003c/span\u003e        d\r\n  \u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e        e\r\n  \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e        f\r\n  \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e       \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e       \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e\r\n  ...     ...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you get this far, write a method that takes two arguments: the number to be evaluated and the base you would like it to be evaluated in.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAre variable names descriptive and in lower camelCase?\u003c/li\u003e\r\n\u003cli\u003eDoes the code have proper indentation and spacing throughout?\u003c/li\u003e\r\n\u003cli\u003eAre \u003ccode class=\"\"\u003efor\u003c/code\u003e loops being used correctly?\u003c/li\u003e\r\n\u003cli\u003eAre\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach\u003c/code\u003e loops being used correctly?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs code broken down into plain English specs?\u003c/li\u003e\r\n\u003cli\u003eDo these specs accurately represent the behaviors required of the program?\u003c/li\u003e\r\n\u003cli\u003eAre there any additional specs you can think of?\u003c/li\u003e\r\n\u003cli\u003eDoes the application work as expected?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-using-browserify-with-gulp","title":"Monday: Using Browserify with Gulp","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003ch1\u003eUsing Browserify with Gulp\u003c/h1\u003e\r\n\u003cp\u003eLet's create a real task in our gulpfile to browserify our\u003cspan\u003e \u003c/span\u003e\u003cem\u003epingpong-interface.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. This will finally allow us to run our pingpong app in the browser again! Remember, browserify will follow the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003epingpong-interface.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to pull in our back-end\u003cspan\u003e \u003c/span\u003e\u003cem\u003epingpong.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile, and then translate the code into something the browser will understand that does not use Node.js keywords like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eexports\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll need to get a new package called\u003cspan\u003e \u003c/span\u003e\u003cem\u003evinyl-source-stream\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eusing npm.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs sql\"\u003e$ npm \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e vinyl-source-stream \u003cspan class=\"hljs-comment\"\u003e--save-dev\u003c/span\u003e\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll include both the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrowserify\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage we downloaded in the Introducing Npm and Gulp lesson and the new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evinyl-source-stream\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage at the top of our gulpfile.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evinyl-source-stream\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis used for putting the browserified source code into a new file. Don't worry too much about the details beyond that.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e browserify = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'browserify'\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e source = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'vinyl-source-stream'\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we'll add the task to call the browserify function, which is included in and exported from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrowserify\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage, just as we exported our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCalculator\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor function.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003egulp.task(\u003cspan class=\"hljs-string\"\u003e'jsBrowserify'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e browserify({ entries: [\u003cspan class=\"hljs-string\"\u003e'./js/pingpong-interface.js'\u003c/span\u003e] })\r\n    .bundle()\r\n    .pipe(source(\u003cspan class=\"hljs-string\"\u003e'app.js'\u003c/span\u003e))\r\n    .pipe(gulp.dest(\u003cspan class=\"hljs-string\"\u003e'./build/js'\u003c/span\u003e));\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis task is a chain of function calls.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirst, we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrowserify\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and instruct which files to browserify. This is done by passing in an object with a key\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eentries\u003c/code\u003e. Its corresponding value is an array of file names. We tell it to pull in our front-end file only, not our back-end\u003cspan\u003e \u003c/span\u003e\u003cem\u003epingpong.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile because that was taken care of by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire\u003c/code\u003ekeyword in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003epingpong-interface.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile when we wrote\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar Calculator = require('./../js/pingpong.js').calculatorModule;\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThen, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebundle()\u003c/code\u003e, which is built into the Browserify package. Don't worry about exactly what this does, just know it's part of the Browserify process for now.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally we tell it to create a new file called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp.js\u003c/code\u003e, and to put it in a new folder, which we will name\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild\u003c/em\u003e. Then inside of there, we want to put\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto another new folder, which we will name\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIt is untidy to keep our automatically generated production files in the same place as our development files. Instead we separate out our production version of the project inside its own folder called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild\u003c/em\u003e. This folder will eventually hold other code, so we tell gulp to create a\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder inside of it to store our browserified JavaScript.\u003c/p\u003e\r\n\u003cp\u003eNow we can run our task with the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ gulp jsBrowserify\u003c/code\u003e. This will generate the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder, the same way the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrowserify\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand did in the terminal.\u003c/p\u003e\r\n\u003cp\u003eNow that our JavaScript is going into a\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder, into a new file\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs/app.js\u003c/em\u003e, we need to replace our old\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags with a new one to load our generated\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild/js/app.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cdiv\u003eindex.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"build/js/app.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003ePing Pong\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"ping-pong-form\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goal\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEnter a number:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goal\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"number\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSubmit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"solution\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHooray! Now we can run our calculator program in the browser again! Don't forget to run your gulp tasks every time your files change as you develop. Later, we'll see how to do this automatically.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003evinyl-source-stream\u003c/strong\u003e: An npm package used for placing browserified source code into a new file.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIt is untidy to keep automatically-generated production files in the same place as our development files. Instead, separate the production version of a project inside a\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"tuesday-dom-manipulation-and-traversal","title":"Tuesday: DOM Manipulation and Traversal","type":"WikiPage","content":"\u003ch2\u003eDOM Manipulation and Traversal\u003c/h2\u003e\r\n\u003cp\u003eIn this lesson, we are going to explore manipulating DOM elements by inserting new text with the jQuery\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Then we'll look at how to traverse the DOM in search of a specific element to remove it. Let's take a look at a visual representation of the DOM that you can use as reference for manipulation and traversal. Each element in the DOM, represented in each box below, can be a parent, child or sibling to other elements. Understanding the position of elements in the DOM will help you insert, locate and remove elements, as needed.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Wednesday/dom-visual-reference.png\" alt=\"dom-visual-reference.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1689\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIn the last lesson, we explored how to simply show and hide elements of the DOM. Now, let's get a little more advanced and insert content into the DOM. Here's some HTML we'll start with:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.10.2.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eTalk to the web page\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eTalk to the web page\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eClick a button to say something to the web page. See what it says back!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-primary\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"hello\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSay \"hello\"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-inverse\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goodbye\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSay \"goodbye\"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-danger\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stop\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSay \"stop copying me!\"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eYou said:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unstyled\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eThe web page said back:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unstyled\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, here's the JavaScript to make the buttons work:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#hello\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Hello!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#goodbye\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Goodbye!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#stop\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Stop copying me!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will insert the text of the argument it's given into to the top of \u0026lt;ul\u0026gt; as the first child of the \u0026lt;ul\u0026gt;. (As you might guess, there's also a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that would insert at the bottom as the last child of the \u0026lt;ul\u0026gt;; there are also\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.before()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.after()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods that would add the argument before or after the \u0026lt;ul\u0026gt; tag as siblings, rather than within it as children.) This is nice, but not a very fun conversation. Let's have the webpage say something different back to the user:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#hello\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Hello!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Why hello there!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#goodbye\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Goodbye!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Goodbye, dear user!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#stop\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Stop copying me!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Pardon me. I meant no offense.\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOf course, we need to change the \u0026lt;ul\u0026gt; tags to have IDs for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003euser\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewebpage\u003c/code\u003e. For the sake of brevity, I won't bother showing the updated HTML here. Go ahead and do that yourself.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eTHE CODE BELOW IS TRICKY. WE JUST WANT YOU TO KNOW THE STUFF ABOVE THIS POINT.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eNow that we know how to add to the DOM, let's learn how to remove from it. Let's make it so that when a user clicks a message, it disappears. First, we need to select each message. When I'm working on some tricky DOM manipulation, I usually start by selecting the element and changing its background color to green, just so that I know I have my selector working properly. You might think this bit of jQuery would work:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// previous code...\u003c/span\u003e\r\n        $(\u003cspan class=\"hljs-string\"\u003e'li'\u003c/span\u003e).css(\u003cspan class=\"hljs-string\"\u003e'background-color'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'green'\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBut it doesn't do what we want. This code is run right after the web page finishes loading\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e($(document).ready())\u003c/code\u003e. And after the page finishes loading, there are no \u0026lt;li\u0026gt; elements. The elements are only added after we click a button. So we need to move our new code to within the callback passed to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e. Let's start by just adding it to one of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"button#hello\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Hello!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;Why hello there!\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n        $(\u003cspan class=\"hljs-string\"\u003e'li'\u003c/span\u003e).css(\u003cspan class=\"hljs-string\"\u003e'background-color'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'green'\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we click Say\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"hello\"\u003c/em\u003e, the messages are\u003cspan\u003e \u003c/span\u003e\u003cem\u003egreen\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's move to the next step - attaching an event handler in place of changing the background color. Again, in the spirit of taking one step at a time, we're not going to actually try to get the click to delete the element - instead, we're going to simply open a dialog box:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"button#hello\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;Hello!\u0026gt;\"\u003c/span\u003e);\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;Why hello there!\u0026gt;\"\u003c/span\u003e);\r\n        $(\u003cspan class=\"hljs-string\"\u003e'li'\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          alert(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we click Say\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"hello\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand then the message, we get our alert! But there's a problem: if we click the button twice, clicking the last message will open the alert twice. And if we click the button again, the last message will open the alert three times, and the middle message will open it twice. What's happening is that the first time we click the button,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$('li')\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eonly finds a single message in each list, and attaches an event handler. But the next time we click the button, that first message is already on the page, and a second event handler is attached to it. And each time we click the button again, another event handler is attached to every message on the page. What we want is to only attach handlers to the message we most recently inserted. Since we're inserting them at the top of each list, we can select one of the \u0026amp;li;ul\u0026gt;s, look through its child elements (the \u0026lt;li\u0026gt;s), and select the first one of them:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).children(\u003cspan class=\"hljs-string\"\u003e\"li\"\u003c/span\u003e).first().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e);\r\n      });\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).children(\u003cspan class=\"hljs-string\"\u003e\"li\"\u003c/span\u003e).first().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, each of the messages only opens a single dialog box when clicked.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eFinally, we should replace our callback with the actual code to delete the message:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#user\"\u003c/span\u003e).children(\u003cspan class=\"hljs-string\"\u003e\"li\"\u003c/span\u003e).first().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).remove();\r\n      });\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#webpage\"\u003c/span\u003e).children(\u003cspan class=\"hljs-string\"\u003e\"li\"\u003c/span\u003e).first().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).remove();\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eremove()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis pretty straightforward, but what is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e?\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a bit of a tricky concept in JavaScript, and I'm not going to give it a full explanation here. For now, you can think of it as referring to whatever was clicked on. We're done with this rather long lesson. Congrats on making it through!\u003c/p\u003e\r\n\u003ch2\u003ePractice: DOM Manipulation and Traversal\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the DOM manipulation lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe visual representation of the DOM's parent, child and sibling relationships\u003c/li\u003e\r\n\u003cli\u003eHow a child element will be inserted at the top of a \u0026lt;ul\u0026gt; tag with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand at the end with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eHow to correctly select DOM elements and delete them\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePractice manipulating the DOM with your partner by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e. Describe an example of using each.\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.before()\u003c/code\u003e? What about\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.after()\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eWrite a line of jQuery that selects an element on the DOM with the id of \"salad\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eDOM Manipulation Practice\u003c/h3\u003e\r\n\u003cp\u003ePractice adding some interactivity to your web pages\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ePractice selecting certain HTML elements and changing the background color to green.\u003c/li\u003e\r\n\u003cli\u003eNow practice removing those elements, just like in the lesson.\u003c/li\u003e\r\n\u003cli\u003eMake a \"cat vs dog\" page - if you click a button for the cat to meow, the dog should bark back, and vice versa. Use Bootstrap to style your pages!\u003c/li\u003e\r\n\u003cli\u003eIn addition to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.prepend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.append()\u003c/code\u003e, you can add content before or after the selected tags (rather than within them) with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.before()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.after()\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eMake a page where if a user clicks on an element some sort of image gets inserted into the page before or after that element. Allow the new image to be removed by a click as well.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"tuesday-git-collaboration","title":"Tuesday: Git Collaboration","type":"WikiPage","content":"\u003ch3\u003e\u003cspan\u003eObjectives\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003eIn this lesson, we will:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eFork a project from Moringa School's GitHub account to your account\u003c/li\u003e\r\n\u003cli\u003eMake changes to the fork (the repository you forked to your Github account)\u003c/li\u003e\r\n\u003cli\u003eAttempt to merge the changes you made with the Moringa School Github repository. \u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003e\u003cspan\u003eForking a repository\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e A\u003cspan\u003e \u003c/span\u003e\u003cem\u003efork\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis a copy of a repository. Most commonly, forks are used to propose changes to someone's project or to use someone else's project as a starting point for your own idea. \u003c/p\u003e\r\n\u003cp\u003eTo get started, open the\u003cspan\u003e \u003c/span\u003e\u003ca class=\"m_2563112663368369639external\" href=\"https://github.com/moringaschool/hello-world\" target=\"_blank\" data-saferedirecturl=\"https://www.google.com/url?hl=en\u0026amp;q=https://github.com/moringaschool/hello-world\u0026amp;source=gmail\u0026amp;ust=1521294038762000\u0026amp;usg=AFQjCNFoBBSE0L-z6lxGnIxTBo7mPHv9mQ\"\u003e\u003cspan\u003eGitHub repository\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"m_2563112663368369639gmail-ui-icon m_2563112663368369639gmail-ui-icon-extlink m_2563112663368369639gmail-ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ewe will be working with in the lesson. On the top right corner of your screen you should see a button with the text 'Fork' as shown in the image below. Clicking on this button should start the process of copying the project/repository to your own account. This is the \u003cstrong\u003e\u003ca class=\"m_2563112663368369639external\" href=\"https://en.wikipedia.org/wiki/Open-source_software\" target=\"_blank\" data-saferedirecturl=\"https://www.google.com/url?hl=en\u0026amp;q=https://en.wikipedia.org/wiki/Open-source_software\u0026amp;source=gmail\u0026amp;ust=1521294038762000\u0026amp;usg=AFQjCNHNIDIN7ZgkrO8_KuV-Wjc4c3kypg\"\u003e\u003cspan\u003eopen source\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"m_2563112663368369639gmail-ui-icon m_2563112663368369639gmail-ui-icon-extlink m_2563112663368369639gmail-ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e \u003c/strong\u003eadvantage of sharing projects on Github allowing people to collaborate on their work.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/fork-button-1.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"fork-button-1.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eClick on that button which should result in a modal prompting you to choose the account you  want to fork to. Select your account name which should take you to the repo you forked in your account. This may take a couple of seconds so be patient as the process takes place. To know that the forking process is complete, check the top left corner of your repo as shown in the image below. \u003c/p\u003e\r\n\u003cp\u003e \u003cimg src=\"viewer/files/Tuesday%20Content%20Images/after-fork.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"after-fork.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIt shows that you are now working on your forked version that was forked from\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa school/hello-world.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDisclaimer: \u003c/strong\u003eIt says 'iantheninja'\u003c/em\u003e because I (iantheninja) am the one who did the forking. \u003cem\u003e \u003c/em\u003eHaving copied Moringa School's repo to your own account, we can then proceed to\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eclone\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eit like we learned to do in the previous lesson. Remember that\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecloning makes a copy in a location on your device\u003c/strong\u003e, in this case your laptop. \u003c/p\u003e\r\n\u003cp\u003eRun the `\u003cem\u003egit clone\u003c/em\u003e` command to clone the repo to your preferred location. At this point, you should have a\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-projects \u003c/em\u003efolder which should host all projects you are going to work on at Moringa School. If you do not have such a folder, make sure you create one right now. Make sure to clone the repository to that directory (\u003cem\u003emoringa-school-projects\u003c/em\u003e) to avoid making a mess of your folder structure. Take the next 5 minutes and figure out if you and your pair partner can figure out how to correctly clone the repo. \u003c/p\u003e\r\n\u003cp\u003e[\u003cem\u003e5 minute practice session\u003c/em\u003e] \u003c/p\u003e\r\n\u003cp\u003eConfirm that you did the right thing by opening the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-projects\u003c/em\u003e folder\u003cem\u003e \u003c/em\u003eand checking that you have the hello-world project. If you did not nail the task (cloning the repo), here's a bit of guidance to assist you. Follow the following steps:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eOpen the terminal application. \u003c/li\u003e\r\n\u003cli\u003eNavigate to the moringa-school-projects folder from the terminal. Remember to use the \u003cem\u003ecd \u003c/em\u003eand \u003cem\u003emkdir\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecommands where necessary.\u003c/li\u003e\r\n\u003cli\u003eRun the command; \r\n\u003cpre\u003e\u003cem\u003egit clone \u003ca class=\"m_2563112663368369639external\" href=\"https://github.com/iantheninja/hello-world.git\" target=\"_blank\" data-saferedirecturl=\"https://www.google.com/url?hl=en\u0026amp;q=https://github.com/iantheninja/hello-world.git\u0026amp;source=gmail\u0026amp;ust=1521294038763000\u0026amp;usg=AFQjCNE6RcHdhXraD54cFZQIt_x3RIVmwg\"\u003e\u003cspan\u003ehttps://github.com/\u003cstrong\u003eyour-username\u003c/strong\u003e/hello-world.git\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"m_2563112663368369639gmail-ui-icon m_2563112663368369639gmail-ui-icon-extlink m_2563112663368369639gmail-ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003c/em\u003e\u003c/pre\u003e\r\n(remember to replace '\u003cstrong\u003e\u003cem\u003eyour-username\u003c/em\u003e\u003c/strong\u003e' with your GitHub username to prevent cloning the wrong repository)\u003c/li\u003e\r\n\u003cli\u003eNavigate to inside the cloned repository by using the change directory (\u003cem\u003ecd\u003c/em\u003e) command. \u003c/li\u003e\r\n\u003cli\u003eOpen your editor by using the command '\u003cem\u003eatom .\u003c/em\u003e' for atom users or '\u003cem\u003ecode .\u003c/em\u003e' for visual studio code users.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTo check that you did the right thing, run the command '\u003cem\u003egit remote -v\u003c/em\u003e' which should return the url of your forked repository in your account on GitHub. In my case the value returned was as shown in the image below. \u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/remote-output.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"remote-output.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe only difference between the output above and yours should be the username value of the url. Instead of '\u003cem\u003eiantheninja\u003c/em\u003e', you should have your username.  \u003c/p\u003e\r\n\u003cp\u003eNow that we have the project in our computers, let's do something interesting with it. We will be altering some information inside of the project. Open the file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eREADME.md i\u003c/em\u003en your text editor and add your name or username in the '#Authors' section of the file. Refer to the image shown below.\u003c/p\u003e\r\n\u003cp\u003e \u003cimg src=\"viewer/files/Tuesday%20Content%20Images/author-section.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"author-section.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eMake your username a clickable link by making the following modification and add it below the original author of the project. Instead of adding your username below the one that's currently in the README, make it (your username) a link that redirects a visitor to your GitHub profile. Take the next 2 minutes discussing what the appropriate markdown modification would be. You can refer to\u003cspan\u003e \u003c/span\u003e\u003ca class=\"m_2563112663368369639external\" href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#links\" target=\"_blank\" data-saferedirecturl=\"https://www.google.com/url?hl=en\u0026amp;q=https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet%23links\u0026amp;source=gmail\u0026amp;ust=1521294038763000\u0026amp;usg=AFQjCNExZ8SCsbiUCd122DP6qlz3TsFTrg\"\u003e\u003cspan\u003ethis\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"m_2563112663368369639gmail-ui-icon m_2563112663368369639gmail-ui-icon-extlink m_2563112663368369639gmail-ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e handy link that has instructions on how to create clickable links in markdown.\u003c/p\u003e\r\n\u003cp\u003e[\u003cem\u003e2 minute practice session\u003c/em\u003e] \u003c/p\u003e\r\n\u003cp\u003eTo make the username displayed on the file clickable, it has to change to:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/readmelinkadded.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"readmelinkadded.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAfter modifying your project, add, commit and push the changes to your GitHub fork in your account. If pushing to GitHub fails, check where your remote points by running the command we used earlier '\u003cem\u003egit remote -v\u003c/em\u003e'. If it points to '\u003ca href=\"https://github.com/\" target=\"_blank\" data-saferedirecturl=\"https://www.google.com/url?hl=en\u0026amp;q=https://github.com/\u0026amp;source=gmail\u0026amp;ust=1521294038763000\u0026amp;usg=AFQjCNET6HwDI2s4WRmLk52L5ZsItupZXQ\"\u003ehttps://github.com/\u003c/a\u003e\u003cem\u003eiantheninja/hello-world\u003c/em\u003e', or '\u003cspan\u003e\u003ca href=\"https://github.com/moringaschool\" target=\"_blank\" data-saferedirecturl=\"https://www.google.com/url?hl=en\u0026amp;q=https://github.com/moringaschool\u0026amp;source=gmail\u0026amp;ust=1521294038763000\u0026amp;usg=AFQjCNG0VfX13WfgeUH_N-iOtaPUEj7AKw\"\u003ehttps://github.com/moringaschool\u003c/a\u003e\u003c/span\u003e\u003cem\u003e/hello-world\u003c/em\u003e', you probably made a mistake at some point but it's equally easy to fix it. \u003c/p\u003e\r\n\u003ch3\u003eRemoving a remote\u003c/h3\u003e\r\n\u003cp\u003eTo fix the problem mentioned above, remove the remote url called '\u003cem\u003eorigin\u003c/em\u003e' by running the command '\u003cem\u003egit remote rm origin\u003c/em\u003e'. The '\u003cem\u003egit remote\u003c/em\u003e' portion of the command tells git that we want to modify our remote url in some way. The '\u003cem\u003erm\u003c/em\u003e' flag is short form for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eremove \u003c/em\u003ewhich you can actually also use\u003ci\u003e.\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eIf you were to use the command with '\u003cem\u003eremove' \u003c/em\u003einstead, your command in full would be '\u003cem\u003egit remote remove origin'. \u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003eRunning the command\u003cspan\u003e \u003c/span\u003e\u003cem\u003e'git remote -v' \u003c/em\u003eafter removing your remote should not give any response showing that you have no remote repository linked or associated with your\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e directory. To learn more about working with remotes, you can visit\u003cspan\u003e \u003c/span\u003e\u003ca class=\"m_2563112663368369639external\" href=\"https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes\" target=\"_blank\" data-saferedirecturl=\"https://www.google.com/url?hl=en\u0026amp;q=https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes\u0026amp;source=gmail\u0026amp;ust=1521294038763000\u0026amp;usg=AFQjCNFU6oNpL17IvllwMTLdSlf0XelhVA\"\u003e\u003cspan\u003ethis link\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"m_2563112663368369639gmail-ui-icon m_2563112663368369639gmail-ui-icon-extlink m_2563112663368369639gmail-ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand spend the next few minutes practicing.\u003c/p\u003e\r\n\u003cp\u003eTo add the appropriate remote, open your 'hello-world' forked repository in your browser and copy the url provided by GitHub by clicking on the green button shown in the image below. Make sure you are in your account as highlighted in the image below to avoid any errors. \u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/cloning-link.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"cloning-link.png\"\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003c/h3\u003e\r\n\u003ch3\u003ePull Requests\u003c/h3\u003e\r\n\u003cp\u003eA good/ super cool way of collaborating is by using \u003cstrong\u003epull requests. \u003c/strong\u003ePull requests are used to propose changes to a certain repository. The order of proposing changes is:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eForking the repository which we learned earlier in the lesson\u003c/li\u003e\r\n\u003cli\u003eMaking the fix; which we did when we added our clickable usernames to the author's section of the README\u003c/li\u003e\r\n\u003cli\u003eSubmitting a pull request which is what we are just about to do.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eAfter Moringa School, if your project manager likes your work after you make a pull request, they might \u003cstrong\u003epull \u003c/strong\u003eyour additions/fixes into the original repository. \u003c/p\u003e\r\n\u003cp\u003eTo make a pull request, click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e'New pull request' \u003c/em\u003ebutton in your GitHub repo. \u003c/p\u003e\r\n\u003cp\u003e \u003cimg src=\"viewer/files/Tuesday%20Content%20Images/newpullrequest.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"newpullrequest.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eOn clicking the button, the page should redirect to a pull request \u003cem\u003e'configuration' \u003c/em\u003eGitHub page. You should be able to see which project and\u003cspan\u003e \u003c/span\u003e\u003ca class=\"m_2563112663368369639external\" href=\"https://git-scm.com/book/en/v1/Git-Branching-What-a-Branch-Is\" target=\"_blank\" data-saferedirecturl=\"https://www.google.com/url?hl=en\u0026amp;q=https://git-scm.com/book/en/v1/Git-Branching-What-a-Branch-Is\u0026amp;source=gmail\u0026amp;ust=1521294038763000\u0026amp;usg=AFQjCNE1QByWL4rjuwLJhaNqWCplMtnOZw\"\u003e\u003cspan\u003ebranch\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"m_2563112663368369639gmail-ui-icon m_2563112663368369639gmail-ui-icon-extlink m_2563112663368369639gmail-ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"m_2563112663368369639gmail-screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eyou want merged with the original (Moringa School) master. So far we are working with one branch (the master). We will learn in future lessons what branches are and why they're super useful to a developer's workflow. \u003c/p\u003e\r\n\u003cp\u003eIt should look like the image shown below. If it does not, figure out where you made a misstep with your pair partner and make a correction.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/mergeconfig.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"mergeconfig.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eMerge conflicts\u003c/h3\u003e\r\n\u003cp\u003eA big pain point for developers working with git is resolving merge conflicts. Merge conflicts usually happen when your current branch (master branch at\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour-account/hello-world\u003c/em\u003e) and the branch you want to merge into (master at\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringaschool/hello-world\u003c/em\u003e) have diverged. Hold up, what does this mean? It means, you have commits in your current branch which are not in the other branch and vice versa.\u003c/p\u003e\r\n\u003cp\u003eFrom the image above, you can see a warning/error message with the text\u003cspan\u003e \u003c/span\u003e\u003cem\u003e'X can't automatically merge. Don't worry, you can still create the pull request'\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eNote: you might not have conflicts or errors in your project in which case you should just proceed with making a pull request. This is to help you figure out what to do if this happens. \u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eClick on the big green button with the title\u003cspan\u003e \u003c/span\u003e\u003cem\u003e'Create pull request'. \u003c/em\u003eThis should redirect you to a page that let's you know what the problem with your merge could be. You should see the page shown in the image below. \u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/resolveconflicts.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"resolveconflicts.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eClick on the button that say's\u003cspan\u003e \u003c/span\u003e\u003cem\u003e'Resolve conflicts' \u003c/em\u003eon the right of the image shown above. This should redirect you to the page where you are supposed to make changes to the file with conflicts. In my file, this is how that file looks like. \u003c/p\u003e\r\n\u003cp\u003e \u003cimg src=\"viewer/files/Tuesday%20Content%20Images/readmeconflicts.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"readmeconflicts.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eSo, what seems to be the problem over here. notice the '\u0026lt;\u0026lt;\u0026lt;\u0026lt; master', '====', and '\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; master' text added to our file. All of these have a purpose. In this file, we have text that was originally in the master branch. Then, we have text that is pulled into the file from our attempted pull request. Text between the '\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; master' and '======' represents what was originally in the file. Text between the '======' and '\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; master' signs represents new content that are going to be added to the file. \u003c/p\u003e\r\n\u003cp\u003eIt's up to the developer to figure out what they want to keep in the file and make a commit message to help people contributing to the project to understand what happened during the merge. Let's go ahead and do that.\u003c/p\u003e\r\n\u003cp\u003eWe are going to keep content in the lower block and delete the upper block since we no longer need it. Make sure to delete the '\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; master', '======' and '\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; master' signs. The only thing in the author section should be what's shown in the image below.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/aftereditmerge.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"aftereditmerge.png\"\u003e \u003c/p\u003e\r\n\u003cp\u003eAfter making those changes, our file is now ready to be committed and merged. To do this, click on the button titled '\u003cem\u003eMark as resolved\u003c/em\u003e'. This should redirect you to a page that checks if the changes you made resolved the conflict. If you followed this process, you should see the following on your GitHub page. \u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/allconflictsresolved.png?canvas_download=1\u0026amp;canvas_qs_download_frd=1\" alt=\"allconflictsresolved.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf you select '\u003cem\u003eCommit merge'\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eyou should be redirected to the page where merging the repos is done. Since you are attempting to merge your version of the repo (hello-world), with the master at Moringa School, we will probably decline the request since this may result in a lot of pull requests and conflicts to match. \u003c/p\u003e\r\n\u003cp\u003eThis is the same procedure that you will use when working with your pair and collaborating on the various exercises you are going to have at Moringa School. One person among the two of you, or in the group project, will need to initialize (create the repository), in their account that will act as the main repo. Everyone in the group should then fork the repository to their own accounts and work from there. It's advisable to integrate your work with the main repository as frequently as possible. This is part of a higher level concept known as \u003cstrong\u003econtinuous integration\u003c/strong\u003e. This prevents attempts to merge dozens of commits into the main repository where huge merge conflicts are bound to happen. Especially when working in a team.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-practice-the-command-line","title":"Tuesday: Practice the Command Line","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Start using the command line to interact with your computer. Learn some basic commands.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following question with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between a GUI and the command line?\u003c/li\u003e\r\n\u003cli\u003eWhat are some advantages you can think of for using the command line?\u003c/li\u003e\r\n\u003cli\u003eName two commands and what they do.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson to start interacting with your computer through the command line. Then, once you have experience using the command line and using basic commands, complete the following exercise in the terminal.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eIf you're not already there, navigate to the home directory.\u003c/li\u003e\r\n\u003cli\u003ePrint your location to the screen to make sure you're in the right spot.\u003c/li\u003e\r\n\u003cli\u003eList the contents of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHome\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory to the terminal.\u003c/li\u003e\r\n\u003cli\u003eNavigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDesktop\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/li\u003e\r\n\u003cli\u003eCreate a directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/li\u003e\r\n\u003cli\u003eCreate a file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile1.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eCreate two more files named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile2.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile3.html\u003c/em\u003e. (Here's a tip: you can create two files with a single command! Simply separate the two file names with a space:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch file2.html file3.html\u003c/code\u003e)\u003c/li\u003e\r\n\u003cli\u003eCreate a directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eMove\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile1.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eCopy\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile2.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand name the copy\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile4.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eRename\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile3.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethird-file.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate into\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eDelete\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile1.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate up one directory so that you are back in\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003ePrint your location to verify that you are back in\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eDelete\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eList the contents to the page to make sure that\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewas successfully deleted.\u003c/li\u003e\r\n\u003cli\u003eClear the terminal screen.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eStill want more practice? Check out the adventure game at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://web.mit.edu/mprat/Public/web/Terminus/Web/main.html\" target=\"_blank\"\u003ethis link\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ethat uses the same terminal commands that we just learned to navigate through the levels.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-practice-inline-elements","title":"Tuesday: Practice: Inline Elements","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice using common inline elements in web pages, and get comfortable with some of the most common ones.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following questions with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between a block element and an inline element?\u003c/li\u003e\r\n\u003cli\u003eWhat does it mean to provide a relative path?\u003c/li\u003e\r\n\u003cli\u003eWhat is an HTML attribute? Can you give some examples of ones that we have seen so far?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eAdd some inline elements to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e. Some to consider:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd some images to represent your favorite things\u003c/li\u003e\r\n\u003cli\u003eList your favorite websites and provide links to them\u003c/li\u003e\r\n\u003cli\u003eAdd some\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags at appropriate places\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNext, update your pet's website to include images, links,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estrong\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eem\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags.\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIn Moringa School exercises, the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFurther Exploration\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esection contains additional activities and exercises to explore if all of the coursework for the day has been completed. Make sure that you and your partner have completed the day's exercises and understand them well with time to spare before proceeding.\u003c/p\u003e\r\n\u003ch4\u003ePet Website\u003c/h4\u003e\r\n\u003cp\u003eAdd additional pages to your pet website. This could include pages for other pets, a play date calendar, a biography or 'about me' page, a blog, a contact page, or anything else you can think up!\u003c/p\u003e\r\n\u003ch4\u003eOther HTML Website\u003c/h4\u003e\r\n\u003cp\u003eCreate an additional HTML website for any topic of your choosing. This could include your friend's local business, your favorite vacation spot, or something dedicated to a hobby you and your partner share. Create multiple pages for the site.\u003c/p\u003e","frontPage":false},{"exportId":"monday-javascript-fundamentals-objectives","title":"Monday: JavaScript Fundamentals Objectives","type":"WikiPage","content":"\u003cp\u003eIn this section, we will be learning the fundamentals of JavaScript, the programming language of the web.\u003c/p\u003e\r\n\u003cp\u003eWe'll start our exploration of JavaScript with the basic building blocks:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eData types\u003c/li\u003e\r\n\u003cli\u003eOperators\u003c/li\u003e\r\n\u003cli\u003eVariables\u003c/li\u003e\r\n\u003cli\u003eMethods\u003c/li\u003e\r\n\u003cli\u003eFunctions\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan\u003eThen we will learn \u003c/span\u003eabout some important programming concepts that will allow us to better work with data:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eArrays: Lists of data or information\u003c/li\u003e\r\n\u003cli\u003eLooping: Allows JavaScript to repeat an action until some condition is met\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFinally, we will learn how we can make JavaScript make decisions for us by implementing branching, which allows JavaScript to perform different actions based on different conditions that we create\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eAs you'll see when you explore other languages, these foundational elements are standard components throughout programming. \u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-functions","title":"Monday: Functions","type":"WikiPage","content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSo far, none of the JavaScript we've written has allowed us to actually interact with the browser. Let’s write some now in the JavaScript console:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; alert(\"Hey there!\");\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs soon as we hit \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eEnter\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, a dialog box pops up that says \"Hey there!\".\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is something called a \u003cstrong\u003efunction\u003c/strong\u003e. Like a method, a function is something that performs an action. Functions are different from methods because they are called by themselves, whereas methods are actions that are called \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eon\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e something. For example, when we call \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e3.5.toFixed()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, we are calling the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e.toFixed()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e method on the number 3.5. When we call \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003ealert(\"Hey there!\")\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, it stands by itself. Like methods, functions can take arguments. The argument above was \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"Hey there!\"\u003c/code\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHere's another JavaScript function that takes an argument:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; prompt(\"What is your favorite planet?\"); // I'm going to type \"Earth\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Earth\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTry it out: hitting \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eEnter\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e on the \u003ccode\u003eprompt()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function opens a dialog box containing a box where you can enter some text.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe \u003ccode\u003e//\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e in the above code sample is the start of a \u003cstrong\u003ecomment\u003c/strong\u003e, which is text in your code that is ignored by the computer. Comments are a convenient way to leave notes to yourself or other programmers to make your code easier to read or understand. In the above example, I used a comment to let you know that I typed \"Earth\" in the dialog box, which is why \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Earth\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e printed on the next line.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Earth\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e prints on the next line because the \u003ccode\u003eprompt()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function returns your response. Here's a useful way we can use a \u003cstrong\u003ereturn statement\u003c/strong\u003e:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var mySchool = prompt(\"Where do you go to school?\"); // I'm going to type \"Moringa School\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; mySchool;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Moringa School\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHere, we created a variable named \u003ccode\u003emySchool\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and set it equal to whatever the user types in the box.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe return statement is a string, so we can use it in the same way that we use a string:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; prompt(\"Are you ready to code?\").toUpperCase(); // I'm going to type \"yes!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"YES!\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAnother built-in function that lets the browser interact with the user is \u003ccode\u003econfirm()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, which also takes a string as an argument:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; confirm(\"Would you like to continue?\"); // I am going to press the OK button\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTry it again for yourself. This time press the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eCancel\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e button, and notice that it returns the \u003ccode\u003efalse\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e boolean value.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eIt is good to be conscious of what arguments a function takes, and what data type it returns. Here is a table showing that information for the three built-in functions introduced in this lesson:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Tuesday/function-arguments-returns.png\" alt=\"function-arguments-returns.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1688\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction does not return anything useful, which is fine because you would just use it to display some information to the user - it is a way of outputting information, not of collecting information. On the other hand, you would want to somehow collect the user's response to the \u003ccode\u003eprompt()\u003c/code\u003e or \u003ccode\u003econfirm()\u003c/code\u003e functions - likely by assigning the returned value to a variable as demonstrated above with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar mySchool = prompt(\"Where do you go to school?\");\u003c/code\u003e. That way you can actually do something with the inputted information rather than just ignoring it.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false},{"exportId":"friday-independent-project","title":"Friday: Independent Project","type":"WikiPage","content":"\u003ch1\u003eIndependent Project\u003c/h1\u003e\r\n\u003ch2\u003eAnita's Kitchen\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003cspan\u003e \u003c/span\u003e\u003c/strong\u003eCreate a website from a design.\u003c/p\u003e\r\n\u003ch3\u003eUser Story\u003c/h3\u003e\r\n\u003cp\u003eAnita has asked you create a landing page for her business and has handed you over the design of how the page should appear. Use your knowledge of HTML/CSS and Javascript to create the webpage following the instructions carefully. She has free lunch for the best student!!\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eGo to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/moringaschool/mpft-ip\" target=\"_blank\"\u003ethe Moringa Prep independent project repository on github\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eFollow the instructions in the readme section of the repository\u003c/li\u003e\r\n\u003cli\u003eComplete your work and push it to gh-pages\u003c/li\u003e\r\n\u003cli\u003eAdd the link to gh-pages inside your project's readme\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eObjectives\u003c/h2\u003e\r\n\u003cp\u003eYour project will be evaluated on the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eBootstrap classes are used to style your page.\u003c/li\u003e\r\n\u003cli\u003ePage incorporates a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eIndentation and spacing of HTML and CSS is accurate and consistent.\u003c/li\u003e\r\n\u003cli\u003eCommits are made regularly with clear messages associated with them\u003c/li\u003e\r\n\u003cli\u003eProject is deployed to GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eProject works as expected.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of week’s concepts. If prompted, you are able to discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject submittion time. It is to be submitted by 6pm onFriday unless otherwise stated\u003c/li\u003e\r\n\u003cli\u003eA project README that includes:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://gist.github.com/PurpleBooth/109311bb0361f32d87a2\"\u003eHere is an example\u003c/a\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eproject or program name\u003c/li\u003e\r\n\u003cli\u003eauthor name\u003c/li\u003e\r\n\u003cli\u003edescription of project\u003c/li\u003e\r\n\u003cli\u003eproject setup instructions\u003c/li\u003e\r\n\u003cli\u003elink to live site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003ecopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eProject is in a polished, portfolio-quality state.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003e(Suggestions for what this can mean: Intuitive, easy to follow layout. Simple yet polished styling. Form field labels where appropriate. Form fields that are validated correctly, and get cleared after submitting. Detailed, well put together readme. No typos. And much more.)\u003c/em\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n \r\n \r\n\u003ch2\u003eSubmission of Independent Projects\u003c/h2\u003e\r\n\u003cp\u003eIndependent Projects must be submitted by\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e6pm on Friday.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(For Moringa prep part-time students, code review and deadlines will be discussed in class.)\u003c/p\u003e\r\n\u003cp\u003eComplete the following steps to submit your project:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eBefore you start working on your project,create a github repository for your project\u003c/li\u003e\r\n\u003cli\u003eFill this\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://submit-ip.moringaschool.com/\" target=\"_blank\"\u003eform.\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eStart working on your project\u003c/li\u003e\r\n\u003c/ol\u003e\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eBefore pushing your final code to Github,\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eat 5pm do a final check for each objective. Spend a few minutes checking indentation, removing commented-out code, creating a detailed README, etc. Your project should be polished and complete.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli\u003e\u003cstrong\u003ePush the final code to your GitHub repo by 6pm local time.\u003c/strong\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eEven if you are not completely done working on your project, push anyways which will communicate to your TM how much you have completed\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"thursday-practice-form-input-types","title":"Thursday: Practice - Form Input Types","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eExplore using jQuery to gather a variety of form input types by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do we gather form input from a select (ie: dropdown) box? How does this differ from a basic input (ie: text) field?\u003c/li\u003e\r\n\u003cli\u003eWhat does\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e:checked\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erefer to when gathering input from radio buttons?\u003c/li\u003e\r\n\u003cli\u003eIf we\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eincludetype=\"number\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein an HTML form field, do we still need to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.parseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen retrieving the value (assuming we need a number)?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eSurvey\u003c/h3\u003e\r\n\u003cp\u003eUse a form to let the user fill out a survey. Ask them to fill in their name, their favorite foods, their favorite music, and any other information you feel like. Include all form input types we've covered so far (except checkboxes; we'll learn more about those next week!)\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs the user interface logic and business logic separated? Is there anything you can spot that is in an incorrect place?\u003c/li\u003e\r\n\u003cli\u003eIs code indented correctly throughout?\u003c/li\u003e\r\n\u003cli\u003eAre variable names descriptive of what they represent? Is it easy to tell what each is referring to?\u003c/li\u003e\r\n\u003cli\u003eIs a form successfully gathering input from users?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"tuesday-readme","title":"Tuesday: README ","type":"WikiPage","content":"\u003cp\u003eEvery GitHub repository should have a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eREADME.md\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile. It's often the first thing someone new to your project sees and is frequently the only source of documentation. The READMEs we will write will have the extension,\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e.md\u003c/code\u003e which stands for Markdown. Like HTML, Markdown is a language that uses annotations to format the display of text.\u003c/p\u003e\r\n\u003cp\u003eThe README file should be located in the top level of the project directory. GitHub knows to look for a file named \"README\" and display the contents on the repo's viewing page.\u003c/p\u003e\r\n\u003cp\u003eIt's worth taking the time to make your README look presentable because it will be the first thing anyone will see in your repositories. You want to make a solid first impression - if people see that you have a messy or incomplete README, they will assume that your code is also messy or incomplete. You want to make it as easy as possible for your users (such as potential employers) to check out your code. Writing a strong README is a good way to practice - and showcase - your empathy as a developer.\u003c/p\u003e\r\n\u003cp\u003eCheck out the following examples of good READMEs:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://github.com/iharsh234/WebApp\"\u003eWebApp\u003c/a\u003e: description, live demo, screenshots, usage and collaboration instructions, technologies used, to do list, collaborators, license\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://github.com/sindresorhus/pageres\"\u003ePageRes\u003c/a\u003e: logo, description, installation instructions, usage instructions, API documentation, links to related repos, live demo, collaborators, license\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://github.com/IgorAntun/node-chat\"\u003eNode.JS Chat\u003c/a\u003e: description, screenshot, live demo, features, setup instructions, usage instructions, license\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAs you can see from these examples, READMEs vary widely from one repository to the next, depending on the project needs. This is why it's important that your README is well-organized and easy to read. Moringa School recommends including as a minimum the following sections:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eApplication name\u003c/li\u003e\r\n\u003cli\u003eNames of contributors\u003c/li\u003e\r\n\u003cli\u003eDescription of the project's purpose\u003c/li\u003e\r\n\u003cli\u003eComplete setup/installation instructions\u003c/li\u003e\r\n\u003cli\u003eLicense information with a copyright and date\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAdditional sections to consider:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eLive demo\u003c/li\u003e\r\n\u003cli\u003eInstructions on running tests\u003c/li\u003e\r\n\u003cli\u003eTechnologies used\u003c/li\u003e\r\n\u003cli\u003eFuture features or to do list\u003c/li\u003e\r\n\u003cli\u003eKnown bugs\u003c/li\u003e\r\n\u003cli\u003eContact information\u003c/li\u003e\r\n\u003cli\u003eSupport or contribution instructions\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBelow is a README sample template written in Markdown. Feel free to copy and paste the text below into a new file and replace the relevant parts in curly brackets with information about your project. It includes sections from above, but you can modify this in any way to suit your project's needs or to make your README look the way you want.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e# {Application Name}\r\n#### {Brief description of application}, {Date of current version}\r\n#### By **{List of contributors}**\r\n## Description\r\n{This is a detailed description of your application, including its purpose and usage.  Give as much detail as needed to \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexplain\u003c/span\u003e what the application does, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e other information you want users \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e other developers \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e have. }\r\n## Setup/Installation Requirements\r\n* This \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e a great place\r\n* \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e list setup instructions\r\n* \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a simple\r\n* easy-\u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e-understand\r\n* \u003cspan class=\"hljs-keyword\"\u003eformat\u003c/span\u003e\r\n{Leave nothing \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e chance! You want it \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be easy \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e potential users, employers \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e collaborators \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e run your app. \u003cspan class=\"hljs-keyword\"\u003eDo\u003c/span\u003e I need \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e run a \u003cspan class=\"hljs-keyword\"\u003eserver\u003c/span\u003e? \u003cspan class=\"hljs-keyword\"\u003eDo\u003c/span\u003e I need \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e dependencies? How should I \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e up my \u003cspan class=\"hljs-keyword\"\u003edatabases\u003c/span\u003e? \u003cspan class=\"hljs-keyword\"\u003eIs\u003c/span\u003e there other code this app depends \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e?}\r\n## Known Bugs\r\n{\u003cspan class=\"hljs-keyword\"\u003eAre\u003c/span\u003e there issues that have \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e yet been resolved that you want \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e let users know you know? Outline \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e issues that would impact \u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e your application. \u003cspan class=\"hljs-keyword\"\u003eShare\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e workarounds that \u003cspan class=\"hljs-keyword\"\u003eare\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e place. }\r\n## Technologies Used\r\n{Tell me about the languages \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e tools you used \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecreate\u003c/span\u003e this app. Assume that I know you probably used HTML \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e CSS. \u003cspan class=\"hljs-keyword\"\u003eIf\u003c/span\u003e you did something really cool \u003cspan class=\"hljs-keyword\"\u003eusing\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eonly\u003c/span\u003e HTML, point that out.}\r\n## Support \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e contact details\r\n{Let people know what \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e they run \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e issues \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e have questions, ideas \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e concerns.  Encourage them \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e contact you \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e make a contribution \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e the code.}\r\n### License\r\n*{Determine the license under which this application can be used.  See below \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e more details \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e licensing.}*\r\nCopyright (c) {\u003cspan class=\"hljs-keyword\"\u003eyear\u003c/span\u003e} **{List \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econtributors\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e company name}**\r\n  \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eLicensing\u003c/h2\u003e\r\n\u003cp\u003eAn open source license details how others can use your code. Adding a license to your repository is a good practice because it is how you state your intent.\u003c/p\u003e\r\n\u003cp\u003eMIT and GPL are the most common licenses. An MIT license means your code is free to use by anyone and you are not liable (Rails and jQuery use an MIT license). GPL also indicates free usage of the code but when used, the resulting work MUST be open source (Linux, Git and Wordpress use GPL).\u003c/p\u003e\r\n\u003cp\u003eFor additional details on choosing a license for your code, visit GitHub's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://choosealicense.com/\"\u003eChoose a License site\u003c/a\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-forms","title":"Wednesday: Forms","type":"WikiPage","content":"\u003cp\u003eSo far, the only way we've been able to capture user input is by using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e. Let's learn about forms so that we can build more interesting pages.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eHave you ever played Mad Libs? You're prompted to fill out a list of nouns, verbs, adjectives, etc., and then copy them onto another piece of paper that contains a story, missing those crucial words that you are now providing. The idea is to pick bizarre words without knowing what the story is, and then when you fill them in, the results can be hilarious.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's make a page that mimics the Mad Libs format:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;html\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e   \u0026lt;head\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;link href=\"css/bootstrap.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;link href=\"css/styles.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;script   src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;script src=\"js/scripts.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;title\u0026gt;A fantastical adventure\u0026lt;/title\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e   \u0026lt;/head\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e   \u0026lt;body\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;div class=\"container\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e         \u0026lt;h1\u0026gt;Fill in the blanks to write your story!\u0026lt;/h1\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e         \u0026lt;div id=\"blanks\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e            \u0026lt;form\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;div class=\"form-group\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;label for=\"person1\"\u0026gt;A name\u0026lt;/label\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;input id=\"person1\" class=\"form-control\" type=\"text\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;div class=\"form-group\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;label for=\"person2\"\u0026gt;Another name\u0026lt;/label\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;input id=\"person2\" class=\"form-control\" type=\"text\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;div class=\"form-group\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;label for=\"animal\"\u0026gt;An animal\u0026lt;/label\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;input id=\"animal\" class=\"form-control\" type=\"text\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;div class=\"form-group\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;label for=\"exclamation\"\u0026gt;An exclamation\u0026lt;/label\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;input id=\"exclamation\" class=\"form-control\" type=\"text\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;div class=\"form-group\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;label for=\"verb\"\u0026gt;A past tense verb\u0026lt;/label\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;input id=\"verb\" class=\"form-control\" type=\"text\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;div class=\"form-group\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;label for=\"noun\"\u0026gt;A noun\u0026lt;/label\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e                  \u0026lt;input id=\"noun\" class=\"form-control\" type=\"text\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e               \u0026lt;button type=\"submit\" class=\"btn\"\u0026gt;Show me the story!\u0026lt;/button\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e            \u0026lt;/form\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e         \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e         \u0026lt;div id=\"story\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e            \u0026lt;h1\u0026gt;A fantastical adventure\u0026lt;/h1\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e            \u0026lt;p\u0026gt;One day, \u0026lt;span class=\"person1\"\u0026gt;\u0026lt;/span\u0026gt; and \u0026lt;span class=\"person2\"\u0026gt;\u0026lt;/span\u0026gt; were walking through the woods, when suddenly a giant \u0026lt;span class=\"animal\"\u0026gt;\u0026lt;/span\u0026gt; appeared. \"\u0026lt;span class=\"exclamation\"\u0026gt;\u0026lt;/span\u0026gt;\", \u0026lt;span class=\"person1\"\u0026gt;\u0026lt;/span\u0026gt; cried. The two of them \u0026lt;span class=\"verb\"\u0026gt;\u0026lt;/span\u0026gt; as quickly possible, and when they were safe, \u0026lt;span class=\"person1\"\u0026gt;\u0026lt;/span\u0026gt; and \u0026lt;span class=\"person2\"\u0026gt;\u0026lt;/span\u0026gt; gave each other a giant \u0026lt;span class=\"noun\"\u0026gt;\u0026lt;/span\u0026gt;.\u0026lt;/p\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e         \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e   \u0026lt;/body\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eHere, I've used some Bootstrap classes to make the form look nice; you can read more about them in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#forms\" target=\"_blank\"\u003eBootstrap Form Documentation\u003c/a\u003e.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's make the story hidden to start:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e#story {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  display: none;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, our JavaScript needs to get the value from the form inputs, insert them into the \u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003es where the information should go, and then un-hide the story itself. We know how to insert text into our pages, so let's get that working before we try to get the data from the form:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$(document).ready(function() {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e    $(\"#blanks form\").submit(function() {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".person1\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".person2\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".animal\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".exclamation\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".verb\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".noun\").append(\"blah blah\");\u003cbr\u003e\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\"#story\").show();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e    });\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e});\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esubmit()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction attaches an event listener for when a form is submitted. It's different from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction because a form can be submitted by clicking the submit button, of course, but it can also be submitted by pressing \u003cem\u003eEnter\u003c/em\u003e while a form field is selected. But when we submit the form, the story briefly flashes and then disappears. What's happening is that, by default, forms try to send the information somewhere, and since we haven't told it where to submit to, the page just refreshes and erases our hard work. If you look in the URL bar, you can see that there's a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e?\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eat the end of the address now. This is your clue that the form has been submitted to nowhere and the page refreshed. We need to prevent the default action for the form:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$(document).ready(function() {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e    $(\"#blanks form\").submit(function(event) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".person1\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".person2\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".animal\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".exclamation\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".verb\").append(\"blah blah\");\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".noun\").append(\"blah blah\");\u003cbr\u003e\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\"#story\").show();\u003cbr\u003e\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        event.preventDefault();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e    });\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e});\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 1rem;\"\u003eNotice that we've added a parameter event to the callback function we passed \u003c/span\u003eto\u003cspan style=\"font-size: 1rem;\"\u003e \u003c/span\u003e\u003ccode\u003esubmit()\u003c/code\u003e\u003cspan style=\"font-size: 1rem;\"\u003e \u003c/span\u003emethod\u003cspan style=\"font-size: 1rem;\"\u003e. When the form is submitted, jQuery runs the callback function and passes in something as an argument. We don't know what this \"something\" is - we just know that it somehow represents the event of the form being submitted, and so we give the parameter the \u003c/span\u003ename\u003cspan style=\"font-size: 1rem;\"\u003e event. And we know that if we call the \u003c/span\u003emethod\u003cspan style=\"font-size: 1rem;\"\u003e \u003c/span\u003e\u003ccode\u003epreventDefault()\u003c/code\u003e\u003cspan style=\"font-size: 1rem;\"\u003e \u003c/span\u003eon\u003cspan style=\"font-size: 1rem;\"\u003e this event thing, it will stop the form from submitting.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 1rem;\"\u003eThis is a pretty confusing concept. If you aren't at least 70% clear on the previous paragraph, stop and re-read it, slowly and carefully. If you are at least 70% clear, come back and re-read it a couple more times after you finish this lesson. You might also re-visit the lesson on \u003ca href=\"modules/items/if66512394ffac0e83ff00474f70160c1\"\u003eWriting Functions\u003c/a\u003e, which includes an explanation of arguments and parameters. Now, we need to actually get the values from the form. If we open up the JavaScript console on the page and run:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; $(\u003cspan class=\"hljs-string\"\u003e\"input#person1\"\u003c/span\u003e).val();\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can see that this jQuery method returns the value from the input as a string. Since the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eappend()\u003c/code\u003emethod takes a string as an argument, we can update our code like this:\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$(document).ready(function() {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e    $(\"#blanks form\").submit(function(event) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var person1Input = $(\"input#person1\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var person2Input = $(\"input#person2\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var animalInput = $(\"input#animal\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var exclamationInput = $(\"input#exclamation\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var verbInput = $(\"input#verb\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var nounInput = $(\"input#noun\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".person1\").append(person1Input);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".person2\").append(person2Input);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".animal\").append(animalInput);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".exclamation\").append(exclamationInput);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".verb\").append(verbInput);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".noun\").append(nounInput);\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\"#story\").show();\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        event.preventDefault();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e    });\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e});\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eNow our page works. Hooray!\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThere's one last thing to fix, though. If you don't refresh the page and you change the value of one of the inputs, it just adds it after the first value, instead of replacing it. We need to replace the existing text rather than just appending to it:\u003ccode class=\"javascript hljs\"\u003e\u003cbr\u003e\u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e$(document).ready(function() {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e    $(\"#blanks form\").submit(function(event) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var person1Input = $(\"input#person1\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var person2Input = $(\"input#person2\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var animalInput = $(\"input#animal\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var exclamationInput = $(\"input#exclamation\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var verbInput = $(\"input#verb\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        var nounInput = $(\"input#noun\").val();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".person1\").text(person1Input);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".person2\").text(person2Input);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".animal\").text(animalInput);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".exclamation\").text(exclamationInput);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".verb\").text(verbInput);\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\".noun\").text(nounInput);\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        $(\"#story\").show();\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e        event.preventDefault();\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e    });\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e});\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e","frontPage":false},{"exportId":"monday-javascript-objects","title":"Monday: JavaScript Objects","type":"WikiPage","content":"\u003cp\u003eJavaScript is an object-oriented programming language. Though we may not have realized it, we've already been working with JavaScript objects when we use data types like strings and numbers, or when we use a data collection like arrays. Even the functions we write are also objects in JavaScript. In this lesson, we will explore what it means to be an object in JavaScript.\u003c/p\u003e\r\n\u003cp\u003ePreviously, we have had variables that have stored strings, numbers, Booleans, arrays and functions. What happens when we want a variable to store much more information about the \"thing\" the variable represents? For example, if\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyou\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewere a variable and we wanted to store information about you (your name, your course level, your planned track, your enrollment status) in the single variable \"moringaStudent\" - we'd need more than a single string or a single array, we'd need an object!\u003c/p\u003e\r\n\u003cp\u003eIn technical terminology, objects are containers that\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eencapsulate\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edata - meaning all of the relevant data and functions for the thing that the variable name represents are kept together in a \"capsule\", better known as an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eobject\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat can be created and manipulated in our programs as a single unit.\u003c/p\u003e\r\n\u003cp\u003eHere is an example of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003emoringaStudent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e moringaStudent = {\r\n  firstName: \u003cspan class=\"hljs-string\"\u003e\"Charlie\"\u003c/span\u003e,\r\n  lastName: \u003cspan class=\"hljs-string\"\u003e\"Obina\"\u003c/span\u003e,\r\n  level: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\r\n  track: [\u003cspan class=\"hljs-string\"\u003e\"Prep\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"JavaScript\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"Python\", \"Django\"\u003c/span\u003e],\r\n  enrollmentStatus: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n};  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's take a look at how this object is defined. We have our variable\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003emoringaStudent\u003c/code\u003e. We assign it the value of an object by using the curly braces,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e{ }\u003c/code\u003e. This is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eliteral notation\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand we have used it previously to create strings by using quotes,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e\" \"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand arrays by using brackets,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e[ ]\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eInside the curly braces are five properties for our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003emoringaStudent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject: first name, last name, level, track, and enrollment status. Every property of a JavaScript object consists of a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ekey-value\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003epair. The\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ekey\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the variable that describes the kind of information to be stored. The\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003evalue\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the specific value of the key. So, in our example, the first name property has a key called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efirstName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand a value of \"Charlie\", the last name property has a key\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elastName\u003c/code\u003e, with a value of \"Obina\" and so on, with the remaining keys\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elevel\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etrack\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eenrollmentStatus\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eEach key-value pair is separated by a colon. And pairs are separated from each other with a comma.\u003c/p\u003e\r\n\u003cp\u003eWe could write our object like this and it would also work:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e moringaStudent = {firstName: \u003cspan class=\"hljs-string\"\u003e\"Charlie\"\u003c/span\u003e, lastName: \u003cspan class=\"hljs-string\"\u003e\"Obina\"\u003c/span\u003e, level: \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, track: [\"Prep\",\"JavaScript\",\"Python\", \"Django\"], enrollmentStatus: \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e};  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, the formatting of the object with each property indented two spaces on a separate line is a convention used when writing JavaScript objects to make it easy to see each property. Imagine an object with hundreds of properties written on the same line. It would be a bit of a challenge to sort out the details.\u003c/p\u003e\r\n\u003cp\u003eProperty keys are always a JavaScript string (though quotes are not needed in this context) that starts with a letter. Property values can be any data type: strings, numbers, Booleans, arrays or even functions. When the value of a property is a function, we call it a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emethod\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eHere is an object with one property and one method. This method when called will make my cat \"speak\" by writing \"Meow\" to the console. (Previously, we have used\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003econsole.log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust for debugging, but we can use it for any message we'd like to see in the console.)\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myCat = {\r\n  name: \u003cspan class=\"hljs-string\"\u003e\"Kitty Kanyau\"\u003c/span\u003e,\r\n  speak: \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Meow!\"\u003c/span\u003e);\r\n  }\r\n};  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo keep it simple, you can think of properties as nouns, and methods as verbs or actions.\u003c/p\u003e\r\n\u003cp\u003eSo, once we have an object, how do we use it? What do we do with the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ename\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003espeak\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod?\u003c/p\u003e\r\n\u003cp\u003eTo access properties and methods on objects, we can use either\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edot notation\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebracket notation\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; myCat.name\r\n  \u003cspan class=\"hljs-string\"\u003e\"Kitty Kanyau\"\u003c/span\u003e\r\n\u0026gt; myCat[\u003cspan class=\"hljs-string\"\u003e'name'\u003c/span\u003e]\r\n  \u003cspan class=\"hljs-string\"\u003e\"Kitty Kanyau\"\u003c/span\u003e\r\n\u0026gt; myCat.speak()\r\n  Meow!\r\n\u0026gt; myCat[\u003cspan class=\"hljs-string\"\u003e'speak'\u003c/span\u003e]()\r\n  Meow!  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eDot notation is easier to write and read, but bracket notation will additionally allow us to use properties with special characters, or select properties using variables. Until we need the additional functionality, we'll stick with dot notation.\u003c/p\u003e\r\n\u003cp\u003eLet's create an empty new dog object. We use the curly braces to signal JavaScript to create a new object.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog = {};\r\n  \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe built-in JavaScript function that creates a new dog object returns the value of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eundefined\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebut if we type\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can see that an empty object has been created for the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable.\u003c/p\u003e\r\n\u003cp\u003eNow, let's give our dog some properties using dot notation. Here, our values are a string and a number\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; dog.name = \u003cspan class=\"hljs-string\"\u003e\"Bark Simba\"\u003c/span\u003e\r\n  \u003cspan class=\"hljs-string\"\u003e\"Bark Simba\"\u003c/span\u003e\r\n\u0026gt; dog.age = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's add an array for a property value:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; dog.colors = [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e]\r\n  [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e]  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe value of a property comes with all of the functionality of its type. For example, we are able to use indexing on the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecolors\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray as we've done with other arrays.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; dog.colors[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]\r\n  \u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e\r\n\u0026gt; dog.colors[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]\r\n  \u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can use array methods on\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecolors\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elike\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003epush\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003ewhich returns the new length of the array:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; dog.colors.push(\u003cspan class=\"hljs-string\"\u003e\"gray\"\u003c/span\u003e);\r\n  \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e\r\n\u0026gt; dog.colors\r\n  [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"gray\"\u003c/span\u003e]  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNumber methods on\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eage\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; dog.age = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n\u0026gt; dog.age + \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\r\n  \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can also update any property by reassigning its value:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs bash\"\u003e\u0026gt; dog.name = \u003cspan class=\"hljs-string\"\u003e\"Rex\"\u003c/span\u003e\r\n  \u003cspan class=\"hljs-string\"\u003e\"Rex\"\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add a method to our dog. This will be a property with a function as a value. In this case, we'll give our dog some\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ehowl\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunctionality.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs javascript\"\u003e\u0026gt; dog.howl = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{ \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Aaaaaaaaaaaoooooooooooo!\"\u003c/span\u003e) }\r\n\u0026gt; dog.howl()\r\n  Aaaaaaaaaaaoooooooooooo!  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWith objects, we can use properties within other properties. What if we decided we wanted to calculate our dog's age in human years? Let's add another method to our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; dog.humanYears = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age * \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e}\r\n  \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age * \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e}  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ehumanYears\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction has a keyword of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e. When\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis used in an object's method, it always refers to the object on which the method is called. So, when we run\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog.humanYears()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill always refer to the object,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog\u003c/code\u003e. (\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecan also be used in other places, but it gets tricky depending on its context and we won't cover it in detail here.)\u003c/p\u003e\r\n\u003cp\u003eNow when we run\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003edog.humanYears()\u003c/code\u003e, we get 35.\u003c/p\u003e\r\n\u003ch3\u003eAdditional Practice\u003c/h3\u003e\r\n\u003cp\u003eIn the JavaScript console, practice creating objects of your own. Feel free to follow along with this lesson or explore some objects of your own. Here is some guided practice to try.\u003c/p\u003e\r\n\u003cp\u003eCreate an object that stores information about a flower including name, color, and height.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eChange the color of your flower using dot notation.\u003c/li\u003e\r\n\u003cli\u003eChange the height of your flower using bracket notation.\u003c/li\u003e\r\n\u003cli\u003eAdd a property that indicates what kind of creatures help the flower with pollination. This includes bees, butterflies, and birds.\u003c/li\u003e\r\n\u003cli\u003eAdd one more creature to your list: humans\u003c/li\u003e\r\n\u003cli\u003eWrite a method that allows the flower to grow. After the method is run, the height value should be increased.\u003c/li\u003e\r\n\u003cli\u003eView all of the properties and methods for your flower object.\u003c/li\u003e\r\n\u003cli\u003eExplore viewing, adding and updating more properties and methods on your flower object.\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli\u003eTry using some of the string, number and array methods you have used before on the properties that store these types of data.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"thursday-practice-divs-and-spans","title":"Thursday: Practice: Divs and Spans","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice adding divs and spans to pages.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between divs and spans?\u003c/li\u003e\r\n\u003cli\u003eIf I wanted to highlight a specific phrase in a paragraph, would it be better to use a div or a span?\u003c/li\u003e\r\n\u003cli\u003eIf I wanted to highlight a group of paragraphs, would it be better to use a div or a span?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson to create the webpage about wildcats, dividing the page into important and unimportant sections. Then, choose one (or several) of the following to practice using divs and spans to style the page.\u003c/p\u003e\r\n\u003ch3\u003eTravel Agency\u003c/h3\u003e\r\n\u003cp\u003ePull up the page you made for Happy Trails Travel Agency and rewrite it to remove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etropical\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epopular\u003c/code\u003eclasses from the elements themselves, and use divs instead.\u003c/p\u003e\r\n\u003ch3\u003eNews Article\u003c/h3\u003e\r\n\u003cp\u003eRewrite the news article webpage by removing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintroduction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass from the elements themselves and create a div with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintroduction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to hold the elements.\u003c/p\u003e\r\n\u003ch3\u003eResume\u003c/h3\u003e\r\n\u003cp\u003eCreate a webpage to display your resume. Use divs and spans to style sections of the page to list your work experience, skills, education, contact info, and any other sections you'd like your resume to have.\u003c/p\u003e","frontPage":false},{"exportId":"monday-practice-operators","title":"Monday: Practice - Operators","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Assignment and Comparison Operators lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e===\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eassignment operator\u003c/li\u003e\r\n\u003cli\u003eComparison operators, including\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e===\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTake time to practice using each of these operators by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between a comparison operator and an assignment operator?\u003c/li\u003e\r\n\u003cli\u003eWhat is a boolean? What does it represent?\u003c/li\u003e\r\n\u003cli\u003eHow is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator different than the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003ePractice assigning and comparing:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSet two variables equal to two different numbers. Use a comparison operator to compare these two variables. Change one of their values by using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+=\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-=\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e*=\u003c/code\u003e, or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e/=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator. Then, compare their values again.\u003c/li\u003e\r\n\u003cli\u003eTry out the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperators.\u003c/li\u003e\r\n\u003cli\u003eTry to use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e!==\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-installing-bootstrap","title":"Monday: Installing Bootstrap","type":"WikiPage","content":"\u003cp\u003eNow that we've seen some of the benefits to using a front-end framework such as Bootstrap, let's walk through how to download it and use it in one of our own projects.\u003c/p\u003e\r\n\u003cp\u003eThere are several ways to go about using Bootstrap in our own projects. In this lesson, we will cover two of the simplest options.\u003c/p\u003e\r\n\u003cp\u003eFirst, navigate to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/\" target=\"_blank\"\u003eBootstrap's website\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDownload\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton on the front page. This will take you to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDownloads\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epage, which gives you three options to get started, each one suited for different skill levels and use cases.\u003c/p\u003e\r\n\u003cp\u003eClick on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDownload Bootstrap\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton in the first option. This will start a download of a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap-3.3.7-dist.zip\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(the version number at the time of this writing was 3.3.7, but your download may have a different number - that's perfectly fine). The extension of the download is\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.zip\u003c/em\u003e, which is a file format that compresses files to reduce their size, making downloads faster. In order to access the files it contains, we need to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eunzip\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe folder, which is as simple as double-clicking the downloaded folder.\u003c/p\u003e\r\n\u003ch2\u003eBootstrap Contents\u003c/h2\u003e\r\n\u003cp\u003eThe downloaded folder should contain folders named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003efonts\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e, each containing several files. The file structure looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-02-bootstrap_filestructure.png\" alt=\"MP-W1D4-02-bootstrap_filestructure.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1413\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eHere's a rundown of what each of these folders contain:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder contains the Bootstrap stylesheet in a variety of formats.\r\n\u003cul\u003e\r\n\u003cli\u003eThere are several files named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap\u003c/em\u003e. They are all different formats of the same stylesheet that we will be using in our projects.\u003c/li\u003e\r\n\u003cli\u003eThere are also several files named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap-theme\u003c/em\u003e. They are also different formats of the same stylesheet. This one is optional, and provides a visually-enhanced Bootstrap theme. It contains additional styles that work with animations and visual effects. For now, we will only focus on using the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.min\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eextension indicates a minified file. Minified means that characters not necessary for computers to understand the code have been removed (such as whitespace). The functionality stays the same, but the file is much smaller and faster to use.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.map\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles are used with development tools called CSS preprocessors, which extend the functionality of CSS. We will not be using CSS preprocessors in this course, so we will not use\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.map\u003c/em\u003efiles either.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003efonts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder contains a variety of useful icons, called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eglyphicons\u003c/em\u003e, in different formats. See the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/\" target=\"_blank\"\u003eBootstrap documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor the available icons. We will learn how to use these in an upcoming lesson.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder contains JavaScript code for animations and visual effects. You can see more information\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/javascript/\" target=\"_blank\"\u003ehere\u003c/a\u003e. For now, we will not focus on this folder as much and instead be getting familiar with the contents of the \u003cem\u003ecss\u003c/em\u003e folder to strengthen our basics.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdding Bootstrap to a Project\u003c/h2\u003e\r\n\u003cp\u003eIn our projects, we will be using either\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.min.css\u003c/em\u003e. These files both contain the same CSS, but the second one is a minified version.\u003c/p\u003e\r\n\u003cp\u003eThese files are CSS stylesheets just like the CSS we've been writing, and we include them in our projects in exactly the same way. To use either of these CSS files in a project, we simply need to add the file to the project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/p\u003e\r\n\u003cp\u003eNow that the stylesheet is in the project's \u003cem\u003ecss\u003c/em\u003e folder, we need to link it in in the website's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esection:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e =\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eExample Page Title\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou can actually link your own stylesheet along with Bootstrap's stylesheet. HTML allows you to link as many stylesheets as you want! Because of cascading, the order of the stylesheets matters, and your own custom stylesheets must be linked after the Bootstrap stylesheet. We'll learn more about using custom CSS alongside Bootstrap in an upcoming lesson.\u003c/p\u003e\r\n\u003ch2\u003eBootstrap CDN\u003c/h2\u003e\r\n\u003cp\u003eAnother option for linking Bootstrap in your project is to link to the CDN, which stands for content delivery network. We'll cover what this means in a second, but first, let's see how to include it. On the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u003ca href=\"http://getbootstrap.com/getting-started/#download\" target=\"_blank\"\u003eDownloads\u003c/a\u003e\u003c/em\u003e page (the same one we visited above) underneath the links to download the Bootstrap files, there is a list of CDN links:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-03-bootstrap_cdn_links.png\" alt=\"MP-W1D4-03-bootstrap_cdn_links.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1414\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eA CDN is a network of servers that store content and deliver it to users. In other words, the Bootstrap stylesheets are hosted online at the addresses above, and we can link to the online address instead of including the actual files in our project and linking to our local copies of the files.\u003c/p\u003e\r\n\u003cp\u003eNotice how the links from the Bootstrap website look similar to how we include stylesheets in our projects? We'll actually include them in the same way. Just copy and paste a CDN link into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof your webpage:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eintegrity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ecrossorigin\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"anonymous\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eExample Page Title\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor now, just use the first CDN link provided, because it does not include any JavaScript.\u003c/p\u003e\r\n\u003cp\u003eDepending on the size of the files, linking to the CDN can really cut down on the resources and time required to load a website. The downside of using the CDN is that you need an internet connection to use it because the project needs to access the stylesheet from the online location for the CSS to load.\u003c/p\u003e","frontPage":false},{"exportId":"monday-business-and-user-interface-logic","title":"Monday: Business and User Interface Logic","type":"WikiPage","content":"\u003cp\u003eWell-organized code is easier to debug, it appears more professional, and is easier to revisit later. Writing organized code is a highly-valued skill in the programming field. When working on a team, you'll often collaborate with other developers. Clean code is easier for others to understand and contribute to. Before we begin writing more complex JavaScript, let's make sure we understand how to organize our code using best, most professional practices from the very beginning.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eOne of the most important organizational rules to follow is keeping what is known as your user interface and business logic separate. We haven't written any user interface logic\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyet\u003c/em\u003e, but we will in upcoming lessons. In this lesson we'll explore what user interface and business logics are, and what each handles.\u003c/p\u003e\r\n\u003ch3\u003eUser Interface and Business Logics\u003c/h3\u003e\r\n\u003cp\u003eConsider a basic calculator application. Its code falls into two categories: code that performs calculations, and code responsible for interacting with the user.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThe code that handles arithmetic is the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eback-end\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebusiness logic\u003c/strong\u003e. It's the 'inner workings' of the application that performs calculations and returns a value. It's what takes the numbers\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e, adds them together, and arrives at\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e9\u003c/code\u003e. The functions we've explored so far are all back-end logic.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThe code that handles interacting with user is the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efront-end\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003euser interface\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003elogic. It retrieves information from the user and provides it to the business logic to calculate. While buttons on a calculator may be\u003cspan\u003e \u003c/span\u003e\u003cem\u003elabeled\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith numbers, they're just visual buttons. User interface logic is what translates clicking on this area of the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Tuesday/button-on-calculator.png\" alt=\"button-on-calculator.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1685\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e... into the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e4\u003c/code\u003e. After all, we cannot perform addition on\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuttons\u003c/em\u003e, but you can perform addition on\u003cspan\u003e \u003c/span\u003e\u003cem\u003enumbers\u003c/em\u003e. The user interface logic registers that the user has pushed the button labelled \"4\". It then provides the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the back-end logic where we may perform calculations with it.\u003c/p\u003e\r\n\u003cp\u003eLet's say we also press the buttons labelled \"+\" and \"5\". The user interface logic also translates these interactions into the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand recognizes it will need a method for addition. The back-end logic then adds the numbers\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etogether, and returns\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e9\u003c/code\u003e. The front-end/user interface logic can then display this result to the user:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Tuesday/result-displayed-from-calculator.png\" alt=\"result-displayed-from-calculator.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1687\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eUser interface/front-end logic handles interacting with the user; including displaying or gathering information. The business/back-end logic handles calculating or manipulation information 'behind the scenes'.\u003c/p\u003e\r\n\u003ch3\u003eSeparation of Logic\u003c/h3\u003e\r\n\u003cp\u003eRemember, we want to write clean, well-organized code.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eBecause user interface and business logics have separate purposes, their code should always be separate\u003c/strong\u003e. So far, we've only written business logic, so we don't have much to worry about. But keep this rule in mind as we begin to explore user interface logic with jQuery in the coming lessons.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eAlso, it's okay if everything we discussed isn't entirely clear right now. Just understand the basic differences between these two logics, and know they should be separate. Throughout the week we will see what this actually looks like in practice. By keeping this basic information in mind before we write more complex JavaScript, you'll learn the most professional practices from the very beginning!\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eYou may check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://blog.teamtreehouse.com/i-dont-speak-your-language-frontend-vs-backend\" target=\"_blank\"\u003ethis blog by Treehouse\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor more information on front-end vs back-end in the context of web development.\u003c/p\u003e","frontPage":false},{"exportId":"monday-strings","title":"Monday: Strings","type":"WikiPage","content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe’ve done some work with numbers. Now let’s work with words!\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"Hello world\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Hello world\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA series of characters inside of quotation marks, like \u003ccode\u003eHello world\u003c/code\u003e above, is called a \u003cstrong\u003estring\u003c/strong\u003e. Strings can contain any number of letters, punctuation, and even numbers. Let's see a few more:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"12345\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"12345\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"Hello, world!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Hello, world!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"Isn't learning fun? :)\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Isn't learning fun? :)\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat happens when we use a series of characters without the quotation marks?\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; hello\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eUncaught ReferenceError: hello is not defined\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe console is telling us that it doesn't know what we mean with \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ehello\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e without the quotation marks. Without quotation marks, JavaScript sees \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ehello\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e as a variable, which has not been defined yet.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can declare a variable as a string:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var hello = \"Hello world!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; hello\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Hello world!\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eYou may be wondering how we can have a string that contains quotation marks, since quotation marks are used to enclose strings. We can do this in a couple of ways.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHere is the first option:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"Someone once told me, \\\"Any sufficiently advanced technology is indistinguishable from magic.\\\"\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Someone once told me, \"Any sufficiently advanced technology is indistinguishable from magic.\"\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe used \u003ccode\u003e\\\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e as an escape character, which tells JavaScript that the character right after doesn’t have any special meaning, and is another character in the string.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAnother option is to use single quotes:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 'Someone once told me, \"Any sufficiently advanced technology is indistinguishable from magic.\"'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Someone once told me, \"Any sufficiently advanced technology is indistinguishable from magic.\"\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn general, it doesn’t really matter if you use single quotes or double quotes to declare a string. If you have a string that contains a lot of quotation marks, it might be a bit simpler to just use single quotes. Whether you use single quotes or double quotes, just remember that it is important that your code is consistent.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-navigating-bootstrap-documentation","title":"Monday: Navigating Bootstrap Documentation","type":"WikiPage","content":"\u003cp\u003eAll right, we've gone over some of the basics of Bootstrap. But Bootstrap is a huge framework - the unminified CSS file alone has more than 6700 lines of code! It simply would not be feasible for us to cover every single feature.\u003c/p\u003e\r\n\u003cp\u003eInstead, we are going to spend some time in this lesson going over how to navigate and use the Bootstrap documentation. That way, you will be able to take advantage of any of the features provided by Bootstrap whenever you need to!\u003c/p\u003e\r\n\u003cp\u003eBeyond the scope of Bootstrap, the ability to efficiently navigate and reference documentation is one of the most important skills to build as a web developer. Even developers with years of experience don't just sit down and start coding everything from memory - often they have an idea of what they would like to accomplish, and getting there is a continual process of referencing documentation and experimenting with code until something works.\u003c/p\u003e\r\n\u003cp\u003eYou will undoubtedly need to navigate documentation both throughout your journey as a student at Moringa and as you start work as a developer. The documentation for Bootstrap is well-organized and contains clear explanations and examples. It's a great resource to start learning more about Bootstrap, but it's also a great way to start familiarizing yourself with the process of navigating documentation.\u003c/p\u003e\r\n\u003cp\u003eWe've actually already been navigating the Bootstrap documentation as we've been getting familiar with the framework over the past few lessons. We have referenced the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/getting-started/\" target=\"_blank\"\u003eGetting Started\u003c/a\u003e\u003cspan\u003e \u003c/span\u003epage, the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/\" target=\"_blank\"\u003eCSS\u003c/a\u003e\u003cspan\u003e \u003c/span\u003epage, and the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/\" target=\"_blank\"\u003eComponents\u003c/a\u003e\u003cspan\u003e \u003c/span\u003epage. Generally, the sections we will reference the most are the CSS and Components pages. The navigation bar at the top of the page includes links to each of these sections:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-11-navigation_links.png\" alt=\"MP-W1D4-11-navigation_links.png\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eCSS\u003c/h2\u003e\r\n\u003cp\u003eBootstrap's CSS section contains information on Bootstrap's extensions on standard HTML elements, such as headers, tables, buttons, images, the grid system, and so on.\u003c/p\u003e\r\n\u003ch2\u003eComponents\u003c/h2\u003e\r\n\u003cp\u003eThe components section includes resources on Bootstrap elements that exist on their own, and are not simply re-styled HTML elements. Many custom components have been created, including jumbotrons, panels, wells, navigation bars, icons, and more.\u003c/p\u003e\r\n\u003ch2\u003eNavigation Sidebar\u003c/h2\u003e\r\n\u003cp\u003eEach page of the Bootstrap documentation has a handy sidebar on the right of the page for easy navigation. You can see what features are available at a glance. Clicking on any item navigates to the documentation for that element.\u003c/p\u003e\r\n\u003ch3\u003eCSS\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-12-css_nav_sidebar.png\" alt=\"MP-W1D4-12-css_nav_sidebar.png\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eComponents\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-13-components_nav_sidebar.png\" alt=\"MP-W1D4-13-components_nav_sidebar.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eSelect\u003cspan\u003e \u003c/span\u003e\u003cem\u003eProgress bars\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eunder\u003cspan\u003e \u003c/span\u003e\u003cem\u003eComponents\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eso that we can walk through some of the features of the documentation together.\u003c/p\u003e\r\n\u003cp\u003eEvery entry in the Bootstrap documentation will contain a description of the element, sections with headings for each of the ways that you can customize the element, examples of what it looks like on the page, and code samples.\u003c/p\u003e\r\n\u003cp\u003eFor example, in the progress bars entry, we see that we have several options. The first two are\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBasic example\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003eWith label\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-14-progress_bars_example.png\" alt=\"MP-W1D4-14-progress_bars_example.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBoth examples show us what the component looks like on the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-15-progress_bars_example_02.png\" alt=\"MP-W1D4-15-progress_bars_example_02.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eUnderneath, some sample code is provided for you to use the element in your own page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-16-progress_bars_example_code.png\" alt=\"MP-W1D4-16-progress_bars_example_code.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eGo ahead and explore the documentation for yourself! You're not going to understand everything in the documentation at this point, and that's okay. Again, navigating documentation is a skill, and the only way to get better is to practice. As you start using Bootstrap in your own projects, explore the documentation and implement features beyond the ones we've covered over the past few lessons.\u003c/p\u003e\r\n\u003ch2\u003eJavaScript Documentation\u003c/h2\u003e\r\n\u003cp\u003eIt's worth noting that there are several Bootstrap elements that have visual effects or animations (such as dropdown menus, modal windows, etc.) - but these require JavaScript. We won't begin exploring JavaScript until next week, nor are you required to begin implementing any Bootstrap elements with visual effects.\u003c/p\u003e\r\n\u003cp\u003eHowever, if you'd like to optionally explore these effects and elements in your own projects, you're welcome to. Just note that any Bootstrap elements that have animations will not work unless Bootstrap's own JavaScript files are also linked.\u003c/p\u003e\r\n\u003cp\u003eFor now, the easiest way to do this is to include the CDN link to Bootstrap's JavaScript file in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003etags of your HTML document:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-17-bootstrap_js_cdn.png\" alt=\"MP-W1D4-17-bootstrap_js_cdn.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs you will soon experience, the web is constantly growing and evolving, and the best way to keep up is to be able to adapt to these changes. More likely than not, you will eventually be asked to use a language or technology you've never seen before. Practice navigating unfamiliar documentation now, and you'll be better prepared when the situation arises again.\u003c/p\u003e","frontPage":false},{"exportId":"monday-literal-notation-vs-constructors","title":"Monday: Literal Notation vs Constructors","type":"WikiPage","content":"\u003ch2\u003eLiteral Notation\u003c/h2\u003e\r\n\u003cp\u003eIn the previous lesson, we created objects using\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eliteral notation\u003c/strong\u003e. Let's explore further examples of what literal notation looks like, and how the process of creating objects may be streamlined by using constructors.\u003c/p\u003e\r\n\u003cp\u003eLet's say a dog walker wants to keep track of all dogs they walk.\u003c/p\u003e\r\n\u003cp\u003eWe'll create a dog object using literal notation:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog1 = {\r\n  name: \u003cspan class=\"hljs-string\"\u003e\"Falcor\"\u003c/span\u003e,\r\n  colors: [\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e],\r\n  age: \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\r\n};  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we'll create another:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog2 = {\r\n  name: \u003cspan class=\"hljs-string\"\u003e\"Nola\"\u003c/span\u003e,\r\n  colors: [\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e],\r\n  age: \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e,\r\n};  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd another:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog3 = {\r\n  name: \u003cspan class=\"hljs-string\"\u003e\"Patsy\"\u003c/span\u003e,\r\n  colors: [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e],\r\n  age: \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e,\r\n};  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou may notice that this is getting a little repetitive. All of these dogs have the same attributes, and therefore this involves typing\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ename\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecolors\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eage\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eover and over again, each time we want to create a new dog. Good news is, there is a much faster way to make\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects! Instead of using literal notation to manually create each individual\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, we can use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eConstructor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas a blueprint.\u003c/p\u003e\r\n\u003ch2\u003eConstructors\u003c/h2\u003e\r\n\u003cp\u003eWe will write a constructor to create\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects momentarily, but first, what\u003cspan\u003e \u003c/span\u003e\u003cem\u003eis\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea constructor? The next lesson will introduce constructors and demonstrate how we can use constructors and prototypes to make our lives easier.\u003c/p\u003e\r\n\u003cp\u003eAfter we write a constructor we'll be able to create the same dogs we created in literal notation above, with these three simple lines of code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog1 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Falcor\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog2 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Nola\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dog3 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Patsy\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e);  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you can see, this is\u003cspan\u003e \u003c/span\u003e\u003cem\u003efar\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eless code, and it's much more scaleable!\u003c/p\u003e","frontPage":false},{"exportId":"monday-string-methods","title":"Monday: String Methods","type":"WikiPage","content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can call methods on strings, too!\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"I love JavaScript\".toUpperCase();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"I LOVE JAVASCRIPT\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eJust like with numbers, we can call these methods on variables that represent strings:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var statement = \"LOREM IPSUM\";\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; statement.toLowerCase();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"lorem ipsum\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can combine strings:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"pine\".concat(\"apple\");\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"pineapple\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003econcat\u003c/code\u003e stands for \"concatenate\", which means that it combines the strings into one. Here's a shortcut for the \u003ccode\u003e.concat()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e method:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"example \" + \"here\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"example here\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can even chain methods together. Here's what that looks like:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"I am \".concat(\"so excited\").toUpperCase();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"I AM SO EXCITED\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe return value of the first part of the above example, \u003ccode\u003e\"I am \".concat(\"so excited\")\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, is a string (\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"I am so excited\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e), so we can use the string method \u003ccode\u003etoUpperCase\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e on it.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eString methods can take arguments just like number methods. Here's an example:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"spider\".charAt(1);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"p\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003echarAt\u003c/code\u003e means \"character at\", and it returns the character at the position in the string that we've specified with the argument. The character at position 1 of \"spider\" is \"p\" - does that seem strange? With how we would normally count, the first character would be \"s\". However, computers count a little differently, and start at 0. So, if we want the first letter of a string, we ask for the character at \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eposition 0\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e, like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \"spider\".charAt(0);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"s\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe aren't restricted to using numbers as arguments. Arguments can be anything that the method will use to do an action. Some methods take strings as an argument:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var stringToSearch = \"Please show me where 'show' is located!\";\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; stringToSearch.search(\"show\");\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e7\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eCan you see what the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003esearch\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e method does? It returns the position in a string of the first letter of the string in the argument.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSome methods take multiple arguments:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var fruitList = \"papaya, melon, avocado\";\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; fruitList.slice(8, 13);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"melon\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe \u003ccode\u003e.slice()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e method extracts a part of a string and returns that part in a new string. It takes 2 arguments: the starting position and the ending position. In our example, we wanted the portion of \u003ccode\u003efruitList\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e that start at position 8 and ends at position 13, and the method returned \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"melon\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe've learned a few string methods in this lesson, but this is by no means an exhaustive list. If you're interested to explore some more possibilities with string methods, you're welcome to check out the reference on \u003ca href=\"https://www.w3schools.com/js/js_string_methods.asp\"\u003eW3Schools\u003c/a\u003e.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-practice-customizing-bootstrap","title":"Monday: Practice: Customizing Bootstrap","type":"WikiPage","content":"\u003cp\u003eGoal: Implement the Bootstrap grid in a project and understand how it works.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat are some of the benefits of using the Bootstrap grid system?\u003c/li\u003e\r\n\u003cli\u003eHow are rows used in the grid system?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol-md-4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol-md-12\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol-md-4\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol-xs-4\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eHow many columns can fit in a row?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eContinue working on your friend's catering website.\u003c/p\u003e\r\n\u003cp\u003eFor the meals offered, include the following information: meal name, price, ingredients, allergens, and picture. Organize this information in a grid.\u003c/p\u003e\r\n\u003cp\u003eAdd your own stylesheet to customize the appearance of the site.\u003c/p\u003e","frontPage":false},{"exportId":"monday-practice-strings","title":"Monday: Practice - Strings","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Strings lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eStrings can include letters, punctuation and numbers\u003c/li\u003e\r\n\u003cli\u003eStrings are surrounded with quotation marks\u003c/li\u003e\r\n\u003cli\u003eVariables can be set equal to strings\u003c/li\u003e\r\n\u003cli\u003eTo escape characters use the \u003ccode\u003e\\\u003c/code\u003e character\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePractice using this fundamental building block of programming by completing the exercises below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do we declare a string?\u003c/li\u003e\r\n\u003cli\u003eDo strings require single or double quotes?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eType a greeting to your best friend.\u003c/li\u003e\r\n\u003cli\u003eSet a variable equal to a string and then display the variable's contents\u003c/li\u003e\r\n\u003cli\u003eWhat happens when you add the string \u003ccode\u003e\"9\"\u003c/code\u003e to the number \u003ccode\u003e9\u003c/code\u003e? Make sure you're clear on the difference between \u003ccode\u003e\"9\"\u003c/code\u003e with quotes and \u003ccode\u003e9\u003c/code\u003e without.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-address-book-with-constructors","title":"Monday: Address Book with Constructors","type":"WikiPage","content":"\u003cp\u003eNow that we have a basic understanding of JavaScript objects, let's put them to work! In the next few lessons we'll build an address book application to store contact information for our friends and acquaintances. Once complete, our application will look and function something like\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://mgoren.github.io/address-book/address-book.html\" target=\"_blank\"\u003ethis\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eSince each contact will have multiple properties, we will use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eJavaScript objects to encapsulate data. And since each contact will have the same properties (such as name, phone number, etc.) we can create a single\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor to make many unique contacts with the same properties. This means we will have a single function that defines every property for a contact object.\u003c/p\u003e\r\n\u003cp\u003eEach entry in our address book (or,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject) should have a first name and last name. As such, we'll begin creating our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efirstName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elastName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperties, and include additional properties later on. We'll also create a prototype that retrieves a contact object's full name.\u003c/p\u003e\r\n\u003ch2\u003eContact Constructor\u003c/h2\u003e\r\n\u003cp\u003eBefore we begin, let's experiment in the JavaScript console:\u003c/p\u003e\r\n\u003cp\u003eHere's a basic \u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName = first;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName = last;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's copy and paste this into the JavaScript console so that we can explore how this works before beginning our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{ \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName = first; \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName = last; }\r\n\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e ada = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Contact(\u003cspan class=\"hljs-string\"\u003e\"Ada\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Lovelace\"\u003c/span\u003e);\r\n\u0026gt; ada.firstName\r\n  \u003cspan class=\"hljs-string\"\u003e\"Ada\"\u003c/span\u003e\r\n\u0026gt; ada.lastName\r\n  \u003cspan class=\"hljs-string\"\u003e\"Lovelace\"\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhenever a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject is created, it is initialized with whatever first and last names we pass into the constructor as arguments. The line\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003evar ada = new Contact(\"Ada\", \"Lovelace\");\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecreates a new \u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e object by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor and passing it the strings \"Ada\" and \"Lovelace\". The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eada.firstName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty becomes \"Ada\" and the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eada.lastName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty becomes \"Lovelace\".\u003c/p\u003e\r\n\u003cp\u003eThe JavaScript console can also display a summary of the object, which is useful for debugging:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; ada\r\n  Contact {firstName: \u003cspan class=\"hljs-string\"\u003e\"Ada\"\u003c/span\u003e, lastName: \u003cspan class=\"hljs-string\"\u003e\"Lovelace\"\u003c/span\u003e}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we can see that the variable\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eada\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eholds an object that is an\u003cspan\u003e \u003c/span\u003e\u003cem\u003einstance\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype and that it has two properties -\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efirstName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the value \"Ada\" and\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elastName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the value \"Lovelace\".\u003c/p\u003e\r\n\u003cp\u003eNow that we've experimented with our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor, let's begin building our address book. First, we'll need to set up our JavaScript project directory. The image below details all files that will be used in our application:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/fvztlsg7bewqnd3/address-book-initial-files.png\" alt=\"Address book project directory\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eNote: Because we will continue to build on this same address book project over the next few lessons, example repositories will be linked throughout for reference. These are simply a snapshot of the project at the given point in development; you're not required to do anything with these repositories.\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/cngondo/address-book\" target=\"_blank\"\u003e\u003cstrong\u003eExample GitHub Address Book Repo with Initial Files\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eNow, let's place our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor into\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName = first;\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName = last;\r\n  }\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eUser Interface Logic\u003c/h2\u003e\r\n\u003cp\u003eNow that our JavaScript\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor is in place, let's incorporate it into a web page through the user interface. First, we'll create a basic form that allows users to enter a contact's first and last names. Each new contact created through this form will be added to an ongoing list of\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtacts.\u003c/p\u003e\r\n\u003cp\u003eWe'll begin by adding this form, and a place to append newly-created contacts to:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003eaddress-book.html\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-html hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.12.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eAddress book\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eAddress book\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n       \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eAdd a contact:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-contact\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-first-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003eFirst name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-first-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-last-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003eLast name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-last-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAdd\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eContacts:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"contacts\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, the empty\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e\"contacts\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis where each new contact will be appended.\u003c/p\u003e\r\n\u003cp\u003eNext, we need some JavaScript in our jQuery callback that will collect the user input from the form, and assign it to variables. We'll use the input to create new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects with our constructor. Then, we'll append the new objects to our list for display to the user.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-comment\"\u003e// business logic\u003c/span\u003e\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName = first;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName = last;\r\n}\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e// user interface logic\u003c/span\u003e\r\n$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"form#new-contact\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n    event.preventDefault();\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedFirstName = $(\u003cspan class=\"hljs-string\"\u003e\"input#new-first-name\"\u003c/span\u003e).val();\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedLastName = $(\u003cspan class=\"hljs-string\"\u003e\"input#new-last-name\"\u003c/span\u003e).val();\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newContact = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Contact(inputtedFirstName, inputtedLastName);\r\n\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"ul#contacts\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;\u0026lt;span class='contact'\u0026gt;\"\u003c/span\u003e + newContact.firstName + \u003cspan class=\"hljs-string\"\u003e\"\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input#new-first-name\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input#new-last-name\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n  });\r\n}); \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we fire up our web page, each time we add a contact it is appended to the contact list. The line\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003evar newContact = new Contact(inputtedFirstName, inputtedLastName)\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecreates a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor and passing it the inputted data. The variable\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003enewContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enow refers to that newly created contact object, which knows its own \u003ccode class=\"prettyprint\"\u003efirstName\u003c/code\u003e and \u003ccode class=\"prettyprint\"\u003elastName\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWhat we've developed so far\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe accomplished without objects and just jQuery. Let's add another feature to our page that better illustrates how objects make a difference in managing and displaying data. When a user clicks on a contact in the list, they will see the contact's first and last names in a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ediv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the right of our form.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll update our HTML to add the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e\u0026lt;div\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhere the contact details will be shown. (This will be a second column, so it should go inside the\u003cspan\u003e \u003c/span\u003e\u003cem\u003erow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ediv but after the closing of the existing\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecol-md-6\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ediv.):\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003eaddress-book.html\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-html hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"show-contact\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eFirst name: \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"first-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLast name: \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"last-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll hide the \"show\" area at first, and add a class to make some elements look clickable:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-css hljs\"\u003e\u003cspan class=\"hljs-id\"\u003e#show-contact\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n}\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-class\"\u003e.contact\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecursor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e pointer\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-hexcolor\"\u003e#0088cc\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003e.contact\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003ehover {\r\n  text-decoration: underline\u003c/span\u003e\u003c/span\u003e;\r\n}  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eInside our form submit callback, after the code that appends the new contact to the list, we'll add this JavaScript to show the contact information when it is clicked:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e$(\u003cspan class=\"hljs-string\"\u003e\".contact\"\u003c/span\u003e).last().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"#show-contact\"\u003c/span\u003e).show();\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"#show-contact h2\"\u003c/span\u003e).text(newContact.firstName);\r\n  $(\u003cspan class=\"hljs-string\"\u003e\".first-name\"\u003c/span\u003e).text(newContact.firstName);\r\n  $(\u003cspan class=\"hljs-string\"\u003e\".last-name\"\u003c/span\u003e).text(newContact.lastName);\r\n});  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we didn't add\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elast()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e$(\".contact\")\u003c/code\u003e, each time a new contact was added, every element with the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass would show the information of the most recently added contact on click. By adding\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elast()\u003c/code\u003e, we only bind the event to most recently-inserted contact.\u003c/p\u003e\r\n\u003cp\u003eCan you imagine trying to keep track of everything on this page using just jQuery? Whew!\u003c/p\u003e\r\n\u003ch2\u003eBusiness Logic - Prototype Method\u003c/h2\u003e\r\n\u003cp\u003eInstead of listing only the first name in our list of contacts, let's create a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprototype so we can easily see the full name of each person in our address book. We don't need to add a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty, because each contact\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eincludes a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efirstName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elastName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty. We just need to add a prototype method that returns the full name based on those two properties.\u003c/p\u003e\r\n\u003cp\u003eWe'll add the following prototype method to the business logic section of our scripts:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-comment\"\u003e// business logic\u003c/span\u003e\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName = first;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName = last;\r\n}\r\n\r\nContact.prototype.fullName = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName + \u003cspan class=\"hljs-string\"\u003e\" \"\u003c/span\u003e + \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you can see, this method is meant to be called upon a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, and simply returns the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e's\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efirstName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elastName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperties concatenated together.\u003c/p\u003e\r\n\u003cp\u003eRemember, a prototype method is a method meant to be called on a specific type of object. For instance, the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects in our address book.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullName()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a prototype method because it's specifically meant to return the full name of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. Therefore, we define it in a special way that denotes the type of object this method is meant for when we state\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact.prototype.fullName = function()\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eUser Interface Logic to Use Prototype Method\u003c/h2\u003e\r\n\u003cp\u003eLet's also update our user interface logic to use our new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullName()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003cp\u003eThis line of code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javacript\"\u003e...\r\n  $(\"ul#contacts\").append(\"\u0026lt;li\u0026gt;\u0026lt;span class='contact'\u0026gt;\" + newContact.firstName + \"\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt;\");\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eShould be changed to reflect the following:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javacript\"\u003e...\r\n  $(\"ul#contacts\").append(\"\u0026lt;li\u0026gt;\u0026lt;span class='contact'\u0026gt;\" + newContact.fullName() + \"\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt;\");\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis will append the contact's full name, as returned from our new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullName()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprototype to our list of contacts, instead of just their first name. Perfect! In upcoming lessons we'll continue to build our address book application by adding address properties to\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-form-input-types","title":"Thursday: Form Input Types","type":"WikiPage","content":"\u003ch2\u003eForm Input Types\u003c/h2\u003e\r\n\u003cp\u003eWe've already seen how to gather input from text fields, but there are a variety of other types of form fields as well: Select boxes, radio buttons and checkboxes are perhaps the most prominent. HTML5, finalized in 2014 and now widely supported, also introduced a number of additional input types, including date, color, email, tel, url, number, and many others. See the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\"\u003eMDN\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor a full list of HTML input types. Bootstrap also has more information about them\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#forms-controls\"\u003ehere\u003c/a\u003e. Generally as you come across the need to gather input in a particular way, you'll do some research to figure out how to read input in that way. We'll introduce a few of the most common input field types. But first, a note of warning:\u003c/p\u003e\r\n\u003ch2\u003eAlways\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eyour Number Values\u003c/h2\u003e\r\n\u003cp\u003eJust because you mark your HTML input field as\u003cspan\u003e \u003c/span\u003e\u003cem\u003enumber, date\u003c/em\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cem\u003etel\u003c/em\u003e, don't expect it to come in as the JavaScript\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enumber\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003etype. Marking it in your html as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etype=\"number\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust means that the browser will do some preliminary checking to encourage the user to enter a number rather than some text. But when you use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.val()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto read the input, it will still come in as a JavaScript\u003cspan\u003e \u003c/span\u003e\u003cem\u003estring\u003c/em\u003e, not a\u003cspan\u003e \u003c/span\u003e\u003cem\u003enumber\u003c/em\u003e. The HTML input types mostly just help indicate to the user what type of input is expected and/or allow the user to more easily enter a value such as a date or color.\u003c/p\u003e\r\n\u003ch2\u003eSelect Boxes\u003c/h2\u003e\r\n\u003cp\u003eSimple select boxes (where the user can only select one item) are pretty easy to implement.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Week%202%20Thursday/select-box-form-input.png\" alt=\"select-box-form-input.png\" width=\"400\" height=\"115\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1697\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis goes inside the form in your html:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eselect\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"beverage\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003eCoffee\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003eTea\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003eKombucha\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003eWater\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eselect\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd this is one way to read out the value in your form submit event handler:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e beverage = $(\u003cspan class=\"hljs-string\"\u003e\"#beverage\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you wanted to instead give each option a value different from the text the user sees, you could change your select to look like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eselect\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"beverage\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\u0026gt;\u003c/span\u003eCoffee\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"2\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTea\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"3\"\u003c/span\u003e\u0026gt;\u003c/span\u003eKombucha\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4\"\u003c/span\u003e\u0026gt;\u003c/span\u003eWater\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eoption\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eselect\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when you gather the input with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(\"#beverage\").val()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eyou'll get \"1\", \"2\", \"3\" or \"4\". Note that they still come in as strings, so in this case you would probably want to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto convert the inputted data to a number.\u003c/p\u003e\r\n\u003ch2\u003eRadio Buttons\u003c/h2\u003e\r\n\u003cp\u003eRadio buttons allow the user to select one and only one option from a list.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Thursday/radio-button-form-input.png\" alt=\"radio-button-form-input.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1696\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eHere's an example of doing radio buttons (this would go inside the form in your html):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"flavor\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"chocolate\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echecked\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          Chocolate\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"flavor\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vanilla\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          Vanilla\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"radio\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"flavor\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003evalue\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"cookiesandcream\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          Cookies \u0026amp; Cream\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd a way to read the value selected:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javasript hljs javascript\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e flavor = $(\u003cspan class=\"hljs-string\"\u003e\"input:radio[name=flavor]:checked\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eCheckboxes\u003c/h2\u003e\r\n\u003cp\u003eCheckboxes work similarly to radio buttons, but allow users to select multiple options. Because we want to be able to collect all of a user's selections, we will first need to learn about something called an array, which we will do shortly. In its simplest form, an array is simply a list of multiple items packaged together.\u003c/p\u003e\r\n\u003ch2\u003eDate\u003c/h2\u003e\r\n\u003cp\u003eThe date input type provides an easier interface for users to browse, select, and input dates:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Thursday/date-select-form-input.png\" alt=\"date-select-form-input.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1694\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"born\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDate of birth:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"born\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"date\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dob = $(\u003cspan class=\"hljs-string\"\u003e\"#born\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eColor\u003c/h2\u003e\r\n\u003cp\u003eYou may not have seen this one before! The color form input type, when clicked, opens a special panel where users can fine-tune and select specific colors:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Thursday/color-select-form-input.png\" alt=\"color-select-form-input.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1693\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"color\"\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat is your favorite color?\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"color\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"color\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e favoriteColor = $(\u003cspan class=\"hljs-string\"\u003e\"#color\"\u003c/span\u003e).val();\r\n    \u003c/code\u003e\u003c/pre\u003e","frontPage":false},{"exportId":"wednesday-sass-with-gulp","title":"Wednesday: Sass with Gulp","type":"WikiPage","content":"\u003ch1\u003eSass with Gulp\u003c/h1\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eIn this lesson we're going to learn how to add CSS to our projects using\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eSass\u003c/strong\u003e, and compile it using gulp. Sass is a CSS preprocessor that lets you use things like variables and nesting to better organize your CSS.\u003c/p\u003e\r\n\u003cp\u003eFor example, here is a block of CSS:\u003c/p\u003e\r\n\u003cdiv\u003eSample css\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\u003cspan class=\"hljs-class\"\u003e.box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-hexcolor\"\u003e#d3d3d3\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-number\"\u003e3px\u003c/span\u003e solid black\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-number\"\u003e40px\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e80px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\u003c/span\u003e\r\n\u003cspan class=\"hljs-class\"\u003e.box\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e.button\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-weight\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e bold\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e center\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e white\u003c/span\u003e\u003c/span\u003e;\r\n}\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's use some Sass to organize this, and try it out in our example app. We'll create a folder called\u003cspan\u003e \u003c/span\u003e\u003cem\u003escss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto hold our Sass files. Then we'll add our first one, called\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.scss\u003c/em\u003e:\u003c/p\u003e\r\n\u003cdiv\u003escss/styles.scss\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e$\u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003egray \u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-hexcolor\"\u003e#d3d3d3\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-class\"\u003e.box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e $gray\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-number\"\u003e3px\u003c/span\u003e solid black\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-number\"\u003e40px\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e80px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  .button {\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-weight\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e bold\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e center\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e red\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e white\u003c/span\u003e\u003c/span\u003e;\r\n  }\u003c/span\u003e\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe have nested the rule for the button class inside of the rule for the box class. We are also using a variable,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$gray\u003c/code\u003e, instead of specifying the hex code multiple times. This way, if we want a different shade of gray later, we only need to change it in one place - where we declared the variable at the top of the file.\u003c/p\u003e\r\n\u003ch3\u003eInstalling Sass\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eTo learn more about Sass and install it yourself, see the official documentation\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://sass-lang.com/guide\" target=\"_blank\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eFirst, you must have Ruby installed. For Windows users, there is a handy\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://rubyinstaller.org/\" target=\"_blank\"\u003eRuby installer\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ewhich also gives you some command line tools. Mac users can install Ruby using\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://brew.sh/\" target=\"_blank\"\u003ehomebrew\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eFirst install homebrew:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs bash\"\u003e$ /usr/bin/ruby \u003cspan class=\"hljs-operator\"\u003e-e\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"\u003cspan class=\"hljs-variable\"\u003e$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u003c/span\u003e\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, install Ruby.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs bash\"\u003e$ ruby \u003cspan class=\"hljs-operator\"\u003e-e\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"\u003cspan class=\"hljs-variable\"\u003e$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u003c/span\u003e\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFinally, both Mac and Windows users can install Sass from the command line using:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egem install sass\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOn your machine, this command might produce errors if you are not running it with Administrative privileges. So you may have to use:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003esudo gem install sass\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLinux users also need to have\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.ruby-lang.org/en/downloads/\" target=\"_blank\"\u003eRuby installed\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand then they can enter this command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003esudo su -c \u003cspan class=\"hljs-string\"\u003e\"gem install sass\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eUsing Sass\u003c/h3\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eLet's learn how to use Gulp to process our Sass and turn it into vanilla CSS to be used in the browser. We will use two npm packages for it:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp-sass\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp-sourcemaps\u003c/code\u003e. Let's install them. We can use a handy shortcut and list both packages in one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enpm install\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs sql\"\u003e$ npm \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e gulp-sass gulp-sourcemaps \u003cspan class=\"hljs-comment\"\u003e--save-dev\u003c/span\u003e\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we will require them in our gulpfile.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sass = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'gulp-sass'\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sourcemaps = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'gulp-sourcemaps'\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we can add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecssBuild\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask to our gulpfile.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003egulp.task(\u003cspan class=\"hljs-string\"\u003e'cssBuild'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e gulp.src([\u003cspan class=\"hljs-string\"\u003e'scss/*.scss'\u003c/span\u003e])\r\n    .pipe(sourcemaps.init())\r\n    .pipe(sass())\r\n    .pipe(sourcemaps.write())\r\n    .pipe(gulp.dest(\u003cspan class=\"hljs-string\"\u003e'./build/css'\u003c/span\u003e));\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis task loads all source files inside of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder with the extension\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.scss\u003c/em\u003e. Then it processes them by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esourcemaps.init\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, followed by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esass\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esass\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod translates our files into normal CSS, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esourcemaps\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage adds some code which allows us to see which Sass files are responsible for each CSS rule that we see in the browser. This makes debugging a lot easier. The last two methods save our compiled CSS with its source maps in a destination folder called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eBy default, the same name will be used, so we will end up with a CSS file at the path\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e. Let's load this in our weather page, and add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earound the city input field using our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebox\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass from our styles. Let's also add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebutton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to the button, since it will be nested inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebox\u003c/code\u003e.\u003c/p\u003e\r\n\u003cdiv\u003eweather.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"build/css/vendor.css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"build/css/styles.css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"build/js/vendor.min.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"build/js/app.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eWeather\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eGet Weather Conditions From Anywhere!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"box\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"location\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEnter a location:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"location\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"button\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"weatherLocation\"\u003c/span\u003e\u0026gt;\u003c/span\u003eGet Current Humidity!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"showWeather\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp cssBuild\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand then\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp serve\u003c/code\u003e, we will see our new styles on our weather page.\u003c/p\u003e\r\n\u003cp\u003eHappily, we don't need to separate this\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecssBuild\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask into production and development build tasks because source maps are only loaded if the browser development tools are open, so there is no performance hit for including them in a production build.\u003c/p\u003e\r\n\u003ch3\u003eCompiling Sass Automatically\u003c/h3\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eLet's add a watcher for our SCSS files to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eserve\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask, so that they are built automatically whenever they are changed.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003egulp.watch([\u003cspan class=\"hljs-string\"\u003e\"scss/*.scss\"\u003c/span\u003e], [\u003cspan class=\"hljs-string\"\u003e'cssBuild'\u003c/span\u003e]);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn this case we don't need to call a separate build task from the watcher, we can call our existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecssBuild\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask and just add a call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrowserSync.stream()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eat the end to auto-inject our new CSS into the browser.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003egulp.task(\u003cspan class=\"hljs-string\"\u003e'cssBuild'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e gulp.src([\u003cspan class=\"hljs-string\"\u003e'scss/*.scss'\u003c/span\u003e])\r\n    .pipe(sourcemaps.init())\r\n    .pipe(sass())\r\n    .pipe(sourcemaps.write())\r\n    .pipe(gulp.dest(\u003cspan class=\"hljs-string\"\u003e'./build/css'\u003c/span\u003e))\r\n    .pipe(browserSync.stream());\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp serve\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand as soon as we edit and save one of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.scss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles, they will automatically be compiled into CSS and we can see the changes in the browser without a reload. Let's try changing the button background to green. Make sure the server is running, then we'll add a new variable for a particular shade of light green, and use it in the button's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebackground\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty.\u003c/p\u003e\r\n\u003cdiv\u003escss/styles.scss\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e$\u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003egray \u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-hexcolor\"\u003e#d3d3d3\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n$\u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003egreen \u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-hexcolor\"\u003e#75B975\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-class\"\u003e.box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e $gray\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-number\"\u003e3px\u003c/span\u003e solid black\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-number\"\u003e40px\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e80px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  .button {\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-weight\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e bold\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e center\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e $green\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e white\u003c/span\u003e\u003c/span\u003e;\r\n  }\u003c/span\u003e\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs soon as we save our\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.scss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile, we can see the button change color in the browser without requiring us to reload.\u003c/p\u003e\r\n\u003cp\u003eFinally, let's add our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecssBuild\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask to our global\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebuild\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask. Since it must be run whether or not we are making a production build, we can call this task at the bottom with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebower\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask. Also, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecssBuild\u003c/code\u003etask is independent of other tasks - we don't need to list it as a dependency anywhere, or include other tasks in its dependency array.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003egulp.task(\u003cspan class=\"hljs-string\"\u003e'build'\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e'clean'\u003c/span\u003e], \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (buildProduction) {\r\n    gulp.start(\u003cspan class=\"hljs-string\"\u003e'minifyScripts'\u003c/span\u003e);\r\n  } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n    gulp.start(\u003cspan class=\"hljs-string\"\u003e'jsBrowserify'\u003c/span\u003e);\r\n  }\r\n  gulp.start(\u003cspan class=\"hljs-string\"\u003e'bower'\u003c/span\u003e);\r\n  gulp.start(\u003cspan class=\"hljs-string\"\u003e'cssBuild'\u003c/span\u003e);\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd that's it! Now, our Sass will be compiled with our other build tasks when we run the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp build\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp build --production\u003c/code\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"monday-node-installation","title":"Monday: Node Installation","type":"WikiPage","content":"\u003ch2\u003eInstallations\u003c/h2\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003ch3\u003eNode.\u003c/h3\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eNode is a server-side runtime environment for Javascript. It allows us to run Javascript code on the terminal.\u003c/p\u003e\r\n\u003ch3\u003eLinux Installation\u003c/h3\u003e\r\n\u003ch4\u003eStep 1: Visit the node download page \u003c/h4\u003e\r\n\u003cp\u003e\u003ca class=\"external\" href=\"https://nodejs.org/en/download/package-manager/\" target=\"_blank\"\u003e\u003cspan\u003ehttps://nodejs.org/en/download/package-manager/\u003cspan class=\"screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003ch4\u003eStep 2: Scroll down to \u003cem\u003eInstalling Node.js via package manager \u003c/em\u003elink.\u003c/h4\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://moringaschool.instructure.com/courses/18/file_contents/course%20files/Selection_002.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"Selection_002.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1$IMS-CC-FILEBASE$/Selection_002.png\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003ch1 id=\"header-installing-node-js-via-package-manager\"\u003e \u003c/h1\u003e\r\n\u003ch4\u003eStep 3: Install Node for your system\u003c/h4\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://moringaschool.instructure.com/courses/18/file_contents/course%20files/Selection_003.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"Selection_003.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1$IMS-CC-FILEBASE$/Selection_003.png\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003ch4\u003eStep 4: Confirming Installation\u003c/h4\u003e\r\n\u003cp\u003ejames@james-Inspiron-15-3552:~$ npm -v\u003cbr\u003e5.5.1\u003cbr\u003ejames@james-Inspiron-15-3552:~$ node -v\u003cbr\u003ev9.2.0\u003cbr\u003e\u003cbr\u003eWe run npm\u003cem\u003e\u003cspan\u003e \u003c/span\u003e-v\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto check the version of Node Package Manager Installed. And node -v to\u003cspan\u003e \u003c/span\u003e\u003cbr\u003echeck if Node is installed.\u003cbr\u003e\u003cbr\u003eYou should have node version higher than 9+ and npm\u003cem\u003e\u003cspan\u003e \u003c/span\u003e5+\u003c/em\u003e\u003c/p\u003e\r\n\u003ch3\u003eOSX Installation\u003c/h3\u003e\r\n\u003cp\u003eTo install Node on Mac systems follow the Instructions from this\u003cspan\u003e \u003c/span\u003e\u003ca class=\"external\" href=\"http://blog.teamtreehouse.com/install-node-js-npm-mac\" target=\"_blank\"\u003e\u003cspan\u003eTreeHouse Blog\u003cspan class=\"screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-hypertext-markup-language-html","title":"Tuesday: HyperText Markup Language (HTML)","type":"WikiPage","content":"\u003cp\u003eMany people think that creating a web page involves really complicated code that requires considerable studying to understand. This is not necessarily the case. In the next lesson we will make a simple web page together. But before we do that, let's quickly go over what the World Wide Web is.\u003c/p\u003e\r\n\u003cp\u003eThe web is made up of mostly text files - like the ones you created to write your papers in high school - as well as some other files like images or videos. These files are stored on computers that are connected over networks. When you put a web site's address into your browser, you are really just requesting to see a particular file, or combination of files.\u003c/p\u003e\r\n\u003cp\u003eWe've already seen a basic HTML file with our Hello World and Goodbye web pages. Now, we're going to focus on the basics of HyperText Markup Language, or HTML, that we previously just copy and pasted.\u003c/p\u003e\r\n\u003cp\u003eIt looked a bit like this in Atom:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026lt;h1\u0026gt;HTML Lesson\u0026lt;/h1\u0026gt;\r\n\u0026lt;h2\u0026gt;For Moringa School\u0026lt;/h2\u0026gt;\r\n\r\n\u0026lt;p\u0026gt;The goal \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e lesson \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e to illustrate how simple HTML \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e to read \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e write \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e showing some text written \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e HTML \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e what it looks like \u003cspan class=\"hljs-keyword\"\u003ewhen\u003c/span\u003e it \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e displayed \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a web browser.\u0026lt;/p\u0026gt;\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we open this file in our browser, it looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-07-hello_world_webpage.png\" alt=\"MP-W1D1-07-hello_world_webpage.png\" width=\"747\" height=\"160\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1337\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eHyperText\u003c/strong\u003e, or the \"HT\" of HTML, is just a fancy word for text that links to something else. The \"ML\" of HTML stands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emarkup language\u003c/strong\u003e. As we can see in the example above, the text in the HTML file is normal text that is\u003cspan\u003e \u003c/span\u003e\u003cem\u003emarked up\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith instructions written inside of these angle brackets\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e, known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003etags\u003c/strong\u003e. The actual language of HTML is the instructions that we wrap around the text to format it and as we'll see, instructions for many other things like images, links, videos and more.\u003c/p\u003e","frontPage":false},{"exportId":"monday-places-visited","title":"Monday: Places Visited","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice creating objects in JavaScript. Get comfortable with gathering input from a form and creating an object with that input, which you can then display on your website. Continue to write specifications that outline the intended behaviors for each application you write, and list them in your project's README.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between creating an object using literal notation, and creating an object using a constructor?\u003c/li\u003e\r\n\u003cli\u003eWhat benefits do constructors offer?\u003c/li\u003e\r\n\u003cli\u003eWhat is a prototype? How does it differ from a constructor?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eAddress Book\u003c/h3\u003e\r\n\u003cp\u003eFollow along with the lesson to create an address book application using constructors and prototypes.\u003c/p\u003e\r\n\u003ch3\u003ePlaces You've Been\u003c/h3\u003e\r\n\u003cp\u003eCreate a website where you can keep track of all the places you've been. Each destination should be an object with multiple properties, like location, landmarks, time of year, notes, etc. Display those properties when a user clicks on a place's name. Complete the business logic for your place object first, before tackling the user interface. Additionally, make sure to include specifications with example input and output in your project's README.\u003c/p\u003e\r\n\u003ch3\u003eTo Do List\u003c/h3\u003e\r\n\u003cp\u003eMake a to do list webpage where people can add tasks to create a list of things to do. Add an option for users to indicate a task is done. Use jQuery to remove the task from the \"to do\" list. Make sure to identify specific behaviors your program should demonstrate, and create specifications with example input and output. List these in the project's README.\u003c/p\u003e\r\n\u003ch3\u003ePeer Code Review\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDo JavaScript objects drive application logic?\u003c/li\u003e\r\n\u003cli\u003eAre constructors and prototypes used successfully?\u003c/li\u003e\r\n\u003cli\u003eAre plain English specs present in the README?\u003c/li\u003e\r\n\u003cli\u003eDoes the application work as expected?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"wednesday-debugging-html-and-css","title":"Wednesday: Debugging HTML and CSS","type":"WikiPage","content":"\u003cp\u003eLearning to debug your code is an essential skill as a developer. There are many debugging techniques out there, and I'm going to introduce you to a few techniques you will use all the time for HTML and CSS.\u003c/p\u003e\r\n\u003cp\u003eThese instructions are for Google Chrome. Both the JavaScript Console and Inspect panel discussed below are part of Chrome Developer Tools, or DevTools.\u003c/p\u003e\r\n\u003ch2\u003eJavaScript Console\u003c/h2\u003e\r\n\u003cp\u003eTo access DevTools, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMore Tools\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDeveloper Tools\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom Chrome's main menu (the three dots in the top right corner of the window). As a shortcut, you can also press\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCtrl\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eShift\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJ\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Linux or Windows) or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCmd\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOption\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJ\u003c/em\u003e(Mac). You may also have to click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eConsole\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab at the top of the window that pops open.\u003c/p\u003e\r\n\u003cp\u003eThis window is called the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJavaScript Console\u003c/em\u003e. Although we're not working with JavaScript, this is also where errors in the web page are logged. If you see something that looks like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFailed to load resource file:///Users/moringa/css/styles.css\u003c/code\u003e, Chrome is telling you that it was instructed to look for your CSS file at\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers/moringa/css/styles.css\u003c/em\u003e, but the file wasn't there. In other words, you either gave the wrong path to the file, or you put the file in the wrong place.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/MP-W1D2-02-failed_to_load_resource.png\" alt=\"MP-W1D2-02-failed_to_load_resource.png\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eInspect Element\u003c/h2\u003e\r\n\u003cp\u003eAnother very useful tool in debugging web pages is\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect Element\u003c/em\u003e. To access this tool, open any webpage and right-click a page element and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect\u003c/em\u003e. As a shortcut, you can also press\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCtrl\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eShift\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eI\u003c/em\u003e(Linux or Windows) or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCmd\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOpt\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eI\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Mac). You may click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eElements\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab at the top of the DevTools window. A window will pop open revealing the source code for the page, with the selected element highlighted in blue.\u003c/p\u003e\r\n\u003cp\u003eWith an element selected, you can see CSS in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eStyles\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab. This makes it easy to see what rules have been applied, including those that have been overridden due to specificity or order of other rules (these will be crossed out). Here is what the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eStyles\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab looks like with overridden rules:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/MP-W1D2-04-overridden_rules.png\" alt=\"MP-W1D2-04-overridden_rules.png\" width=\"367\" height=\"522\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYou can also uncheck a rule to disable it, or double-click a rule to edit it and see the change live. You can even add new rules and see what they would do live.\u003c/p\u003e\r\n\u003cp\u003eYou won't have much space to work with\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect Element\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eat the bottom of your screen, so click the three vertical dots on the top right-hand side of the inspect element pane near the \"X\" (which you'd click to close the pane). Now, you'll see an option to move the pane to the right-hand side of your browser (dock to right), move the pane to the bottom of the browser window (dock to bottom) or to open the pane in a completely separate window (undock into separate window).\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/MP-W1D2-03-inspect_element_dock_options.png\" alt=\"MP-W1D2-03-inspect_element_dock_options.png\" width=\"798\" height=\"329\"\u003e\u003c/p\u003e\r\n\u003cp\u003eInspecting a web page is a fantastic way to see for yourself what makes a website tick. Try inspecting elements on this page to see what CSS rules are being applied.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-github-pages","title":"Wednesday: GitHub Pages","type":"WikiPage","content":"\u003cp\u003eWe've made some web pages that we can view on our personal computers. Now let's learn how we can host our sites online. There are a number of ways to do this, and GitHub offers an option that is free and one of the easiest out there. GitHub Pages lets us turn a GitHub repository into a website with a URL that we can access from any browser. Pretty neat!\u003c/p\u003e\r\n\u003cp\u003eIn this lesson, we will walk through the steps to get a website from an existing repository hosted. I am going to use\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-project\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom the previous lesson on Creating a Web Page to demonstrate. Feel free to use your version of this project, or a different project that you would like to see online. The directions will be the same, and GitHub does not limit the number of sites that you can host online.\u003c/p\u003e\r\n\u003cp\u003eBefore we get started, let's go over a typical project structure for any website. In previous lessons, we put our images and CSS stylesheets in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimages\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolders. It's pretty common to organize files in this way.\u003c/p\u003e\r\n\u003cp\u003eSo far, we have been giving our pages descriptive file names, such as\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-website.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e. Another convention is to name the HTML file for the main page for a website\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e. This naming convention is common practice in the industry. Additionally, many hosting services, including GitHub Pages, require this convention to display content. Let's change the name of\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-website.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003enow. GitHub won't know to display it as the main page if we don't.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ mv \u003cspan class=\"hljs-keyword\"\u003emy\u003c/span\u003e-first-website.html \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e.html\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSince we have been using Git to track our project, let’s commit the change.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add .\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Change name of favorite-things.html file to index.html.\"\u003c/span\u003e\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit push origin master\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOne of the most important features when using Git or any other version control system is the ability to create a branch. We will go more into detail about what exactly a branch is and how it works in an upcoming lesson, but for now, you can think of it like an exact copy of the code at the point when the branch is created. Each branch exists independent of each other, so once you create a branch, any changes you make to one branch won’t affect the code in another branch. GitHub Pages looks for content to display online in a branch called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e. Let's create that branch now. Run these commands in the Terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit branch gh-pages\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to create a new branch called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e. Again, we will go more into detail about branching in an upcoming lesson. For now, what matters is that we have a branch called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e, and it is a copy of the code in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch. Next, we push the code to GitHub:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin gh-pages\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the last argument in this command is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e, which means that we are pushing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch.\u003c/p\u003e\r\n\u003cp\u003eOnce the project is pushed to GitHub, you will be able to view it online at\u003cspan\u003e \u003c/span\u003e\u003cem\u003egithub-username.github.io/repository-name\u003c/em\u003e. For example, if our GitHub username was\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-student\u003c/em\u003e, and our repository was named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e, we would navigate to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-student.github.io/hello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the browser.\u003c/p\u003e\r\n\u003cp\u003eOne last thing to note here. For now, if you want to continue making changes to a project, you should edit the code in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch, not\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e. Then, when you want to update the live site on\u003cspan\u003e \u003c/span\u003e\u003cem\u003egithub.io\u003c/em\u003e, delete the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch and then create it again using the steps above.\u003c/p\u003e\r\n\u003cp\u003eTo delete a branch, first click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBranches\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab at the top of the repository's main page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-05-github_branch_tab.png\" alt=\"MP-W1D2-05-github_branch_tab.png\" width=\"774\" height=\"247\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1373\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis will take you to a page where all of the repository's branches are listed. Delete a branch by clicking on the red trash can symbol in the branch's row on the right side of the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-06-github_branch_delete.png\" alt=\"MP-W1D2-06-github_branch_delete.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1374\" data-api-returntype=\"File\"\u003e\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-javascript-arrays","title":"Wednesday: JavaScript Arrays","type":"WikiPage","content":"\u003cp\u003eUntil now, we've always dealt with one piece of information at a time: one number, one string, and so on. But often, we need to group things together. For example, what if we wanted to have a list of the months of the year? We'd use an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003earray\u003c/strong\u003e, which is just a list of things grouped together. An array looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e months = [\u003cspan class=\"hljs-string\"\u003e\"january\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"february\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"march\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"april\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"may\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"june\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"july\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"august\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"september\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"november\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"december\"\u003c/span\u003e];\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere are some more arrays for you to try in the JavaScript console:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode class=\"\"\u003e[2, 5, 7, 3423, 85, 65]\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode class=\"\"\u003e[\"e\", \"p\", \"i\", \"c\", \"o\", \"d\", \"u\", \"s\"]\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode class=\"\"\u003e[\"word\", 45, \"blah\", 123]\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eYou can put variables and expressions in your arrays, or even other arrays:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e variable = \u003cspan class=\"hljs-string\"\u003e\"I'm a variable!\"\u003c/span\u003e;\r\n\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e things = [variable, \u003cspan class=\"hljs-string\"\u003e\"I'm not a variable!\"\u003c/span\u003e];\r\n\u0026gt; things;\r\n[\u003cspan class=\"hljs-string\"\u003e\"I'm a variable!\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"I'm not a variable!\"\u003c/span\u003e]\r\n\r\n\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e numbers = [\u003cspan class=\"hljs-number\"\u003e62\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e62\u003c/span\u003e / \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e];\r\n\u0026gt; numbers;\r\n[\u003cspan class=\"hljs-number\"\u003e62\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e31\u003c/span\u003e]\r\n\r\n\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e confusingAssortmentOfThings = [\u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e123\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"another string\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e456\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e321\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"yet another string\"\u003c/span\u003e];\r\n\u0026gt; confusingAssortmentOfThings;\r\n[\u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e123\u003c/span\u003e, \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e321\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"yet another string\"\u003c/span\u003e]\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e(That\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eArray[2]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust means that this element of the \u003ccode class=\"hljs javascript\"\u003econfusingAssortmentOfThings\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray is itself an array containing 2 elements. More on this later.)\u003c/p\u003e\r\n\u003cp\u003eJust like numbers and strings, arrays have methods. Here are a couple for you to start with:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e fruits = [\u003cspan class=\"hljs-string\"\u003e\"apple\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"orange\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"passion fruit\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"kiwi\"\u003c/span\u003e];\r\n\u0026gt; fruits.pop();\r\n\u003cspan class=\"hljs-string\"\u003e\"kiwi\"\u003c/span\u003e\r\n\u0026gt; fruits;\r\n[\u003cspan class=\"hljs-string\"\u003e\"apple\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"orange\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"passion fruit\"\u003c/span\u003e]\u003cbr\u003e\u003c/code\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e numbers = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e];\r\n\u0026gt; numbers.reverse();\u003cbr\u003e[\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]\r\n\u0026gt; numbers;\r\n[\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote that both the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.pop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.reverse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods change the array on which they're called. The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.pop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod removes the last item from the array AND\u003cspan\u003e \u003c/span\u003e\u003cem\u003ereturns\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eit. The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.reverse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod reverses the order of items in the array and returns that reversed array.\u003c/p\u003e\r\n\u003cp\u003eWe can also add elements to an array, or combine two arrays:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e\u0026gt; var greetings = [];\r\n\u0026gt; greetings.\u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e);\r\n\u0026gt; greetings.\u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'hello'\u003c/span\u003e);\r\n\u0026gt; greetings;\r\n[\u003cspan class=\"hljs-string\"\u003e\"hi\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e]\r\n\u0026gt; greetings.concat([\u003cspan class=\"hljs-string\"\u003e'hola'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'buenos dias'\u003c/span\u003e]);\r\n[\u003cspan class=\"hljs-string\"\u003e\"hi\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hola\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"buenos dias\"\u003c/span\u003e]\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote that while\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.push()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eadds an element to an array, the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.concat()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod doesn't actually change the original array, but rather returns a new array that combines the two. The \u003ccode class=\"hljs perl\"\u003egreetings\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray still only contains the 2 elements pushed on to it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e\u0026gt; greetings;\r\n[\u003cspan class=\"hljs-string\"\u003e\"hi\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e]  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you want to access an element from an array, the syntax is a bit different from anything we've seen before:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e letters = [\u003cspan class=\"hljs-string\"\u003e'e'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'p'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'i'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'c'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'o'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'd'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'u'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e's'\u003c/span\u003e];\r\n\u0026gt; letters[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]\r\n\u003cspan class=\"hljs-string\"\u003e\"e\"\u003c/span\u003e\r\n\u0026gt; letters[\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e]\r\n\u003cspan class=\"hljs-string\"\u003e\"o\"\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJust like with strings, we count array elements starting with zero. So the zeroth element of the array is \u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-string\"\u003ee\u003c/span\u003e\u003c/code\u003e, and the fourth element is \u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-string\"\u003eo\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eNote that it is conventional for array variable names to be plural, thereby making it clear that the variable refers to a collection of things rather than a single thing. Following this convention will help with debugging your own code as well as making your code clearer for others.\u003c/p\u003e\r\n\u003cp\u003eCheck out the MDN documentation for\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Mutator_methods\" target=\"_blank\"\u003eMutator\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Accessor_methods\" target=\"_blank\"\u003eAccessor\u003c/a\u003e\u003cspan\u003e \u003c/span\u003emethods, and experiment using these methods on your own.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-box-model","title":"Thursday: Box Model","type":"WikiPage","content":"\u003cp\u003eThere's one more essential piece of HTML and CSS we need to cover: the box model. You can think of every element on a web page as a rectangular box that takes up space, and it's made of four parts: content, padding, border, and margin. This is easiest to see in a diagram:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Wednesday%20Content%20Images/MP-W1D3-01-box_model.png\" alt=\"MP-W1D3-01-box_model.png\" width=\"556\" height=\"328\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1404\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWhen you see\u003ccode\u003e height\u003c/code\u003e and \u003ccode\u003ewidth\u003c/code\u003e used in CSS, those values apply to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003econtent\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's use some CSS to demonstrate the box model on a web page. Start with some unstyled text contained in a div:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBox model\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"test-box\"\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add a border using CSS:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  }\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can actually give each side a different value if we'd like:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder-right\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e4px\u003c/span\u003e solid blue\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder-top\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6px\u003c/span\u003e solid orange\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder-bottom\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e8px\u003c/span\u003e solid black\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor the sake of space, I'll keep the border uniform for the rest of these examples.\u003c/p\u003e\r\n\u003cp\u003eNow let's increase the space between the text and the border:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6px\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFinally, let's make some room between the border and the elements around it (which are, in this simple case, just the edges of the page):\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6px\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003emargin\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e20px\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's see what happens when we give the div a background color:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.test-box\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eborder\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2px\u003c/span\u003e solid red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e6px\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003emargin\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e20px\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellow\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe color applies to the box\u003cspan\u003e \u003c/span\u003e\u003cem\u003econtent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003cem\u003epadding\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe can see the box model for an element in the DevTools\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epanel. For this example, it looks something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Wednesday%20Content%20Images/MP-W1D3-02-box_model_inspect.png\" alt=\"MP-W1D3-02-box_model_inspect.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1405\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYou'll run into the box model a lot when building web pages, so spend some time getting familiar with it.\u003c/p\u003e","frontPage":false},{"exportId":"monday-data-types","title":"Monday: Data Types","type":"WikiPage","content":"\u003cp\u003eWe've already seen\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enumbers\u003c/strong\u003e,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003estrings\u003c/strong\u003e,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebooleans\u003c/strong\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eundefined\u003c/strong\u003e. These are 4 of the 5 basic data types, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eprimitives\u003c/strong\u003e, in JavaScript. The other is\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enull\u003c/strong\u003e, which represents nothingness. Don't worry about\u003cspan\u003e \u003c/span\u003e\u003cem\u003enull\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efor now - we'll learn more about it down the road.\u003c/p\u003e\r\n\u003ch2\u003eData Types\u003c/h2\u003e\r\n\u003ch3\u003eNumber\u003c/h3\u003e\r\n\u003cp\u003eUnsurprisingly, the number type represents numbers.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode\u003e42\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e3.14\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e-10\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eNaN\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(stands for \"not a number\", but is considered a number)\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eInfinity\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e-Infinity\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003evar favouriteNumber = 42;\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eYou can use certain methods on numbers:\u003c/p\u003e\r\n\u003cp\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n\u0026gt; \u003cspan class=\"hljs-number\"\u003e3.14159\u003c/span\u003e.toFixed(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n\u003cspan class=\"hljs-string\"\u003e\"3.14\"\u003c/span\u003e\u003c/code\u003e\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-string\"\u003e\u003c/span\u003e\u003c/code\u003eString\u003c/h3\u003e\r\n\u003cp\u003eAs you've seen, the string type represents text.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode\u003e\"hello, world!\"\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003evar greeting = \"hello, world!\";\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eYou can use certain methods on strings:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e.toUpperCase();\r\n\u003cspan class=\"hljs-string\"\u003e\"HELLO\"\u003c/span\u003e\r\n\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e.charAt(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n\u003cspan class=\"hljs-string\"\u003e\"l\"\u003c/span\u003e\r\n\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e.toUpperCase().charAt(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n\u003cspan class=\"hljs-string\"\u003e\"L\"\u003c/span\u003e    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eBoolean\u003c/h3\u003e\r\n\u003cp\u003eBooleans can only hold 2 possible values -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e \u0026gt; \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\r\n\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n\u0026gt; \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e \u0026gt; \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\r\n\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hello\"\u003c/span\u003e.charAt(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e) === \u003cspan class=\"hljs-string\"\u003e\"e\"\u003c/span\u003e;\r\n\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e enrolledAtMoringa = \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou'll discover soon just how important booleans are to programming.\u003c/p\u003e\r\n\u003ch3\u003eUndefined\u003c/h3\u003e\r\n\u003cp\u003eThe undefined data type has only one possible value -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWhen declaring a variable without giving it a value (\u003ccode\u003evar myNumber;\u003c/code\u003e), JavaScript creates the variable without a value, hence\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eundefined\u003c/strong\u003e. Even when declaring a variable and assigning it a value at the same time (\u003ccode\u003evar favoriteNumber = 42;\u003c/code\u003e), JavaScript actually creates the variable initially without a value, temporarily giving it a value of\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eundefined\u003c/strong\u003e, before then assigning it the value to the right of the equals sign. This is kind of a subtle point, so don't worry too much about it at the moment.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eAdditionally, there are some functions and methods that do not return any value, in which case the return value is actually\u003cspan\u003e \u003c/span\u003e\u003cem\u003eundefined\u003c/em\u003e. (You'll learn more about this when we learn how to write our own methods and functions.)\u003c/p\u003e\r\n\u003ch2\u003eData Type Detection\u003c/h2\u003e\r\n\u003cp\u003eIt's important to understand the difference between the number\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the string \"5\". To the computer, they are two entirely different things, as illustrated by this example:\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-string\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var myNumber = 5;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var myOtherNumber = 10;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var myText = \"5\";\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var myOtherText = \"10\";\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber + myOtherNumber;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e15\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myText + myOtherText;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"510\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we added\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e10\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe got\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e15\u003c/code\u003e, but when we added\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"10\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"5\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eit concatenated the two strings together.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eLikewise, the boolean\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not the same as the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"true\"\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIn the example above, somewhat confusingly, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator works on both numbers and strings - just differently. Usually methods will only work on a specific data type. For example,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e48432.78.toExponential();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eworks just fine, but trying to do\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"48432.78\".toExponential();\u003c/code\u003eresults in an error because there is no\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoExponential()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that works on a string.\u003c/p\u003e\r\n\u003cp\u003eLikewise,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"hello\".charAt(2);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eworks, but\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e314159.charAt(2);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edoes not.\u003c/p\u003e\r\n\u003cp\u003eWe can check the data type of a variable or value as follows:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003e\u0026gt; typeof 5;\u003cbr\u003e\"number\"\u003cbr\u003e\u0026gt; typeof \"5\";\u003cbr\u003e\"string\"\u003cbr\u003e\u0026gt; typeof true;\u003cbr\u003e\"boolean\"\u003cbr\u003e\u0026gt; typeof \"true\";\u003cbr\u003e\"string\"\u003cbr\u003e\u0026gt; var greeting = \"hello world\";\u003cbr\u003e\u0026gt; typeof greeting;\u003cbr\u003e\"string\"\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch2\u003eData Type Conversion\u003c/h2\u003e\r\n\u003cp\u003eOften input from a web browser will come in as a string and we will need to convert it to a number before working with it.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eWe can convert a string to a number by passing a string to the \u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction (more on functions soon):\u003c/p\u003e\r\n\u003cpre\u003e\u0026gt; var inputtedAge = \"45\";\u003cbr\u003e\u0026gt; inputtedAge;\u003cbr\u003e\"45\"\u003cbr\u003e\u0026gt; typeof inputtedAge;\u003cbr\u003e\"string\"\u003cbr\u003e\u0026gt; var myAge = parseInt(inputtedAge);\u003cbr\u003e\u0026gt; myAge;\u003cbr\u003e45\u003cbr\u003e\u0026gt; typeof myAge;\u003cbr\u003e\"number\"\u003c/pre\u003e\r\n\u003cp\u003eNote\u003cspan style=\"font-size: 1rem;\"\u003e that if you try to use \u003ccode\u003eparseInt()\u003c/code\u003e to convert a string not actually containing a number, the result is the \"number\u003c/span\u003e\"\u003cspan style=\"font-size: 1rem;\"\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u0026gt; var name = \"Andrea\";\u003cbr\u003e\u0026gt; var nonsense = parseInt(name);\u003cbr\u003e\u0026gt; nonsense;\u003cbr\u003eNaN\u003c/pre\u003e\r\n\u003cp\u003eIf you need to go the other way around, you can convert a number to a string by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoString()\u003c/code\u003e method on the number:\u003c/p\u003e\r\n\u003cpre\u003e\u0026gt; var myNumber = 42;\u003cbr\u003e\u0026gt; myNumber;\u003cbr\u003e42\u003cbr\u003e\u0026gt; typeof myNumber;\u003cbr\u003e\"number\"\u003cbr\u003e\u0026gt; var convertedNumber = myNumber.toString();\u003cbr\u003e\u0026gt; convertedNumber;\u003cbr\u003e\"42\"\u003cbr\u003e\u0026gt; typeof convertedNumber;\u003cbr\u003e\"string\"\u003c/pre\u003e","frontPage":false},{"exportId":"resource-cheat-sheet-command-line","title":"Resource: Cheat Sheet - Command Line","type":"WikiPage","content":"\u003cp\u003eHere's a quick reference of all of the commands listed in this lesson. Feel free to reference this as you learn the commands - they'll be second nature before you know it.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ pwd\u003c/code\u003e: Prints the path of the current directory to the screen\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ ls\u003c/code\u003e: Lists out the contents of the current folder\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ cd directory-name\u003c/code\u003e: Changes the current directory to the one specified\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ cd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd ~\u003c/code\u003e: Changes the current directory to the home directory\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ cd ..\u003c/code\u003e: Changes the current directory up one level\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ mkdir directory-name\u003c/code\u003e: Creates a new directory (folder) in the current directory with the name specified\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ touch file-name.html\u003c/code\u003e: Creates a new, empty file in the current directory with the name specified\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ cp original-file.html new-file.html\u003c/code\u003e: Creates a duplicate copy of the first file listed and gives it the name of the second file listed. Both files still exist.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ mv original-file-name.html new-file-name.html\u003c/code\u003e: Moves the contents of the first file into the second file. Effectively renames the file.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ mv sample-file.html new-location/sample-file.html\u003c/code\u003e: Moves the first file into the folder specified for the second file.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ rm file-name.html\u003c/code\u003e: Removes the file specified.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ rm -rf directory-name\u003c/code\u003e: Removes the folder specified and all of the files inside.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ clear\u003c/code\u003e: Clears the terminal screen.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eTerminology\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003efile path\u003c/strong\u003e: The location of a file or folder in the file system. For example:\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers/MoringaSchool/Pictures/cute-kitten.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis the path for the image called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecute-kitten.jpg\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003edirectory\u003c/strong\u003e: Another name for a folder in a file system. For example,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers/MoringaSchool/Pictures/cute-kitten.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehas 3 directories:\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers\u003c/em\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMoringaSchool\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePictures\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003ehome directory\u003c/strong\u003e: The highest-level directory on a computer - this is the default directory when you open the terminal.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"friday-learning-dashboard","title":"Friday: Learning Dashboard","type":"WikiPage","content":"\u003ch2\u003e\u003cspan\u003eViewing Courses\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Grading/Picture1.png\" alt=\"Picture1.png\" width=\"127\" height=\"180\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/3660\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eTo view all the courses you are enrolled in click the \u003cstrong\u003eDashboard [1]\u003c/strong\u003e or the \u003cstrong\u003eCourses [2]\u003c/strong\u003e link on the global navigation.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Grading/Picture2.png\" alt=\"Picture2.png\" width=\"298\" height=\"112\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/3661\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIn the Moringa School LMS the \u003cstrong\u003eCourses [2 ]\u003c/strong\u003e are the different modules we offer with daily lessons grouped into weeks. To view all the course contents click the \u003cstrong\u003eHome [1]\u003c/strong\u003e link.\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan\u003eGradebook\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003eAll scores from the code reviews conducted by your peers and TMs are recorded and stored. The gradebook shows your progress against the total score of the objectives set out for the project.\u003c/p\u003e\r\n\u003cp\u003e \u003cimg src=\"viewer/files/Grading/Picture3.png\" alt=\"Picture3.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/3662\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eTo navigate to the gradebook, click the \u003cstrong\u003eCourses\u003c/strong\u003e \u003cstrong\u003e[1]\u003c/strong\u003e link in the global navigation\u003cstrong\u003e,\u003c/strong\u003e then the course you want to access. In the course navigation, click on\u003cstrong\u003e Grades [2]\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe gradebook looks similar to the image above. Accumulated scores are found at the bottom right in the \u003cstrong\u003eTotal\u003c/strong\u003e row. The total score is displayed both in percentage format \u003cstrong\u003e[3]\u003c/strong\u003e and the score achieved over the total score achievable \u003cstrong\u003e[4]\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Grading/Picture4.png\" alt=\"Picture4.png\" width=\"664\" height=\"655\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/3663\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYou can print your score by clicking the \u003cstrong\u003ePrint \u003c/strong\u003ebutton at the top left corner.\u003c/p\u003e","frontPage":false},{"exportId":"weekend-typescript","title":"Weekend: Typescript","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003ch1\u003eTypeScript\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003ch3\u003eTerminology\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eTypeScript\u003c/strong\u003e: A superset of JavaScript that compiles to plain JavaScript which runs in any browser.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eCompiled language\u003c/strong\u003e: A language which when written is then compiled into a different form when run. For example, TypeScript is written in ES6 and compiles to JavaScript version 5.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eCompile\u003c/strong\u003e: Translate code from one form to another. When TypeScript is compiled it is transformed to plain JavaScript.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eES6\u003c/strong\u003e: Short form for version 6 of ECMAScript (commonly just referred to as JavaScript).\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eapm\u003c/strong\u003e: Atom Package Manager, apm is included in npm; it is used to optimize installation and maintenance of Atom packages.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eAdditional Resources\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"http://en.wikipedia.org/wiki/ECMAScript\" target=\"_blank\"\u003eECMAScript\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor more about Atom Package Manager, see their\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/atom/apm\" target=\"_blank\"\u003edocumentation\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch1\u003eFirst TypeScript, then Angular\u003c/h1\u003e\r\n\u003cp\u003eAngular-based apps can be written in JavaScript and another programming language called\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.dartlang.org/\"\u003eDart\u003c/a\u003e. That said, the majority of the time, Angular apps are written in a language called TypeScript. TypeScript is similar to JavaScript, which is why we will be learning some TypeScript\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebefore we dive into Angular 2. Be sure to add TypeScript to your LinkedIn profile and list of languages you have been learning, as it is a separate language with separate syntax!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eTypeScript\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecompiled language\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ewhich helps us to write cleaner JavaScript. It is a superset of JavaScript that compiles to plain JavaScript which runs in any browser, any OS, and it is open source. It is essentially JavaScript plus some extra tools that help keep complex programs less error prone, more organized and more maintainable.\u003c/p\u003e\r\n\u003cp\u003eTypeScript gives us power tools that we can use to build our code more robustly. In a broad sense, TypeScript lets you define types for your data - that's actually where the name comes from. These types could be the primitives that we are used to, such as strings and numbers, but we can also explicitly define the structures of objects. If you have experience working in a language such as Java, C# or PHP, these aspects of TypeScript will likely feel somewhat familiar.\u003c/p\u003e\r\n\u003cp\u003eWe'll see how this works later, but declaring the structure of a particular object will allow your text editor to catch mistakes when you use that object - for example, if you misspell a required property name, you will be warned without having to track that problem down from the browser. We can also declare that our variables will hold something a little more non-traditional, like an HTML element. For example we could say that a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eusername\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill hold an object representing an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement from the DOM.\u003c/p\u003e\r\n\u003cp\u003eUsing explicit data types keeps our code consistent, allowing us to catch our errors up front with the compiler before our code is run in the browser.\u003c/p\u003e\r\n\u003ch2\u003eES6\u003c/h2\u003e\r\n\u003cp\u003eJavaScript follows the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://en.wikipedia.org/wiki/ECMAScript\" target=\"_blank\"\u003eECMAScript\u003c/a\u003e\u003cspan\u003e \u003c/span\u003estandard and for a long time we've been using ECMAScript version 5. TypeScript implements version 6 (referred to frequently as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eES6\u003c/strong\u003e), which includes new things like classes. At the time of this writing, not very many browsers support version 6 directly yet, but with TypeScript we can write our code with the fancy new standard and then\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecompile\u003c/strong\u003e, or transform, it into pure version 5 JavaScript so that all browsers can understand it.\u003c/p\u003e\r\n\u003ch2\u003eCompiling\u003c/h2\u003e\r\n\u003cp\u003eCompiling basically means to convert and assemble our code into a different form, usually something that is less human readable, in this case we use a compiler to convert our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles (for TypeScript) into regular\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.js\u003c/em\u003efiles that our browser can understand.\u003c/p\u003e\r\n\u003cp\u003eHappily, all of our existing JavaScript will still work when we are writing TypeScript files because ES6 is backwards compatible, so the syntax from version 5 that we are all used to will still run. But now we get some new toys to play with! It's also a good idea to learn TypeScript because it's not an obscure new syntax - it is something that more and more browsers are supporting, so much of the community agrees that it will be pretty universal in the near future.\u003c/p\u003e\r\n\u003ch2\u003eInstalling TypeScript\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eNode Package\u003c/h3\u003e\r\n\u003cp\u003eLet's install it. We need to have Node.js and npm installed first, then we can install TypeScript globally as a regular npm package. We can run this command from anywhere on our machine.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs coffeescript\"\u003e$ \u003cspan class=\"hljs-built_in\"\u003enpm\u003c/span\u003e install typescript -g\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can check if the installation was successful by typing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etsc -v\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto get the version number currently installed.\u003c/p\u003e\r\n\u003ch3\u003eAtom Package\u003c/h3\u003e\r\n\u003cp\u003eWe will also want to install the Atom TypeScript packages so that we can use autocomplete and TypeScript specific linting as we work. We can also run these commands from anywhere on our machine. (\u003cem\u003eNote:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eapm\u003c/strong\u003estands for Atom Package Manager and comes with npm. For more about apm, see\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/atom/apm\" target=\"_blank\"\u003ehere\u003c/a\u003e.\u003c/em\u003e)\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003eapm install atom-typescript\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThere are many other text editors supported, too. Be sure to google for a TypeScript package for your editor at home if you're not using Atom. Using a text editor package for TypeScript may sound like a pretty-looking bonus feature that you don't really need for your projects, but you will be missing out on some of the most useful advantages of TypeScript if you skip this step.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAfter installing this package you will have to quit Atom entirely and restart it before you see anything change.\u003c/p\u003e\r\n\u003cp\u003eDeclaring your variables to have specific types will allow you to be specific about your intentions when you code - we can specifically say that an object MUST have certain properties, or that a variable MUST hold a number, and not a string. This allows TypeScript to catch mistakes for us if we misspell a property name or forget to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt\u003c/code\u003e. And, having a TypeScript package installed for your text editor allows the compiler to warn you about errors as you type, without even needing to compile. This can save you lots of time.\u003c/p\u003e\r\n\u003cp\u003eNext we'll get going on building our first TypeScript projects!\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n \r\n \r\n\u003cdiv\u003e\r\n\u003ch1\u003eTypeScript: Compiling and Optional Typing\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003ch3\u003eTerminology\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eOptional typing\u003c/strong\u003e: A feature of TypeScript that allows the developer to declare the data type of a variable.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eLoosely typed\u003c/strong\u003e: A description for a language that does not require the developer to define the data type of a variable (e.g. JavaScript).\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eType annotations\u003c/strong\u003e: Definitions for variables that initialize them with a type instead of allowing a type to be inferred.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eExample\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eExample of type annotations:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e findSum = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst: number, second: number\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sum = first + second;\r\n  alert(\u003cspan class=\"hljs-string\"\u003e\"The sum of your two numbers is: \"\u003c/span\u003e + sum);\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efirst\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esecond\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparameters have type annotations of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich enforces the rule that only numbers will be accepted in the function.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eThere are a lot of exciting new benefits to using TypeScript. We can still mix in regular ECMAScript 5 JavaScript, but in this lesson we'll start to learn some of the differences as we make our first TypeScript files.\u003c/p\u003e\r\n\u003ch2\u003eCompiling\u003c/h2\u003e\r\n\u003cp\u003eUnlike vanilla JavaScript (which is regular ES5 style JavaScript), we have to compile TypeScript before we can run it in most browsers. Compiling it turns it back into vanilla JavaScript. Let's create a project directory and make our first TypeScript file, named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello.ts\u003c/em\u003e. We'll put it in a folder called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e. This\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder is going to take the place of the main\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder we've been using so far to hold our JavaScript files. This is the standard naming convention used in both Angular2 and Ember apps - it will hold the bulk of our code. First we'll create a variable to hold a string, and then we'll print the string to the console.\u003c/p\u003e\r\n\u003cdiv\u003eapp/hello.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs css\"\u003e\u003cspan class=\"hljs-tag\"\u003evar\u003c/span\u003e \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003egreeting\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e string = \u003cspan class=\"hljs-string\"\u003e\"Hi TypeScript!\"\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n\u003cspan class=\"hljs-tag\"\u003econsole\u003c/span\u003e\u003cspan class=\"hljs-class\"\u003e.log\u003c/span\u003e(\u003cspan class=\"hljs-tag\"\u003egreeting\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo compile a TypeScript file, we can run the following command from the top level of our project directory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etsc app/hello.ts\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's try our compiled file in the browser. We'll make an\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in the top level of our project directory, and we'll load our compiled\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile with a script tag.\u003c/p\u003e\r\n\u003cdiv\u003eindex.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"app/hello.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eHello TypeScript!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's launch the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in the browser and open the console to confirm that it works. The first thing we are doing is creating a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreeting\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the TypeScript way by making use of their\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eoptional typing\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003efeature. We are using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e:\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto designate that the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreeting\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill officially only hold strings, not numbers or any other data type. Then we set it equal to the sentence \"Hi TypeScript!\". Then we just print out the contents of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreeting\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe can remember that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e:\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis used to describe a variable type because of the way it's used in the english language. If I say\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"Let me tell you the name of my favorite guitarist: Jimi Hendrix.\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eThis is similar to defining a variable with the datatype of a string:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs css\"\u003e\u003cspan class=\"hljs-tag\"\u003evar\u003c/span\u003e \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efavoriteGuitarist\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e string = \u003cspan class=\"hljs-string\"\u003e\"Jimi Hendrix\"\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBefore the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e:\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a description of the thing that is coming after it. It's not just any person's name, I'm telling you that it is my favorite guitarist. Also, if I had just used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar favoriteGuitarist\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewithout any datatype, you would have no idea if the variable was supposed to hold a string or an entire object representing Jimi.\u003c/p\u003e\r\n\u003cp\u003eSimilarly, if I were to tell you\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"Here is a list of the names of a few of my favorite musicians: Jimi Hendrix, The Cure, and Amon Amarth\"\u003c/em\u003e, then this would be similar to declaring a variable to hold an array of strings, (a list of names) which is written like this in TypeScript.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs css\"\u003e\u003cspan class=\"hljs-tag\"\u003evar\u003c/span\u003e \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efavoriteMusicians\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e string[] = [\u003cspan class=\"hljs-string\"\u003e\"Jimi Hendrix\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"The Cure\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Amon Amarth\"\u003c/span\u003e]\u003c/span\u003e\u003c/span\u003e;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNote the square brackets after the word\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estring\u003c/code\u003e. This means that we will be given an array containing only data of the type string.\u003c/p\u003e\r\n\u003ch3\u003eOptional Typing\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eLet's do an experiment to see why declaring our types is so useful. If you come from a Java or C# background, you will already have experienced this - be sure to take extra time with your colleagues from the design track if this concept is unfamiliar! We will run the following JavaScript in the browser to calculate the sum of two numbers. We'll put this into a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003evanilla-sum.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory. There is intentionally a bug in this code. We will see how this bug manifests in regular JavaScript first, then we'll see how TypeScript can help us catch errors like this.\u003c/p\u003e\r\n\u003cdiv\u003eapp/vanilla-sum.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number = prompt(\u003cspan class=\"hljs-string\"\u003e'please enter a number.'\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e otherNumber = prompt(\u003cspan class=\"hljs-string\"\u003e'enter another number.'\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sum = number + otherNumber;\r\nalert(\u003cspan class=\"hljs-string\"\u003e\"The sum of your two numbers is: \"\u003c/span\u003e + sum);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen add a script tag to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cdiv\u003eindex.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"app/vanilla-sum.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's enter the number 1 for each prompt. What will we get for the sum of the two numbers? Last I checked, 1 + 1 is 2. But if we try this out, we are politely informed that 1 + 1 is 11. What?! Go home JavaScript, you're drunk. 1 + 1 is definitely 2.\u003c/p\u003e\r\n\u003cp\u003eWell, this is a symptom of JavaScript being a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eloosely typed\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003elanguage. Java is an example of strictly typed language. A language is loosely typed if it doesn't require you to define the data type of a variable when it is created. On the one hand, this is convenient and allows us a lot of flexibility in our code, but it can lead to problems like the one described above. JavaScript doesn't care if the variable \"number\" contains a number or not. It could contain a decimal, it could contain an integer, it could contain all of \"War and Peace\" as far as JavaScript is concerned.\u003c/p\u003e\r\n\u003cp\u003eIn JavaScript, a variable is a container for any type of data. We obviously wanted to use numbers, but the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction returns a string. So when we add the two strings together, we get another string: \"1\" + \"1\" = \"11\" the same way that \"happy\" + \" birthday!\" = \"happy birthday!\". We can prevent this kind of mistake because TypeScript allows us to define types for our variables\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eif we want to\u003c/strong\u003e. Let's try this in TypeScript instead! Let's make\u003cspan\u003e \u003c/span\u003e\u003cem\u003esum.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/p\u003e\r\n\u003cdiv\u003eapp/sum.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003enumber\u003c/span\u003e: number;\r\n\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eotherNumber\u003c/span\u003e: number;\r\n\r\nnumber = prompt(\u003cspan class=\"hljs-string\"\u003e'please enter a number.'\u003c/span\u003e);\r\notherNumber = prompt(\u003cspan class=\"hljs-string\"\u003e'enter another number.'\u003c/span\u003e);\r\n\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e sum = number + otherNumber;\r\nalert(\u003cspan class=\"hljs-string\"\u003e\"The sum of your two numbers is: \"\u003c/span\u003e + sum);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, from the top level of our project directory, we'll compile it with:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etsc app/sum.ts\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBut before we can try it out in the browser, TypeScript gives us a helpful error!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs coffeescript\"\u003eapp/sum.ts(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e): error \u003cspan class=\"hljs-attribute\"\u003eTS2322\u003c/span\u003e: Type \u003cspan class=\"hljs-string\"\u003e'string'\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e assignable to type \u003cspan class=\"hljs-string\"\u003e'number'\u003c/span\u003e.\r\napp/sum.ts(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e): error \u003cspan class=\"hljs-attribute\"\u003eTS2322\u003c/span\u003e: Type \u003cspan class=\"hljs-string\"\u003e'string'\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e assignable to type \u003cspan class=\"hljs-string\"\u003e'number'\u003c/span\u003e.\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBeing informed by an error message is certainly better than silently moving forward with bugs like the one above hiding in our code. This technique prevents putting the wrong type of data into an important variable by explicitly defining which type of data it should hold. Let's fix our code.\u003c/p\u003e\r\n\u003cdiv\u003eapp/sum.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number: number;\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e otherNumber: number;\r\n\r\nnumber = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e'please enter a number.'\u003c/span\u003e));\r\notherNumber = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e'enter another number.'\u003c/span\u003e));\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sum = number + otherNumber;\r\nalert(\u003cspan class=\"hljs-string\"\u003e\"The sum of your two numbers is: \"\u003c/span\u003e + sum);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we compile it again, we get no errors this time! Generally, if the terminal gives you no messages after running a command, it means that the command ran successfully.\u003c/p\u003e\r\n\u003cp\u003eYour text editor might give you an error saying that you need a\u003cspan\u003e \u003c/span\u003e\u003cem\u003etsconfig.json\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile, but this is just a warning. The file usually sets up some configuration options for the TypeScript compiler. We'll be adding one soon when we start our Angular projects. For now, we can ignore it and add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag into our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile, and try it out in the browser. We can also remove the old\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag linking to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003evanilla-sum.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cdiv\u003eindex.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"app/sum.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIt works! We can also use optional typing when we declare a function. Let's try this:\u003c/p\u003e\r\n\u003cdiv\u003eapp/sum.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e findSum = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst: number, second: number\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sum = first + second;\r\n  alert(\u003cspan class=\"hljs-string\"\u003e\"The sum of your two numbers is: \"\u003c/span\u003e + sum);\r\n}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number = prompt(\u003cspan class=\"hljs-string\"\u003e'please enter a number.'\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e otherNumber = prompt(\u003cspan class=\"hljs-string\"\u003e'enter another number.'\u003c/span\u003e);\r\nfindSum(number, otherNumber);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we compile again, it will successfully warn us of our error.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs coffeescript\"\u003eapp/sum.ts(\u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e): error \u003cspan class=\"hljs-attribute\"\u003eTS2345\u003c/span\u003e: Argument \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e type \u003cspan class=\"hljs-string\"\u003e'string'\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e assignable to parameter \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e type \u003cspan class=\"hljs-string\"\u003e'number'\u003c/span\u003e.\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd we can fix it in the same way:\u003c/p\u003e\r\n\u003cdiv\u003eapp/sum.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e findSum = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst: number, second: number\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sum = first + second;\r\n  alert(\u003cspan class=\"hljs-string\"\u003e\"The sum of your two numbers is: \"\u003c/span\u003e + sum);\r\n}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e'please enter a number.'\u003c/span\u003e));\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e otherNumber = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e'enter another number.'\u003c/span\u003e));\r\nfindSum(number, otherNumber);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThese are called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003etype annotations\u003c/strong\u003e, and they are a powerful way to prevent errors in your code. Another way they help us is by requiring the correct number of arguments. Say that we erroneously tried to call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindSum\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith only one number:\u003c/p\u003e\r\n\u003cdiv\u003eapp/sum.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e findSum = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst: number, second: number\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sum = first + second;\r\n  alert(\u003cspan class=\"hljs-string\"\u003e\"The sum of your two numbers is: \"\u003c/span\u003e + sum);\r\n}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e'please enter a number.'\u003c/span\u003e));\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e otherNumber = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e'enter another number.'\u003c/span\u003e));\r\nfindSum(number);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIt will warn us about this when we compile too - again, something that we are familiar with from other languages such as Java. This helps us prevent runtime errors in our code - we can't run a method without the correct number of arguments.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs sql\"\u003eapp/sum.ts(8,1): error TS2346: Supplied parameters \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ematch\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eany\u003c/span\u003e signature \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecall\u003c/span\u003e target.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJust as an experiment, to see why this is so useful, let's see what happens if we make this error in vanilla JavaScript. Let's remove the type annotations and save our\u003cspan\u003e \u003c/span\u003e\u003cem\u003esum.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile as\u003cspan\u003e \u003c/span\u003e\u003cem\u003esum.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eourselves, instead of using the compiler.\u003c/p\u003e\r\n\u003cdiv\u003eapp/sum.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e findSum = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, second\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sum = first + second;\r\n  alert(\u003cspan class=\"hljs-string\"\u003e\"The sum of your two numbers is: \"\u003c/span\u003e + sum);\r\n}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e'please enter a number.'\u003c/span\u003e));\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e otherNumber = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e'enter another number.'\u003c/span\u003e));\r\nfindSum(number);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we reload\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e, we see that our file runs in the browser. That's good, right?\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eBut we don't know about our error until we are told that the sum of our two numbers is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003c/strong\u003e. Imagine if this was a function inside of a huge project, being used by several other functions - this error would be a lot harder to track down if we didn't catch it with a compiler.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"wednesday-practice-looping-in-arrays","title":"Wednesday: Practice - Looping in Arrays","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Looping section, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow to use a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop\u003c/li\u003e\r\n\u003cli\u003eNaming conventions for arrays and the parameter in a loop\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAs you saw, loops can be really powerful! They're an incredibly important programming concept, and we'll be using them from here on out. Begin becoming comfortable utilizing loops by completing the exercises listed below. We'll begin with several exercises in the console and then move on to creating and updating small projects.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIf we used\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto loop through an array called \"kittens\", what should we call the parameter in the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction? Why?\u003c/li\u003e\r\n\u003cli\u003eWhat does the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e+=\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator do?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eLooping Practice in the Console\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMake an array of your friends' names. Loop through it and\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ea greeting to each.\u003c/li\u003e\r\n\u003cli\u003eWrite a loop to multiply an arbitrary amount of numbers. This should look similar to the code to sum numbers from the lesson.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Information\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eRemember\u003c/strong\u003e: When choosing a name for the variables in your loop, remember that it is good practice to use a plural for the array and the singular form of that word for the loop.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e languages = [\u003cspan class=\"hljs-string\"\u003e'HTML'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'CSS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'JavaScript'\u003c/span\u003e];\r\n\u0026gt; languages.\u003cspan class=\"hljs-keyword\"\u003eforEach\u003c/span\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(language)\u003c/span\u003e \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e'I love '\u003c/span\u003e + language + \u003cspan class=\"hljs-string\"\u003e'!'\u003c/span\u003e);\r\n  });\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe array is named\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the parameter is the singular\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguage\u003c/code\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-floats","title":"Thursday: Floats","type":"WikiPage","content":"\u003cp\u003eAll the pages we've made so far have been laid out pretty simply - top to bottom for block elements, and left to right for inline elements. But often we will want our pages to have more complexity, with columns or a sidebar, or text wrapping around an image. We can use floats to design these kinds of layouts.\u003c/p\u003e\r\n\u003cp\u003eLet's see what this looks like. Here's an example of text wrapping around an image:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/mango.jpg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"An image of a ripe mango.\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes are one of the world's favorite fruits. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd here's the CSS rule:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: left\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we pull up the page, we can see that the image \"floats\" to the left, and the text wraps to the right of it. You can resize your browser window to see that when the area for the text exceeds the image size, the text flows underneath the image. If you'd like, you can also make the text float to the right by using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efloat: right;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead.\u003c/p\u003e\r\n\u003cp\u003eLet's see how we can use floats to create a sidebar:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eAll about mangoes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"sidebar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eEating mangoes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes are delicious! Here are some ways to enjoy them:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eBy themselves\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eSmoothies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eFruit salad\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eWith coconut rice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"main\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eMangoes are one of the world's favorite fruits. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's the CSS:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.sidebar\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e30%\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: right\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellow\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRefresh the page, and now we have a yellow sidebar on the right of the page. Let's see one more example of floats and make some columns on the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eColumns\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's see some columns!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWith the CSS:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.column\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e350px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: left\u003c/span\u003e;\r\n  }\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we have columns! As you can see, floats are a useful way to lay out web pages.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-styling-with-classes","title":"Thursday: Styling with Classes","type":"WikiPage","content":"\u003cp\u003eYesterday, we learned how to style elements of the page. Unfortunately, we had no way of targeting specific parts of the page. So if we wanted one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto be green, all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelements on the page would need to be green. In this lesson, we will learn some HTML code that allows us to label HTML elements so that we can style specific parts of the page any way we'd like.\u003c/p\u003e\r\n\u003cp\u003eLet's create a new page with some paragraphs about my favorite animal, the giraffe. These will be regular paragraphs with an introductory summary at the top of the page.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eGiraffes!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eGiraffes\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eIt's time to learn about the mysterious giraffe!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThis is an introduction. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eAt first glance, giraffes are pretty magical creatures. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eAt vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e\u0026gt;\u003c/span\u003eAbout the Author\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere's some information about the author. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs a note here, the text used to fill these paragraphs is known as \u003cstrong\u003elorem ipsum\u003c/strong\u003e. It looks like Latin, but the words are jumbled and don't really have any meaning. Lorem ipsum text is often used as a placeholder for text when doing website design; you can search online for \"lorem ipsum\" and find many varieties and websites where you can copy the text.\u003c/p\u003e\r\n\u003cp\u003eThis page is nice, but let's the introductory paragraph to look more like an introduction - I want the text to be italicized.\u003c/p\u003e\r\n\u003cp\u003eTo label the introductory paragraph, first we add a class to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e    \u0026lt;p \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"intro\"\u003c/span\u003e\u0026gt;This \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e an introduction. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e eiusmod tempor incididunt ut labore et dolore magna aliqua.\u0026lt;/p\u0026gt;\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we can add a rule to our stylesheet that targets this paragraph by using a class selector. Here's what that looks like:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.intro\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we refresh the page, we see that the paragraph with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintro\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis italicized. In the rule, the HTML element with a class of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintro\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas targeted with the class selector\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintro\u003c/code\u003e. All class selectors begin with a period:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe can also apply a class to multiple tags. Let's say we want our info about the author to be red. Let's add some classes:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"author\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAbout the author\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"author\"\u003c/span\u003e\u0026gt;\u003c/span\u003eHere's some information about the author. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd here's the CSS rule:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.author\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe class selector targets all elements of a particular class. It's possible, however, for multiple elements on a web page to share a specific styling, but for one of those elements to differ slightly.\u003c/p\u003e\r\n\u003cp\u003eFor example, I want both the header and the paragraph with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto be red, but I want the paragraph text to be a smaller font than the rest of the paragraphs on the page. But what happens when I do this?\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.author\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-size\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e12px\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe paragraph text size is smaller, but so is the header. Instead, we can target the paragraph with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.author\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e\u003cspan class=\"hljs-class\"\u003e.author\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-size\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e12px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis code uses a new selector:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep.author\u003c/code\u003e. What's the difference between the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.author\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep.author\u003c/code\u003e selectors?\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.author\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector targets\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall elements\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep.author\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector targets only\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003eelements with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e. This type of selector allows you to be even more specific with your styling.\u003c/p\u003e","frontPage":false},{"exportId":"monday-parsing-integers","title":"Monday: Parsing Integers","type":"WikiPage","content":"\u003cp\u003eThe most common error beginning JavaScript students experience is attempting to call functions meant for numbers on strings. This happens especially frequently because\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eall values returned from a prompt are saved as strings\u003c/strong\u003e. This is true even if the user enters a number into a prompt without quotation marks! Unfortunately, this is simply how JavaScript works. If we wanted to collect a value from a user with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e, and perform arithmetic with this value, we would need to convert it into a number with JavaScript's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction. If not, we would receive some very unexpected output.\u003c/p\u003e\r\n\u003ch2\u003eCommon Data Type Errors\u003c/h2\u003e\r\n\u003cp\u003eHere's what can happen if you\u003cspan\u003e \u003c/span\u003e\u003cem\u003edon't\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eparse integers correctly. In the example below, we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto ask the user how old they are. The user enters 35. We then attempt to perform some arithmetic on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eage\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u0026gt; var age = prompt(\"Enter your age: \");\u003cbr\u003e\u0026gt; age + age;\u003cbr\u003e3535\u003c/pre\u003e\r\n\u003cp\u003eRemember,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eall values returned from a prompt are strings!\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eSo, even though the user entered a number,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eage\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis actually equal to the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"35\"\u003c/code\u003e. Since the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator can be used to concatenate strings\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eage + age\u003c/code\u003e actually returns\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"3535\"\u003c/code\u003e, instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e70\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eAvoiding Data Type Errors\u003c/h2\u003e\r\n\u003cp\u003eTo make a string a number, we parse it using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction like this:\u003c/p\u003e\r\n\u003cpre\u003e\u0026gt; var number = parseInt(\"5\");\u003cbr\u003e\u0026gt; number;\u003cbr\u003e5\u003c/pre\u003e\r\n\u003cp\u003eSo, to change our age from the example above into an integer, we do the following:\u003c/p\u003e\r\n\u003cpre\u003e\u0026gt; var inputtedAge = prompt(\"Enter your age: \");\u003cbr\u003e\u0026gt; var age = parseInt(inputtedAge);\u003cbr\u003e\u0026gt; age + age;\u003cbr\u003e70\u003cbr\u003e\u003ccode class=\"javascript hljs\"\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAlternatively, the code does the exact same thing on a single line. Here we immediately pass the string returned by the .prompt() function as the argument to the .parseInt() function:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e age = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(prompt(\u003cspan class=\"hljs-string\"\u003e\"Enter your age: \"\u003c/span\u003e));\u003c/code\u003e\u003cbr\u003e\u003ccode class=\"javascript hljs\"\u003e\u0026gt; age + age;\u003cbr\u003e\u003cspan class=\"hljs-number\"\u003e70\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdditional Information\u003c/h2\u003e\r\n\u003cp\u003eNote: The \u003ccode\u003eInt\u003c/code\u003e part of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.parseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis short for integer, which means that it's a whole number. If we wanted to convert something into a number with a decimal, we'd use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.parseFloat()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u0026gt; var pi = \"3.14\";\u003cbr\u003e\u0026gt; parseFloat(pi);\u003cbr\u003e3.14\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong style=\"font-family: sans-serif; font-size: 1rem;\"\u003eFloating point\u003c/strong\u003e\u003cspan style=\"font-family: sans-serif; font-size: 1rem;\"\u003e \u003c/span\u003e\u003cspan style=\"font-family: sans-serif; font-size: 1rem;\"\u003enumbers are simply numbers with decimals. If you're parsing a whole number, \u003c/span\u003euse\u003cspan style=\"font-family: sans-serif; font-size: 1rem;\"\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e,\u003cspan style=\"font-family: sans-serif; font-size: 1rem;\"\u003e if you're parsing a number containing a decimal point, \u003c/span\u003euse\u003cspan style=\"font-family: sans-serif; font-size: 1rem;\"\u003e \u003c/span\u003e\u003ccode\u003eparseFloat()\u003c/code\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-debugging-in-javascript","title":"Thursday: Debugging in Javascript","type":"WikiPage","content":"\u003ch2\u003eDebugging in Javascript\u003c/h2\u003e\r\n\u003cp\u003eAs you start writing more and more complex JavaScript, you'll run into increasingly difficult bugs and problems. Here are some approaches to debugging when something goes wrong.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eAs an example, let's use our Madlibs page, but with some errors I've introduced for us to debug. Here's the code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/code\u003e\u003ccode class=\"html hljs xml\"\u003e\u003cspan\u003e          \u0026lt;script   \u003c/span\u003e\u003cspan\u003esrc=\"https://code.jquery.com/jquery-3.3.1.min.js\" \u003c/span\u003e\u003cspan\u003eintegrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" \u003c/span\u003e\u003cspan\u003ecrossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;         \u003cbr\u003e\u003c/span\u003e\u003c/code\u003e\u003ccode class=\"html hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e          \u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scipts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e          \u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eA fantastical adventure\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e         \u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e         \u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e          \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e           \u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eFill in the blanks to write your story!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e           \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"blanks\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e             \u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAnother name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAn animal\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAn exclamation\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA past tense verb\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA noun\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e               \u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e              \u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eShow me the story!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e             \u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e            \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e            \u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"story\"\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e             \u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eA fantastical adventure\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e             \u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eOne day, \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e and \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e were walking through the woods, when suddenly a giant \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"animal\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e appeared. \"\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"exclamation\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\", \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e cried. The two of them \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"verb\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e as quickly possible, and when they were safe, \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e and \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"person2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e gave each other a giant \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"noun\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e             \u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e            \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e           \u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e          \u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cbr\u003e\u003cspan class=\"hljs-tag\"\u003e        \u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eand for \u003cem\u003escripts.js\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).sho();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen I load up this page, fill out the form, and click the submit button, nothing happens. Time to debug! The first step of debugging is to look for error messages. If we open up the JavaScript console, sure enough, there's an error:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGET file:///Users/ian/coderamp/debug/js/scipts.js index.html:7\u003c/code\u003e. This error tells us that the browser tried to get the file\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escipts.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebut couldn't find it. And hey, that's our problem - we left the\u003cspan\u003e \u003c/span\u003e\u003cem\u003er\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eout of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escripts.js\u003c/code\u003e. I can't tell you how many times I've seen students spend a long time debugging, just to find out they mis-spelled a filename, which also applies to the whole lot of you :-). Let's fix that typo and reload the page.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eGreat, no more errors in the JavaScript console. But when we submit our form, again, we get nothing. Let's use another tactic: pausing on exceptions. If we open our JavaScript console and switch to the tab on the top that says Sources, there's a button on the top right that looks like an octagon with a pause button. If we click it twice, it turns purple. This will cause JavaScript to stop running whenever there's an error. If we submit our form, sure enough, it pauses on and highlights the offending line. I've mis-typed the method name:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(\"#story\").sho()\u003c/code\u003e; should be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(\"#story\").show();\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's fix this and move forward. Now, we don't have any errors, but we still aren't seeing the story. Let's try another tactic: checking to see what code is executed. I do that by adding an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto a couple points in my code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          alert(\u003cspan class=\"hljs-string\"\u003e'Got to beginning of form submit!'\u003c/span\u003e);\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n          alert(\u003cspan class=\"hljs-string\"\u003e'Got to end of form submit!'\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, when I submit my form, I can see if all my code is run, or if the form breaks at some point in the middle. In this case, both dialog boxes open up. So there's nothing actually breaking or not getting run in my code. That should be a clue to step back and review the documentation for the tools I'm using to make sure I haven't left anything out. If I look back at the lesson on forms with jQuery, I can see that I forgot to include\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eevent.preventDefault()\u003c/code\u003e. Let's add that:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd now our paragraph with the story finally shows!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eBut, there's still a problem: none of what we type actually gets put into the story. Something is going wrong, but it's hard to tell what by just looking at our code. Wouldn't it be nice if we could drop in and run just one line of our code at a time, to see what's going wrong? Chrome has a handy tool called the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edebugger\u003c/code\u003ekeyword to do just that. Here's how to use it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003edebugger\u003c/span\u003e;\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, whenever Chrome JavaScript engine hits the debugger keyword, it will pause execution and let us run whatever code we please. This only happens when the JavaScript console window is open, so let's make sure that it is. Now, when we submit the form, we get the same kind of screen we got when we paused on the exception. Down in the bottom left, there's a little arrow and some lines. Clicking that will open up a JavaScript console below our code. Here, we can run JavaScript as if we were at the exact point where the debugger keyword is.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's copy and paste the next line of code:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar userInput = $(\"input.\" + blank).val();\u003c/code\u003e. Hm, it returns\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e. I would have expected it to return the first person's name. Let's type blank so that we can see what the value of that variable is. Sure enough, it's person1. Let's just run $(\"input.\" + blank); to make sure that we're selecting the correct element. Oh, this is the problem - we're getting back an empty array. That's not what we wanted. If we look back at our HTML, we can see that our inputs have IDs, not classes, so we should be using #s, not .s in our jQuery selector. Let's try changing that in the debugger console: sure enough,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(\"input#\" + blank);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns the proper element. If we go back to our code, remove the debugger and update our selector, our page now works.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOne last helpful JavaScript debugging tool I'll tell you about is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e. Let's go back to before we used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edebugger\u003c/code\u003e, and try\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n          blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input.\"\u003c/span\u003e + blank).val();\r\n            \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(userInput);\r\n            $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput).val();\r\n          });\r\n\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n          event.preventDefault();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we submit our form, the JavaScript console now says\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e6 undefined scripts.js:7\u003c/code\u003e. In other words, undefined was logged 6 times from line 7 of scripts.js. If we fix our code but leave the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein, the proper values get logged to the console.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eGenerally, I use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen there's a little piece of information I need to know that will help me debug, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edebugger\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen I need to explore my code to know what's going wrong.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eJust as a reminder, a useful debugging technique we explored before is changing the background color of an element to make sure you correctly selected what you were trying to, or checking in the Chrome developer tools under\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEvent Listeners\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eAnd those are the most important tricks of the trade for debugging.\u003c/p\u003e","frontPage":false},{"exportId":"monday-constructors-and-prototypes","title":"Monday: Constructors and Prototypes","type":"WikiPage","content":"\u003cp\u003eNow, let's explore how JavaScript uses constructors as blueprints for the creation of many new objects, and prototypes for adding methods to objects.\u003c/p\u003e\r\n\u003cp\u003eLet's start by taking a look at how some of the built-in JavaScript objects work.\u003c/p\u003e\r\n\u003ch2\u003eConstructors\u003c/h2\u003e\r\n\u003cp\u003eIf we look at the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\"\u003eMDN documentation for\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eString\u003c/code\u003e\u003c/a\u003e, we see that\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003econstructor\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003efor creating string objects. A constructor is a function that can be invoked using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003enew\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword to create new objects. To visually identify constructor functions, they are conventionally named with a capital first letter.\u003c/p\u003e\r\n\u003cp\u003ePreviously, we have created strings simply by adding\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e\" \"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earound the characters we want to identify as strings. This is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eliteral notation\u003c/strong\u003e. It triggers JavaScript to construct a string object with the String constructor. But we could also use the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor function directly:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e testGreeting = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eString\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n\r\n\u0026gt; testGreeting\r\n  \u003cspan class=\"hljs-built_in\"\u003eString\u003c/span\u003e {length: \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, [[PrimitiveValue]]: \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e}  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOr this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e testGreeting2 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eString\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"Hello!\"\u003c/span\u003e);\r\n  \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n\r\n\u0026gt; testGreeting2\r\n  \u003cspan class=\"hljs-built_in\"\u003eString\u003c/span\u003e {\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"H\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"e\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"l\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"l\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"o\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"!\"\u003c/span\u003e, length: \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e, [[PrimitiveValue]]: \u003cspan class=\"hljs-string\"\u003e\"Hello!\"\u003c/span\u003e}  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn these two examples, we see the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor is called with the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003enew\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword. The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eString\u003c/code\u003e constructor function added 2 properties to both objects -\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elength\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e[[PrimitiveValue]]\u003c/code\u003e. For\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etestGreeting2\u003c/code\u003e, where we provided a value as the argument, the constructor also added properties for the index positions of each character.\u003c/p\u003e\r\n\u003cp\u003eIn the case of creating a new String, it was actually easier to use the literal notation. But with more complex objects it will often be easier to use constructors when creating new objects that all have the same blueprint.\u003c/p\u003e\r\n\u003cp\u003eLet's make a constructor of our own. We'll imagine that we need to create many dogs from a dog blueprint since we know that all dogs will have the same properties. The difference from dog to dog will be in the values for those properties. Rather than repeating all of the code for each dog, we'll make a constructor function that we can use over and over again.\u003c/p\u003e\r\n\u003cp\u003eHere is a constructor function for\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat will initialize a new dog object with its attributes assigned to the values passed into the constructor function.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDog\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ename, colors, age\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name = name;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.colors = colors;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age = age;\r\n}  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen to create a new dog we can do the following:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e myPuppy = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Ernie\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e);  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can access the name of the new dog:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; myPuppy.name;\r\n  \u003cspan class=\"hljs-string\"\u003e\"Ernie\"\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe colors of the new dog:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; myPuppy.colors;\r\n  [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e]  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd its age:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; myPuppy.age;    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003emyPuppy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject here is considered an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einstance\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eof the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype. A constructor is the blueprint that specifies how to create an object. You can think of the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor here as a factory that can be used repeatedly to build a bunch of dog objects, using the constructor as a blueprint. Each dog object is an\u003cspan\u003e \u003c/span\u003e\u003cem\u003einstance\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype, so you have one\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype, defined by a constructor, with potentially many instances of that type.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDog\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ename, colors, age\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name = name;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.colors = colors;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age = age;\r\n}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e falcor = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Falcor\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nola = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Nola\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"white\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"black\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e patsy = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Patsy\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e);  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJust to reiterate, the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor above is used as a kind of factory or blueprint by each of the three lines below in order to construct the three dog objects. The\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efalcor\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003enola\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003epatsy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects are three instances of the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype. Each object that is an instance of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ename\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty, a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecolors\u003c/code\u003e property and an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eage\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty. For example:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; falcor.name\r\n  \u003cspan class=\"hljs-string\"\u003e\"Falcor\"\u003c/span\u003e\r\n\u0026gt; nola.name\r\n  \u003cspan class=\"hljs-string\"\u003e\"Nola\"\u003c/span\u003e\r\n\u0026gt; nola.age\r\n  \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e\r\n\u0026gt; patsy.colors\r\n  [\u003cspan class=\"hljs-string\"\u003e\"brown\"\u003c/span\u003e]  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we know how to create new objects with properties, but what about an object's methods? Let's take a look at methods for \u003ccode class=\"prettyprint\"\u003eString\u003c/code\u003e and \u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e next.\u003c/p\u003e\r\n\u003ch2\u003ePrototypes\u003c/h2\u003e\r\n\u003cp\u003eWe know that JavaScript also has a number of built-in string methods for each new String created. When we show our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etestGreeting2\u003c/code\u003e, those methods are not listed in the curly braces. This is because the constructor function is only used to create a new object's properties.\u003c/p\u003e\r\n\u003cp\u003eTo define methods, JavaScript employs\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eprototypes\u003c/strong\u003e. If we look at the methods for\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\"\u003eMDN\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eagain, we see that they are all listed with the notation, String.prototype.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eA prototype is just an object from which other objects inherit methods\u003c/em\u003e. So, all instances of the String constructor inherit from the String.prototype (just as all instances of Dog will inherit from Dog.prototype). When you call a method, JavaScript first looks at the methods on the object, and if it doesn't find them there, it looks to the prototype.\u003c/p\u003e\r\n\u003cp\u003eLet's take a look at how this works with our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etestGreeting2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estring object.\u003c/p\u003e\r\n\u003cp\u003eWe can run any of the String.prototype methods on the string \u003ccode class=\"prettyprint\"\u003etestGreeting2\u003c/code\u003e which currently has a value of \"Hello!\". Let's try\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.toUpperCase()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; testGreeting2.toUpperCase();\r\n  \u003cspan class=\"hljs-string\"\u003e\"HELLO!\"\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we execute this, JavaScript first searches the properties of the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etestGreeting2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. It doesn't find it. It then goes to the String.prototype object, finds the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etoUpperCase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod there, and processes the function as requested.\u003c/p\u003e\r\n\u003cp\u003eLet's add a custom method to String.prototype:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-built_in\"\u003eString\u003c/span\u003e.prototype.addExcitement = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{ \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e + \u003cspan class=\"hljs-string\"\u003e\"!!!!!!!!!\"\u003c/span\u003e };\r\n\r\n\u0026gt; testGreeting2.addExcitement();\r\n  \u003cspan class=\"hljs-string\"\u003e\"Hello!!!!!!!!!!\"\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs soon as the new method is added, all current and future instances of String will have access to it. Now I can run\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003etestGreeting2.addExcitement()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand get\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eHello!!!!!!!!!\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eIf I create a new string, it, too, will have access to the prototype's\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.addExcitement()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newGreeting = \u003cspan class=\"hljs-string\"\u003e\"Jambo\"\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\n\r\n\u0026gt; newGreeting.addExcitement();\r\n  \u003cspan class=\"hljs-string\"\u003e\"Jambo!!!!!!!!!\"\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe might think, why wouldn't methods just be added to the constructor instead of having a separate prototype object? If all methods were added to the constructor, EVERY new object would create additional function objects for EVERY method. By adding them to a shared prototype, the function objects are created once and shared by all of the instances, which is more efficient.\u003c/p\u003e\r\n\u003cp\u003eLet's look at our Dog again. We can add our original methods to the Dog.prototype so that all dogs have these behaviors available to them.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003eDog.prototype.speak = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Woof!\"\u003c/span\u003e);\r\n}\r\n\r\nDog.prototype.humanYears = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age * \u003cspan class=\"hljs-number\"\u003e7\u003c/span\u003e;\r\n} \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode class=\"prettyprint\"\u003emyPuppy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecan now speak:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; myPuppy.speak();\r\n  Woof!  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eand have its age calculated in human years:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; myPuppy.humanYears();\r\n  \u003cspan class=\"hljs-number\"\u003e21\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eEvery new dog will also have these methods.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt;\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newPuppy = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Dog(\u003cspan class=\"hljs-string\"\u003e\"Goliath\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"gray\"\u003c/span\u003e], \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n\r\n\u0026gt; newPuppy.speak();\r\n  Woof!\r\n\r\n\u0026gt; newPuppy.humanYears();\r\n  \u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn summary, every time we create a new dog using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003enew\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword, it calls the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor, which provides the blueprint for creating an instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype, giving it certain properties. The new instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype also automatically gains access to all methods defined on the shared\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eDog\u003c/code\u003e prototype.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-destructuring","title":"Wednesday: Destructuring","type":"WikiPage","content":"\u003ch2\u003e\u003cspan\u003eDestructuring\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eThis a process in ES6 where we extract values into variables from data stored in objects and arrays\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003eObject Destructuring\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eLet us see an example of object destructuring.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003econst person={\"first\":\"James\",\"last\":\"Muriuki\"};\r\nconst {first:firstname,last:lastname}=person;\r\nconsole.log(firstname);// James\r\nconsole.log(lastname); // Muriuki\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eWe create an object \u003c/span\u003e\u003cstrong\u003e\u003ci\u003eperson\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e and pass in a \u003c/span\u003e\u003cstrong\u003e\u003ci\u003efirst\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e and \u003c/span\u003e\u003cstrong\u003e\u003ci\u003elast\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e property. Then we extract the values and map them to new variables \u003c/span\u003e\u003cstrong\u003e\u003ci\u003efirstname\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e and \u003c/span\u003e\u003cstrong\u003e\u003ci\u003elastname.\u003c/i\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003econst {first:firstname}=person\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eThe above expression translates to \"Extract property \u003c/span\u003e\u003cstrong\u003e\u003ci\u003efirst\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e from object\u003c/span\u003e\u003ci\u003e\u003cspan\u003e person\u003c/span\u003e\u003c/i\u003e\u003cspan\u003e and map it to a new variable \u003c/span\u003e\u003cstrong\u003e\u003ci\u003efirstname\u003c/i\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003eArray Destructuring\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eUnlike the Object counterpart array destructuring is based on index.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003econst num =[1,2]\r\nconst[a,b]=num\r\nconsole.log(a);\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eIn array destructuring we map the values to the corresponding index of the value in the array.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false},{"exportId":"tuesday-using-atom-and-git","title":"Tuesday: Using Atom and Git","type":"WikiPage","content":"\u003cp\u003eIn this lesson, we are going to walk through creating our first webpage in the Atom text editor and tracking the process using Git. Make sure you have installed both of these on your computer before we begin (see the instructions in the \u003ca href=\"https://docs.google.com/document/d/1l3CkxKeZ49jcy5n-q_p_Nc0h5gkkc9ei5KtxWFXap1U/edit?usp=sharing\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/pages/monday-pre-course-setup-and-installations\" data-api-returntype=\"Page\"\u003ePre-Course Setup\u003c/a\u003e if you haven't already).\u003c/p\u003e\r\n\u003ch2\u003eOverview of Atom\u003c/h2\u003e\r\n\u003cp\u003eLet's take a quick tour of Atom. Open the program. When we open the editor, we arrive on an empty file with the name \"untitled\". If we add content to the file, we see the x at the top becomes a blue circle. This indicates that there is content that hasn't yet been saved. We'll save this file as\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eusing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.html \u003c/code\u003eextension to indicate that this will be a document written in HTML. The blue circle returns to a grey x and we know that our file's content has been saved.\u003c/p\u003e\r\n\u003cp\u003eAtom offers developers the ability to customize the editor's settings and shortcuts. Press\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCmd\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e,\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(Mac) or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCtrl\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e,\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(Ubuntu and Windows) to see the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSettings\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eview.\u003c/p\u003e\r\n\u003cp\u003eOne setting that we want to make sure we have in place is the tab length. Writing good code means making a habit of using consistent indentation. The standard for indenting lines of code is 2 spaces. We have confirmed that this is set to 2. So, rather than hitting the space bar twice, we can use the tab key for indentation.\u003c/p\u003e\r\n\u003cp\u003eYou won't need to worry too much about all of the customization possibilities now but as you start gaining coding experience, remember that you can return to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSettings\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eview to make updates to keyboard shortcuts, themes, or packages that add other functionality to the editor.\u003c/p\u003e\r\n\u003ch2\u003eGit Project Setup\u003c/h2\u003e\r\n\u003cp\u003eWe've already started using command line to navigate our computer. Let's switch gears a little and expand on what we're able to do using the command line and start using Git and GitHub. In this lesson, we will create a simple webpage and track the process using Git.\u003c/p\u003e\r\n\u003ch3\u003eTracking changes with Git\u003c/h3\u003e\r\n\u003cp\u003eAt Moringa School, every project that we create will have its own \u003cstrong\u003edirectory\u003c/strong\u003e (a folder in your laptop) and its own \u003cstrong\u003erepository\u003c/strong\u003e (a folder on Github). Now we are going to walk through creating a new project and tracking those changes with Git.\u003c/p\u003e\r\n\u003cp\u003eThe first thing we need to do is create the project directory on our own computers. We'll do this just like we have done previously - Git will come in shortly. Open up Terminal and navigate to the folder where you would like to create your projects.\u003c/p\u003e\r\n\u003cp\u003eI am going to create a new folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-projects\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einside of my computer's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDocuments \u003c/em\u003edirectory to hold all of the projects that I will create in class.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd \u003cspan class=\"hljs-constant\"\u003eDocuments\u003c/span\u003e\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir moringa-school-projects\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd moringa-school-projects\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we are located in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-school-projects\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, and we can add a new directory for this project. I am going to call this one\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(and just a bit of computer programming history for you: it's traditional to write some form of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehello world\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas the first program or example you write in a new language).\u003c/p\u003e\r\n\u003cpre\u003e$ mkdir hello-world\u003cbr\u003e$ cd hello-world\u003c/pre\u003e\r\n\u003cp\u003eNow we are located inside of our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, and we can turn it into a Git repository. We do this by\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einitializing\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eGit inside of the directory (make sure that you do this inside of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e directory! Remember, you can always see your location with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ pwd\u003c/code\u003e):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e$ git init\u003cbr\u003e\u003c/code\u003e\u003ccode class=\"hljs coffeescript\"\u003eInitialized empty Git repository \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-regexp\"\u003e/Documents/moringa-school-projects/hello-world/\u003c/span\u003e.git/\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs the confirmation message reads, the Git repository has been initialized inside of a directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.git\u003c/em\u003e. But when we try to list the contents of\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e) with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e, where is it?\u003c/p\u003e\r\n\u003cp\u003eDirectories that being with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ehidden\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edirectories, which means that they do not show up with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand. To view hidden files, we need to use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-a\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoption like this, which stands for \"all\":\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ ls \u003cspan class=\"hljs-operator\"\u003e-a\u003c/span\u003e\r\n.git\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThere's our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.git\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory! Let's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto it and see what's inside:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd .git\u003c/code\u003e\u003cbr\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\u003c/code\u003e\u003cbr\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-constant\"\u003eHEAD\u003c/span\u003e        description info        refs\r\nconfig        hooks       objects\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we're never actually going to be touching any of these files. The\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.git\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory is where all of the changes we make to our project will be tracked. Whenever we add, edit, or delete files, Git will be keeping track of those changes in here. This is actually why the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.git\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory is hidden in the first place - to prevent us from making any changes that could interfere with Git's job.\u003c/p\u003e\r\n\u003cp\u003eLet's navigate back up to our main project directory:\u003c/p\u003e\r\n\u003cpre\u003e$ cd ..\u003c/pre\u003e\r\n\u003cp\u003eNow that we've set up our Git repository, we need to tell Git who is working on the project. If you are working solo, you can skip this step - you've already set the global user name and email for all projects on your computer.\u003c/p\u003e\r\n\u003cp\u003eNow our project is set up with a Git repository initialized. Let's start adding files to track!\u003c/p\u003e\r\n\u003cp\u003eCreate an empty file in the project directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etouch hello-world.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow open the project in Atom using the following command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003eatom .\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ atom\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand tells the computer to open anything that follows it in Atom. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emeans current directory, so the entire directory should open up in Atom.\u003c/p\u003e\r\n\u003cp\u003eLet's add some text to\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ehello-world.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's what this looks like in Atom:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-03-atom_hello_world.jpg?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"Atom\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/812\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe little blue dot on the right of the page tab next to the file name (\u003cem\u003ehello-world.html\u003c/em\u003e) means that the file has unsaved changes. Save the file with\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFile\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSave\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the Atom menu bar.\u003c/p\u003e\r\n\u003cp\u003eWe can see what Git is doing with our files with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git status\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git status\r\nOn branch master\r\n\r\nInitial \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e\r\n\r\nUntracked files:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e include \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e what will be committed)\r\n\r\n    hello-world.html\r\n\r\nnothing added \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e but untracked files present (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e track)\u003cbr\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis is Git telling us, \"I noticed that you added a file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e, but unless you use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add\u003c/code\u003e, I am not going to do anything with it.\"\u003c/p\u003e\r\n\u003cp\u003eBefore we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add\u003c/code\u003e, let's quickly go over a concept that can be a little confusing when first learning git: the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003estaging environment\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand how it relates to a commit.\u003c/p\u003e\r\n\u003cp\u003eTo reiterate, a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecommit\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a record of what files you have changed since the last time you made a commit. A commit is like a save point, and we want to make a commit when we've made a notable change or addition to a project. Commits narrate the development of a project and allow you to go back to the state of a project at any point.\u003c/p\u003e\r\n\u003cp\u003eSo, how do you tell Git which files to put into a commit? This is where the staging environment comes in. As we just saw, when you make changes to a repo, Git notices that a file has changed but won't do anything with it.\u003c/p\u003e\r\n\u003cp\u003eTo add a file to a commit, we first need to add it to the staging environment. To do this, we can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add \u0026lt;filename\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand. Here is how we add\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add hello-world.html\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git status\u003c/code\u003e, we see that Git is tracking\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git status\r\nOn branch master\r\n\r\nInitial \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e\r\n\r\nChanges \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be committed:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git rm --cached \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e unstage)\r\n\r\n    new file:   hello-world.html\u003cbr\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOnce you've used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to add all the files you want to the staging environment, you can then tell Git to package them into a commit using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand. Let's do that now.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Add initial hello world page\"\u003c/span\u003e \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo make a commit, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand followed by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-m \u003c/code\u003eoption (for \"message\"), followed by a short message describing the commit.\u003c/p\u003e\r\n\u003cp\u003eFor consistency, commit messages should be in present tense and describe the change(s) made. As a rule of thumb, they should complete the phrase, \"This commit will...\". So when we look back at our commit history, we know that this commit will \"add initial hello world page\".\u003c/p\u003e\r\n\u003cp\u003eWe can look at our Git commit history with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e$ git log commit de955b7ef50670e42d21f2366ea09cf517379475 Author: Albert Einstein \u0026lt;einstein@email.com\u0026gt; Date: Tue May 23 16:50:58 2017 +0300 Add initial hello world page\u003c/pre\u003e\r\n\u003cp\u003eThis command lists the commits made in a repository in reverse chronological order, so the most recent commits show up first. As we can see, this commit has been assigned a unique collection of numbers and letters,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ede955b7ef50670e42d21f2366ea09cf517379475\u003c/code\u003e. From now on, whenever we would like to return to this project exactly as it is right now, we will be able to return to this commit.\u003c/p\u003e\r\n\u003cp\u003eAll right, let's add a short paragraph to our page to introduce ourselves:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ehello-world.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first website! I am about to embark on the exciting journey of learning how to code. Won't you join me?\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's check out our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit status\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand see what it tells us:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git status\r\nOn branch master\r\nChanges not staged for \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eupdate\u003c/span\u003e what will be committed)\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git checkout -- \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e discard changes \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e working directory)\r\n\r\n    modified:   hello-world.html\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eno\u003c/span\u003e changes added \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e/\u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git commit -a\"\u003c/span\u003e)\u003cbr\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGit knows that\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehas been modified, but the changes still need to be added to the staging environment and then committed. Let's do that now, using another option for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git add .\r\n$ git \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e -m \u003cspan class=\"hljs-string\"\u003e\"Add intro paragraph\"\u003c/span\u003e\r\n[\u003cspan class=\"hljs-keyword\"\u003emaster\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003ead09ba] \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e intro paragraph\r\n \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e file \u003cspan class=\"hljs-keyword\"\u003echanged\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e insertion(+)\u003cbr\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis time, we used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add .\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add hello-world.html\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for the current directory (just like in the case of the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ atom .\u003c/code\u003e), and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add .\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill add any changes in the directory that have not yet been added to the staging environment, so we can add multiple files at the same time.\u003c/p\u003e\r\n\u003cp\u003eLet's look at our project history now:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003ead09ba06206efdf5be66c56b0e425ed56ac70d1\r\n\u003c/span\u003e\u003c/code\u003e\u003ccode class=\"hljs sql\"\u003e\u003cspan class=\"hljs-operator\"\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/code\u003eDate: Tue May \u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e26\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e22\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e +\u003cspan class=\"hljs-number\"\u003e0300\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e intro paragraph \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e de955b7ef50670e42d21f2366ea09cf517379475 Author: Grace Hopper \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e James Bond \u0026lt;grace+james@\u0026gt; \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Tue May \u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e58\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e +\u003cspan class=\"hljs-number\"\u003e0300\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial hello world page\u003c/pre\u003e\r\n\u003cp\u003eNotice that the most recent commit is at the top. We can make this a little easier to read by adding the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e--oneline\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoption like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ git \u003cspan class=\"hljs-built_in\"\u003elog\u003c/span\u003e --oneline\r\n\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003ead09ba Add intro paragraph\r\nde955b7 Add initial hello world page\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe seven-character string before each message is also a unique identifier for the commit and can be used in the same way (we will see how in an upcoming lesson).\u003c/p\u003e\r\n\u003cp\u003eThis may seem like a lot of work for such minor changes on a single web page, but as we start building more projects - and more complex projects - we will see just how useful it is to track changes to our code this way.\u003c/p\u003e\r\n\u003ch2\u003eRemote repositories on GitHub\u003c/h2\u003e\r\n\u003cp\u003eSo far, our code only exists on the machines where they were written. We have been tracking our changes in a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elocal\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eGit repository, which is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.git\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edirectory we've seen. However, it would be good to have a copy of our work backed up online, especially when our projects grow in size and have real-world implications. More importantly, we will need some way of collaborating with others on our work. When we want to push our work to the world, we will push it to a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eremote\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003erepository on GitHub. In this lesson, we will explore GitHub and how to use it.\u003c/p\u003e\r\n\u003cp\u003eWhat do we mean when we say local and remote? When we work on a repository that we can only access from the computer on which it is saved, we call this a local repository. All the code we have written so far has been written locally. If we want to work on the project from another device, we won't be able to access it. A remote repository, on the other hand, is a repository that is saved in a location outside of the computer where it was created, but still accessible by that computer (and other computers as well). At Moringa School, we will generally be saving our work to remote repositories.\u003c/p\u003e\r\n\u003cp\u003eLet's start by pushing our local repository to a remote repository on GitHub.\u003c/p\u003e\r\n\u003cp\u003eThe first thing we need to do is create the remote repository on GitHub. Each partner needs to create a repository on their own GitHub account. Both remote repositories will link to the same local repository, but this will give each of you a personal record of the project.\u003c/p\u003e\r\n\u003cp\u003eOnce you're logged in, click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew Repository\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton, which will take you to the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/new\"\u003e\u003cem\u003eCreate New Repository \u003c/em\u003epage\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-03-new_repo_screen-1.png?canvas_download=1\" alt=\"MP-W1D1-03-new_repo_screen-1.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/815\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's go over the options on this page.\u003c/p\u003e\r\n\u003cp\u003eThe text box under\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRepository Name\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis where we enter the name of the repository. You can name it anything you'd like, but give it a name that helps you identify the repository. It makes sense to give it the same name as the project folder for your local repository. For this project, let's use \"hello-world\".\u003c/p\u003e\r\n\u003cp\u003eUnderneath the repository name, you can enter a description. The description is optional, but it can be helpful for others and your future self to have a quick reference for the description of the repository content.\u003c/p\u003e\r\n\u003cp\u003eYou have the option to make a repository public or private. Because we're using free GitHub accounts, we can only select the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePublic\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoption. As the page notes, anyone can see a public repository, but you can choose who has permission to contribute to it.\u003c/p\u003e\r\n\u003cp\u003eThe last option asks whether you would like to initialize the project with a README. A README file contains information about the contents of the repository - stuff like the authors, description, setup instructions, and licensing information. Do not select this box. We will explore README files in an upcoming lesson.\u003c/p\u003e\r\n\u003cp\u003eWith the repository name and description set, click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCreate Repository\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton. You will be taken to a page that looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-04-empty_repo.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"MP-W1D1-04-empty_repo.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/822\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWith this empty repository in place, we can push our locally-stored code to the new remote location.\u003c/p\u003e\r\n\u003cp\u003eFirst, we need to tell our local repository that a remote repository even exists somewhere online. We do this by adding it to Git's record. Just like Git wouldn't do anything with our files until we used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add\u003c/code\u003e, it won't acknowledge our remote repository yet, either.\u003c/p\u003e\r\n\u003cp\u003eTo tell the repository about the remote location, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit remote add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cpp\"\u003e$ git remote add origin https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit remote add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand takes two arguments:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe remote name, for example \u003cspan style=\"font-family: monospace;\"\u003e\u003cspan style=\"font-size: 13px;\"\u003eorigin\u003c/span\u003e\u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe remote name can be anything - it's a nickname for the remote repository at the URL provided. By convention, the default name for the remote repository is named \"\u003cspan\u003eorigin\", so we gave it that name here. However, you can give the remote any name you want, as well as work with multiple remotes.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThe remote location or URL, for example\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://github.com/moringaschool/hello-world.git\u003c/code\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThis is the URL found in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eQuick setup\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebox at the top of the empty repository page\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePlease note that your command should include your repository info. Our URL is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://github.com/moringaschool/hello-world.git\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein this example, but you want to replace this with your own URL.\u003c/p\u003e\r\n\u003cp\u003eNow Git knows that there is a remote repository, and it's where you want your local repository changes to go. To confirm that Git has done this successfully, run this command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit remote -v\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe response looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs nginx\"\u003e\u003cspan class=\"hljs-title\"\u003eorigin\u003c/span\u003e    \u003cspan class=\"hljs-url\"\u003ehttps://github.com/moringaschool/hello-world.git\u003c/span\u003e (fetch)\r\norigin    \u003cspan class=\"hljs-url\"\u003ehttps://github.com/moringaschool/hello-world.git\u003c/span\u003e (push)\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-v\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoption will give you a list of all of the remote repositories that your local repository knows about. There's one repository and it’s listed twice, which means it is available to push information to and to fetch information from. If both you and your partner have added remote repositories, then both repositories should be listed.\u003c/p\u003e\r\n\u003cp\u003eWe are finally ready to push our code from local to remote. In other words, we will be copying it from our machine to the location on GitHub. To do this, we will use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit push\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin master\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit push\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand takes two arguments.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFirst, we provide the name of the remote repository location. In this example, we wanted to push to the remote repository we just created, so we can use the nickname \u003cspan style=\"font-family: monospace;\"\u003e\u003cspan style=\"font-size: 13px;\"\u003eorigin \u003c/span\u003e\u003c/span\u003ethat we created.\u003c/li\u003e\r\n\u003cli\u003eSecond, we provide the name of the version of the code (also known as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebranch\u003c/strong\u003e, which we will learn more about in an upcoming lesson) we are pushing. As we start building more complex projects, we will have multiple versions of code at various stages of development on a single, local device. At the moment, we only have one branch, the \"master\" branch.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the name given to this branch by Git, and the master is always considered the master copy.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWhen you push to GitHub on a computer where the user has not been set globally, the terminal will prompt you to enter your GitHub login information. This is GitHub protecting your account - only the owner of a repository is allowed to push to it. Once you have entered your login information, the terminal will give you some feedback that it is pushing your code to the remote repository. Go ahead and refresh the repository's page on GitHub, and you can see the file structure of the project, and the same commits that we saw in the terminal.\u003c/p\u003e\r\n\u003ch2\u003eCloning from GitHub\u003c/h2\u003e\r\n\u003cp\u003eAll right, we've pushed code from our personal machine up to GitHub. But as we mentioned before, one of the big advantages to using a service like GitHub is how it lets us collaborate with others on the same code. This requires copying the code from the remote repository into a local repository, a process called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecloning\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eTo practice this, first, we need to remove the local repository from our personal computers. If you are in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory (check with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epwd\u003c/code\u003e):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ \u003cspan class=\"hljs-built_in\"\u003epwd\u003c/span\u003e\r\nDocuments/moringa-school-projects/hello-world\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMove up one directory with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd ..\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand remove the folder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd ..\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003erm -rf hello-world\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow the folder is gone, and we can clone our remote repository back onto our computers. On the main GitHub page for the repository, find the button that says\u003cspan\u003e \u003c/span\u003e\u003cem\u003eClone or download\u003c/em\u003e. A dialog box opens containing the URL for the repository. This is the same URL as the one we used for the remote. Copy the URL (either select the text and copy it manually, or click on the clipboard button next to the URL), and we will clone the repository using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit clone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand in the terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003eclone\u003c/span\u003e https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe terminal will print some feedback that it has successfully cloned the repository. Go ahead and list the contents of the folder and see that we now have a\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nhello-world\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we navigate into\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello-world\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit log\u003c/code\u003e, we can see that our previous commits are still part of this repository.\u003c/p\u003e\r\n\u003cp\u003eTake a look at the Git remotes for the repository:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cpp\"\u003e$ git remote -v\r\norigin    https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git (fetch)\u003c/span\u003e\r\norigin    https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git (push)\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe see that the remote repository is automatically linked, and by default, it has the name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e. If we make changes to our local repository and want to push those to GitHub, we will use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eremote nickname, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin master\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOne more (important) thing about Git repositories. Make sure that you never create or clone a repository inside of an existing repository. This creates something called a\u003cspan\u003e \u003c/span\u003e\u003cem\u003esubmodule\u003c/em\u003e, which has an icon like the one here for\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewild-beasts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon GitHub:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-06-submodule.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/814\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThere are cases when you would want to do this, but for our purposes, it will only interfere with our Git process.\u003c/p\u003e\r\n\u003cp\u003eAll right! We've just covered\u003cspan\u003e \u003c/span\u003e\u003cem\u003ea lot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof ground here! Don't worry about memorizing everything that we did here, and use the cheat sheet for reference when using Git in your daily workflow. It's okay if everything isn't making perfect sense right now - we will be using Git every day while at Moringa School, and like anything else, it will become more natural with practice.\u003c/p\u003e","frontPage":false},{"exportId":"monday-javascript-for-web-and-front-end-objectives","title":"Monday: JavaScript for Web and Front-End Objectives","type":"WikiPage","content":"\u003cp\u003e\u003cspan\u003eIn this section, we will be learning how to use the Bootstrap framework to style our pages, and how to use jQuery, an extensive JavaScript library to help make our web pages interactive.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eWe will start out by reviewing our HTML and CSS skills to learn how to use Bootstrap to create professional, responsive websites quickly and easily. If you need to spend some time reviewing HTML and CSS, please take some time to do that today - we will need those skills when we use jQuery.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThen we will move on to the basics of jQuery to make interesting, interactive pages:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eLearn key jQuery concepts like callbacks and event handlers.\u003c/li\u003e\r\n\u003cli\u003eShow, hide and toggle HTML elements.\u003c/li\u003e\r\n\u003cli\u003eUnderstand the Document Object Model (DOM) and how JavaScript changes the displayed page, not the HTML.\u003c/li\u003e\r\n\u003cli\u003eTraverse and manipulate the DOM.\u003c/li\u003e\r\n\u003cli\u003eCreate forms to gather input from the user.\u003c/li\u003e\r\n\u003cli\u003eManipulate the attributes of HTML elements.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThroughout all of this, we will understand how to good programming practices to separate our back-end and front-end code.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-promises-and-asynchrony-managing-api-keys","title":"Tuesday: Promises and Asynchrony; Managing API Keys","type":"WikiPage","content":"\u003ch2\u003eAsynchrony and Promises\u003c/h2\u003e\r\n\u003cp\u003eThe more you write JavaScript code, the more you'll need to keep in mind the concept of\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003easynchronicity\u003c/strong\u003e. Asynchronicity refers to the way that JavaScript code can be executed out of order. Here's an easy way to see asynchrony in the code we just wrote:\u003c/p\u003e\r\n\u003cdiv\u003eweather-interface.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"js hljs javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e apiKey = \u003cspan class=\"hljs-string\"\u003e\"YOUR-API-KEY-GOES-HERE\"\u003c/span\u003e;\r\n\r\n$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e'#weatherLocation'\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e city = $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val();\r\n    $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $.get(\u003cspan class=\"hljs-string\"\u003e'http://api.openweathermap.org/data/2.5/weather?q='\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e'\u0026amp;appid='\u003c/span\u003e + apiKey, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresponse\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"The humidity in \"\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e\" is \"\u003c/span\u003e + response.main.humidity + \u003cspan class=\"hljs-string\"\u003e\"%\"\u003c/span\u003e);\r\n    });\r\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Notice: The GET request has been made.\"\u003c/span\u003e);\r\n  });\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, before we run this code, which statement do you think will be logged to the console first? Reading from top to bottom, we'd expect to see the humidity before the notice. But when we actually run the code, we'll see them in the reverse order.\u003c/p\u003e\r\n\u003cp\u003eRemember that AJAX stands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAsynchronous\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eJavaScript And XML. When an AJAX request is made, the code after it will run before the the callback code. The asynchronous nature of programming in JavaScript can be confusing at times, but it's extremely powerful, as it prevents the user interface from locking up during long-running events like AJAX requests, which often take half a second or more to complete.\u003c/p\u003e\r\n\u003ch3\u003ePromises\u003c/h3\u003e\r\n\u003cp\u003eIn recent years, JavaScript developers have embraced a standard way of dealing with asynchrony called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epromises\u003c/strong\u003e. A promise is an object representing an operation that hasn't been finished yet.\u003c/p\u003e\r\n\u003cp\u003eA promise has three states:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epending\u003c/strong\u003e,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efulfilled\u003c/strong\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003erejected\u003c/strong\u003e. Pending is the object's initial state representing that the operation has not been finished yet. A promise is fulfilled when the operation has successfully completed - rejected means that the operation failed for some reason.\u003c/p\u003e\r\n\u003cp\u003eLet's refactor our code to use promises. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethen()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod of a promise is called when a promise enters the fulfilled state:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"js hljs javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e apiKey = \u003cspan class=\"hljs-string\"\u003e\"YOUR-API-KEY-GOES-HERE\"\u003c/span\u003e;\r\n\r\n$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e'#weatherLocation'\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e city = $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val();\r\n    $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $.get(\u003cspan class=\"hljs-string\"\u003e'http://api.openweathermap.org/data/2.5/weather?q='\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e'\u0026amp;appid='\u003c/span\u003e + apiKey).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresponse\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"The humidity in \"\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e\" is \"\u003c/span\u003e + response.main.humidity + \u003cspan class=\"hljs-string\"\u003e\"%\"\u003c/span\u003e);\r\n    });\r\n  });\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis is very similar to using callbacks, and you might wonder what the advantage is. Promises really shine when you have multiple asynchronous operations that depend on each other. Here's an example taken from a\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.quora.com/Whats-the-difference-between-a-promise-and-a-callback-in-Javascript\" target=\"_blank\"\u003eQuora post on promises\u003c/a\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"js hljs javascript\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisUserTooYoung\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eid, callback\u003c/span\u003e) \u003c/span\u003e{\r\n  openDatabase(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003edb\u003c/span\u003e) \u003c/span\u003e{\r\n    getCollection(db, \u003cspan class=\"hljs-string\"\u003e'users'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ecol\u003c/span\u003e) \u003c/span\u003e{\r\n      find(col, {\u003cspan class=\"hljs-string\"\u003e'id'\u003c/span\u003e: id},\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresult\u003c/span\u003e) \u003c/span\u003e{\r\n        result.filter(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003euser\u003c/span\u003e) \u003c/span\u003e{\r\n          callback(user.age \u0026lt; cutoffAge)\r\n        });\r\n      });\r\n    });\r\n  });\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis can be refactored using promises much more cleanly:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"js hljs javascript\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisUserTooYoung\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eid\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e openDatabase(db)\r\n    .then(getCollection)\r\n    .then(find.bind(\u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e, {\u003cspan class=\"hljs-string\"\u003e'id'\u003c/span\u003e: id}))\r\n    .then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003euser\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e user.age \u0026lt; cutoffAge;\r\n    });\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eEven though our code probably won't be as complex as this, it's a good idea to get used to using promises now.\u003c/p\u003e\r\n\u003cp\u003eLet's add some error handling to our code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"js hljs javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e apiKey = \u003cspan class=\"hljs-string\"\u003e\"YOUR-API-KEY-GOES-HERE\"\u003c/span\u003e;\r\n\r\n$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e'#weatherLocation'\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e city = $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val();\r\n    $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $.get(\u003cspan class=\"hljs-string\"\u003e'http://api.openweathermap.org/data/2.5/weather?q='\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e'\u0026amp;appid='\u003c/span\u003e + apiKey).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresponse\u003c/span\u003e)\u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"The humidity in \"\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e\" is \"\u003c/span\u003e + response.main.humidity + \u003cspan class=\"hljs-string\"\u003e\"%\"\u003c/span\u003e);\r\n    }).fail(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eerror\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(error.responseJSON.message);\r\n    });\r\n  });\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we added another chained method call:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.fail()\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efail()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is called when a promise enters the rejected state. An object representing the error is passed into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efail\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod if it is called. By digging into this object's built in properties with the syntax\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eerror.responseJSON.message\u003c/code\u003e, we can print the error object’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emessage\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty to the browser and our user can see what went wrong.\u003c/p\u003e\r\n\u003ch2\u003eSecurity\u003c/h2\u003e\r\n\u003cp\u003eNow, in the real world, API keys typically should not be stored in the client side JavaScript because it is not secure. Especially if the API has a limit on the number of requests, or you're charged for using the API, or it gives access to sensitive information, you wouldn't want somebody to be able to find your API key just by looking in the source code. It would be completely visible to the prying eyes of anyone with development tools in the browser, even if we minify it.\u003c/p\u003e\r\n\u003cp\u003eIn a production ready app, your JavaScript would typically make an AJAX request to your own web server, which would then make the appropriate request to the API. If that request requires an API key, that would be safely stored on the server too. (In the case where the browser needed to talk to the API directly, there are more complicated procedures involving single-use tokens.)\u003c/p\u003e\r\n\u003ch3\u003eManaging API Keys\u003c/h3\u003e\r\n\u003cp\u003eWe can approximate this by using a file, stored only on our local machines since we're using a local server. Then we would include the file in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to make sure our key isn't committed to a public GitHub repository.\u003c/p\u003e\r\n\u003cp\u003eAnyone who uses the app will need their own key in a local file with the same filename and location - we should make sure to include instructions about this in our README.\u003c/p\u003e\r\n\u003cp\u003eLet's create a file in the top level of our project directory called\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.env\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto hold our API key. The\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.env\u003c/em\u003e\u003cspan\u003e \u003c/span\u003estands for \"environment variables\". This is a common file extension for a configuration file used to set up environmental variables, such as authentication information or paths in our local development environment. (Rails projects use a\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.env\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile, and a lot of Node projects use one too.) Let's paste our API key in there and store it in an exported property named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapiKey\u003c/code\u003e.\u003c/p\u003e\r\n\u003cdiv\u003e.env\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"js hljs javascript\"\u003eexports.apiKey = \u003cspan class=\"hljs-string\"\u003e\"3cd9353e5a1fe51e7565fa314b08c5d6\"\u003c/span\u003e;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis is just like how we used the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eexports.calculatorModule = Calculator;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto export our entire\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCalculator\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject declaration. In that lesson, we stored the constructor function and its\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epingPong\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod as a property on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eexports\u003c/code\u003e, but here we are just storing a string containing our API key as a property on the global\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eexports\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject so that we can access it in the rest of our app.\u003c/p\u003e\r\n\u003cp\u003eNow, let's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis file to get access to the variable in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eweather-interface.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cdiv\u003eweather-interface.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"js hljs javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e apiKey = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./../.env'\u003c/span\u003e).apiKey;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAgain, this is the same syntax we used to be able to access the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCalculator\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar Calculator = require('./../js/pingpong.js').calculatorModule;\u003c/code\u003e. We load the exported parts of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.env\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile, using dot notation to access the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapiKey\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable and store its value in the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapiKey\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eFinally, let's add it to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cdiv\u003e.gitignore\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"js hljs javascript\"\u003enode_modules/\r\n.DS_Store\r\nbower_components/\r\nbuild/\r\ntmp/\r\n.env\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe don't need to worry too much about security with the public APIs that we will be using, since these apps aren't for real-life use, but it's good to be aware of the security issues around API keys. Make sure that as you explore APIs this week that you are storing your API keys and any other sensitive information locally in an ignored\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.env\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. Then, also make sure to include instructions for your user on how to get their own API key and put it in their own\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.env\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to be able to clone and run your project.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-practice-javascript-arrays","title":"Wednesday: Practice - JavaScript Arrays","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Arrays section, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eArrays can contain numbers, strings, variables, expressions and other arrays\u003c/li\u003e\r\n\u003cli\u003eArrays have methods like\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.pop()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.reverse()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.push()\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eHow to access an element from an array\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFamiliarize yourself with arrays by completing the exercises below by practicing creating and manipulating arrays in the JavaScript console.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a pointer? When might we see one when working with JavaScript arrays?\u003c/li\u003e\r\n\u003cli\u003eHow can we use square bracket notation to isolate a single element in an array? What does this notation look like?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.pop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.push()\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eWhat types of objects can be placed into a JavaScript array?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003ePlay around with arrays of your own by completing each of the following in the JavaScript console:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMake an array of your siblings' names or your favorite movie characters' names.\u003c/li\u003e\r\n\u003cli\u003eMake an array of your parents' names.\u003c/li\u003e\r\n\u003cli\u003eCombine these two arrays using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003econcat()\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eAdd your pets' names using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003epush()\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eReverse the order of the array.\u003c/li\u003e\r\n\u003cli\u003eAccess one of your parents' names using the square bracket notation.\u003c/li\u003e\r\n\u003cli\u003eUpdate the name of one of your parents using the index and square bracket notation.\u003c/li\u003e\r\n\u003cli\u003eCheck out methods from the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype#Methods\" target=\"_blank\"\u003eMDN\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e(stick to the accessor and mutator methods sections). Try at least five of them.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-making-the-most-of-moringa-school","title":"Monday: Making the Most of Moringa School","type":"WikiPage","content":"\u003ch1\u003e\u003cstrong\u003eGetting Started\u003c/strong\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWelcome to the Moringa School family, where we assist you on your journey to becoming a programmer in a few short months. Please make sure to read through both this entire document and the \u003c/span\u003e\u003ca href=\"https://docs.google.com/document/d/1p0W3mON800mKpdsJNu5Efp-axEnzVZNnAhp2K9cihJY/edit?usp=sharing\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eStudent Handbook\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e before the first day of coursework so that we all start on the same page. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBefore we get started, we want to share our general philosophy at Moringa School. Any experienced developer will tell you that the more you learn about programming, the more you realize just how little you know. Moringa School is structured based off the understanding that being a developer is not about learning a fixed set of skills that you can apply for the rest of your career. From our personal experiences as software engineers and many conversations with hiring partners of all types, we believe that the languages, tools, and approaches you'll learn here are (still very important, but) much less important than the general skills of \u003c/span\u003e\u003cstrong\u003esolving problems\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Successful programmers embrace the limitations of what they can know, and get good at facing ambiguity and figuring out what they don't know. They develop a mindset in which \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003enot knowing\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e the answer isn't a source of anxiety, but rather an opportunity to learn and explore.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow, let's explore what you will learn. Each course here lines up with the different courses Moringa School offers. Our \"Moringa Prep\" course is designed to take you from limited experience to creating basic web pages, styling those pages so that they look nice, and adding interactivity. We also build your foundational problem solving skills, and learn about the tools that are essential to the programming trade. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs a student, once you have successfully completed Moringa Prep or tested straight into Moringa Core, you will be ready to dive into a one of our tracks. Regardless of which track you decide to take, Moringa School students are required to learn JavaScript. JavaScript is the only programming language web browsers understand (HTML and CSS are markup and styling languages, respectively, not programming languages), and with the importance of the web in modern application development, every programmer needs to know JavaScript. If you're more interested in front-end work, JavaScript will let you build out interactivity in your web pages, and if you're more interested in back-end work, JavaScript will let you wire up user interfaces to work with your backends and is even used to write backend code in some cases.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFinally, you'll pick a framework to learn. Android is used in mobile application development; Django is generally used for large-scale web applications. Don't get too hung up on picking the \"right\" language and framework, though. Odds are, at your first job, you might need to learn an entirely new set of skills and practices, and maybe even a new programming language. That's part of why we require all students to study at least two languages - with two under your belt, it's not too difficult to pick up a third.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNo matter what languages and framework you learn, our best advice is not to think of Moringa School as a place to learn a specific language like Python or Java, or a framework like Django. Instead, think of Moringa School as a place to \u003c/span\u003e\u003cstrong\u003e\u003ci\u003elearn how to learn\u003c/i\u003e\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOkay, let's get going!\u003c/span\u003e\u003c/p\u003e\r\n\u003ch1\u003e\u003cstrong\u003eMaking the Most of Moringa School\u003c/strong\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eYou've done it, you're in Moringa School! You've committed time, energy and dedication toward learning how to code. We can’t wait to see what you create, and want to do everything we can to support your success. As you're beginning to understand, we feel the biggest part of that success lies in your mindset and how you approach the challenging months that lie ahead.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSome things to remember are that this program is a marathon, not a sprint, and probably very different than any previous educational experiences you may have had. Differently from how your experience in high school, college, or your workplaces may have been - there are no shortcuts in our program. We need to have your full commitment in order to help make your own journey a success. It’s up to \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eyou \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003eto make the most of your experience!\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eRead the article \u003c/span\u003e\u003ca href=\"https://www.linkedin.com/pulse/8-easy-ways-up-your-code-school-experience-perry-eising\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e8 Easy Ways to Screw Up your Code School Experience\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e, which provides a lot of insight into life at a code school and how to make the most of it.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eRead the article \u003c/span\u003e\u003ca href=\"https://blog.ragnarson.com/2016/10/07/developing-as-a-developer.html\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eDeveloping as a Developer\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e to understand what the process of going to beginner to expert looks and feels like.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eRead the article \u003c/span\u003e\u003ca href=\"https://www.vikingcodeschool.com/posts/why-learning-to-code-is-so-damn-hard\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhy Learning to Code is so Damn Hard\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e for a bit of mental preparation about the awesome and challenging experience you’re about to begin.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf this is your first week, use this information to prepare yourself with the best possible mindset \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003ebefore\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e you walk in the door. If this is your 5th, 10th, or even 15th week, revisit this article to re-assess and recalibrate your perspective and approach in your remaining time here. It's never too late to make improvements!\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAlso, as a developer it is important to be up to date with what is happening in the tech industry. Read \u003c/span\u003e\u003ca href=\"https://news.ycombinator.com/\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eHacker News\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e often to see what is happening in the industry, and I recommend signing up for a \u003c/span\u003e\u003ca href=\"https://hndigest.com/\"\u003e\u003cspan style=\"font-weight: 400;\"\u003edaily digest\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e so that you can receive the top articles in your email inbox daily.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-introduction-to-css","title":"Wednesday: Introduction to CSS","type":"WikiPage","content":"\u003cp\u003eSo far, the sites we've made have not been very exciting. In this lesson, we're going learn how to change that with CSS, which stands for Cascading Style Sheets. CSS is a language that lets us add style to our webpages. It lets us separate the page content and structure from the style and appearance.The\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecascading\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the name refers to the way that styles are applied to an element - we'll get more into that later.\u003c/p\u003e\r\n\u003cp\u003eLet's go back to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-website\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eproject. Open up the project in Atom and add a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the main project directory. Create a file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einside of the folder. Your directory structure should look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D2-01-folder_structure_css.png\" alt=\"MP-W1D2-01-folder_structure_css.png\" width=\"237\" height=\"246\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1348\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eFirst, we need to tell the HTML document to use this CSS. The reference typically goes in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e section like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement links the HTML and CSS files together. It must be placed within the head of the HTML file. It is a self-closing tag and requires the following three attributes:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003ehref\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- like the anchor element, the value of this attribute must be the address, or path, to the CSS file.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003etype\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- this attribute describes the type of document that you are linking to (in this * case, a CSS file). The value of this attribute should be set to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etext/css\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003erel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- this attribute describes the relationship between the HTML file and the CSS file. Because you are linking to a stylesheet, the value should be set to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estylesheet\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow let's add some CSS to\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto see what this looks like:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSave the file and refresh the page, and see that the header is now blue.\u003c/p\u003e\r\n\u003cp\u003eWhat we just wrote is known as a CSS rule. It is made of two parts: the selector and the declaration. In the above example,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the selector, or the HTML tag to which the rule is applied. Everything inside of the curly braces is the declaration, which defines of the styles to be applied to the selector. The declaration is made of two parts: the property (\u003ccode\u003ecolor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein this case) and the value (\u003ccode\u003eblue\u003c/code\u003e), and they are separated by a colon.\u003c/p\u003e\r\n\u003cp\u003eA declaration can contain more than one property. Each property is separated by a semicolon:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice the indentation and spacing here: properties are indented two spaces from the selector.\u003c/p\u003e\r\n\u003cp\u003eLet's add some more rules:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: green\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-family\u003c/span\u003e: sans-serif\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eline-height\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e40px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGo ahead and refresh the page and see the changes. All these rules are pretty straightforward.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags, we've set the color to green, the font style to italic, and the text alignment to the center of the page.\u003c/li\u003e\r\n\u003cli\u003eFor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags, we've set the font family to _sans serif), which is a type of font.\u003c/li\u003e\r\n\u003cli\u003eFor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eul\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags, we've set the line height to 40 pixels -\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epx\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis short for \"pixels\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIt's worth noting here that named colors, such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreen\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003e, are not commonly used. More likely, you will see three- or six-digit hexadecimal codes to define color, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: \u003cspan class=\"hljs-hexcolor\"\u003e#00f\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eor this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n\u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: \u003cspan class=\"hljs-hexcolor\"\u003e#0000ff\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBoth of these are equivalent to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue\u003c/code\u003e. There are numerous tools online for picking colors and hex codes, such as\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://htmlcolorcodes.com/\"\u003ehtmlcolorcodes.com\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou may be wondering why we made\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eitalic using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efont-style\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty instead of using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003etags like we did in a previous lesson. There are a few reasons for this. First, we can modify the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag just like any other HTML tag.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eemphasize\u003c/em\u003e, and eventually, we may decide that we want to emphasize text by bolding it instead of italicizing it, which we may not want for our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003es. Second, one of the advantages of CSS is that we can change style in many places at the same time. What happens when we add another\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003e? We have to add\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003es again so that it has the same formatting. Say we want our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2\u003c/code\u003es to be bold as well. Now we have to add\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e tags We end up repeating ourselves with many opportunities to miss something. By using CSS, we only need to change the style in one place, and every\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon every page that uses that CSS file will be updated.\u003c/p\u003e\r\n\u003cp\u003eLet's take a second to reflect on this last point. It's in the nature of websites that even after they're built, they are bound to change: there will be additions, deletions, overhauls, and more. CSS gives us some powerful tools to change what we've built. Remember: good code is code that is easy to change.\u003c/p\u003e\r\n\u003cp\u003eTo see the power of using CSS, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.csszengarden.com/\"\u003eCSS Zen Garden\u003c/a\u003e. Clicking one of the links on the right side of the page will apply a different stylesheet to the same HTML. The page is totally transformed without making any changes in the HTML. Your goal in writing CSS should be to allow to Zen Garden-like changes to your styles.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-practice-github-pages","title":"Wednesday: Practice: GitHub Pages","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Walk through the process of creating and publishing to a GitHub pages page by publishing one of our previous projects.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following questions with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWe need to create something called a branch to publish our content on GitHub pages. We'll learn more about branches later, but for now, what is the specific name we must call the branch in order for Github pages to work correctly?\u003c/li\u003e\r\n\u003cli\u003eWhat is the easiest way to add new changes to a Github pages site after it's already been published?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003ePublish to GitHub Pages\u003c/h3\u003e\r\n\u003cp\u003eNow that you have learned how to host your web pages on GitHub Pages, go ahead and make your pet homepage display on GitHub Pages as well. Make sure that each project properly displays for you and your partner. If it isn't working, make sure you have confirmed your email address with GitHub.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-behaviour-driven-development-bdd","title":"Thursday: Behaviour Driven Development (BDD)","type":"WikiPage","content":"\u003cp\u003eOne of the most difficult challenges facing us as developers is taking a problem we want to solve or a concept we want to realize and turning it into a set of specific programming tasks.\u003c/p\u003e\r\n\u003cp\u003eA common process to do this is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eBehavior-Driven Development\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(or\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Behavior-driven_development\" target=\"_blank\"\u003eBDD\u003c/a\u003e) and is used by developers across coding languages. In BDD, rather than thinking about the code first, the focus begins on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebehaviors\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat we want to see in our final application. We identify what the program\u003cspan\u003e \u003c/span\u003e\u003cem\u003eshould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edo before determining how to make it do it.\u003c/p\u003e\r\n\u003cp\u003eTo practice this, we'll imagine that we have been hired by a person born on February 29th. She would like to determine if any given year is a leap year (meaning it's a birthday year for her!). Here's a finished example of what she'd like:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%203%20Tuesday/leapyear.png\" alt=\"leapyear.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1798\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAnd after hitting a leap year.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%203%20Tuesday/leapyear_result.png\" alt=\"leapyear_result.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1797\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBefore we think about the programmatic elements, what\u003cspan\u003e \u003c/span\u003e\u003cem\u003eshould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea leap year program do? At its most basic, it will need to be able to take a year from the user and answer\u003cspan\u003e \u003c/span\u003e\u003cem\u003etrue\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003efalse\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the question: is this year a leap year? Our program will only be able to provide an answer once it successfully evaluates what the user provides as a year. Let's think of all of the possibilities we might get from a user and what the correct response should be for them.\u003c/p\u003e\r\n\u003ch2\u003eSpecifications\u003c/h2\u003e\r\n\u003cp\u003e\u003ca href=\"http://www.timeanddate.com/date/leapyear.html\" target=\"_blank\"\u003eTimeanddate.com\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eoffers us the 3 criteria that must be considered to determine if a year is a leap year:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe year is evenly divisible by 4;\u003c/li\u003e\r\n\u003cli\u003eIf the year can be evenly divided by 100, it is NOT a leap year, unless;\u003c/li\u003e\r\n\u003cli\u003eThe year is also evenly divisible by 400. Then it is a leap year.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTherefore, each time a user offers a year to evaluate, we will ultimately need to test the value against each of the leap year rules.\u003c/p\u003e\r\n\u003cp\u003eIn BDD, our next step is to generate examples of these rules one-by-one. These examples are also known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003especifications\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003especs\u003c/strong\u003e. We can create a table that helps us sort out the details of the specifications for each rule using the following pieces of information:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ethe behavior that we'll need to write code to handle\u003c/li\u003e\r\n\u003cli\u003ea sample of input that would demonstrate the behavior\u003c/li\u003e\r\n\u003cli\u003ethe expected output we'd get when the code is working correctly\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Week%203%20Tuesday/bdd-leap-year-grid.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"Leap year grid\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1897\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAlthough there are many other considerations for our final application (display, user interaction, form building, what if someone enters a letter?, etc), we will not worry about those until we have the core functionality in place. If we think of any additional functionality we need, we can add behaviors to our specification list as we go. When you code using BDD, it is good to get into the habit of making a note of all behaviors as you think of them, but staying focused on one task at a time.\u003c/p\u003e\r\n\u003cp\u003eLet's look at another example of specs organized on a table showing behavior, input and output.\u003c/p\u003e\r\n\u003ch3\u003eTitle Case\u003c/h3\u003e\r\n\u003cp\u003eIn this example, we want to build an application that will take a user's string of words and convert them to title case - capitalizing letters like we'd find in a book title. There are a few more rules for creating title-cased words from strings than Leap Year. Let's brainstorm the first several:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%203%20Tuesday/bdd-title-case-grid.png\" alt=\"bdd-title-case-grid.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1885\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs we did with the leap year application, we choose the simplest first - one word gets capitalized -\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ebeowulf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecomes\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eBeowulf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand go to the most complex. And as always, we may think of additional behaviors along the way: What if a user enters nothing? What about iPod or McDuff? Remember, let your brain keep brainstorming by adding new behaviors to your list but always stay focused on one specification at a time.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-jquery-adding-and-removing-classes","title":"Tuesday: jQuery - Adding and Removing Classes","type":"WikiPage","content":"\u003cp\u003eAdding and removing classes can be a helpful tool. Let's start with this HTML:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan\u003e\u0026lt;script   \u003c/span\u003e\u003cspan\u003esrc=\"https://code.jquery.com/jquery-3.3.1.min.js\"\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eintegrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003ecrossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eColors\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat's your favorite color?\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eClick a button to choose what color you'd like this page to be:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-success\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"green\"\u003c/span\u003e\u0026gt;\u003c/span\u003eGreen\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-warning\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"yellow\"\u003c/span\u003e\u0026gt;\u003c/span\u003eYellow\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-danger\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"red\"\u003c/span\u003e\u0026gt;\u003c/span\u003eRed\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, some JavaScript:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#green\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"green-background\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#yellow\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"yellow-background\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#red\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"red-background\"\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we click the green button, for example, jQuery will add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreen-background\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e. Now, let's create the CSS classes to actually give the page the background color we want:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-class\"\u003e.green-background\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e green\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-class\"\u003e.yellow-background\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e yellow\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-class\"\u003e.red-background\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e red\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd our page works! But there's a problem. If we click any one button, everything is fine. But if we then click a button of a lighter color, it won't change the background. So if we click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eYellow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand then Red, it works. But if we click then click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eGreen\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eafter\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRed\u003c/em\u003e, nothing happens. We need to remove the other classes before applying the new class. Fortunately, that's easy:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#green\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).removeClass();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"green-background\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#yellow\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).removeClass();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"yellow-background\"\u003c/span\u003e);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"button#red\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).removeClass();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).addClass(\u003cspan class=\"hljs-string\"\u003e\"red-background\"\u003c/span\u003e);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd now everything works perfectly!\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003ccode\u003eremoveClass()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewithout an argument removes all classes from the selected element; if you'd like to just remove a specific class, you can pass it in as an argument (or pass in multiple classes separated by spaces).\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThere is another way to change the CSS of an element with jQuery:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"button#green\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"body\"\u003c/span\u003e).css(\u003cspan class=\"hljs-string\"\u003e\"background-color\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"green\"\u003c/span\u003e);\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, this is a bad approach for real code, for two reasons. First, it's mixing our concerns. JavaScript is responsible for how the page behaves; CSS is responsible for how the page looks. Here, we've put something about how the page looks in our JavaScript. This makes it difficult for other programmers who might need to change this page in the future to know where to look for the appropriate code. Second, you lose one of the biggest powers of CSS: the ability to create a class and re-use that style across elements and pages. Here, when we've put a style in our JavaScript, it can't be re-used. So, when you want to change the style of your page, stick to adding and removing classes.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-es6-and-typescript","title":"Tuesday: ES6 And TypeScript","type":"WikiPage","content":"\u003ch2\u003e\u003cspan\u003eES6 And TypeScript\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eES6\u003c/strong\u003e\u003cspan\u003e is the upcoming sixth major release of \u003c/span\u003e\u003ci\u003e\u003cspan\u003eECMAScript\u003c/span\u003e\u003c/i\u003e\u003cspan\u003e which is the official name of JavaScript. The current version of Javascript that is supported by the most browsers is ES5.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eTypeScript\u003c/strong\u003e\u003cspan\u003e is a \u003c/span\u003e\u003ci\u003e\u003cspan\u003esuperset\u003c/span\u003e\u003c/i\u003e\u003cspan\u003e of ES6. Since most browsers do not support TypeScript we have to convert it to normal Javascript. The Process of converting TypeScript to normal ES5 is called \u003c/span\u003e\u003cstrong\u003etranspilation\u003c/strong\u003e\u003cspan\u003e.  You can read the difference between \u003c/span\u003e\u003ca class=\"external\" href=\"https://www.stevefenton.co.uk/2012/11/compiling-vs-transpiling/\" target=\"_blank\"\u003e\u003cspan\u003eTranspilation and Compilation from here (Links to an external site.)Links to an external site.\u003cspan class=\"screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eInstalling Typescript:\u003c/span\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ npm install -g typescript \u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003e# Install typescript and the typescript transpiler\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ tsc -v\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003eVersion 2.6.1\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan\u003e# Confirming Installation (tsc = typescript compiler)\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false},{"exportId":"monday-practice-arithmetic","title":"Monday: Practice - Arithmetic","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e In the previous lesson, we learned\u003c/span\u003e:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow to access the JavaScript Console\u003c/li\u003e\r\n\u003cli\u003eAddition, subtraction, multiplication, and division using JavaScript\u003c/li\u003e\r\n\u003cli\u003eHow to use the\u003cspan\u003e \u003ccode\u003e%\u003c/code\u003e \u003c/span\u003eoperator\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eNaN\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emeans not a number but is actually considered a type of number\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBegin getting comfortable with these concepts by completing the practice exercises listed below. Soon enough, they'll be second nature!\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eMake sure you understand the following before moving on:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the \u003cspan\u003e\u003ccode\u003e%\u003c/code\u003e \u003c/span\u003eoperator? How is the action it performs different than simply dividing?\u003c/li\u003e\r\n\u003cli\u003eHow can we access the JavaScript console?\u003c/li\u003e\r\n\u003cli\u003eWhen might we see\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eComplete the following exercises to practice arithmetic in JavaScript:\u003c/p\u003e\r\n\u003ch3\u003eAdd:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e77 to 99\u003c/li\u003e\r\n\u003cli\u003e34 to 1233\u003c/li\u003e\r\n\u003cli\u003e-53 to 99\u003c/li\u003e\r\n\u003cli\u003e9,092 to -12312\u003c/li\u003e\r\n\u003cli\u003e943,456,575 to 39,087,092,348,570\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eSubtract:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e99 from 665\u003c/li\u003e\r\n\u003cli\u003e34 to 1233\u003c/li\u003e\r\n\u003cli\u003e555 from 23\u003c/li\u003e\r\n\u003cli\u003e7,912 from 88888\u003c/li\u003e\r\n\u003cli\u003e6,348,709,234 from 87,023,984,709,871,234.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eMultiply:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e89 and 54\u003c/li\u003e\r\n\u003cli\u003e932 and 1,900\u003c/li\u003e\r\n\u003cli\u003e-34 and 8\u003c/li\u003e\r\n\u003cli\u003e25 and 700\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eDivide:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e1008 by 7\u003c/li\u003e\r\n\u003cli\u003e23423 by 75\u003c/li\u003e\r\n\u003cli\u003e90 by 3\u003c/li\u003e\r\n\u003cli\u003e9,870,834,205,987 by 324\u003c/li\u003e\r\n\u003cli\u003eA number by 0.\u003c/li\u003e\r\n\u003cli\u003e0 by 0.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFind the remainder of dividing the following numbers:\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e1008 by 7\u003c/li\u003e\r\n\u003cli\u003e23423 by 75\u003c/li\u003e\r\n\u003cli\u003e90 by 3\u003c/li\u003e\r\n\u003cli\u003e9,870,834,205,987 by 324\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"weekend-modules","title":"Weekend: Modules","type":"WikiPage","content":"\u003ch1\u003eModules\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003ch3\u003eTerminology\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eModules\u003c/strong\u003e: Modular \"containers\" of code assigned to specific names (or \"namespaces\"). They can be exported, then called upon for use in other code.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eExport\u003c/strong\u003e: A keyword that may be added to any declarations you may want to access in other files.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eEntry point\u003c/strong\u003e: The file that will launch\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewhen an app is first booted up.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eTypeScript documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.typescriptlang.org/docs/handbook/modules.html\" target=\"_blank\"\u003eModules\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eThe next powerful TypeScript tool we're going to learn is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emodule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword, and its friend\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eexport\u003c/code\u003e. They will allows us even more modularity by letting us split programs into multiple files, while wrapping our declarations in particular\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enamespaces\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eThis is similar to the manner we used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eexports\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto create Node modules last week. It helps to avoid naming conflicts if we wrap parts of our code in these containers called modules. We just use the module name to refer to the classes or properties that we want to access inside the module.\u003c/p\u003e\r\n\u003ch2\u003eModules in To Do\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eTo Do List Module\u003c/h3\u003e\r\n\u003cp\u003eLet's break up our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eto-do.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile into a\u003cspan\u003e \u003c/span\u003e\u003cem\u003eToDoList\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emodule that is divided logically amongst a few files. We'll start with our class and interface declarations. Let's put those into a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eto-do-classes-interfaces.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/p\u003e\r\n\u003cdiv\u003eapp/to-do-classes-interfaces.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003emodule ToDoList {\r\n  export \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eITask\u003c/span\u003e \u003c/span\u003e{\r\n    description: string;\r\n    done: \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e;\r\n    priority: string;\r\n    markDone(): \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e;\r\n    assignedTo?: IPerson;\r\n  }\r\n\r\n  export \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eIPerson\u003c/span\u003e \u003c/span\u003e{\r\n    name: string;\r\n    email: string;\r\n    phone?: string; \u003cspan class=\"hljs-comment\"\u003e// optional phone number.\u003c/span\u003e\r\n  }\r\n\r\n  export \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTask\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eITask\u003c/span\u003e \u003c/span\u003e{\r\n    done: \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e = \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n    constructor(\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e description: string, \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e priority: string, \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e assignedTo?: IPerson){}\r\n    markDone(){\r\n      \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.done = \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n  }\r\n\r\n  export \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eHomeTask\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTask\u003c/span\u003e \u003c/span\u003e{\r\n    constructor(\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e description: string, \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e priority: string, \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e assignedTo?: IPerson){\r\n      \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(description, priority);\r\n    }\r\n  }\r\n\r\n  export \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eWorkTask\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTask\u003c/span\u003e \u003c/span\u003e{\r\n    constructor(\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e dueDate: Date, \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e description: string, \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e priority: string, \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e assignedTo: IPerson){\r\n      \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(description, priority, assignedTo);\r\n    }\r\n  }\r\n\r\n  export \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eHobbyTask\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTask\u003c/span\u003e \u003c/span\u003e{\r\n    constructor(\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e description: string){\r\n      \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(description, \u003cspan class=\"hljs-string\"\u003e\"low\"\u003c/span\u003e);\r\n    }\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we are merely adding the keyword\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eexport\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto any declarations that we will need outside of this file. We use the keyword\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emodule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto define the name of our container.\u003c/p\u003e\r\n\u003ch3\u003ePeople Module\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eLet's put our people into their own file too, in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecalled\u003cspan\u003e \u003c/span\u003e\u003cem\u003eto-do-people.ts\u003c/em\u003e.\u003c/p\u003e\r\n\u003cdiv\u003eapp/to-do-people.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e/// \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ereference\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003epath\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"to-do-classes-interfaces.ts\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\nmodule ToDoList {\r\n  var diane: ToDoList.IPerson = {\r\n    name: \"Diane D\",\r\n    email: \"\u003ca class=\"__cf_email__\" href=\"http://moringaprep-ft.herokuapp.com/cdn-cgi/l/email-protection\" data-cfemail=\"17737e7679725772677e74787362643974787a\"\u003e[email protected]\u003c/a\u003e\"\r\n  }\r\n\r\n  var thor: ToDoList.IPerson = {\r\n    name: \"Thor Son of Odin\",\r\n    email: \"\u003ca class=\"__cf_email__\" href=\"http://moringaprep-ft.herokuapp.com/cdn-cgi/l/email-protection\" data-cfemail=\"c1b5a9aeb381a0b2a6a0b3a5efa2aeac\"\u003e[email protected]\u003c/a\u003e\"\r\n  }\r\n\r\n  var loki: ToDoList.IPerson = {\r\n    name: \"God of mischief\",\r\n    email: \"loki@geocities.com\",\r\n    phone: \"555-666-7777\"\r\n  }\r\n\r\n  export var people = {\r\n    \"diane\": diane,\r\n    \"thor\": thor,\r\n    \"loki\": loki\r\n  };\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAlthough the top line looks like a comment, it is actually a marker pointing towards the other file we just made with our interface and class definitions in it. This file wouldn't know what the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIPerson\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface meant without this line.\u003c/p\u003e\r\n\u003cp\u003eThen, we create each person object in the normal way, without exporting them. But we store each person object inside of an object called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epeople\u003c/code\u003e, which we do export. This makes it easy to iterate over our people, or assign them tasks.\u003c/p\u003e\r\n\u003cp\u003eAfter that, we need to change the type declarations for each person to access the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIPerson\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface through our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eToDoList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule. So instead of this:\u003c/p\u003e\r\n\u003cdiv\u003eapp/to-do-people.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e  \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ethor\u003c/span\u003e: IPerson = {\r\n    \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"Thor Son of Odin\"\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-attribute\"\u003eemail\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"thor@asgard.com\"\u003c/span\u003e\r\n  }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe want this:\u003c/p\u003e\r\n\u003cdiv\u003eapp/to-do-people.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e  \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ethor\u003c/span\u003e: ToDoList.IPerson = {\r\n    \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"Thor Son of Odin\"\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-attribute\"\u003eemail\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"thor@asgard.com\"\u003c/span\u003e\r\n  }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLastly, we wrap all our people in the same ToDoList module by using the same\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emodule NameOfModule {}\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esyntax.\u003c/p\u003e\r\n\u003ch2\u003eEntry Point\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eFinally, let's create a file that we want to launch first to begin running our app. This is called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eentry point\u003c/strong\u003e. Here is where we will use all our people and class definitions to actually create our tasks. Later, this could be connected to a form in the browser. Again, we'll pull in our external files, and then we'll create our tasks and print them out. Let's call this file\u003cspan\u003e \u003c/span\u003e\u003cem\u003eto-do-create-tasks.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand put it into our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/p\u003e\r\n\u003cdiv\u003eapp/to-do-create-tasks.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/// \u0026lt;reference path=\"to-do-classes-interfaces.ts\" /\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e/// \u0026lt;reference path=\"to-do-people.ts\" /\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e people = ToDoList.people;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tasks = [];\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.HomeTask(\u003cspan class=\"hljs-string\"\u003e\"Do the dishes.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"High\"\u003c/span\u003e));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.HomeTask(\u003cspan class=\"hljs-string\"\u003e\"Buy chocolate.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Low\"\u003c/span\u003e, people.diane));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.HomeTask(\u003cspan class=\"hljs-string\"\u003e\"Wash the laundry.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"High\"\u003c/span\u003e));\r\n\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.HobbyTask(\u003cspan class=\"hljs-string\"\u003e\"Practice origami.\"\u003c/span\u003e));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.HobbyTask(\u003cspan class=\"hljs-string\"\u003e\"Bake a pie.\"\u003c/span\u003e));\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e today = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e();\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tomorrow = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e();\r\ntomorrow.setDate(today.getDate() + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nextDay = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e();\r\nnextDay.setDate(today.getDate() + \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.WorkTask(today, \u003cspan class=\"hljs-string\"\u003e\"Update blog.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"High\"\u003c/span\u003e, people.diane));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.WorkTask(tomorrow, \u003cspan class=\"hljs-string\"\u003e\"Go to meeting.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Medium\"\u003c/span\u003e, people.thor));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.WorkTask(nextDay, \u003cspan class=\"hljs-string\"\u003e\"Clean ceiling.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Low\"\u003c/span\u003e, people.loki));\r\n\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(tasks);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe only thing different is that we now access the exported members of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eToDoList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule with dot notation, as in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eToDoList.HobbyTask()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHobbyTask\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor, or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar people = ToDoList.people;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the exported\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epeople\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty. This is because our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eToDoList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule is basically a giant object.\u003c/p\u003e\r\n\u003ch2\u003eCompiling Multiple Files\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eNow, let's compile our files. We could load them one by one in the browser, but that's getting to be a lot of script tags. Let's start compiling into a build folder instead. We'll add the standard\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag from last week to open a concatenated\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cdiv\u003eindex.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"build/js/app.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eHello TypeScript!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, to actually compile our files into a single concatenated file, we need to use a flag with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etsc\u003c/code\u003ecommand. Run this from the top level of the project directory.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs cs\"\u003e$ tsc --\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e build/js/app.js app/to-\u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e-create-tasks.ts app/to-\u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e-classes-interfaces.ts app/to-\u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e-people.ts\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIt means, \"Hey TypeScript Compiler, create a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einside of\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild/js\u003c/em\u003e, and fill it with the compiled versions of the following files.\" In your own projects, if you want to shorten this command to include all the files in your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, then you can use this command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs coffeescript\"\u003e$ tsc --out build\u003cspan class=\"hljs-regexp\"\u003e/js/app.js app/\u003c/span\u003e*.ts\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBut, we can also save ourselves some work by creating that\u003cspan\u003e \u003c/span\u003e\u003cem\u003etsconfig.json\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile that Atom is looking for in the top level of our project directory. Here's what should be in it.\u003c/p\u003e\r\n\u003cdiv\u003etsconfig.json\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"json hljs\"\u003e{\r\n  \"\u003cspan class=\"hljs-attribute\"\u003ecompileOnSave\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\u003c/span\u003e,\r\n  \"\u003cspan class=\"hljs-attribute\"\u003ecompilerOptions\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e{\r\n    \"\u003cspan class=\"hljs-attribute\"\u003erootDir\u003c/span\u003e\": \u003cspan class=\"hljs-string\"\u003e\"app\"\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003eout\u003c/span\u003e\": \u003cspan class=\"hljs-string\"\u003e\"build/js/app.js\"\u003c/span\u003e\r\n  }\u003c/span\u003e,\r\n  \"\u003cspan class=\"hljs-attribute\"\u003efiles\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e[\r\n    \u003cspan class=\"hljs-string\"\u003e\"app/to-do-create-tasks.ts\"\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"app/to-do-classes-interfaces.ts\"\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"app/to-do-people.ts\"\u003c/span\u003e\r\n    ]\r\n\u003c/span\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThese are instructions for the TypeScript compiler. We tell it that our development files all live in the folder\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eby using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erootDir\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efield. We tell it to concatenate all of our compiled code into a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.js\u003c/em\u003ein the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild/js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder by using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efield. We tell it to compile on save because we don't want to have to rerun the compile command manually every time we change any of our TypeScript files. And then, we list the files that we want the compiler to compile.\u003c/p\u003e\r\n\u003cp\u003eIf we leave the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efiles\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray out of the configuration file, it will default to compiling all the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erootDir\u003c/code\u003e. In our case, this is not what we want because we still have some leftover\u003cspan\u003e \u003c/span\u003e\u003cem\u003egreetings.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003esum.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles that we don't want to compile with our little to-do list.\u003c/p\u003e\r\n\u003cp\u003eNow, all we need to do is run the following command from the top level of our project directory (the same place as the\u003cspan\u003e \u003c/span\u003e\u003cem\u003etsconfig.json\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etsc -w\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-w\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewatch\u003c/code\u003e, just like the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp.watch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we are used to. Now, we can happily work away in our TypeScript files with the compiler running in the background warning us of any errors and recompiling whenever we save a file. We will have to reload the browser by hand though.\u003c/p\u003e\r\n\u003cp\u003eLet's add one more file to hold Task related functions. We'll write a function there that will return all the tasks that are assigned to a particular person. We'll put it in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etoo, and call it\u003cspan\u003e \u003c/span\u003e\u003cem\u003eto-do-listing-functions.ts\u003c/em\u003e. We will also add this file to the list of files in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003etsconfig.json\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cdiv\u003eapp/to-do-listing-functions.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cs\"\u003e\u003cspan class=\"hljs-comment\"\u003e\u003cspan class=\"hljs-xmlDocTag\"\u003e///\u003c/span\u003e \u003cspan class=\"hljs-xmlDocTag\"\u003e\u0026lt;reference path=\"to-do-classes-interfaces.ts\" /\u0026gt;\u003c/span\u003e\u003c/span\u003e\r\nmodule ToDoList {\r\n  export \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e describeTasksForPerson = function(assignee: IPerson, taskCollection: Task[]): String[] {\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e descriptions: String[] = [];\r\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e task of taskCollection){\r\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(task.assignedTo === assignee) {\r\n        descriptions.push(task.description);\r\n      }\r\n    }\r\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e descriptions;\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIt has to know about the classes and interfaces we have declared, so we use a reference at the top. Then we add to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eToDoList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule by exporting our function, assigned to the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edescribeTasksForPerson\u003c/code\u003e. It takes parameters for the person whose tasks we're looking for, as well as the collection of all tasks to look through. We declare that this\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etaskCollection\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparameter is of type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArray\u003c/code\u003e, which itself is holding a group of elements of type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTask\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby using this syntax:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTask[]\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eAfter the list of parameters, we see a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e:\u003c/code\u003e. The value following the colon declares what data type will be returned by the function. In this case, we say we want to return an array of strings. These will be the task descriptions for the particular person.\u003c/p\u003e\r\n\u003cp\u003eInside the function, we create our output variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edescriptions\u003c/code\u003e. We use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar descriptions: String[]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esyntax to say that it will be an array of strings. We set it equal to a default value of an empty array. Then we loop through the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etaskCollection\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand if the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIPerson\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etask.assignedTo\u003c/code\u003eproperty is equal to the input\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eassignee\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparameter, then we push the current task's description string into our output array\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edescriptions\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand return it.\u003c/p\u003e\r\n\u003cp\u003eThen in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eto-do-create-tasks.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile we can try it out - let's give\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eanother couple tasks so that he isn't too bored with that meeting, and then print out all of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethor\u003c/code\u003e's tasks. Let's also make sure to add the reference to our new functions file.\u003c/p\u003e\r\n\u003cdiv\u003eapp/to-do-create-tasks.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e\u003cspan class=\"hljs-comment\"\u003e/// \u0026lt;reference path=\"to-do-classes-interfaces.ts\" /\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e/// \u0026lt;reference path=\"to-do-people.ts\" /\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e/// \u0026lt;reference path=\"to-do-listing-functions.ts\" /\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e people = ToDoList.people;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tasks = [];\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.HomeTask(\u003cspan class=\"hljs-string\"\u003e\"Do the dishes.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"High\"\u003c/span\u003e));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.HomeTask(\u003cspan class=\"hljs-string\"\u003e\"Buy chocolate.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Low\"\u003c/span\u003e, people.diane));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.HomeTask(\u003cspan class=\"hljs-string\"\u003e\"Wash the laundry.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"High\"\u003c/span\u003e));\r\ntasks[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e].markDone();\r\n\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.HobbyTask(\u003cspan class=\"hljs-string\"\u003e\"Practice origami.\"\u003c/span\u003e));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.HobbyTask(\u003cspan class=\"hljs-string\"\u003e\"Bake a pie.\"\u003c/span\u003e));\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e today = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e();\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tomorrow = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e();\r\ntomorrow.setDate(today.getDate() + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nextDay = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e();\r\nnextDay.setDate(today.getDate() + \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.WorkTask(today, \u003cspan class=\"hljs-string\"\u003e\"Update blog.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"High\"\u003c/span\u003e, people.diane));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.WorkTask(tomorrow, \u003cspan class=\"hljs-string\"\u003e\"Go to meeting.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Medium\"\u003c/span\u003e, people.thor));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.WorkTask(tomorrow, \u003cspan class=\"hljs-string\"\u003e\"Save the world.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"High\"\u003c/span\u003e, people.thor));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.WorkTask(tomorrow, \u003cspan class=\"hljs-string\"\u003e\"Buy a new shirt.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Low\"\u003c/span\u003e, people.thor));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ToDoList.WorkTask(nextDay, \u003cspan class=\"hljs-string\"\u003e\"Clean ceiling.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Low\"\u003c/span\u003e, people.loki));\r\n\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(tasks);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e thorTasks = ToDoList.describeTasksForPerson(people.thor, tasks);\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Here are Thor's tasks: \"\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e task \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e thorTasks){\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(task);\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's run it in the browser! It should correctly print out that Thor's tasks are \"Go to meeting.\", \"Save the world.\", and \"Buy a new shirt.\"\u003c/p\u003e\r\n\u003cp\u003eInterestingly enough, if we look at the plain JavaScript that has been generated by TypeScript, we see that there are no interfaces present. This is because interfaces are just a construct of the TypeScript language. But it is helpful in writing clean code, organizing our requirements, and preventing mistakes. No more calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etask.name\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen we meant to call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etask.description\u003c/code\u003e. No more accidentally declaring a method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emarkDone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein one class, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edoneMark\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein another one. Interfaces work with the compiler to force us to use consistency across our code. Then modules allow us to break these different pieces up in logical ways with their own namespace, while still in separate files.\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"monday-team-week-objectives","title":"Monday: Team Week Objectives","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eYou're a team and you're building something awesome!\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eSpend time together as a team brainstorming your vision. Decide how you want to communicate and work together over the next 4 days. All ideas should be welcome and all members given roles. You can change partners daily or play to the strengths and preferences of your team members (business logic vs user interface logic). Remember that in addition to coding skills, communication is one of the most important elements of building great applications. Let your team be one that fosters direct, honest communication and encourages every member's voice!\u003c/p\u003e\r\n\u003cp\u003eFor the presentation/demonstration, determine what the minimum viable product for demonstration is.. A minimum viable product, or MVP, is a development approach where an application is created with the minimum sufficient features necessary to demonstrate it to users and/or investors. Additional features are implemented when/if time and resources allow. When you create an MVP, it should be a prototype of your idea and have the basic core elements in place so your audience (e.g. peers, investors, clients, future employers, future users, etc.) can understand what your vision is. Try to be both ambitious and realistic. Use a whiteboard or paper or online storyboard application if that would help everyone with the overview and the plan!\u003c/p\u003e\r\n\u003cp\u003eYou are going to create something incredible. Dive in!\u003c/p\u003e\r\n\u003ch2\u003eCode Review Objectives\u003c/h2\u003e\r\n\u003cp\u003eAt the end of the week, you will present your group project on Friday, where it will be reviewed for the following objective:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eParticipation in creating and presenting a project, and collaborating effectively with teammates.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003ch2\u003eMarket Research\u003c/h2\u003e\r\n\u003cp\u003eOur project ideas are coming together and we have an MVP. Before we start building anything, we need to take a look at the market for our product. One thing to consider is the competition: does this product already exist? If it does, that's okay! Many apps in the real world are variations of one another. How many apps have you seen for playing music or requesting a taxi have can you think of? If this is the case, then think about how the user experience be improved or made unique. We also want to consider what kinds of customers our product going to serve. For example, let's say we want to build an event-planning application. How would the presentation and extra features differ if we were building it for:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003esports teams?\u003c/li\u003e\r\n\u003cli\u003etechnology meetups?\u003c/li\u003e\r\n\u003cli\u003eoutdoors enthusiasts?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eTask:\u003c/strong\u003e\u003cspan\u003e Spend half an hour as a team researching your idea online and refining your MVP according to your findings.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003eProject Pitch\u003c/h3\u003e\r\n\u003cp\u003eSo, you have an idea for the app you'd like to build as a team. If we recall our earlier discussion about the MVP, we need to understand what our user wants before actually building anything. What's the best way to do that? By talking to users!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eTask:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eFor the next two hours, we're going to go out and do just that. Go out in groups (at least two people) to an area with potential users you can ask questions about your product. Designate one group member as the note-taker to record answers to questions.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eApproach someone and introduce yourselves and your project\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eExample: \"Hi there! We are [your names] and we're students at Moringa School. We're building an application and we are hoping to get some opinions on it.\"\u003c/li\u003e\r\n\u003cli\u003eAsk them for their time politely\r\n\u003cul\u003e\r\n\u003cli\u003eSet a timeline for the pitch, and don't go over your time limit - respect their time\u003c/li\u003e\r\n\u003cli\u003eExample: \"Would you mind if we take three minutes of your time?\"\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eIntroduce the problem you're setting out to solve\u003c/li\u003e\r\n\u003cli\u003eInstead of asking questions about an already-finished application, ask about ways to solve the problem. You're still in the planning phase - user experience research about the finished product will come later.\u003c/li\u003e\r\n\u003cli\u003eMake it a conversation. Ask open-ended questions - you'll get more information that way\r\n\u003cul\u003e\r\n\u003cli\u003eInstead of \"What is your favorite ice cream flavor?\" try, \"Can you tell me about a dessert you would go out of your way to try again?\"\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eHave a few questions ready. Some themes to think about:\r\n\u003cul\u003e\r\n\u003cli\u003eAccessibility: are you able to use this technology? Example: Do you have a phone or laptop with internet access?\u003c/li\u003e\r\n\u003cli\u003eRelevance: Is your project relevant? Example: For a money tracking app: how do you use money (mPesa, credit card, cash)?\u003c/li\u003e\r\n\u003cli\u003eUsability: do you have a system for doing this? Would you have to change a lot of things in your life to use this app? Can you integrate it into your life?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eThank them for their time\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eTask:\u003c/strong\u003e\u003cspan\u003e Now that you've conducted market research, re-evaluate your MVP and integrate your findings into your user stories. Feel free to divide your user stories into sections: \"MVP\" and \"Bonus features\". What did you get right the first time around? Did any findings surprise you? Were you making any assumptions in your product design?\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-control-flows-practice","title":"Tuesday: Control flows practice","type":"WikiPage","content":"\u003ch2\u003e\u003cspan style=\"font-size: 24pt;\"\u003eWarm Up\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003eGoal: In the Control flows we have learnt different control flows techniques such as if and else statements:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDescribe the \u003cem\u003eif\u003c/em\u003e and \u003cem\u003eif-else\u003c/em\u003e statements. What types of expressions can be used as conditions?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 36pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003eCode\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003eEven Number calculator\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003eUsing the if and else statement in JSfiddle, Create a simple calculator that calculates if a number is even or not. \u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003eCafe\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003eUsing if and else statements, create a simple program that prompts you to choose between coffee and tea. \u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003eCafe Reloaded \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003eBasing on the previous practice question on cafe, build on it by including more foods where the program program prompts you to choose a food variety. Here is an example of how the program should work:\u003cbr\u003e\u0026lt; What food would you like to be served?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003e\u0026gt; Burger\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003e\u0026lt;Here is some burger for you. Anything else?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003e\u0026gt; No\u003cbr\u003e\u0026lt;Thanks you for choosing us\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-size: 12pt; font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif;\"\u003eGrader \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003eYou are provided with the following grade score table, \u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e100 - 80\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e79 - 60\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eB\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e59 - 40\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eC\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e39 - 20\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eD\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e20 - 0\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eE\u003c/span\u003e\u003c/p\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003eUsing \u003ca href=\"https://jsfiddle.net/\"\u003eJSFiddle\u003c/a\u003e, Write a program that calculates the following grades. Pass a score then calculate the score using control flows \u003cbr\u003e\u003cbr\u003e \u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false},{"exportId":"tuesday-development-servers","title":"Tuesday: Development Servers","type":"WikiPage","content":"\u003ch1\u003e \u003c/h1\u003e\r\n\u003ch1\u003eUsing a Development Server\u003c/h1\u003e\r\n\u003cp\u003eNext, let's learn how to use gulp to streamline our build process and add a development server complete with live reloading.\u003c/p\u003e\r\n\u003cp\u003eSo far, we are taking our development files, creating optimized versions of them wherever we can, and then placing them in a\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder. The idea of\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edeploying\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis to move all of these files onto a server.\u003c/p\u003e\r\n\u003ch2\u003eDevelopment Servers\u003c/h2\u003e\r\n\u003cp\u003eTo this end, we're going to start using a local server for development, and we want our build pipeline to update the correct files on the server and reload the browser if necessary when the files have been changed during development.\u003c/p\u003e\r\n\u003ch3\u003eBrowserSync\u003c/h3\u003e\r\n\u003cp\u003eWe're going to use a package called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eBrowserSync\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto implement our development server with live reloading. First, let's download it with NPM as always:\u003c/p\u003e\r\n\u003cpre\u003e$ npm install browser-sync --save-dev\r\n\u003c/pre\u003e\r\n\u003cp\u003eNext, let's remember to require it in our gulpfile.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e browserSync = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'browser-sync'\u003c/span\u003e).create();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eGulp Tasks\u003c/h3\u003e\r\n\u003cp\u003eWe have created a variable,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrowserSync\u003c/code\u003e, and set it equal to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, which is the part of the browser-sync package we will use to create our server. Now, make a task to start that server.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003egulp.task(\u003cspan class=\"hljs-string\"\u003e'serve'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  browserSync.init({\r\n    server: {\r\n      baseDir: \u003cspan class=\"hljs-string\"\u003e\"./\"\u003c/span\u003e,\r\n      index: \u003cspan class=\"hljs-string\"\u003e\"index.html\"\u003c/span\u003e\r\n    }\r\n  });\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe are calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrowserSync.init()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand passing in some options telling browserSync to launch the local server from the directory that we are currently in (\u003ccode\u003ebaseDir: \"./\"\u003c/code\u003e,) and we are telling it that the entry point, the place where we want to start our app, is our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eindex.html\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile. Now we can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp serve\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the top level of our project directory to launch our server and run the app.\u003c/p\u003e\r\n\u003ch3\u003eLive Reloading with BrowserSync and Gulp\u003c/h3\u003e\r\n\u003cp\u003eNow we're going to learn how to automatically replace the files on the server and reload the browser when our JavaScript changes. To do this, we will use a new gulp method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewatch\u003c/code\u003e. When we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp.watch()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe pass in 2 arguments. The first is an array of file names that we want gulp to keep an eye on. The second argument is an array of tasks to run whenever any of the aforementioned files change. We'll add a call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp.watch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einside of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eserve\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask so that the files are being watched automatically as soon as we start the server.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003egulp.task(\u003cspan class=\"hljs-string\"\u003e'serve'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  browserSync.init({\r\n    server: {\r\n      baseDir: \u003cspan class=\"hljs-string\"\u003e\"./\"\u003c/span\u003e,\r\n      index: \u003cspan class=\"hljs-string\"\u003e\"index.html\"\u003c/span\u003e\r\n    }\r\n  });\r\n\r\n  gulp.watch([\u003cspan class=\"hljs-string\"\u003e'js/*.js'\u003c/span\u003e], [\u003cspan class=\"hljs-string\"\u003e'jsBuild'\u003c/span\u003e]);\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis says to watch all of the files inside of our development\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder and whenever one of the files changes, run the task\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsBuild\u003c/code\u003e. Let's make that task next:\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003egulp.task(\u003cspan class=\"hljs-string\"\u003e'jsBuild'\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e'jsBrowserify'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'jshint'\u003c/span\u003e], \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n  browserSync.reload();\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis task lists an array of dependency tasks that need to be run whenever any of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles change. We want to run the linter and we want to run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsBrowserify\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand its dependencies. The linter can be run at the same time as we concatenate and browserify our files since they are independent from each other. Then once those are complete, we use the task function to call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrowserSync.reload()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand reload the browser.\u003c/p\u003e\r\n\u003cp\u003eIncidentally, we could have called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eminifyScripts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehere instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsBrowserify\u003c/code\u003e, but since we are working on a tasks for the local development server here, we can assume a development environment and ignore the production build tasks.\u003c/p\u003e\r\n\u003cp\u003eLet's add a watcher for our Bower dependencies next. This line will also go at the bottom of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eserve\u003c/code\u003etask.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003egulp.task(\u003cspan class=\"hljs-string\"\u003e'serve'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  browserSync.init({\r\n    server: {\r\n      baseDir: \u003cspan class=\"hljs-string\"\u003e\"./\"\u003c/span\u003e,\r\n      index: \u003cspan class=\"hljs-string\"\u003e\"index.html\"\u003c/span\u003e\r\n    }\r\n  });\r\n\r\n  gulp.watch([\u003cspan class=\"hljs-string\"\u003e'js/*.js'\u003c/span\u003e], [\u003cspan class=\"hljs-string\"\u003e'jsBuild'\u003c/span\u003e]);\r\n  gulp.watch([\u003cspan class=\"hljs-string\"\u003e'bower.json'\u003c/span\u003e], [\u003cspan class=\"hljs-string\"\u003e'bowerBuild'\u003c/span\u003e]);\r\n\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we are watching the Bower manifest file for changes so that whenever we install or uninstall a frontend dependency our vendor files will be rebuilt and the browser reloaded with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebowerBuild\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask. Let's write that task next.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003egulp.task(\u003cspan class=\"hljs-string\"\u003e'bowerBuild'\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e'bower'\u003c/span\u003e], \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n  browserSync.reload();\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can keep adding as many watchers and build tasks as we need using this format. Just remember that any time you change a gulp task, you must restart the server.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: As you structure your gulpfile, it's very important to be aware of task dependencies.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eBy default, gulp runs all tasks simultaneously. So you must use dependency arrays to specify if a task must be completed before another one.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eFor example, in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsBuild\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask, we know that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsBrowserify\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejshint\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill both be completed before the browser reloads because they are listed in the array of dependencies. But there is no guarantee that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejshint\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be completed before or after\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsBrowserify\u003c/code\u003e. If we needed the linter to finish before\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsBrowserify\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas started, it would need to be listed as a dependency of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsBrowserify\u003c/code\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"monday-minification","title":"Monday: Minification","type":"WikiPage","content":"\u003ch1\u003eMinification\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003ch3\u003eTerminology\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eMinification\u003c/strong\u003e: The process of removing all unnecessary characters in JS files to optimize JavaScript execution.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eThe following is an example gulp task to minify scripts:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\ngulp.task(\u003cspan class=\"hljs-string\"\u003e\"minifyScripts\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"jsBrowserify\"\u003c/span\u003e], \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e gulp.src(\u003cspan class=\"hljs-string\"\u003e\"./build/js/app.js\"\u003c/span\u003e)\r\n    .pipe(uglify())\r\n    .pipe(gulp.dest(\u003cspan class=\"hljs-string\"\u003e\"./build/js\"\u003c/span\u003e));\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eWe can optimize our JavaScript a little bit more by adding a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eminification\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003etask to our gulpfile. Minifying JavaScript means removing all unnecessary characters while preserving its functionality.\u003c/p\u003e\r\n\u003cp\u003eHumans need things like descriptive variable names, whitespace and new lines in order to easily read and debug our code. But your browser doesn't care about that. For example, we have a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eemail\u003c/code\u003ebut as far as the browser is concerned it could be named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ee\u003c/code\u003e, as long as it is changed everywhere consistently.\u003c/p\u003e\r\n\u003ch3\u003eMinifying with gulp-uglify\u003c/h3\u003e\r\n\u003cp\u003eWe can add minification to the end of our JavaScript chain of tasks so that after we have concatenated our files and browserified the result, we can then minify it. We'll need another package from npm:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ npm \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e gulp-uglify \u003cspan class=\"hljs-comment\"\u003e--save-dev\u003c/span\u003e\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen we can use it by adding a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003egulpfile.js\u003c/em\u003e:\u003c/p\u003e\r\n\u003cdiv\u003ejs/gulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e uglify = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'gulp-uglify'\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's create a task to minify our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile after it has been browserified. For clarity, let's put this task after\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsBrowserify\u003c/code\u003e, since the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsBrowserify\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask will be a dependency of our minification task.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\ngulp.task(\u003cspan class=\"hljs-string\"\u003e\"minifyScripts\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e\"jsBrowserify\"\u003c/span\u003e], \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e gulp.src(\u003cspan class=\"hljs-string\"\u003e\"./build/js/app.js\"\u003c/span\u003e)\r\n    .pipe(uglify())\r\n    .pipe(gulp.dest(\u003cspan class=\"hljs-string\"\u003e\"./build/js\"\u003c/span\u003e));\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ gulp minifyScripts\u003c/code\u003e, and it will run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsBrowserify\u003c/code\u003e, which will run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econcatInterface\u003c/code\u003e. We can see in the terminal printout that it works!\u003c/p\u003e\r\n\u003cp\u003eIf we compare the minified\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to the old\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile created by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsBrowserify\u003c/code\u003e, we'll see that they are very different. The minified version is literally one line. Really annoying for humans to read, but much faster for your browser. Now our JavaScript build tasks go in the order\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econcatInterface\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e-\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsBrowserify\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e-\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eminifyScripts\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"monday-moringa-core-interest-form","title":"Monday: Moringa Core Interest Form","type":"WikiPage","content":"\u003ciframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSdbkML8aC5PDalWxylCHjBeItKTdpq16VgJ0if9PHHFSgQU1g/viewform?embedded=true\" width=\"760\" height=\"500\" frameborder=\"0\"\u003eLoading...\u003c/iframe\u003e","frontPage":false},{"exportId":"tuesday-practice-adding-and-removing-classes","title":"Tuesday: Practice - Adding and Removing Classes","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eContinue to familiarize yourself with jQuery, and explore these important methods by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat can be accomplished by dynamically adding and removing classes with jQuery? Why would we want to do this?\u003c/li\u003e\r\n\u003cli\u003eWhen should we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.css()\u003c/code\u003e? Why do we use this particular method?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMost people like dark text on a light background, but some people prefer light text on a dark background. Update your dog blog or cat homepage to include a button that lets your users switch to light on dark.\u003c/li\u003e\r\n\u003cli\u003eNow, update this page so that users can switch back to the original color scheme.\u003c/li\u003e\r\n\u003cli\u003eUpdate your boring lecture page so that when somebody clicks on a paragraph, it highlights it and adds a box around the edges.\u003c/li\u003e\r\n\u003cli\u003eGet another pair to look at your work\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-operators","title":"Monday: Operators","type":"WikiPage","content":"\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eAssignment Operators\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen it comes to manipulating information with JavaScript, we will end up using operators a lot. We've already seen arithmetic operators in the \u003ca href=\"modules/items/ibad9ea60120fce9eb0dcd2a52afbb2ef\"\u003eArithmetic\u003c/a\u003e lesson, as well as the \u003cstrong\u003eassignment operator\u003c/strong\u003e, \u003ccode\u003e=\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, which assigns a value to a variable:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var favoriteDrink = \"green tea\";\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; favoriteDrink;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"green tea\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn this example, we have assigned the value \u003ccode\u003e\"green tea\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to the variable \u003ccode\u003efavoriteDrink\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Assignment operators are named that way because they assign the value on the right of the operator to the variable on the left. Another one is \u003ccode\u003e+=\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, which works like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var favoriteNumber = 42;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; favoriteNumber += 1;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e43\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; favoriteNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e43\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn this example, \u003ccode\u003efavoriteNumber += 1\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e means the same thing as \u003ccode\u003efavoriteNumber = favoriteNumber + 1\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Because it is an assignment operator, the mathematical operation on the right changes the value of the variable on the left. We can use any number with this operator:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; favoriteNumber += 4;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e47\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThere is an assignment operator for each mathematical operation:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e+=\u003c/code\u003e\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e-=\u003c/code\u003e\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e*=\u003c/code\u003e\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e/=\u003c/code\u003e\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's run each one:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var testNumber = 4;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; testNumber += 6;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e10\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; testNumber -= 2\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e8\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; testNumber *= 3\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e24\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; testNumber /= 4\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e6\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAre you starting to see how this works?\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eComparison Operators\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAssignment operators are useful for assigning values to variables. \u003cstrong\u003eComparison operators\u003c/strong\u003e allow us to compare the value on the left to the value on the right. They do not change any values. Instead, they return either \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e or \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003efalse\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, depending on whether the statement is true or false.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's explore some comparison operators now:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var myNumber = 3;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber \u0026lt; 5\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber \u0026gt; 5\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003efalse\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber === 3;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber === 4;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003efalse\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe first example reads \"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003emyNumber\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is less than 5\", and since \u003ccode\u003emyNumber\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is 3, this statement evaluates to \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Similarly, the second example reads \"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003emyNumber\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is greater than 5\", which we know is false.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe three equals signs, \u003ccode\u003e===\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, is the \u003cstrong\u003eequality operator\u003c/strong\u003e, and evaluates whether or not the two sides are equal. This is different from the single equals sign \u003ccode\u003e=\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, which \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eassigns\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e equality between the two sides. Mixing up the two operators is a \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003every\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e easy syntax error to make, so pay attention.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eJavaScript does have another operator for equality with two equals signs, \u003ccode\u003e==\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. It returns \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e for comparisons such as\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003ccode\u003e\"8\" == 8\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. This example says that the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003estring\u003c/span\u003e\u003c/i\u003e \u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"8\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003enumber\u003c/span\u003e\u003c/i\u003e \u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e8\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e are equal, despite being different types of data (we will cover why these two are not equal in much greater detail in an upcoming lesson). However, it has a lot of confusing rules, and it's generally best to avoid using it.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eYou may have noticed that the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003efalse\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e responses in the console did not have quotation marks. That's because they are not strings, but are actually a type of data called a boolean, and simply represents either true or false.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can use comparison operators on strings as well:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var weather = \"sunny\";\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; weather === \"sunny\";\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; weather === \"cloudy\";\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003efalse\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHere's a list of common comparison operators:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e===\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \"equal to\". Returns \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e for values that are exactly equal to each other, such as \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e1 === 1\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003ccode\u003e\"hello\" === \"hello\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. \u003ccode\u003e2 === \"2\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, \u003ccode\u003e4 === 5\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, and \u003ccode\u003e\"frog\" === \"lizard\"\u003c/code\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eall return \u003ccode\u003efalse\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e!==\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \"not equal to\". It is the opposite of the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e===\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e operator. So, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e1 !== 1\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"hello\" !== \"hello\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e evaluate as \u003ccode\u003efalse\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e4 !== 5\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"frog\" !== \"lizard\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e evaluate as \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \"greater than\". Returns \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e when the value on the left is greater than the value on the right. In the case of letters in strings, letters closer to the end of the alphabet evaluate as greater than letters closer to the beginning. For example, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e5 \u0026gt; 2\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"c\" \u0026gt; \"a\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e evaluate as \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e5 \u0026gt; 8\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"c\" \u0026gt; \"d\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e evaluate as \u003ccode\u003efalse\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \"greater than or equal to\". This is similar to \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, but it also evaluates as \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e if both sides are equal. For example, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e5 \u0026gt;= 5\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e5 \u0026gt;= 4\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e both evaluate as \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \"less than\". This is the opposite of \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, and returns \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e when the value of the left is less than the value on the right. For example, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e12 \u0026lt; 13\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"a\" \u0026lt; \"z\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e evaluate as \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e19 \u0026lt; 15\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"z\" \u0026lt; \"y\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e evaluate as \u003ccode\u003efalse\u003c/code\u003e.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e: \"less than or equal to\". Again, this is similar to \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, but it also evaluates as \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is both sides are equal. For example, \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e12 \u0026lt;= 12\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e12 \u0026lt;= 13\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e both evaluate as \u003ccode\u003etrue\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"wednesday-refactoring-dont-repeat-yourself","title":"Wednesday: Refactoring - Don't Repeat Yourself","type":"WikiPage","content":"\u003ch2\u003eRefactoring with Loops\u003c/h2\u003e\r\n\u003cp\u003eOne thing I didn't particularly like about our Mad Libs code is all the duplication:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e person1Input = $(\u003cspan class=\"hljs-string\"\u003e\"input#person1\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e person2Input = $(\u003cspan class=\"hljs-string\"\u003e\"input#person2\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e animalInput= $(\u003cspan class=\"hljs-string\"\u003e\"input#animal\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e exclamationInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#exclamation\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e verbInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#verb\"\u003c/span\u003e).val()\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nounInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#noun\"\u003c/span\u003e).val()\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".person1\"\u003c/span\u003e).text(person1Input);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".person2\"\u003c/span\u003e).text(person2Input);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".animal\"\u003c/span\u003e).text(animalInput);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".exclamation\"\u003c/span\u003e).text(exclamationInput);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".verb\"\u003c/span\u003e).text(verbInput);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".noun\"\u003c/span\u003e).text(nounInput);\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n      event.preventDefault();\r\n    });\r\n  });\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's refactor this using arrays and looping:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"#blanks form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e blanks = [\u003cspan class=\"hljs-string\"\u003e\"person1\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"person2\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"animal\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"exclamation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"verb\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"noun\"\u003c/span\u003e];\r\n\r\n      blanks.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eblank\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e userInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#\"\u003c/span\u003e + blank).val();\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e + blank).text(userInput);\r\n      });\r\n\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#story\"\u003c/span\u003e).show();\r\n\r\n      event.preventDefault();\r\n    });\r\n  });\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eThe Importance of DRY Code (\"Don't Repeat Yourself!\")\u003c/h2\u003e\r\n\u003cp\u003eI'm going to end this lesson with a short lecture. One of the best definitions of \"good code\" I've heard states that the one thing that's certain about software, is that it changes. There will always be new features to add and bugs to fix. Often, the people working on the software will change, and even if they don't, the original developers will need to modify code they wrote months or years ago, code that they sometimes can't even remember writing.\u003c/p\u003e\r\n\u003cp\u003eOne of things I really like about the new, looping version of the Madlibs JavaScript is that there's no repetition in the code, which makes it easy to change. Before, we did the same thing 6 times: get the value of the input, then put in in the appropriate blank space. If we want to change something - like, I don't know, capitalize all the text before inserting it onto the page (obviously this is contrived, but hopefully you get the idea) - then we have to change all 6 places. In this small example, the only room for error is maybe forgetting to update one line, although that would be embarrassing. But as your programs get more complex, you'll see that, if you have repetitive code, it becomes very difficult to maintain, and you will regularly update one place and fail to update another - or worse yet, update them in different ways that cause incompatibilities down the road.\u003c/p\u003e\r\n\u003cp\u003eThere's a principle in software development called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDon't Repeat Yourself\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDRY\u003c/strong\u003e. DRY code is easy to change because you only have to make any change in one place. One way we DRY up our code is by taking repetitive bits of code and extracting them into a function. Another way is by taking something we do several times and by turning it into a loop. Whenever you finish writing some code, you should always look back to see if there is any way you can DRY it up.\u003c/p\u003e\r\n\u003cp\u003eAlso, remember how I harped on about using descriptive variable names? \"Easy to change\" doesn't just mean clean code - if you can't figure out what a variable is for or what a function does based on its name, then it's harder to change it down the road, when you might not remember exactly how your code works (or when somebody else is trying to change your code).\u003c/p\u003e","frontPage":false},{"exportId":"monday-calculator-business-logic-2","title":"Monday: Calculator: Business Logic","type":"WikiPage","content":"\u003cp\u003eNow that we can write custom JavaScript functions, let's create a simple calculator application! We'll begin with the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eback-end\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebusiness logic\u003c/strong\u003e, and focus first on creating the ability to add numbers together. We'll later include subtraction, multiplication and division, and later add the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003euser interface\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efront-end\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003elogic.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eBecause we've not yet learned about user interface/front-end logic, the difference between front-end logic and back-end logic (or business and user interface logics) might not feel very clear. This is okay! For now, simply know that what we're creating here is business, or back-end logic because it handles the core functionality and computations of the application. In the future we'll learn about jQuery and creating user interfaces, and we'll revisit the differences between the two types of logic.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's write the whole thing in JSFiddle first, then we'll transfer it into our own project.\u003c/p\u003e\r\n\u003ch3\u003eDefining an Addition Function\u003c/h3\u003e\r\n\u003cp\u003eWe've already written an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, so let's use that as a starting point. Clear out your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJSFiddle \u003c/em\u003eJavaScript box and put in just your custom \u003ccode\u003eadd()\u003c/code\u003e function:\u003c/p\u003e\r\n\u003cpre\u003evar add = function(number1, number2) {\u003cbr\u003e  return number1 + number2;\u003cbr\u003e};\u003c/pre\u003e\r\n\u003cp\u003eAdd in a line at the bottom of your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eJSFiddle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003escript, below the function definition. This line will call our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, passing it two arguments. The return value from that function is immediately passed to JavaScript's built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction. When the script is run, it should pop up a dialog box with the value that the \u003ccode\u003eadd()\u003c/code\u003e function returns when passed those two arguments.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e subtract = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber1, number2\u003c/span\u003e) \u003c/span\u003e{\u003c/code\u003e\u003cbr\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number1 - number2;\r\n};\r\nalert(subtract(\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e));\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eGathering User Input\u003c/h3\u003e\r\n\u003cp\u003eNow we have a simple (addition-only) calculator, but it isn't very useful because we have to go in and modify the code every time we want to do a new calculation. Let's add in the ability to collect input from the user. Remember that we can collect input through the built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, which takes a string as an argument and returns a string containing the user's input.\u003c/p\u003e\r\n\u003cpre\u003evar add = function(number1, number2) {\u003cbr\u003e  return number1 + number2;\u003cbr\u003e};\u003cbr\u003evar number1 = prompt(\"Enter a number:\");\u003cbr\u003ealert(number1);\u003c/pre\u003e\r\n\u003cp\u003eNot very exciting. All we did was echo back to the user what they entered. But let's ask for two inputs and then use them as arguments to our function.\u003c/p\u003e\r\n\u003cpre\u003evar add = function(number1, number2) {\u003cbr\u003e  return number1 + number2;\u003cbr\u003e};\u003cbr\u003evar number1 = prompt(\"Enter a number:\");\u003cbr\u003evar number2 = prompt(\"Enter another number:\");\u003cbr\u003ealert(add(number1, number2));\u003c/pre\u003e\r\n\u003ch3\u003eParsing Integers\u003c/h3\u003e\r\n\u003cp\u003eOops. We have the problem we previously encountered where the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction returns strings, so the \u003ccode\u003e+\u003c/code\u003e operator we use inside of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction concatenates the two strings together rather than doing what we want. Because our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction expects numbers as arguments rather than strings, we must convert the inputs into numbers before calling our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction.\u003c/p\u003e\r\n\u003cpre\u003evar add = function(number1, number2) {\u003cbr\u003e  return number1 + number2;\u003cbr\u003e};\u003cbr\u003evar number1 = parseInt(prompt(\"Enter a number:\"));\u003cbr\u003evar number2 = parseInt(prompt(\"Enter another number:\"));\u003cbr\u003ealert(add(number1, number2);\u003c/pre\u003e\r\n\u003cp\u003eNow we're getting somewhere! In the next exercise, you'll add in support for subtraction, multiplication and division, but first let's move this code into a project so that we can save it and build on it without having to use JSFiddle.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not exit JSFiddle yet.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the next lesson we'll migrate the code we've created here in JSFiddle into a new project directory in Atom.\u003c/p\u003e","frontPage":false},{"exportId":"monday-introduction-to-javascript","title":"Monday: Introduction to JavaScript","type":"WikiPage","content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWelcome to JavaScript! So far, our pages have been pretty, but a little boring. We want to be able to interact with the page. That's where JS comes in! JS makes pages interactive. The internet is built on HTML, CSS, and JavaScript. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAlongside HTML and CSS, JavaScript is one of the three core technologies of World Wide Web content production; the majority of websites employ it, and all modern Web browsers support it without the need for plug-ins.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eBack in 1995, a developer at Netscape named Brendan Eich introduced JavaScript to the world. Despite Java and JavaScript both containing \"Java\" in their names, they're two distinct languages that have nothing to do with one another. The official name of JavaScript is ECMAScript which gets its name from the international organization that maintains it,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.ecma-international.org/\" target=\"_blank\"\u003eECMA (European Computer Manufacturer's Association)\u003c/a\u003e.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eJavaScript is a programming language used to make web pages interactive. Like HTML and CSS, you do not need to install anything to begin writing JavaScript or see it run on your users' computers. All modern browsers support JavaScript which means JavaScript that you write for your web pages will automatically run when your visitors load your web page in their browsers. In fact, JavaScript is the only scripting language that all browsers support so if you want a page to have dynamic content, learning JavaScript is a must.\u003c/p\u003e\r\n\u003ch2\u003eDocumentation and Resources\u003c/h2\u003e\r\n\u003cp\u003eJavaScript has been around for many years and there are many places for documentation and help online. Be wary of the resources you find online. There is a lot of bad information out there, especially on JavaScript. There are also many conflicting opinions about ways to accomplish the same task.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eHere are the primary sources we suggest for documentation and reference. If they seem overwhelming at first, don't be deterred. As your knowledge and ability grow, so too will your ability to navigate the documentation and resources.\u003c/p\u003e\r\n\u003ch3\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target=\"_blank\"\u003eMozilla Developer Network (MDN)\u003c/a\u003e\u003c/h3\u003e\r\n\u003cp\u003eMDN is one of the best sources of documentation on JavaScript. The site includes guides, tutorials, reference, tools and resources for developers using JavaScript.\u003c/p\u003e\r\n\u003ch3\u003e\u003ca href=\"http://stackoverflow.com/\" target=\"_blank\"\u003eStack Overflow\u003c/a\u003e\u003c/h3\u003e\r\n\u003cp\u003eStack Overflow is a good resource for finding answers to specific challenges that you are facing. It's a site for asking and answering questions about programming. You do need to be careful about what you find there, as there is plenty of bad information to go along with the good. Make sure to search to see if somebody has already answered your question before posting. Also, give back by answering questions for other people!\u003c/p\u003e\r\n\u003ch3\u003eSearch Engine\u003c/h3\u003e\r\n\u003cp\u003eFinally, if you're stuck on something, chances are, somebody has gotten stuck on it, too - try a search engine. To make sure you get up-to-date results, may find it helpful to limit your results to the past year (in Google, click \u003cem\u003eSearch tools\u003c/em\u003e in the bar above your search results, and then change \u003cem\u003eAll time\u003c/em\u003e to \u003cem\u003ePast year\u003c/em\u003e). It's helpful when searching to add the language to your search so you don't find yourself weeding through results for other languages (e.g. \"adding an element to an array JavaScript\" or \"jQuery clicking a button\").\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-creating-a-web-page","title":"Tuesday: Creating a Web Page","type":"WikiPage","content":"\u003cp\u003eNow that we have an understanding of what HTML is, let's write some! In this lesson, we will create our first webpage. It will look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/MP-W1D1-09-my_first_webpage.png\" alt=\"MP-W1D1-09-my_first_webpage.png\" width=\"518\" height=\"579\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1339\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's create a project directory and initialize a Git repository for a new project called\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eAs a review, here are the steps:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eOpen Terminal.\u003c/li\u003e\r\n\u003cli\u003eMake a project directory called my-first-website in your Desktop directory:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mkdir my-first-website\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate into the project directory you just created:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd my-first-website\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eIf you type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ pwd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein Terminal now, you should see that you are in your project directory at /Users/Guest/Desktop/my-first-webpage.\u003c/li\u003e\r\n\u003cli\u003eWithin your project directory, initialize your Git repository:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git init\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eCreate an empty file:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch my-first-webpage.html\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eOpen the project directory in Atom:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ atom .\u003c/code\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eatom .\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eopens the entire directory you are currently in because the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erefers to current directory. If you only want to open the single file, you could instead type:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ atom my-first-webpage.html\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eA note here about the name of the file. When you open a file on your computer, it knows what program to use to open the program by checking its\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eextension\u003c/strong\u003e. This is the group of letters that come after the name of the file, and indicates its file format. So, for example,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eexample.mp3\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill open in a program that plays music, because the \".mp3\" extension indicates an audio file.\u003c/p\u003e\r\n\u003cp\u003eWe gave our HTML document the file extension \".html\", which tells our computer that it is an HTML file, and that it shouldopen the file in a web browser.\u003c/p\u003e\r\n\u003cp\u003eThe name of the file can consist of any combination of letters, numbers or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(underscore) and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(hyphen) characters. It is a good practice to start the file name with a letter and use lowercase letters to avoid capitalization errors.\u003c/p\u003e\r\n\u003cp\u003eNow, with\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eopen in Atom, let's start by typing the following code (no more copying and pasting!):\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs apache\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThese two tags are the standard start and end tags on any page. They need to be there. HTML elements can contain text and other HTML elements inside them, and these two tags will contain the rest of the HTML that makes up the page.\u003c/p\u003e\r\n\u003cp\u003eNow let's add the rest of the page structure. Modify the page so that it looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe've created our first web page - let's commit it!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"add initial page structure\"\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSo, what's going on here?\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag at the top tells the browser that this document contains HTML, and specifically that it contains the newest version of HTML, HTML5. (An example of a doctype for an older version of HTML is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u0026gt;\u003c/code\u003e) Without the the doctype declaration, your HTML code will likely still work, as HTML5 is the current standard. In the future, however, a new standard will override HTML5. Future browsers may assume you're using a different, newer standard, in which case your document will be interpreted incorrectly. To make sure your document is forever interpreted correctly, always include at the very beginning of your HTML documents.\u003c/p\u003e\r\n\u003cp\u003eHTML pages are made up of two distinct parts - the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ehead\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003epart, and the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebody\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003epart. The head contains things that won't appear on your page. Many of the elements that go in the head are advanced stuff to tell search engines and browsers about the page, so the only one you need to know for now is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e. We will see more in upcoming lessons.\u003c/p\u003e\r\n\u003cp\u003eThe text inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etitle\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement is the text that appears at the very top of your browser window when you view the page. We decided to call this page \"My first webpage!\", but you can type whatever you want.\u003c/p\u003e\r\n\u003cp\u003eThe body section is the main part of your page. Everything between those two tags will be visible on your page. Let's type something there now.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  Hello, world!\r\n  Welcome to my first webpage!\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThat's it - we've written our first web page!\u003c/p\u003e\r\n\u003cp\u003eNow let's see what that looks like in a web browser, such as Google Chrome or Internet Explorer. You may have seen some of these before:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/MP-W1D1-10-web_browser_logos.png\" alt=\"MP-W1D1-10-web_browser_logos.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1340\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eRemember in the last lesson how we said that when you put a web site's address into your browser, you are just requesting to see a particular file? As it turns out, we can use web browsers to display files on our computers as well.\u003c/p\u003e\r\n\u003cp\u003eOpen the file location in your file explorer and double-click the icon for\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e. The page should open in a web browser and look like the image at the beginning of this lesson.\u003c/p\u003e\r\n\u003cp\u003eOkay, that's not very fancy - it's just some text in the corner of the screen. Over the next lessons, we will learn how to use HTML (and more) to format our pages.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-practice-floats","title":"Thursday: Practice: Floats","type":"WikiPage","content":"\u003cp\u003eGoal: Practice using floats to organize webpage layouts. Use concepts from the lesson on floats, such as wrapping text around an image, creating sidebars, and creating pages with multiple columns.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat are some of the options available to us for using floats?\u003c/li\u003e\r\n\u003cli\u003eWhat are we able to accomplish using floats?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson and create the page about mangoes and pay attention to how floats are used to change the layout of the page.\u003c/p\u003e\r\n\u003ch3\u003eBand Website\u003c/h3\u003e\r\n\u003cp\u003eCreate a website for your favorite band. Give the page a sidebar for upcoming shows. Create an \"About the band\" section and a section for images, and use floats to set the layout of the page.\u003c/p\u003e\r\n\u003ch3\u003ePhotographer Portfolio\u003c/h3\u003e\r\n\u003cp\u003eCreate a website for a photographer. Divide the page into columns that feature different categories of photography: For example, one for portraits, one for nature, and one for weddings.\u003c/p\u003e\r\n\u003ch3\u003eResume\u003c/h3\u003e\r\n\u003cp\u003ePull up your resume from the divs and spans practice, and use floats to divide the different sections into columns and rows. For example, the skills section can be broken into columns to save vertical space.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-catch-up-day","title":"Thursday: Catch-up Day","type":"WikiPage","content":"\u003ch2\u003eCatch Up Day\u003c/h2\u003e\r\n\u003cp\u003eTake this day to do a review of this week's work and also the previous weeks' content. Take time and go through the further exploration sections and make sure that you are at par with what we are learning everyday. The technical mentors will be there to assist you as you cover what you did not understand and any other incomplete projects and exercises.\u003c/p\u003e\r\n\u003cp\u003eRemember, the ABC of a software developer is \"Always Be Coding\". Have fun!! :)\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-practice-looping-with-for","title":"Wednesday: Practice - Looping with For","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: In the Looping with For lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe three parameters of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elength\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty in JavaScript\u003c/li\u003e\r\n\u003cli\u003eHow to use a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop both with and without arrays\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePractice utilizing for loops in a variety of ways by completing the exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloops? Describe to your partner a specific case in which you would use one over the other.\u003c/li\u003e\r\n\u003cli\u003eHow does a for loop 'know' when to stop looping?\u003c/li\u003e\r\n\u003cli\u003eWhat else can we do with the value we initialize as the first parameter in a for loop?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eCount Up By\u003c/h3\u003e\r\n\u003cp\u003eCreate a program that takes two numbers - one to count to and another to determine what multiple to use to get there.\u003c/p\u003e\r\n\u003cp\u003eHere is some sample input:\u003c/p\u003e\r\n\u003cpre\u003eCount to: 30\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eCount by: 5\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOutput: 5, 10, 15, 20, 25, 30\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cbr\u003eCount to: 50\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eCount by: 7\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eOutput: 7, 14, 21, 28, 35, 42, 49\u003c/pre\u003e\r\n\u003cp\u003eDon't forget to consider how to handle any input that might be submitted:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eempty values (user just presses enter)\u003c/li\u003e\r\n\u003cli\u003enon-numeric values\u003c/li\u003e\r\n\u003cli\u003enegative numbers\u003c/li\u003e\r\n\u003cli\u003ecount by number is larger than the count to numbers\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eTurn \u003ccode class=\"\"\u003eforEach\u003c/code\u003e into \u003ccode class=\"\"\u003efor\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eGo back to the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"modules/items/ic863191592517efb052fd0281588ce60\" target=\"_blank\"\u003elooping practice\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eproblems, and redo one of them with a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop instead of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop.\u003c/p\u003e\r\n\u003ch3\u003eWord Puzzle\u003c/h3\u003e\r\n\u003cp\u003eCreate a website that uses a method to replace vowels in a string with the dash symbol \"-\" to create a word puzzle to solve. Hide the original string when you show the resulting word puzzle, so that another person can try and guess it.\u003c/p\u003e\r\n\u003ch4\u003eExample:\u003c/h4\u003e\r\n\u003cp\u003e\u003cem\u003eString Input:\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\"Believe you can and you're halfway there. Robert Mugabe\"\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ePuzzle Output:\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\"B-l--v- y-- c-n -nd y--'r- h-lfw-y th-r-. R-b-rt M-g-b-\"\u003c/p\u003e\r\n\u003cp\u003eDo this\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewithout\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e\"regular expressions\".\u003c/p\u003e","frontPage":false},{"exportId":"monday-practice-implementing-bootstrap","title":"Monday: Practice - Implementing Bootstrap","type":"WikiPage","content":"\u003cp\u003eGoal: Begin exploring Bootstrap by creating an HTML page that integrates multiple Bootstrap elements into its styles.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat setup needs to occur in order to use Bootstrap elements in a project?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eResort Website\u003c/h3\u003e\r\n\u003cp\u003eRefactor your Resort website that you did to practice branching, adding Bootstrap to it. Do not forget to make regular commits and push to your pair's remote repo on GitHub.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-team-week-presentation","title":"Thursday: Team Week Presentation","type":"WikiPage","content":"\u003cp\u003eToday, teams will give an informal presentation and demonstration of their project to staff and students at their work stations. Determine how you want to present and demonstrate your work. Each team member may speak or a spokesperson may be designated for the group.\u003c/p\u003e\r\n\u003cp\u003ePlan to spend less than 5 minutes covering the following information:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eTeam Members\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e- Who worked on the project? What was each person's role?\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eProject Name and Objective\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e- Why did you choose this project? What purpose does it fulfill? Relate to the audience here - why should they care about your work?\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eDemonstration\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e- Walk through a live demo and describe the unique and important features of your work. If you did anything interesting with technology, talk about it here.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eProcess\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e- Describe how the team development process worked in your group.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eChallenges\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e- Share the biggest challenges you faced.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eQuestions and Answers \u003c/strong\u003e- Allow a bit of time at the end for any questions your audience may have.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"thursday-responsive-design-and-media-queries","title":"Thursday: Responsive Design and Media Queries","type":"WikiPage","content":"\u003cp\u003eYou may have noticed that some websites look a little different on your phone than they do in a browser window on your computer screen. Altering the appearance of a website depending on the device used to view it is an important feature of CSS that ensures a quality user experience on any device. It's essential to building modern websites. In this lesson, we'll learn about adapting a site for different screen sizes using media queries.\u003c/p\u003e\r\n\u003cp\u003eBuilding a site to change its appearance in response to the size of screen on which it is being viewed is known as responsive web design. The screen being used to view a site is often called a viewport. Before we begin, let's take a look at some examples of websites that use responsive design. Check out the following two websites to view some examples of responsive design. Each site contains the layouts of several different websites, and how their styles appear differently depending on the user's screen size.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://responsivedesign.is/examples/\"\u003eResponsive Design\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://mediaqueri.es/\"\u003emediaqueri.es\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBut how do we make our own sites responsive? How does it know when to use styles meant for smaller viewports, and when to apply styles meant for larger ones?\u003c/p\u003e\r\n\u003cp\u003eIn human terms, responsive design sounds something like,\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"I want my website to have a white background when viewed on a phone, but a green background when viewed from a computer monitor\"\u003c/em\u003e. To accomplish this, you need to give the computer instructions such as,\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"If the viewport size is larger than 768 pixels, use green for the background color. Otherwise, use white for the background color.\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eTo accomplish this, we can use CSS media queries. A media query is a block of CSS that is applied only when certain conditions about the user's viewport are true.\u003c/p\u003e\r\n\u003cp\u003eLet's walk through creating media queries together. This will allow us to both understand their construction, and see what they look like in action.\u003c/p\u003e\r\n\u003cp\u003eCreate a project directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emedia-query-practice\u003c/em\u003e. Inside, create an HTML file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emedia-query-site.html\u003c/em\u003e, and another directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e. In the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory create a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eTo start, let's add some HTML to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emedia-query-site.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMedia Queries\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMedia Queries\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc tincidunt vestibulum sollicitudin. Aliquam sit amet ultrices purus, quis pulvinar massa. Sed quis ligula dapibus, gravida lectus sit amet, euismod quam. Integer id nisi sem. Phasellus ac purus et nunc dignissim ultricies quis sed ligula. Proin efficitur nunc eget egestas iaculis. Proin posuere, enim in venenatis gravida, erat metus hendrerit tellus, sit amet sollicitudin magna mauris sit amet ex. In hac habitasse platea dictumst. Fusce porta suscipit felis vitae ornare. Duis fringilla, nunc vitae aliquam lacinia, metus urna tincidunt erat, ut laoreet leo mi ac nibh. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eIn pretium eu sem quis dignissim. In commodo velit eu elit volutpat bibendum. Proin a orci pharetra, pharetra mauris et, tempor odio. Nullam semper magna sit amet augue pretium molestie. Quisque ullamcorper turpis a nisi consectetur, vel consectetur purus lobortis. Pellentesque tristique justo id faucibus rutrum. Donec mi lacus, molestie et posuere eget, lacinia sed turpis. Aenean id sem ligula. Cras venenatis commodo felis a tempor. Duis nec leo facilisis, condimentum odio dictum, rutrum lectus. Nullam vehicula elementum imperdiet.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"column\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eNullam sit amet ante porttitor, vestibulum quam nec, tincidunt sem. Nulla ac diam in risus porta sollicitudin. Nam pellentesque diam nec arcu vehicula varius. Praesent id ornare magna. Aliquam congue nisl enim, id vulputate lacus faucibus non. Sed ac dignissim dui, quis porttitor augue. Donec velit erat, hendrerit ut tincidunt vel, placerat sit amet risus.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, the fun part: let's add some media queries!\u003c/p\u003e\r\n\u003cp\u003eMedia queries are located in CSS stylesheets. Because of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecascading\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein CSS, they should be located at the bottom of the file, to prevent other style rules from overriding them.\u003c/p\u003e\r\n\u003cp\u003eThe basic skeleton of a media query looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e () \u003c/span\u003e{\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThere are three parts to this block of code:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e@media\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells the browser that this is a media query\u003c/li\u003e\r\n\u003cli\u003eThe parentheses will contain the conditions of when to apply CSS\u003c/li\u003e\r\n\u003cli\u003eThe curly braces will contain the CSS rule to be applied when the conditions contained in the parenthesis are true\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eMedia Type\u003c/h2\u003e\r\n\u003cp\u003eMedia queries will often include something called a media type, which refers to the type of device the user is viewing a site with. We have the following options to choose from:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eall\u003c/code\u003e: Suitable for all devices.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eprint\u003c/code\u003e: Intended for viewing a site in \"print preview\" mode. For instance, if we had a website with a dark-colored background that users may want to print, we could use a print media query that removes the dark-colored background for print media types. This would both make our website's information more legible in a printed format, and save our users printer ink.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003escreen\u003c/code\u003e: Intended primarily for color computer screens.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003espeech\u003c/code\u003e: Intended for screen readers that assist users with impaired vision.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf you do not explicitly specify a type, the media query will default to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eall\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eHere's how to add the media type to a query:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen () \u003c/span\u003e{\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBy specifying the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escreen\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia type, we're instructing our site to only apply any CSS in this media query to the site if a user is viewing it through a screen.\u003c/p\u003e\r\n\u003ch2\u003eMedia Features\u003c/h2\u003e\r\n\u003cp\u003eTo tell a media query the conditions of when to apply CSS, we include something called a media feature. Media features are specific properties and details about the manner the user is viewing content. The most commonly-used media features are:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eheight\u003c/code\u003e: Describes the height of the viewport, in pixels. This media feature can also have a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix added onto it. That is, we can say\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax-height\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto specify the maximum height to which a media query's CSS should apply. Or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin-height\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto define a minimum height.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003ewidth\u003c/code\u003e: Describes the width of the viewport, in pixels. Like height, it may also have a min or max prefix added onto it.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eorientation\u003c/code\u003e: Indicates whether the viewport is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elandscape\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(wider than it is tall) or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eportrait\u003c/code\u003e(taller than it is wide).\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWhile not required for this course, you can learn about the additional, less common features in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#Media_features\"\u003eMDN Documentation on Media Queries\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewidth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia feature in our media query. We'll also include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix, in order to specify a minimum width:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-property\"\u003e@media\u003c/span\u003e screen \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e (min-\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e480\u003c/span\u003epx) {\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe've done a few things here:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFirst, we specified that this CSS rule will apply to the screen media type.\u003c/li\u003e\r\n\u003cli\u003eThen we added the word\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebetween our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escreen\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia type, and the parenthesis containing our new media feature. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword is used for combining media features with media types, as well as combining multiple media features together.\u003c/li\u003e\r\n\u003cli\u003eThen, we included\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin-width: 480px\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the parenthesis.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003ewidth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis our media feature.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix specifies that the CSS we will eventually include in this media query should only be applied to viewports with a minimum width of 480 pixels.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e480px\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esimply refers to size (in pixels) we'd like to define as the maximum. When defining pixel sizes in CSS, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epx\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esuffix is required.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eBreakpoints\u003c/h3\u003e\r\n\u003cp\u003eThis rule means the CSS we will eventually include in this media query will only be applied when the user's viewport is wider than the minimum width of 480 pixels. This is known as a breakpoint.\u003c/p\u003e\r\n\u003cp\u003eA breakpoint is the point at which a media query's condition becomes true. For instance, because our media query has a min-width of 480px, it will apply its styles only when the viewport is 480 pixels wide or greater. 480px is therefore the breakpoint, because it is the point at which the query will be \"activated\".\u003c/p\u003e\r\n\u003cp\u003eFor some standard device breakpoints, check out this reference at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://css-tricks.com/snippets/css/media-queries-for-standard-devices/\"\u003eCSS Tricks\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2\u003eMobile-First Design\u003c/h2\u003e\r\n\u003cp\u003eLet's focus on the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix for a bit here. What's the difference? Why does it matter which one we use?\u003c/p\u003e\r\n\u003cp\u003eWhen we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin-width\u003c/code\u003e, then the design changes when the width is larger than 480 pixels. Using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax-width\u003c/code\u003emeans that the design changes when the width gets smaller than 480 pixels.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emin-width\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill make the page display faster on smaller devices, and is a good idea because smaller devices usually have less power to display a website. This approach to designing a website is called mobile first design, because it means designing for mobile screens before designing for desktop or other devices. When in doubt, take the mobile first approach.\u003c/p\u003e\r\n\u003ch2\u003eCSS Rules\u003c/h2\u003e\r\n\u003cp\u003eAll right, we have our setup ready to make some media queries. Let's start writing some CSS! We will include CSS within the curly braces, and the CSS is exactly like the CSS we've been using so far. The only difference is that the CSS rule will only be applied when the media query conditions are met.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e480px\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: black\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: white\u003c/span\u003e;\r\n    }\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe're saying that when the user is viewing our page from a screen, and the page width is larger than 480 pixels, then the background color will be black and the text color will be white. Any smaller than that, and only the default styles will be applied. Try it out!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D3-04-resize_window_responsive.gif\" alt=\"MP-W1D3-04-resize_window_responsive.gif\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe can add multiple media queries to address a variety of viewport sizes and media types. Let's add another media query to our site:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e480px\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: black\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: white\u003c/span\u003e;\r\n    }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellowgreen\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you refresh the page, you can see that if the width is between 480 and 767 pixels, the background color is black, when the width is 768 pixels or larger, the background color changes to yellow-green. Notice that the text color remains white after the background turns yellow-green, even though we don't specify text color in the second CSS rule. This is because he viewport is still greater than 480 pixels wide, and we didn't say anything about text color in the second CSS rule. Unless we override the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty with a new rule, it will remain white.\u003c/p\u003e\r\n\u003ch2\u003eViewport Ranges\u003c/h2\u003e\r\n\u003cp\u003eWe can also specify both minimum and maximum values for a media query. This can be useful if we don't want to worry about certain styles applying to multiple media queries.\u003c/p\u003e\r\n\u003cp\u003eWe could add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emax-width\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our media query like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e480px\u003c/span\u003e) and (max-width: \u003cspan class=\"hljs-number\"\u003e767px\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: black\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: white\u003c/span\u003e;\r\n    }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellowgreen\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo specify the viewport range, we added a second\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebetween the two sets of parentheses. Now when we refresh the page, we see that the text color is white only for the first media query, and changes back to black when the screen width is greater than 767 pixels.\u003c/p\u003e\r\n\u003ch2\u003eMore CSS in Media Queries\u003c/h2\u003e\r\n\u003cp\u003eLet's look at another example of how we can use media queries to change our webpage's display. Often, sites will display text in a single column for easy reading on mobile phones or smaller devices, but display the text in columns on larger devices (see\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://mediaqueri.es/dbp/\"\u003ethis example from mediaqueri.es\u003c/a\u003e).\u003c/p\u003e\r\n\u003cp\u003eWe've styled text into columns in a previous lesson on floats. Where do you think we need to put the CSS for displaying our text as columns at only larger screen sizes?\u003c/p\u003e\r\n\u003cp\u003eHere's the CSS:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e480px\u003c/span\u003e) and (max-width: \u003cspan class=\"hljs-number\"\u003e767px\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: black\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: white\u003c/span\u003e;\r\n    }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e screen and (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellowgreen\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n  \u003cspan class=\"hljs-class\"\u003e.column\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e220px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efloat\u003c/span\u003e: left\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur new rule will float any element with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolumn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to the left, and make its width 220 pixels, but only for screens larger than 768 pixels. Check it out! Our text is displayed in a single column by default:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D3-05-single_column.png\" alt=\"MP-W1D3-05-single_column.png\" width=\"585\" height=\"500\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBut at larger screen sizes, we have columns:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D3-06-multiple_column.png\" alt=\"MP-W1D3-06-multiple_column.png\" width=\"696\" height=\"499\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs you can see, media queries are a powerful tool in web design! We have the ability to tailor our user's experience of the webpage depending on how they view it. As more individuals are accessing web content through handheld devices and tablets, it's a good idea to be aware of responsive design and how we can use it to give the user the highest quality experience.\u003c/p\u003e\r\n\u003cp\u003eAs you create websites and applications throughout this course, begin implementing media queries to ensure your content looks great on all devices.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-advanced-functions","title":"Tuesday: Advanced Functions","type":"WikiPage","content":"\u003cp\u003eFunctions are values, just like numbers, strings, arrays and objects. They can be saved to variables:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e say_hi = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'hi'\u003c/span\u003e)\r\n}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e greeter = say_hi\r\n\r\nsay_hi()\r\ngreeter()\r\n\r\nsay_hi = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'meh'\u003c/span\u003e)\r\n}\r\n\r\nsay_hi() \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\r\ngreeter() \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThey can be passed as arguments (inputs) to functions:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e runner = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003efn\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'Invoking a function now!'\u003c/span\u003e)\r\n  fn()\r\n}\r\n\r\nrunner( \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{ \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'okay'\u003c/span\u003e) } )\r\nrunner(say_hi)\r\nrunner(greeter)\r\n\r\nrunner( say_hi() ) \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eExercise\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eWrite a function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eanswer_logger\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat takes a function as input, runs it, and places the return value from that function invocation into a div#answer\u003c/p\u003e\r\n\u003cp\u003eWe can test\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eanswer_logger\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eusing the following code, we should not need to change it at all.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003eanswer_logger(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"I should appear in div#answer!\"\u003c/span\u003e\r\n})\u003c/code\u003e\u003c/pre\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eWrite a function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eanswer_collector\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat takes an array of functions as an input and runs each of them, in turn. Each time you run a function, collect its return value and add it to a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresults_array\u003c/code\u003e. Return the results array from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eanswer_collector\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe can test\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eanswer_collector\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith this code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e fn1 = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"this should be the first value in results array\"\u003c/span\u003e\r\n}\r\n\r\nanswer_collector([fn1, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{ \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"this should be the second value in results array\"\u003c/span\u003e }])\u003c/code\u003e\u003c/pre\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eNot only can functions be passed as inputs, they can also be returned as outputs.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e returns_a_func = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{ \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'BOOP!'\u003c/span\u003e) }\r\n}\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e// have we booped yet?\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e booper = returns_a_func()\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e// how about now?\u003c/span\u003e\r\nbooper()\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFunction define their own local\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003escope\u003c/strong\u003e. Variables declared within a function invocation are available only inside of that function. It's as if invocations are surrounded by one-way mirrors, they can see out and access variables named in their parent scope, but code running outside can't see in to access parameters or variables defined inside.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e word = \u003cspan class=\"hljs-string\"\u003e'original'\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e phrase = \u003cspan class=\"hljs-string\"\u003e\" is the word\"\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e word_changer = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003enew_word\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e word = new_word\r\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(word + phrase)\r\n}\r\n\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(word + phrase) \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(new_word + phrase) \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\r\nword_changer(\u003cspan class=\"hljs-string\"\u003e'changed'\u003c/span\u003e)\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(word + phrase) \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(new_word + phrase) \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e// what's different here?\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e leaky_word_changer = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003enew_word\u003c/span\u003e) \u003c/span\u003e{\r\n    word = new_word\r\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(word + phrase)\r\n}\r\n\r\nleaky_word_changer(\u003cspan class=\"hljs-string\"\u003e'changed'\u003c/span\u003e)\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(word + phrase) \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(new_word + phrase) \u003cspan class=\"hljs-comment\"\u003e// ??\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eExercise\u003c/strong\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWrite a function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esecret_keeper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat defines a variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esecret\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einside its code block.\u003c/li\u003e\r\n\u003cli\u003eTry to access the secret variable from outside the function scope using your JS console. Make sure it's safe!\u003c/li\u003e\r\n\u003cli\u003eAllow the user to invoke\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esecret_keeper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith two strings as arguments\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$().append()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethe two strings to the page with the secret word in between\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eReturned functions retain scope access at the point they were defined. This is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eclosure\u003c/strong\u003e. The scope chain is established at the point WHERE THE KEYWORD\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efunction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eIS WRITTEN, not where it is invoked.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e returns_a_func = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e word = \u003cspan class=\"hljs-string\"\u003e'I can see inside'\u003c/span\u003e\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{ \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'BOOP! '\u003c/span\u003e + word) }\r\n}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e word = \u003cspan class=\"hljs-string\"\u003e'I can see outside'\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e new_booper = returns_a_func()\r\nnew_booper() \u003cspan class=\"hljs-comment\"\u003e// what does this log? why?\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e returns_a_func = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number = \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{ \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log( \u003cspan class=\"hljs-string\"\u003e\"The number is: \"\u003c/span\u003e + number) }\r\n}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number = \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e fn = returns_a_func()\r\nfn() \u003cspan class=\"hljs-comment\"\u003e// what will this log? why?\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e func_runner = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efunc\u003c/span\u003e)\u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e number = \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e\r\n  func()\r\n}\r\n\r\nfunc_runner(fn) \u003cspan class=\"hljs-comment\"\u003e// what will this log? why?\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eExercise\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eWrite a function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emultiplies_by\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat takes a number as input and returns a function that, when invoked with a second number as an argument multiplies the two numbers together.\u003c/p\u003e\r\n\u003cp\u003eWe can test\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emultiplies_by\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith this code, we should not need to change it at all.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e times5 = multiplies_by(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e)\r\ntimes5(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e) \u003cspan class=\"hljs-comment\"\u003e// 20\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e times10 = multiplies_by(\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e)\r\ntimes10(\u003cspan class=\"hljs-number\"\u003e32\u003c/span\u003e) \u003cspan class=\"hljs-comment\"\u003e// 320\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e","frontPage":false},{"exportId":"wednesday-git-branching","title":"Wednesday: Git Branching","type":"WikiPage","content":"\u003cp\u003eSo far we've learned what Git and GitHub are, how to set up a project, track changes, push code to GitHub, clone projects back down from GitHub into a local Git repository, and even publish websites on GitHub Pages.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we'll dive deeper into Git by exploring something called branching. We were introduced to branching briefly when we learned about GitHub pages. In this lesson, we'll learn more about what it is, how it works, what benefits it offers, and how to create and maintain branches in our own projects.\u003c/p\u003e\r\n\u003cp\u003eTo do this, we'll walk through creating an example project in the next two lessons. Together, we'll create and merge branches in this example project. Then, in an upcoming exercise you'll have the opportunity to work with branches on your own project with a partner.\u003c/p\u003e\r\n\u003ch2\u003eOverview\u003c/h2\u003e\r\n\u003cp\u003eIn Git, branching is the act of creating multiple copies of similar code in the same repository. There are many reasons developers do this. Here are a few of the most common:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMultiple branches allow a team of developers to work together without \"stepping on each others' feet\", so to speak. If a team was all working on the same files at the same time, things could get messy very quickly. Branches allow each developer their own copy of the project to work on. When part of the project is done, the team can merge multiple branches together into a completed final product.\u003c/li\u003e\r\n\u003cli\u003eBranching also allows us to experiment with changes without risking our final product. We can use branching to create a copy of our code separate from our final version to experiment with new features and code. If this new code causes any bugs, we can rest assured knowing our original code is still safe!\u003c/li\u003e\r\n\u003cli\u003eBranching allows us to pursue multiple options at once. Not sure which approach to a problem is preferable? With branching, you can always create multiple copies of your project, try implementing different code in each, and see which result is preferable.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eMaster Branch\u003c/h2\u003e\r\n\u003cp\u003eYou may be surprised to learn that you've been interacting with branches since the beginning of the course! At this point in the curriculum, you've most likely pushed several projects to GitHub already, and published at least one on GitHub Pages. Your current GitHub repositories should look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-07-github_repo_main.png\" alt=\"MP-W1D2-07-github_repo_main.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1375\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNotice the drop-down menu on the left side labeled\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBranch\u003c/em\u003e. If we click this drop-down we see it contains one entry:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(if you've published a project to GitHub pages it will also contain a branch named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-08-github_branch_dropdown.png\" alt=\"MP-W1D2-08-github_branch_dropdown.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1376\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWhen you learned how to push a project to a remote GitHub repo yesterday, you pushed your local Git repositories to online GitHub repositories using a command like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe \u003ccode\u003emaster\u003c/code\u003e portion of this command instructs Git to push the current master copy of your local repository to the remote repository under the nickname \u003cspan style=\"font-family: monospace;\"\u003e\u003cspan style=\"font-size: 13px;\"\u003eorigin\u003c/span\u003e\u003c/span\u003e.\u003c/p\u003e\r\n\u003cp\u003eBut what does\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emean? Well, projects tracked in Git and GitHub may have multiple branches. The term \"master\" specifies that code should be pushed to the master branch on GitHub. Remember, we saw there was a branch named \u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the dropdown menu on GitHub.\u003c/p\u003e\r\n\u003cp\u003eA branch is just another copy or version of the project's main code. Both Git and GitHub repositories may have multiple branches at once. There is always at least one branch in a project:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003e\"Master\" is the name of the default branch. If you don't create or navigate between branches in your project, you will have one branch named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, and you will be located in it by default. When you have multiple branches in a project, the master branch is like the \"final draft\".\u003c/p\u003e\r\n\u003cp\u003eBranches that are not\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare often referred to as feature branches, because they allow developers to experiment with new features before integrating them into the \"final draft\"\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, you probably published a project to GitHub pages with a command like this in a previous lesson:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin gh-pages\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMuch like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis also a branch name. While master is responsible for containing the final product, \u003ccode\u003egh-pages\u003c/code\u003e is responsible for publishing content to GitHub's special GitHub Pages tool.\u003c/p\u003e\r\n\u003ch2\u003eExample Project\u003c/h2\u003e\r\n\u003cp\u003eLet's walk through a basic example of branching together. We'll craft a small website. Then, we'll create multiple branches to experiment with different CSS styles. We'll compare the styles, choose which we like best, and integrate the favored styles into our \"final draft\" (that is, our master branch). You and your partner should begin following along at this time.\u003c/p\u003e\r\n\u003ch3\u003eProject Directory\u003c/h3\u003e\r\n\u003cp\u003eNext, let's create a new project directory in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDocuments\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder. Remember, whenever we start a new project we must create a new directory for it to reside in. First, we'll navigate to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDocuments\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e Documents\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll create a new directory called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebranching-test-project\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan class=\"hljs-keyword\"\u003emkdir\u003c/span\u003e branching-test-project\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can see our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebranching-test-project\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory. Next, use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to navigate to the new project folder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan class=\"hljs-built_in\"\u003ecd\u003c/span\u003e branching-test-project\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRemember, if you're ever unsure of your location in the command line you can run the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ pwd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand.\u003c/p\u003e\r\n\u003ch3\u003eGit Initialization\u003c/h3\u003e\r\n\u003cp\u003eNext, we'll initialize our Git repository:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit init\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eHTML File\u003c/h3\u003e\r\n\u003cp\u003eNext, let's create an HTML file for our website's code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etouch branching-website.html\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll open our project directory in Atom:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003eatom .\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd add the following code to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebranching-website.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ebranching-website.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e Branching Practice Site \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e Branching \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e A website to practice branching with Git. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e This page has been created in order to practice branching with Git and GitHub. By creating branches, we can work on different versions of the same code in the same repository simultaneously!  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eCommitting Changes\u003c/h3\u003e\r\n\u003cp\u003eOnce this code is in place, we can make our first commit. First, we'll run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git status\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto see there are new, uncommitted changes in our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git status\r\nOn branch master\r\nInitial \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e\r\nUntracked files:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e include \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e what will be committed)\r\n    branching-website.html\r\nnothing added \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e but untracked files present (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git add\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e track)\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git add\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto add our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebranching-website.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to Git so it will track this file's changes:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add branching-website.html\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git status\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to see that our file is now being tracked, but has not yet been committed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git status\r\nOn branch master\r\nInitial \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e\r\nChanges \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be committed:\r\n  (\u003cspan class=\"hljs-keyword\"\u003euse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"git rm --cached \u0026lt;file\u0026gt;...\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e unstage)\r\n    new file:   branching-website.html\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's save our new HTML to the permanent history of the project by committing it. Since we're working with a partner, we'll use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit commit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to do this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Add initial HTML file with explanation of branching practice site.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run $ git log we can see a new commit has been added to the history of our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2016\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eAdding Styles with CSS\u003c/h3\u003e\r\n\u003cp\u003eGreat! Now, earlier today you learned about CSS. Before we begin branching, let's create a basic CSS stylesheet for our example project. We'll make a folder called css in our existing project directory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan class=\"hljs-keyword\"\u003emkdir\u003c/span\u003e css\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll create a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewithin our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etouch css/styles.css\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur project structure should look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-09-project_structure_branching.png\" alt=\"MP-W1D2-09-project_structure_branching.png\" width=\"279\" height=\"183\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1377\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNext, let's tell our HTML document to use this new file for its CSS. We will include a link to the new CSS file in the \u003cspan\u003etags of our \u003c/span\u003e\u003cem\u003ebranching-website.html file\u003c/em\u003e\u003cspan\u003e, like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ebranching-website.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e Branching Practice Site \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e Branching \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e A website to practice branching with Git. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e This page has been created in order to practice branching with Git and GitHub. By creating branches, we can work on different versions of the same code in the same repository simultaneously!  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add these new changes to our Git repository:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add .\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd commit them to the history of our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Create stylesheet, link in head of website.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll add a basic CSS rule to our stylesheet:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we open _branching-website.html_ file in our browser, we should see that the text in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e tags is blue:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-10-test_site_blue_headers.png\" alt=\"MP-W1D2-10-test_site_blue_headers.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1387\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's add and commit this new CSS rule to our project:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add css/styles.css\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Add CSS rule to make H1 headers blue.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe will see we now have 3 commits:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: \u003c/span\u003e\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"hljs-operator\"\u003eAlbert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/code\u003eDate: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Create\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Add\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\u003c/pre\u003e\r\n\u003cp\u003eNow that our basic website is set up, we can use it to learn about branching in the next section. Nice work!\u003c/p\u003e\r\n\u003ch3\u003eViewing a Project's Branches\u003c/h3\u003e\r\n\u003cp\u003eEverything we've done thus far should be review. Now, let's explore the new concept at hand: branching. First we'll run the following command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit branch\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand displays what branches are currently in our project. It also denotes which branch we're currently viewing with an asterisk\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e*\u003c/code\u003e. After we execute this command, we should see this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-bullet\"\u003e* \u003c/span\u003emaster\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis informs us that there is only one branch:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. And, we know we're currently located in that branch because there is an asterisk next to it. Remember, master is the default branch. If we do not create any branches, or move between any branches, we will be on master.\u003c/p\u003e\r\n\u003ch3\u003eCreating a New Branch\u003c/h3\u003e\r\n\u003cp\u003eLet's pretend we're unsure how to style our site. We want to test a couple different stylistic approaches, and see which looks best. To do this, we'll create several versions of our project with branches. We'll implement different styles in each branch.\u003c/p\u003e\r\n\u003cp\u003eWe can create a new branch by running the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand and including the name of the new branch after it, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis creates a new branch named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e. Branch names should be short and meaningful, and describe the reason for the branch. In our case, this branch will contain styles that use the color blue throughout.\u003c/p\u003e\r\n\u003cp\u003e(Note that there are only two exceptions to these naming rules: The master branch will always be named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, and GitHub pages requires branches be named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein order to publish them using the GitHub pages tool.)\u003c/p\u003e\r\n\u003ch3\u003eNavigating Between Branches\u003c/h3\u003e\r\n\u003cp\u003eIf we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain, we can see our project now contains two branches:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice the asterisk is still next to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. We created a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch, but we're still located on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. We can switch branches like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git checkout \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git checkout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand navigates to the specified branch. We can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to confirm we've successfully entered the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n* \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n  master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe asterisk is now next to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e, so we know we've successfully navigated to that branch. Now, let's look at our project in Atom. Despite being located in our new branch, everything should look the exact same.\u003c/p\u003e\r\n\u003cp\u003eWhen you create a branch, the new branch is \"branched off\" from the branch you are located in when the command to create a new branch is executed. This means the new branch will contain all code and commits from the branch it was branched off from. In our case, since we were located in master when we created\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtains all code and commits that master contained at the time of the new branch's creation.\u003c/p\u003e\r\n\u003cp\u003eWe can confirm this by running\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e. We should see our new branch contains the same commits we made on master:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: \u003c/span\u003e\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"hljs-operator\"\u003eAlbert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/code\u003eDate: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Add\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Create\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e070\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Add\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\u003c/pre\u003e\r\n\u003ch3\u003eWorking on a Branch\u003c/h3\u003e\r\n\u003cp\u003eWe now have a separate, isolated version of our project to experiment with. We can safely test code in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewithout risking the integrity of code in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. We can change, add, and commit whatever we'd like in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand master will remain completely unaffected. Let's add more CSS to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003estylesheet:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: teal\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: gray\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: skyblue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we refresh our page in the browser, we can see these new styles:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-11-test_site_blue_theme.png\" alt=\"MP-W1D2-11-test_site_blue_theme.png\" width=\"896\" height=\"188\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1378\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs always, we'll add these changes to our Git repository and commit them:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add css/styles.css\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Add styles to h1, h2, p, and body to fit blue theme.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eSeparation of Commits Between Branches\u003c/h3\u003e\r\n\u003cp\u003eLet's run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to see a summary of our commits:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e268363\u003c/span\u003eae7b81a7ee91540d93f82e3f9285c575dd\r\nAuthor: \u003c/span\u003e\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"hljs-operator\"\u003eAlbert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/code\u003eDate: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e24\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e38\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Add\u003c/span\u003e styles \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e h1, h2, p, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e body \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e fit blue theme.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Add\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Create\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Add\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch now contains the commits it inherited from master, and the new commit we've just made. Before we continue, let's return to our master branch for a moment using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit checkout\u003c/code\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit checkout master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs always, we can double-check we're on master by running\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand confirming that master has an asterisk next to it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGreat. Now, let's look at the commits on our master branch again:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: \u003c/span\u003e\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"hljs-operator\"\u003eAlbert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/code\u003eDate: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Add\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Create\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e Add\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\u003c/pre\u003e\r\n\u003cp\u003eNotice that the new commit we just made on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not present in master! Our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme \u003c/code\u003ebranch's most recent commit reads \"Add styles to h1, h2, p, and body to fit blue theme.\" Whereas master's most recent commit reads \"Add CSS rule to make H1 headers blue.\" And if we refresh our page in the browser again, we can see our blue styles are no longer present:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-10-test_site_blue_headers.png\" alt=\"MP-W1D2-10-test_site_blue_headers.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1387\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAlso, if you view the\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003estylesheet in Atom, you'll notice that the CSS rules we just added are gone! Don't worry; this is entirely normal. Because we switched branches, the version of the project we're seeing in Atom is different. The master branch does not have the same CSS rules as the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch.\u003c/p\u003e\r\n\u003cp\u003eRemember, when we create a branch the new branch will inherit all commits from the branch it is branched off from. That is, the branch we are located in when we create the new branch. However, when we make new commits on our new branch, they remain on that branch. The organization of our current commits between branches look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-13-flow_chart_1.png\" alt=\"MP-W1D2-13-flow_chart_1.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1379\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe can see our first three commits on master. When we branched off of master to create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e, it inherited all of master's commits. However, when we made subsequent commits in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethey remained exclusive to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand were not shared with master.\u003c/p\u003e\r\n\u003ch3\u003eWorking with Multiple Branches\u003c/h3\u003e\r\n\u003cp\u003eLet's create another branch with a different set of CSS styles for our site. Remember, you may branch off from any existing branch. The new branch will contain all code and commits from whatever branch you were located within when the new branch was created.\u003c/p\u003e\r\n\u003ch3\u003eCreating a New Branch\u003c/h3\u003e\r\n\u003cp\u003eLet's branch from master again. We'll run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand confirm we're located in master:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll create another new branch named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to confirm our new branch has been created:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n  \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eNavigating Between Branches\u003c/h3\u003e\r\n\u003cp\u003eNext, we'll switch to our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit checkout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit checkout red_theme\r\n\u003cspan class=\"hljs-constant\"\u003eSwitched\u003c/span\u003e to branch \u003cspan class=\"hljs-string\"\u003e'red_theme'\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto confirm we've successfully navigated into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n  master\r\n* \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd, if we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can see\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas inherited all commits from master, as expected:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: \u003c/span\u003e\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"hljs-operator\"\u003eAlbert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e    Add\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e    Create\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\u003cbr\u003eAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\u003cbr\u003e\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003cbr\u003e\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003e    Add\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site. \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eWorking on a Branch\u003c/h3\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in Atom should currently look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAgain, notice that it does not contain the CSS we just committed in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch. The new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e branch was branched off of master. Therefore, it contains all of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e's commits and code. It does not contain the code we committed on the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch, only the master branch. Let's add styles to this branch's version of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile now:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: darkred\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: crimson\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: salmon\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we refresh our page in the browser, we can see our new CSS at work:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-14-test_site_red_theme.png\" alt=\"MP-W1D2-14-test_site_red_theme.png\" width=\"1028\" height=\"186\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1380\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe'll add these changes to our Git repository, and commit:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add css/styles.css\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Add styles to h1, h2, p, and body to fit red theme.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs always, we can run \u003ccode\u003e$ git log\u003c/code\u003e to see a summary of our commits:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003ef2d9510cdc76736c7c5cf7e5d56264cd405fcd1\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e51\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e styles \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e h1, h2, p, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e body \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e fit red theme.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e eb1774eee69d3e8fa1d74790dc9c64d70d1e9ec2\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e54\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e initial HTML file \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e explanation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e branching practice site.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe now have the commits that came along with the new branch when we branched from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, and the new commit we've just made on the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch. Our organization of commits between branches currently looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-15-flow_chart_2.png\" alt=\"MP-W1D2-15-flow_chart_2.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1381\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNow, let's say we want to improve the styles in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eeven further by changing the site's text. We'll include the following additional CSS rules in\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: darkred\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: crimson\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: salmon\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-family\u003c/span\u003e: sans-serif\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003etext-align\u003c/span\u003e: center\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we denote that everything located in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags should have sans-serif style font that is center-aligned. Because we're now styling everything in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags we can remove\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etext-align: center;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the existing h1 and h2 CSS rules.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags exist within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags, so this rule will automatically apply to them too. We can save our changes and refresh the site to see our new styles:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-16-red_theme_sans_serif.png\" alt=\"MP-W1D2-16-red_theme_sans_serif.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1382\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAgain, we'll add these changes to our Git repository:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add css/styles.css\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd commit them with a descriptive message:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"Make all font sans-serif style.\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's run \u003ccode\u003e$ git log\u003c/code\u003e. We can see that in addition to the 3 commits inherited from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme \u003c/code\u003ebranch also has 2 of its own commits:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e d5bae6406669988e154608ce990e08fed51e9cb3\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e13\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e00\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    Make \u003cspan class=\"hljs-keyword\"\u003eall\u003c/span\u003e font sans-serif style.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003ef2d9510cdc76736c7c5cf7e5d56264cd405fcd1\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e51\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e styles \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e h1, h2, p, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e body \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e fit red theme.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Albert Einstein \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe commits across all branches of the project currently look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-17-flow_chart_3.png\" alt=\"MP-W1D2-17-flow_chart_3.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1383\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eBenefits of Branching\u003c/h2\u003e\r\n\u003cp\u003eAre you beginning to see how branching can be beneficial? It allows us to experiment with code and ensure it works correctly before saving it to our \"final draft\" master branch. When developers integrate new features into projects, they commonly do so in a branch. This allows them to make a copy of the entire project, experiment with new code, and confirm it does what it is supposed to before saving it into the final version.\u003c/p\u003e\r\n\u003cp\u003eThis prevents bugs or issues from affecting the project. If the new code a developer adds or breaks anything, it won't cause issues on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, only on that isolated branch. This allows developers room to iron out any issues with code before integrating it into the final version of the project.\u003c/p\u003e\r\n\u003cp\u003eWhen code is fine-tuned and tested in the branch, and we know it works, we can add it to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. This process is called merging, and we'll explore it in detail in the next lesson as we continue to work with this example project.\u003c/p\u003e","frontPage":false},{"exportId":"monday-practice-bootstrap-basics","title":"Monday: Practice: Bootstrap Basics","type":"WikiPage","content":"\u003cp\u003eGoal: Start exploring Bootstrap by creating a web page that uses Bootstrap components.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003eHow do we add Bootstrap to a project?\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a CDN?\u003c/li\u003e\r\n\u003cli\u003eWhat are some benefits of using Bootstrap?\u003c/li\u003e\r\n\u003cli\u003eHow do we add Bootstrap features to our own projects?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eYour friend has a catering company and needs a website to get some more business. Design a website using Bootstrap. Pay attention to how the page is responsive right out of the box.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse a container to house the page content.\u003c/li\u003e\r\n\u003cli\u003eInclude a jumbotron to display the company's name and slogan.\u003c/li\u003e\r\n\u003cli\u003eUse panels to hold the meals offered by the company.\u003c/li\u003e\r\n\u003cli\u003eUse helper classes to highlight and emphasize various parts of the page.\u003c/li\u003e\r\n\u003cli\u003eBonus: see the notes on Bootstrap\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#type-blockquotes\" target=\"_blank\"\u003eblockquotes\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand see if you can figure out how to add some to the page to display customer testimonials.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"wednesday-practice-arrays","title":"Wednesday: Practice - Arrays","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: In the Array Mapping lesson we learned how to use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return a new array with some sort of manipulation or calculation performed on each element. Let's further hone our array mapping skills by completing the exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a callback function? How is it different from a plain ol' everyday function?\u003c/li\u003e\r\n\u003cli\u003eWhat portion of the following code is the callback function? What does this particular callback function do?\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tripledNumbers = numbers.map(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003enumber\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e number * \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\r\n    });\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eDoes\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ealter the array it is called upon?\u003c/li\u003e\r\n\u003cli\u003eDiscuss with your partner when you would use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand when it might be better to use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eComplete the following in the JavaScript console or on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://jsfiddle.net/\" target=\"_blank\"\u003eJSFiddle\u003c/a\u003e:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMake an array of numbers, then use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return an array containing each of the original numbers + 1.\u003c/li\u003e\r\n\u003cli\u003eCreate an array of words. Use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return an array of the same words in all uppercase.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"tuesday-jquery-simple-effects","title":"Tuesday: jQuery - Simple Effects","type":"WikiPage","content":"\u003cp\u003ePopping up dialogue boxes isn't very interesting, so let's move on to actually manipulating our web page by showing and hiding elements. Here's the HTML for the page we'll work on:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;link href=\"css/bootstrap.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003cbr\u003e    \u0026lt;link href=\"css/styles.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026lt;brikicho\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;div class=\"container\"\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;peek-a-boo\u0026lt;/h1\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;p\u0026gt;Let's play peek-a-boo. Click here to see the surprise!\u0026lt;/p\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;img src=\"img/walrus.jpg\"\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e    \u0026lt;script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e    \u0026lt;script src=\"js/scripts.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt;\u003c/pre\u003e\r\n\u003cp\u003eMake sure that you have downloaded and correctly linked Bootstrap and jQuery. You will need these for pretty much every project.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eObviously, this doesn't work yet. The first thing we should do is to hide the walrus with a bit of CSS. As usual, we'll make a file called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estyles.css\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecss\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder. Then, we'll add a CSS rule to hide the image:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003eimg {\u003cbr\u003e  display: none;\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cp\u003eNow, we can use jQuery to show the walrus when you click the paragraph above it:\u003c/p\u003e\r\n\u003cpre\u003e$(document).ready(function() {\u003cbr\u003e  $(\"p\").click(function() {\u003cbr\u003e    $(\"img\").show();\u003cbr\u003e  });\u003cbr\u003e});\u003c/pre\u003e\r\n\u003cp\u003eVery nice! Here, we've used another jQuery function called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.show()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat will, obviously, show a hidden element.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eBut wouldn't it be nicer if the text of the paragraph changed, so after you clicked it, it said \"What a cute walrus! Click here to hide her again.\" Let's do that now. First, we need to make a couple changes to our HTML:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\u003c/code\u003e\u003ccode class=\"html hljs xml\"\u003e...\u003cbr\u003e\u003c/code\u003e\u0026lt;body\u0026gt;\u003cbr\u003e\u0026lt;div class=\"container\"\u0026gt;\u003cbr\u003e\u0026lt;h1\u0026gt;peek-a-boo\u0026lt;/h1\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;div class=\"walrus-hidden\"\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;Let's play peek-a-boo. Click here to see the surprise!\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;div class=\"walrus-showing\"\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;What a cute walrus! Click here to hide her again.\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;img src=\"img/walrus.jpg\"\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\u003cbr\u003e...\u003c/pre\u003e\r\n\u003cp\u003eNow we've wrapped our page in two\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003es: one for when the walrus is hidden, and one for when she's showing. Let's update our CSS to hide the walrus at first:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e.walrus-showing {\u003cbr\u003e  display: none;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e\u003c/pre\u003e\r\n\u003cp\u003eOne of the cool things about jQuery is that it uses the exact same selectors as CSS.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eNow, our code successfully changes the text that is shown above the walrus! Of course, it doesn't switch back and hide her again, so let's update our code once more to take care of that:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\".walrus-showing\"\u003c/span\u003e).toggle();\r\n    $(\u003cspan class=\"hljs-string\"\u003e\".walrus-hidden\"\u003c/span\u003e).toggle();\r\n  });\r\n});\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNice. Now everything works as planned.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThere's something I don't like about this page, though. Most users expect that when an element is clickable, it's a different color, and that when they hover their mouse over it, the cursor will change to a hand and the text will be underlined. Fortunately, this is easy to implement with CSS:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\u003c/code\u003ep {\u003cbr\u003ecursor: pointer;\u003cbr\u003ecolor: #0088cc;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ep:hover {\u003cbr\u003etext-decoration: underline;\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cp\u003eNow, this works, and it looks much better. But I'm still not satisfied. Here's why. Let's add another paragraph to this page:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e is an ancient game riddled in mystery and deceit. Though it appears to be an innocent children's pastime, you may change your mind when you learn of its treacherous history.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-hidden\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's play peek-a-boo. Click here to see the surprise!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-showing\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat a cute walrus! Click here to hide her again.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOh no! Our styling has run amok and is applied to the intro paragraph, which really shouldn't be clickable. And even worse: if you click it, it toggles the walrus! We really need to limit the scope of our CSS and JavaScript. Let's add some\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags to clean this up:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e is an ancient game riddled in mystery and deceit. Though it appears to be an innocent childrens' pastime, you may change your mind when you learn of its treacherous history.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-hidden\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's play peek-a-boo. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"clickable\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick here\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e to see the surprise!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-showing\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat a cute walrus! \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"clickable\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick here\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e to hide her again.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we can update our CSS:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-class\"\u003e.walrus-showing\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-class\"\u003e.clickable\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecursor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e pointer\u003c/span\u003e\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-hexcolor\"\u003e#0088cc\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003e.clickable\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003ehover {\r\n        text-decoration: underline\u003c/span\u003e\u003c/span\u003e;\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd JavaScript:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n    $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".clickable\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".walrus-showing\"\u003c/span\u003e).toggle();\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".walrus-hidden\"\u003c/span\u003e).toggle();\r\n      });\r\n    });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAh, that's much better now. When you're writing JavaScript (and CSS), it's a good idea to use classes to be specific about the elements you want to select. But keep in mind, if you have more than one thing on the page that can change, you might want to use one class for your CSS and another class for of each of the actions. For example, if your page had one place that let you show and hide a walrus, and another place that let you show and hide an ostrich, you might have both clickable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003es styled with the clickable class, but one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoggle-walrus\u003c/code\u003e, and the other with a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoggle-ostrich\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. Speaking of being specific, it feels wrong to me to use the classes\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-hidden\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-showing\u003c/code\u003e. We're supposed to use classes to identify similar parts of our pages that should look and act the same. For our clickable span, using a class makes perfect sense: we have two places on the page where we use it, and I can imagine that our website could potentially use it in many, many more places. But\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-hidden\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-showing\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereally couldn't be re-used anywhere else on this page - these sections should be unique. Often, this is the case with JavaScript: we want to identify a unique part of the page that should be changed when a unique event happens. For this case, we can use an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e. Check it out:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003ePeek-a-boo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e is an ancient game riddled in mystery and deceit. Though it appears to be an innocent childrens' pastime, you may change your mind when you learn of its treacherous history.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-hidden\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLet's play peek-a-boo. \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"clickable\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick here\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e to see the surprise!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"walrus-showing\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWhat a cute walrus! \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"clickable\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick here\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e to hide her again.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we change our CSS like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"css hljs\"\u003e\r\n      \u003cspan class=\"hljs-id\"\u003e#walrus-showing\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n        \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisplay\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e none\u003c/span\u003e\u003c/span\u003e;\r\n      }\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd our JavaScript like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\".clickable\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#walrus-showing\"\u003c/span\u003e).toggle();\r\n          $(\u003cspan class=\"hljs-string\"\u003e\"#walrus-hidden\"\u003c/span\u003e).toggle();\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSo, what's the difference between a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclass\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eID\u003c/code\u003e, except that we use a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto select a class and a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#\u003c/code\u003eto select an ID? Nothing, really, except that you can only use an ID once on a page, and you can use a class as many times as you want. But by using an ID, you can be clear that you're referring to one particular thing, rather than potentially referring to several. We could actually go one step further in thinking about how to make our code re-usable. Instead of calling the IDs\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-showing\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewalrus-hidden\u003c/code\u003e, we could call them\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einitially-hidden\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einitially-showing\u003c/code\u003e. That way, we could re-use this code on other pages that have the same kind of toggling functionality. Now, a quick lecture before you move on to practicing all that you've just learned. When we use JavaScript to manipulate the page, we haven't changed the source code. No matter how much we change the page with JavaScript, if you hit the Refresh button in your browser, it will go back to the initial state. What JavaScript is doing is manipulating the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDocument Object Model\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDOM\u003c/strong\u003e. The DOM is your browser's interpretation of the HTML it reads. If you inspect an element of the page, you're actually seeing the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDOM\u003c/strong\u003e, not the HTML. Try inspecting the page we've been working on, and then click the click here part that changes the page. You can see in the inspector that the DOM changes. Now, try these concepts out on your own pages. Add JavaScript to hide and show various elements. Use id's and classes to keep things neat and tidy. Additionally, here are a few other jQuery methods to try out:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ccode\u003efadeIn()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003efadeOut()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003efadeToggle()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eslideDown()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eslideUp()\u003c/code\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eslideToggle()\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePlay around with them to get practice using these simple jQuery effects!\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-practice-block-elements","title":"Tuesday: Practice: Block Elements","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice creating web pages, and start using block elements. Continue to track your process in Git, and pay special attention to indentation and spacing.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm up\u003c/h2\u003e\r\n\u003cp\u003eDiscuss the following questions with your partner:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhy is indentation and spacing important?\u003c/li\u003e\r\n\u003cli\u003eWhat is an opening tag? What is a closing tag?\u003c/li\u003e\r\n\u003cli\u003eWhat does it mean when an element is nested within another? Can you give an example of when we would use nested elements?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFirst, follow along with the lesson and add the block elements to the page. Then, open up the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-favorite-things.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand add some block elements. Some to consider:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtaining the page title\u003c/li\u003e\r\n\u003cli\u003eAdd an unordered list (\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e) of your best friends\u003c/li\u003e\r\n\u003cli\u003eAdd an ordered list (\u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e) ranking your favorite foods\u003c/li\u003e\r\n\u003cli\u003eAdd a paragraph (\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e) about some of your favorite things\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003ePet Website\u003c/h3\u003e\r\n\u003cp\u003eNow it's your turn to start creating!\u003c/p\u003e\r\n\u003cp\u003eMake a homepage for your pet or a blog for a fictional animal. Get creative here! Maybe include information about their favorite toys and their favorite activities.\u003c/p\u003e\r\n\u003cp\u003eDon't forget to make a new project folder, commit regularly, and push to a remote repository on GitHub. Continue to pay close attention to indentation and closing all tags you open.\u003c/p\u003e\r\n\u003cp\u003eOf course, you're more than welcome to make web pages about anything you want - these are just suggestions.\u003c/p\u003e\r\n\u003cp\u003eHave a TM check the indentation and spacing of this project before you move on.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-practice-box-model","title":"Thursday: Practice: Box Model","type":"WikiPage","content":"\u003cp\u003eGoal: Implement the box model in our code to organize and layout the page content.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between margin and padding?\u003c/li\u003e\r\n\u003cli\u003eWhat are some benefits to using the box model?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson on the box model and understand how its various properties affect the layout of elements on the page. After you have gone through the lesson, here are some exercises for you to practice using margins, borders, and padding. Choose one project to start - you are not expected to complete all of the exercises, but to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eunderstand\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe box model.\u003c/p\u003e\r\n\u003ch3\u003eBand Website\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor the sidebar to your band's webpage, add a border and a bit of padding and margin. Give the sidebar a background color, if you haven't already.\u003c/li\u003e\r\n\u003cli\u003eAdd some padding around the images on your band's webpage.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eResume\u003c/h3\u003e\r\n\u003cp\u003eUse the box model to further format sections of your resume. For example, give each section a border to separate different sections from each other.\u003c/p\u003e\r\n\u003ch3\u003ePhotography Portfolio\u003c/h3\u003e\r\n\u003cp\u003eUse the box model to lay out the presentation of your photography portfolio from the Floats exercise. Give each photo a border, and give each column a different background color.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-introducing-bower","title":"Tuesday: Introducing Bower","type":"WikiPage","content":"\u003ch1\u003eIntroducing Bower\u003c/h1\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eToday we're going to learn about a new development tool called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eBower\u003c/strong\u003e. It is a package manager like npm, but it is optimized for frontend packages like Bootstrap and jQuery.\u003c/p\u003e\r\n\u003cp\u003eWhy do we need a separate frontend package manager? Isn't npm enough? There is debate in the community about this, but the main benefits of using a different package manager for the front-end are:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eSeparation of Power\u003c/strong\u003e: Front-end developers have one file for their dependencies, and the back-end team has a different file for theirs. This can prevent version conflicts and disorganization.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eOptimization\u003c/strong\u003e: Some packages depend on specific versions of other packages. Sometimes two packages require different versions of the same dependency. npm installs each package's dependencies separately. If each of our backend modules has its own version of a package, they are independent and there is no conflict. Each package can have its own\u003cspan\u003e \u003c/span\u003e\u003cem\u003enode_modules\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder, and this is convenient but it can lead to complex paths and lots of files. Bower makes sure that each package is installed only once, even if it is used by multiple packages. This makes sense since we can't use jQuery-1.12.0 at the same time as jQuery-2.2.0 in the browser.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eLanguage Independence\u003c/strong\u003e: Bower does not have to be used with Node. For example, Bower can also be used as a package manager in Ruby on Rails or AngularJS.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eInstalling Bower\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eLet's get started. Bower is itself a Node module so we can install it easily with npm. It is recommended that we install it globally.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e$ \u003cspan class=\"hljs-built_in\"\u003enpm\u003c/span\u003e install bower -g\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eOn your machine you must have Admin permissions to run this. On Mac, you may have to use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"shell\"\u003esudo npm install bower -g\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand on Windows you may have to run it using your Admin account.\u003c/p\u003e\r\n\u003ch2\u003eInitializing Bower\u003c/h2\u003e\r\n\u003cp\u003eWe can begin using Bower the same way that we begin a project with npm. Bower also uses a manifest file in the top level of the project directory, but this time it must be named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebower.json\u003c/em\u003e. We can create it using the following command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ebower init\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe terminal will prompt us for some information about the project. Feel free to add a name and description for the project, but we can just press Enter to just use all the default values.\u003c/p\u003e\r\n\u003cp\u003eNow, we should have a\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebower.json\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile that looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"json hljs\"\u003e{\r\n    \"\u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"pingpong\"\u003c/span\u003e\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003edescription\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003emain\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"index.js\"\u003c/span\u003e\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003elicense\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"ISC\"\u003c/span\u003e\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003emoduleType\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e[]\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003ehomepage\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003eignore\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e[\r\n    \u003cspan class=\"hljs-string\"\u003e\"*/.\"\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"node_modules\"\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"bower_components\"\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"test\"\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"tests\"\u003c/span\u003e\r\n  ]\r\n\u003c/span\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eInstalling Front-End Dependencies via Bower\u003c/h2\u003e\r\n\u003ch3\u003ejQuery\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eNext, let's install jQuery and use that for our pingpong app instead of relying on the Google CDN in our script tag. We can install jQuery with this simple command. It has the same structure as an npm install command, but we are using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e--save\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eflag instead of our usual\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e--save-dev\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eflag because we do want to use jQuery in the final production build.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ bower \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e jquery \u003cspan class=\"hljs-comment\"\u003e--save\u003c/span\u003e\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe syntax similarities don't stop there. When we clone a project that uses npm to manage its dependencies, we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enpm install\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto put the packages on our local machine. We do the same thing to get our Bower dependencies:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ebower install\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we can see that Bower has created a directory to hold our dependencies called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebower_components\u003c/em\u003e. We should add this folder to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile, just as we did with our\u003cspan\u003e \u003c/span\u003e\u003cem\u003enode_modules\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder holding npm dependencies. We can load jQuery into our pingpong app from this folder by simply changing the path in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag. Instead of this:\u003c/p\u003e\r\n\u003cdiv\u003eindex.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe want this:\u003c/p\u003e\r\n\u003cdiv\u003eindex.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bower_components/jquery/dist/jquery.min.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we reload our html page in the browser, it should still work.\u003c/p\u003e\r\n\u003ch3\u003eBootstrap\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eNext, let's add Bootstrap the same way:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003ebower \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e bootstrap \u003cspan class=\"hljs-comment\"\u003e--save\u003c/span\u003e\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen we can then add it to our app the same way we would load it if we had downloaded it manually, except that again we'll find the files we need in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebower_components\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory. Also, we need to make sure we're loading jQuery before the Bootstrap JavaScript, since jQuery is a dependency of Bootstrap.\u003c/p\u003e\r\n\u003cdiv\u003eindex.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bower_components/bootstrap/dist/css/bootstrap.min.css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bower_components/bootstrap/dist/js/bootstrap.min.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's test it out by adding some Bootstrap classes to our pingpong app. Here is what the final\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eshould look like.\u003c/p\u003e\r\n\u003cdiv\u003eindex.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bower_components/jquery/dist/jquery.min.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bower_components/bootstrap/dist/css/bootstrap.min.css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bower_components/bootstrap/dist/js/bootstrap.min.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"build/js/app.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003ePing Pong\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003ePing Pong!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"ping-pong-form\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goal\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEnter a number:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goal\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"number\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn-success\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSubmit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"signup\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"email\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEnter your email:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"email\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn-success\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSubmit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"solution\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can search for other Bower packages and compare them on the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://bower.io/search\" target=\"_blank\"\u003eBower website\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch3\u003eMoment.js\u003c/h3\u003e\r\n\u003cp\u003eLet's add another JavaScript dependency. We're going to add\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://momentjs.com/docs/\" target=\"_blank\"\u003eMoment.js\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eso that we can easily work with dates and times in various formats in our apps. First, we'll install it with Bower:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ bower \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e moment \u003cspan class=\"hljs-comment\"\u003e--save\u003c/span\u003e\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSince we will be using this in production, we want to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e--save\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enot\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e--save-dev\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eNow, we'll load its minified source into the browser with this\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag, making sure that it is loaded above our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cdiv\u003eindex.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bower_components/moment/min/moment.min.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis allows us to use Moment.js functions in our frontend JavaScript files. Let's make a new one and follow our naming convention so that it gets concatenated automatically, we'll call it\u003cspan\u003e \u003c/span\u003e\u003cem\u003etime-interface.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand put it in our development\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder. Now, we can display the current time like this:\u003c/p\u003e\r\n\u003cdiv\u003ejs/time-interface.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e'#time'\u003c/span\u003e).text(moment());\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAll we need to do is add an HTML tag with the id\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etime\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cdiv\u003eindex.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e\u0026gt;\u003c/span\u003eWell look at the time! \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"time\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh3\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we rebuild we will be able to see the current time displayed in the browser when we reload our page.\u003c/p\u003e\r\n\u003cp\u003eBut let's use gulp to streamline this rather than adding a ton of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags to our HTML file and being responsible for adding a new one every time we add another Bower dependency. We're going to use npm to install another gulp package called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebower-files\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ npm \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e bower-files \u003cspan class=\"hljs-comment\"\u003e--save-dev\u003c/span\u003e\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eUsing Bower Packages in the Gulpfile\u003c/h2\u003e\r\n\u003cp\u003eNow let's use it in our gulpfile.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e lib = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'bower-files'\u003c/span\u003e)();\r\n\r\ngulp.task(\u003cspan class=\"hljs-string\"\u003e'bowerJS'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e gulp.src(lib.ext(\u003cspan class=\"hljs-string\"\u003e'js'\u003c/span\u003e).files)\r\n    .pipe(concat(\u003cspan class=\"hljs-string\"\u003e'vendor.min.js'\u003c/span\u003e))\r\n    .pipe(uglify())\r\n    .pipe(gulp.dest(\u003cspan class=\"hljs-string\"\u003e'./build/js'\u003c/span\u003e));\r\n});\r\n\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFirst, we require the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebower-files\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage, which returns a function. We tell that function to immediately run by placing an empty set of parenthesis after the call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire('bower-files')();\u003c/code\u003e. When we run this\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebower-files\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, it returns a collection of all the files relevant to the dependencies stored in our Bower manifest file\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebower.json\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThen in our task we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp.src\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto pull in all the JavaScript files, and output one concatenated, minified file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003evendor.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat we will load in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. We are filtering out only the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efiles by using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eext\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod built into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebower-files\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eext\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"extension\", and we pass it in the extension we want ('js') as an argument. Finally, we use the same\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp.dest\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to put the finished file into our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild/js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory. Let's just remove our extra script tags from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e. Now our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esection should look like this:\u003c/p\u003e\r\n\u003cdiv\u003eindex.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"build/js/vendor.min.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"build/js/app.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003ePing Pong\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAll we need to do is run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp bowerJS\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevery time we add a new JavaScript front-end dependency. Let's add our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003etmp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolders to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile at this point too. Since we will be rebuilding these as we develop, there is no need to keep them in our repository.\u003c/p\u003e\r\n\u003cp\u003eNext, we will add a similar task to load all of our CSS dependencies, such as\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.min.css\u003c/em\u003e, into a single file too. We'll call it\u003cspan\u003e \u003c/span\u003e\u003cem\u003evendor.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand we'll include it in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile too. We will put it into the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild\u003c/em\u003efolder in a new folder we'll create called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e.\u003c/p\u003e\r\n\u003cdiv\u003eindex.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"build/css/vendor.css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"build/js/vendor.min.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"build/js/app.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow here is what the task looks like:\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e...\r\ngulp.task(\u003cspan class=\"hljs-string\"\u003e'bowerCSS'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e (\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e gulp.src(lib.ext(\u003cspan class=\"hljs-string\"\u003e'css'\u003c/span\u003e).files)\r\n    .pipe(concat(\u003cspan class=\"hljs-string\"\u003e'vendor.css'\u003c/span\u003e))\r\n    .pipe(gulp.dest(\u003cspan class=\"hljs-string\"\u003e'./build/css'\u003c/span\u003e));\r\n});\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIt is structured the same way, except we are only taking files that end in\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elib\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand we are placing the final file in a new folder called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einside of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/p\u003e\r\n\u003cp\u003eThere's one more thing we need to add before this will work. This is a special case with Bootstrap CSS. Essentially, we need to tell the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebower-files\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage where to find the Bootstrap files that we are interested in. We do this by passing an object into our initial call to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebower-files\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage with some initialization settings in it. Instead of this line:\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e lib = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'bower-files'\u003c/span\u003e)();\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe want this:\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e lib = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'bower-files'\u003c/span\u003e)({\r\n  \u003cspan class=\"hljs-string\"\u003e\"overrides\"\u003c/span\u003e:{\r\n    \u003cspan class=\"hljs-string\"\u003e\"bootstrap\"\u003c/span\u003e : {\r\n      \u003cspan class=\"hljs-string\"\u003e\"main\"\u003c/span\u003e: [\r\n        \u003cspan class=\"hljs-string\"\u003e\"less/bootstrap.less\"\u003c/span\u003e,\r\n        \u003cspan class=\"hljs-string\"\u003e\"dist/css/bootstrap.css\"\u003c/span\u003e,\r\n        \u003cspan class=\"hljs-string\"\u003e\"dist/js/bootstrap.js\"\u003c/span\u003e\r\n      ]\r\n    }\r\n  }\r\n});\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you're interested in more information about this, feel free to check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/twbs/bootstrap/issues/16663\" target=\"_blank\"\u003ethis issue on the bootstrap GitHub\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eFinally, let's combine both these 2 Bower tasks into one, since they can run in parallel. Let's add this task to the gulpfile after our two Bower tasks:\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003egulp.task(\u003cspan class=\"hljs-string\"\u003e'bower'\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e'bowerJS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'bowerCSS'\u003c/span\u003e]);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe have created a task we can now run with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp bower\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eany time we add a bower dependency.\u003c/p\u003e\r\n\u003cp\u003eThis task has no callback function, but it has 2 dependency tasks:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebowerJS\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebowerCSS\u003c/code\u003e. Incidentally, it is important to note that the order of the tasks in the dependency array is ignored by gulp. So we can't use this method if we need one task to be completed before the next one in the array begins. Our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebower\u003c/code\u003etask above will run both the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebowerJS\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebowerCSS\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etasks concurrently. This is nice because it is faster than running them one after the other! But if we need to run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etask1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebefore\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etask2\u003c/code\u003e, then we must specify\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etask1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas a dependency of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etask2\u003c/code\u003e, not just list them in order as part of a third master task.\u003c/p\u003e\r\n\u003cp\u003eLet's make sure that this\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebower\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask runs automatically when we build. Since we will always want to include our vendor files whether or not we are making a production build, we will just call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebower\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp.start\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eat the end of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebuild\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e...\r\ngulp.task(\u003cspan class=\"hljs-string\"\u003e'build'\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e'clean'\u003c/span\u003e], \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (buildProduction) {\r\n    gulp.start(\u003cspan class=\"hljs-string\"\u003e'minifyScripts'\u003c/span\u003e);\r\n  } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n    gulp.start(\u003cspan class=\"hljs-string\"\u003e'jsBrowserify'\u003c/span\u003e);\r\n  }\r\n  gulp.start(\u003cspan class=\"hljs-string\"\u003e'bower'\u003c/span\u003e);\r\n});\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis means it will be run in parallel to our other tasks, but since our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebower\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask only deals with 3rd party packages installed with Bower, we can safely leave these tasks independent of our other development tasks.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-dissecting-a-gulp-file","title":"Thursday: Dissecting a Gulp File","type":"WikiPage","content":"\u003ch1\u003eDissecting a Gulpfile\u003c/h1\u003e\r\n\u003cp\u003eBy now, you should all be somewhat familiar with what a gulpfile does, how it is structured internally, and how it can make our lives easier. That said, gulpfiles can get very long and complex. Have another read through this annotated gulpfile if you feel like you have any lingering questions before Friday.\u003c/p\u003e\r\n\u003cp\u003eTask runners such as Gulp and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://gruntjs.com/\" target=\"_blank\"\u003eGrunt\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e(very similar) are used frequently, especially in web and frontend development, as these kinds of projects tend to rely on completing a stack of various tasks which, in turn, rely on different dependencies. Get used to harnessing their power as you learn to become a quick and efficient developer. Task runners can be configured very flexibly - check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://gulpjs.com/plugins/\" target=\"_blank\"\u003eGulp.js plugin registry\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eif you are interested in seeing what kinds of tasks you can easily automate.\u003c/p\u003e\r\n\u003cdiv\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/gulpfile_annotated_complete.png\" alt=\"gulpfile_annotated_complete\"\u003e\u003c/div\u003e","frontPage":false},{"exportId":"thursday-bank-account","title":"Thursday: Bank Account","type":"WikiPage","content":"\u003ch2\u003ePractice and Code\u003c/h2\u003e\r\n\u003ch3\u003eBank Account\u003c/h3\u003e\r\n\u003cp\u003eUse constructor functions and prototypes to create a webpage where a user can create a single bank account with an initial deposit amount. Then allow the user to make withdrawals, deposits and see the balance of the account. Remember to create a BankAccount constructor and a prototype that includes methods for deposit and withdrawal and any other properties needed. Here is an example wireframe to help you visualize the app:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%204%20Thursday/bank%20account.png\" alt=\"bank account.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYour project is not required to look like this; this is only an example.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-practice-css","title":"Wednesday: Practice: CSS","type":"WikiPage","content":"\u003ch1\u003ePractice: CSS\u003c/h1\u003e\r\n\u003cp\u003eGoal: Start getting familiar with CSS basics. Be able to use CSS styling on HTML elements.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow does HTML know about CSS we have added in a separate stylesheet?\u003c/li\u003e\r\n\u003cli\u003eHow do we add a style to an HTML element?\u003c/li\u003e\r\n\u003cli\u003eName four CSS rules.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eWork through the lesson to add CSS styling to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eThen, add a reference to\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cem\u003efavorite-things.html\u003c/em\u003e. Refresh the page and notice that the styles from\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eare applied to the page.\u003c/p\u003e\r\n\u003cp\u003eAdd more custom styles to the page. Use the following styles:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolor\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebackground-color\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efont-size\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efont-style\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efont-family\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eline-height\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eAdd a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag somewhere on the page. Then, customize those tags with your own CSS so that using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e makes text italic and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emakes text bold.\u003c/p\u003e\r\n\u003cp\u003eMake a new stylesheet with different styles and add it to both pages. Give it a different name than\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand make sure you can add it to your page correctly.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-introduction-to-es6-const-keyword","title":"Tuesday: Introduction to ES6 -Const Keyword","type":"WikiPage","content":"\u003ch2\u003e\u003cspan\u003eConst Keyword\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eThe \u003c/span\u003e\u003cstrong\u003e\u003ci\u003econst\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e keyword declares a variable as a constant over time.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ca class=\"external\" href=\"https://gist.github.com/mbuthiya/2d9259344b85864c7aa6b71528f04284#file-init-js)\" target=\"_blank\"\u003e\u003cspan\u003e\u003cspan class=\"screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003econst name // Syntax Error\r\nconst name = 'James'\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eTo define a \u003c/span\u003e\u003cstrong\u003e\u003ci\u003econst\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evariable we have to initialize it with a value. If we don't assign it a value we get a syntax error. Like the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003elet\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e keyword, the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003econst\u003cspan\u003e \u003c/span\u003e\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003ekeyword also creates block-level scoping for the variables.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ci\u003eConst\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e variables are \u003c/span\u003e\u003cstrong\u003eimmutable,\u003cspan\u003e \u003c/span\u003e\u003c/strong\u003e\u003cspan\u003ethe variable does not change over time. This only means that the const variable has to point to the same thing. But that value it points to can change over time.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ca class=\"external\" href=\"https://gist.github.com/mbuthiya/45915971c7514d5ef66263a38db68abf#file-const-change-js)\" target=\"_blank\"\u003e\u003cspan\u003e\u003cspan class=\"screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003econst person = {};\r\nperson.name ='James';\r\nconsole.log(person); // { name: 'James' }\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eHere we see even when we define a variable as a \u003c/span\u003e\u003cstrong\u003e\u003ci\u003econst\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e we can still change the value. To make a const object truly unchangeable is use the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003eObject.freeze( )\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003efunction.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ca class=\"external\" href=\"https://gist.github.com/mbuthiya/a11d0fa89e4a79bf3afb254f0329dc54#file-object-freeze-js)\" target=\"_blank\"\u003e\u003cspan\u003e\u003cspan class=\"screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003econst person = Object.freeze({});\r\nperson.name ='James';\r\nconsole.log(person); // {}\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eThe \u003c/span\u003e\u003cstrong\u003e\u003ci\u003eObject.freeze( )\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e function is used when we initialize the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003econst\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e object. It prevents us from changing the value of the variable later on. We use \u003c/span\u003e\u003cstrong\u003e\u003ci\u003e\"use strict\"\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003erule on top of the javascript file to make the file throw an error.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ca class=\"external\" href=\"https://gist.github.com/mbuthiya/c8c6e9527edd2ab831f0d6cc9c038fdc#file-strict-js)\" target=\"_blank\"\u003e\u003cspan\u003e\u003cspan class=\"screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\"use strict\"\r\nconst person = Object.freeze({});\r\nperson.name ='James';\r\nconsole.log(person); //TypeError: Cannot add property name, object is not extensible\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eNow when we try to change the value of the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003econst\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e object get a \u003c/span\u003e\u003cstrong\u003e\u003ci\u003eTypeError.\u003c/i\u003e\u003c/strong\u003e\u003c/p\u003e","frontPage":false},{"exportId":"thursday-roman-numerals-and-cryptosquare","title":"Thursday: Roman Numerals and Cryptosquare","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: If you have finished all of the exercises for the week, try these out for another challenge. Focus for these exercises (and all exercises going forward) on breaking your project down into small behavior examples and coding\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eone behavior at a time\u003c/strong\u003e. Make behavior grids before writing any code.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eExplain what behavior-driven development is. Why is it so beneficial?\u003c/li\u003e\r\n\u003cli\u003eReview the specifications each partner wrote in the \u003ca href=\"pages/thursday-practice-leap-year-pig-latin\"\u003eprevious lesson\u003c/a\u003e and discuss the following:\r\n\u003cul\u003e\r\n\u003cli\u003eIs each individual behavior listed as specific as possible? Does each represent\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebehavior, or multiple behaviors?\u003c/li\u003e\r\n\u003cli\u003eIs the simplest possible behavior listed first? If so, how do you know it's the simplest? If not, which one should come first?\u003c/li\u003e\r\n\u003cli\u003eHow did you ensure you wrote the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eleast\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eamount of code possible to make each pass? What did that look like?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eRoman Numerals\u003c/h3\u003e\r\n\u003cp\u003eWrite a method to convert numbers into Roman numerals. Roman numerals are based on seven symbols:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint hljs javascript\"\u003e\u003cspan class=\"hljs-built_in\"\u003eSymbol\u003c/span\u003e  Value\r\n      I       \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\r\n      V       \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n      X       \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e\r\n      L       \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e\r\n      C       \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e\r\n      D       \u003cspan class=\"hljs-number\"\u003e500\u003c/span\u003e\r\n      M       \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e000\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe most basic rule is that you add the value of all the symbols: so II is 2, LXVI is 66, etc.\u003c/p\u003e\r\n\u003cp\u003eThe exception is that there may not be more than three of the same characters in a row. Instead, you switch to subtraction. So instead of writing IIII for 4, you write IV (for 5 minus 1); and instead of writing LXXXX for 90, you write XC.\u003c/p\u003e\r\n\u003cp\u003eYou also have to separate ones, tens, hundreds, and thousands. In other words, 99 is XCIX, not IC. You cannot count higher than 3,999 in Roman numerals.\u003c/p\u003e\r\n\u003cp\u003eDraft some specifications and input-output examples to brainstorm the behaviors that you'll want to capture in your application. Tackle them one-by-one, worrying only about the future behaviors once the current example is implemented. All specifications should be listed in the project's README.md file.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not move on to the next exercise until you've completed the previous one\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch3\u003eCryptosquare\u003c/h3\u003e\r\n\u003cp\u003eA classic method for composing secret messages is called a\u003cspan\u003e \u003c/span\u003e\u003cem\u003esquare code\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe spaces and punctuation are removed from the English text and the characters are written into a square (or rectangle) and the entire message is downcased. For example, the sentence \"don't compare yourself to others, compare yourself to the person you were yesterday\" is 69 characters long, so it is written into a rectangle with 9 rows and 8 columns.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/cryptosquare.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"cryptosquare image\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/6831\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe coded message is obtained by reading down the columns going left to right. For example, the message above is coded as:\u003c/p\u003e\r\n\u003cp\u003e\"daeer leweo rlref rerne fsyts rdtyt coooe acooo utnyy ouomr hyemr tpseo spsha eput\"\u003c/p\u003e\r\n\u003cp\u003eWrite a program that outputs the encoded version of a given block of text. Again, identify each individual behavior this application should demonstrate, and write a specification (including an input/output example) for each. Tackle writing code for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebehavior at a time, and ensure your spec \"passes\" (you receive the correct output when you provide your input example) before moving to the next specification. List all specifications in the project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eREADME.md\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003eThe size of the square (number of columns) should be decided by the length of the message. If the message is a length that creates a perfect square (e.g. 4, 9, 16, 25, 36, etc), use that number of columns. If the message doesn't fit neatly into a square, choose the number of columns that corresponds to the smallest square that is larger than the number of characters in the message.\u003c/p\u003e\r\n\u003cp\u003eOutput the encoded text in groups of five letters. For example:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003eencrypt(\u003cspan class=\"hljs-string\"\u003e\"Have a nice day. Feed the dog \u0026amp; chill out!\"\u003c/span\u003e);\r\n      # =\u0026gt; \u003cspan class=\"hljs-string\"\u003e\"hifei acedl v...\"\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eGo back and tackle any\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFurther Exploration\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eexercises from previous days this week that you have not yet completed.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs code broken down into plain English specs? Do these specs accurately represent the behaviors required of the program?\u003c/li\u003e\r\n\u003cli\u003eAre variable names descriptive, and in lower camelCase?\u003c/li\u003e\r\n\u003cli\u003eIs code indented properly throughout?\u003c/li\u003e\r\n\u003cli\u003eDoes the application work as expected?\u003c/li\u003e\r\n\u003cli\u003eIs the code clean, well-refactored, and generally easy to follow?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-practice-methods","title":"Monday: Practice - Methods","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Methods section, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow to manipulate numbers with methods\u003c/li\u003e\r\n\u003cli\u003eExponential notation\u003c/li\u003e\r\n\u003cli\u003eThe argument to the method is located within the parentheses\u003c/li\u003e\r\n\u003cli\u003eMethods, in JavaScript, are always followed by parentheses\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBegin to practice using methods by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow would you describe a method in your own words?\u003c/li\u003e\r\n\u003cli\u003eWhat is a return value? What does it represent?\u003c/li\u003e\r\n\u003cli\u003eWhat is an argument? How do you provide one to a method in JavaScript?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003ePractice using the methods you've learned about:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eConvert the following to exponential notation:\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e9238.479\u003c/li\u003e\r\n\u003cli\u003e98370923874.32\u003c/li\u003e\r\n\u003cli\u003e324.64322\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli\u003eSpecify the number of decimal places each number should have.\u003c/li\u003e\r\n\u003cli\u003eRepeat all of these using a variable set equal to any number you choose.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-methods","title":"Monday: Methods","type":"WikiPage","content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOkay, we've learned some of the basics of numbers and strings. In this lesson, we will learn how to do some things to them with JavaScript.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's start by printing something to the JavaScript console:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; console.log(\"Hello from the JavaScript console!\");\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eHello from the JavaScript console!\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003econsole.log\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is called a \u003cstrong\u003emethod\u003c/strong\u003e. A method is an action that is taken on something. In this case, it takes an action on the JavaScript console: it \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003elogs\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e whatever we put inside of the parenthesis to the console. We can log anything to the console. We just used it with a string, but we can also use it with numbers:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; console.log(34);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e34\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eExpressions:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; console.log(5*4);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e20\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eEven variables:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var greeting = \"Hello\";\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; console.log(greeting);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eHello\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe part of the method inside of the parenthesis is called an \u003cstrong\u003eargument\u003c/strong\u003e. Arguments give methods more information about what they are supposed to do. In the case of \u003ccode\u003econsole.log\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, the argument is what we want to print to the console.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBecause we can use \u003ccode\u003econsole.log\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to print anything to the screen, it comes in handy a lot. We will soon see how we can use it to troubleshoot our code.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eMethods with Numbers\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow let's round a number to the nearest whole number using \u003ccode\u003etoFixed\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 737.255342.toFixed();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"737\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen we use a \u003ccode\u003etoFixed\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e like this, we are asking JavaScript to look at the number the method is attached to and evaluate it, and then give a response. In this case, the response is \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"737\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, which is the method's \u003cstrong\u003ereturn value\u003c/strong\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can also round a number to a certain number of decimal points using \u003ccode\u003etoFixed\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 3.58494.toFixed(0);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"4\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 3.58494.toFixed(2);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"3.58\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 3.58494.toFixed(4);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"3.5849\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 3.58494.toFixed(6);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"3.584940\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis time, when we used \u003ccode\u003etoFixed\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, we gave it a number as its argument, and the method rounded our number\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e to that number of decimal points. In the case of \u003ccode\u003etoFixed\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, the argument is optional, because \u003ccode\u003etoFixed\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e has default behavior if no arguments are passed in. Even when arguments are optional, or when a method doesn't take an argument, we still need the parenthesis on the end to tell JavaScript that it is a method.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNotice that the return value for \u003ccode\u003etoFixed\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is in quotation marks, which means that the value is a string, not a number. We'll go more into detail about why strings and numbers are different in an upcoming lesson.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow let's look at a method that will change a number to exponential notation. Exponential notation is essentially a way of simplifying really large and really small numbers (\"really small\" means less than 1 here) with multiples of 10. In case you're unfamiliar with exponential notation, here's an example of how it works. The number 25 in exponential notation is 2.5 * 10, because 2.5 times 10 is 25. The number 786 in exponential notation is 7.86 * 10^2, because 10^2 is the same thing as 10 times 10 which is 100, so 7.86 * 100 = 786. Another way of writing this in exponential notation is 7.86e+2. Don't worry too much about grasping exponential notation right now if this is a new concept - the point here is that we are going to use JavaScript to find a number in exponential notation for us.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 98.4.toExponential();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"9.84e+1\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 1000000000.0.toExponential();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"1e+9\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 0.045.toExponential();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e4.5e-2\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003etoExponential\u003c/code\u003e can take arguments, too. You can provide a number to tell JavaScript how many decimal points you would like it to round the number to:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 2327948.218739.toExponential(3);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"2.328e+6\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; 899.0.toExponential(1);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"9.0e+2\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can call methods on variables, too. After all, variables simply stand in for other values. For example, let's look at another method, \u003ccode\u003etoString\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, which returns a number as a string:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var twentyFive = 25;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; twentyFive.toString();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"25\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNote that it does not actually convert the variable to a string; it simply returns a string. For example:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var sevenHundredEightyNine = 789;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; sevenHundredEightyNine.toString();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"789\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; sevenHundredEightyNine;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e789\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/pre\u003e","frontPage":false},{"exportId":"thursday-practice-responsive-design-and-media-queries","title":"Thursday: Practice: Responsive Design and Media Queries","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice implementing responsive design into your projects to make them easily readable on multiple screen sizes.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following questions with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is meant by mobile first design?\u003c/li\u003e\r\n\u003cli\u003eWhat is a breakpoint?\u003c/li\u003e\r\n\u003cli\u003eWhy do media queries need to be placed after the traditional CSS rules?\u003c/li\u003e\r\n\u003cli\u003eWhat are some of the benefits to using responsive design?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eGo back to a past project and add some media queries to the styles to make the sites responsive. Feel free to use the viewport ranges from this lesson, or see the ones listed in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://css-tricks.com/snippets/css/media-queries-for-standard-devices/\"\u003eCSS Tricks\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ereference.\u003c/p\u003e","frontPage":false},{"exportId":"weekend-inheritance-interface","title":"Weekend: Inheritance; Interface","type":"WikiPage","content":"\u003ch1\u003eInheritance\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003ch3\u003eTerminology\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eInheritance\u003c/strong\u003e: The act of a class inheriting from another (base) class. When a class inherits another class, it gains access to all its public properties and methods.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eBase class\u003c/strong\u003e: Also known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eparent class\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esuper class\u003c/strong\u003e. In terms of inheritance, the class another class is inheriting.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eChild class\u003c/strong\u003e: Also known as\u003cspan\u003e \u003c/span\u003e\u003cem\u003esub-class\u003c/em\u003e*. The class inheriting another (base) class.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eSuper\u003c/strong\u003e: A keyword used to refer to the parent class from within the child class.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eExamples\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eTo instruct a class to inherit another class, use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eextends\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eHobbyTask\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTask\u003c/span\u003e \u003c/span\u003e{\r\n  constructor(\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e description: string){\r\n    \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(description, \u003cspan class=\"hljs-string\"\u003e\"low\"\u003c/span\u003e);\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn this example,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHobbyTask\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a child class, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTask\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a base class.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eNext, let's make some other kinds of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTask\u003c/code\u003es. We'll make a set of tasks that have to do with work, we'll make some tasks that have to do with the home (chores like laundry and dishes etc), and a third kind of tasks that are for hobbies.\u003c/p\u003e\r\n\u003cp\u003eLet's say they are all related, but a tiny bit different. A work task has an exact due date, while home tasks just need to be done at some point. Hobby tasks will always be labelled \"Low\" priority. But all tasks should have a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty which starts out false, a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emarkDone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod which changes it to true, a description, and a priority, both of which should always be strings.\u003c/p\u003e\r\n\u003ch2\u003eClass Inheritance\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eThis is a good time to learn how to use\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einheritance\u003c/strong\u003e. All three kinds of tasks - home, work and hobby - are branching off of a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebase class\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e- the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTask\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. When a class inherits from another class, it gains access to all of the base class's public properties and methods.\u003c/p\u003e\r\n\u003cp\u003eSince a home task will be just the same as the base\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTask\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, let's create that first.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTask\u003c/span\u003e {\r\n  done: boolean = \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n  constructor(\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e description: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e priority: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e){}\r\n  markDone(){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.done = \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n  }\r\n}\r\n\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eHomeTask\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTask\u003c/span\u003e {}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tasks: Task[] = [];\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e HomeTask(\u003cspan class=\"hljs-string\"\u003e\"Do the dishes.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"High\"\u003c/span\u003e));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e HomeTask(\u003cspan class=\"hljs-string\"\u003e\"Buy chocolate.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Low\"\u003c/span\u003e));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e HomeTask(\u003cspan class=\"hljs-string\"\u003e\"Wash the laundry.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"High\"\u003c/span\u003e));\r\ntasks[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e].markDone(); \u003cspan class=\"hljs-comment\"\u003e// mark the first task as done.\u003c/span\u003e\r\nconsole.log(tasks);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFirst, we have added this line:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclass HomeTask extends Task {}\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eBy using the keyword\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eextends\u003c/code\u003e, we are saying that the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHomeTask\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis inheriting from the base class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTask\u003c/code\u003e. We don't need to change anything about it, so that's all we need to write in that class declaration. To try out our new class declaration, we only need to replace the name of the class we are instantiating below from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enew Task()\u003c/code\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enew HomeTask()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's add the hobby task. We'll follow the same naming scheme and use upper camel case, naming it\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHobbyTask\u003c/code\u003e. We want to change its constructor a little bit. Since these tasks are always low priority, there's no need to pass the priority parameter in the constructor. We can simply change the constructor method by re-declaring it inside of the new class declaration: It will override the base class's constructor.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eHobbyTask\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTask\u003c/span\u003e \u003c/span\u003e{\r\n  constructor(\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e description: string){\r\n    \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(description, \u003cspan class=\"hljs-string\"\u003e\"low\"\u003c/span\u003e);\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAny public methods that belong to a base class (also known as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eparent class\u003c/strong\u003e, or a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esuperclass\u003c/strong\u003e), which you want to change in a new inheriting class (also known as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003echild class\u003c/strong\u003e, or a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esubclass\u003c/strong\u003e), we can change by simply implementing them again in the new child class. In the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHobbyTask\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor, we are only taking in one parameter this time - the description. Then, the only thing we need to do in the constructor is use the keyword\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esuper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto call the parent method of the same name as the current method. This fills in the rest of the default properties defined in the base class. We pass the description into the parent\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTask\u003c/code\u003econstructor, and our default value of \"low\" for priority.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eSuper Keyword\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eBefore we begin creating\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eWorkTask\u003c/code\u003es, let's discuss the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esuper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword more. We\u003cspan\u003e \u003c/span\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003euse it when creating a constructor in a child class. Why? Because its job is to call the parent's constructor. To understand this, let's think about what a constructor does. A constructor in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany class,\u003c/em\u003e\u003cspan\u003e \u003c/span\u003echild or parent, is responsible for setting up the properties for a particular instance of a class.\u003c/p\u003e\r\n\u003cp\u003eThink of a constructor as the person who works at a coffee shop who is responsible for coming in really early in the morning, before the store opens and getting everything ready. They will have received shipments of particular pastries, which need to be put in the pastry case on the correct shelves with the correct labels. They will also have received a shipment of coffee, which must be brewed and put out for the morning rush. Finally they set up the cash register, make sure everything is clean, and unlock the doors.\u003c/p\u003e\r\n\u003cp\u003eBut say that on Fridays, they receive only donuts, instead of the usual assortment of pastry because more customers want something sweet to celebrate the end of the week. Also, donuts will go in their own special display case.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eThe rest of the routine is the same - they brew coffee, set up the register, clean and unlock the doors - but the pastry setup tasks change.\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eWhen we declare a constructor in a child class to be slightly different from the parent class constructor, such as we did by saying\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHobbyTask\u003c/code\u003es should always be constructed with a \"low\" priority, we are doing the same thing as adding the Friday donut special. Here is some pseudocode:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-comment\"\u003e// a normal weekday.\u003c/span\u003e\r\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eWeekdayAtTheCoffeeShop\u003c/span\u003e \u003c/span\u003e{\r\n  constructor(pastries, coffee) {\r\n    pastries.setup();\r\n    coffee.brew();\r\n    register.setup();\r\n    clean();\r\n    unlockDoors();\r\n  }\r\n}\r\n\u003cspan class=\"hljs-comment\"\u003e// a Friday.\u003c/span\u003e\r\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFridayAtTheCoffeeShop\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eWeekdayAtTheCoffeeShop\u003c/span\u003e \u003c/span\u003e{\r\n  constructor(pastries, coffee) {\r\n    \u003cspan class=\"hljs-comment\"\u003e// still receiving pastries and coffee, but this time, we pass in donuts as the day's pastry!\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.donuts = pastries;\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe constructor sets up the pastries a little differently on this subclass of a normal weekday. But if we wrote our FridayAtTheCoffeeShop subclass as we did above, without calling super, our constructor wouldn't brew any coffee, set up the register, clean or unlock the doors! They would just set up the donuts and then go home! That's no good. So we have to call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esuper(pastries, coffee);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto tell them to finish opening the shop after setting up donuts. And we still pass up the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epastries\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eargument when we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esuper\u003c/code\u003ebecause the order of arguments matters. We don't want the parent constructor to put the coffee into the pastry case and then run out of things to brew.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-comment\"\u003e// a Friday.\u003c/span\u003e\r\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFridayAtTheCoffeeShop\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eWeekdayAtTheCoffeeShop\u003c/span\u003e \u003c/span\u003e{\r\n  constructor(pastries, coffee) {\r\n    \u003cspan class=\"hljs-comment\"\u003e// still receiving pastries and coffee, but this time, we pass in donuts as the day's pastry!\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.donuts = pastries;\r\n    \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(pastries, coffee);\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eTo sum up, calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esuper()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein a constructor is essentially just calling the parent's version of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econstructor()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand telling it to finish its job.\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch3\u003eDeclaring Child Classes\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eLet's practice this by returning to our to-do list and declaring the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eWorkTask\u003c/code\u003e. It will also have a slightly different constructor. We'll see all three of these working in the browser in a second. First, focus on the declaration syntax, then we'll see how to create each type of task.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eWorkTask\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTask\u003c/span\u003e \u003c/span\u003e{\r\n  constructor(\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e dueDate: Date, \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e description: string, \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e priority: string){\r\n    \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(description, priority);\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eWorkTask\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor, we are adding an obligatory due date parameter with the type JavaScript\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. By using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epublic\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword, we are assigning it to a new public property named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edueDate\u003c/code\u003e. Then, all we need to do is use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esuper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword to pass the other two arguments to the parent constructor method, belonging to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTask\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eFinally, let's put it all together and make some of each kind of task.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTask\u003c/span\u003e {\r\n  done: boolean = \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n  constructor(\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e description: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e priority: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e){}\r\n  markDone(){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.done = \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n  }\r\n}\r\n\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eHomeTask\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTask\u003c/span\u003e {}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eWorkTask\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTask\u003c/span\u003e {\r\n  constructor(\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e dueDate: Date, \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e description: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e priority: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e){\r\n    super(description, priority);\r\n  }\r\n}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eHobbyTask\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTask\u003c/span\u003e {\r\n  constructor(\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e description: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e){\r\n    super(description, \u003cspan class=\"hljs-string\"\u003e\"low\"\u003c/span\u003e);\r\n  }\r\n}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tasks: Task[] = [];\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e HomeTask(\u003cspan class=\"hljs-string\"\u003e\"Do the dishes.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"High\"\u003c/span\u003e));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e HomeTask(\u003cspan class=\"hljs-string\"\u003e\"Buy chocolate.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Low\"\u003c/span\u003e));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e HomeTask(\u003cspan class=\"hljs-string\"\u003e\"Wash the laundry.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"High\"\u003c/span\u003e));\r\ntasks[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e].markDone(); \u003cspan class=\"hljs-comment\"\u003e// mark the first task as done.\u003c/span\u003e\r\n\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e HobbyTask(\u003cspan class=\"hljs-string\"\u003e\"Practice origami.\"\u003c/span\u003e));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e HobbyTask(\u003cspan class=\"hljs-string\"\u003e\"Bake a pie.\"\u003c/span\u003e));\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e today = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Date();  \u003cspan class=\"hljs-comment\"\u003e// get the current date and store it in the variable called 'today'\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tomorrow = today;   \u003cspan class=\"hljs-comment\"\u003e// set the variable tomorrow equal to the current date, but then reset it to today's date plus 1.\u003c/span\u003e\r\ntomorrow.setDate(today.getDate() + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nextDay = today;  \u003cspan class=\"hljs-comment\"\u003e// create another date object and set it to today's date plus 2.\u003c/span\u003e\r\nnextDay.setDate(today.getDate() + \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\r\n\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e WorkTask(today, \u003cspan class=\"hljs-string\"\u003e\"Update blog.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"High\"\u003c/span\u003e));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e WorkTask(tomorrow, \u003cspan class=\"hljs-string\"\u003e\"Go to meeting.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Medium\"\u003c/span\u003e));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e WorkTask(nextDay, \u003cspan class=\"hljs-string\"\u003e\"Clean ceiling.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Low\"\u003c/span\u003e));\r\n\r\nconsole.log(tasks);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe've declared our parent class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTask\u003c/code\u003e. Then we've declared its three child classes\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHomeTask\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHobbyTask\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eWorkTask\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHomeTask\u003c/code\u003es have the same structure as a basic\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTask\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHobbyTask\u003c/code\u003es are always low priority, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eWorkTask\u003c/code\u003es have a due date.\u003c/p\u003e\r\n\u003cp\u003eWhen we instantiate a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHomeTask\u003c/code\u003e, we pass in the strings for description and priority.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHobbyTask\u003c/code\u003es just take a description. Then because\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eWorkTask\u003c/code\u003es need due dates assigned to them, we create three JavaScript Date objects for today, tomorrow and the next day so that we can pass them into our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eWorkTask\u003c/code\u003es. If we compile this, run it in the browser and look in the console, we can see our array of objects with complex, but consistent structures clearly outlined for us with our new class hierarchy.\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"tuesday-practice-more-jquery-basics","title":"Tuesday: Practice - More jQuery Basics","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ePractice jQuery basics by both creating a website that hides/shows various elements, and contains definitions of common jQuery and JavaScript terms.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a function? How do we create one? How do we call one?\u003c/li\u003e\r\n\u003cli\u003eWhat does it mean when we say \"Business Logic\" when referring to JavaScript?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between JavaScript and jQuery?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eFlashcard Site\u003c/h3\u003e\r\n\u003cp\u003eMake a webpage that is a flashcard site for learning JS \u0026amp; jQuery. On your site, a user should be able to click on a term or concept to see the definition appear. When they click on the definition, the original term should appear again. Here is a list of (some) terms and concepts that you have learned so far:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eJavascript (JS)\u003c/li\u003e\r\n\u003cli\u003eOperators\u003c/li\u003e\r\n\u003cli\u003eVariables\u003c/li\u003e\r\n\u003cli\u003eVariable naming conventions\u003c/li\u003e\r\n\u003cli\u003eFunctions\u003c/li\u003e\r\n\u003cli\u003eStrings\u003c/li\u003e\r\n\u003cli\u003eMethods\u003c/li\u003e\r\n\u003cli\u003eArguments\u003c/li\u003e\r\n\u003cli\u003eParameters\u003c/li\u003e\r\n\u003cli\u003eReturn\u003c/li\u003e\r\n\u003cli\u003eChaining methods\u003c/li\u003e\r\n\u003cli\u003eStrings\u003c/li\u003e\r\n\u003cli\u003eBooleans\u003c/li\u003e\r\n\u003cli\u003eUndefined\u003c/li\u003e\r\n\u003cli\u003eNaN\u003c/li\u003e\r\n\u003cli\u003eEscape\u003c/li\u003e\r\n\u003cli\u003eAlert\u003c/li\u003e\r\n\u003cli\u003eComments\u003c/li\u003e\r\n\u003cli\u003ejQuery\u003c/li\u003e\r\n\u003cli\u003eAttributes\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eRemember to start this project in its own directory, make it a Git repository and make frequent commits as you are building your site. Use Bootstrap as well. Feel free to add to this site later to help you study and remember key ideas of JavaScript and jQuery.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-refactoring-into-multiple-files","title":"Tuesday: Refactoring into Multiple Files","type":"WikiPage","content":"\u003ch1\u003eRefactoring into Multiple Files\u003c/h1\u003e\r\n\u003cp\u003eAt this point we have successfully figured out how to communicate with the Weather API. Now that we have our basic functionality in place, let's refactor and separate our front-end and back-end logic into separate files.\u003c/p\u003e\r\n\u003ch2\u003eSeparation of Front and Back-End Logic\u003c/h2\u003e\r\n\u003cp\u003eWe want our front-end interface file to gather form values, validate and interpret them, and pass the user input to the back-end file. The back-end should communicate with the API. Remember that, technically, all our JavaScript\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewill\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe provided to the browser after we package it with Gulp, but we want our code in separate files because user interface and business logics have separate purposes.\u003c/p\u003e\r\n\u003ch2\u003eRefactoring the Weather Project\u003c/h2\u003e\r\n\u003cp\u003eLet's get started! Your Weather API project's interface file should currently look like something this:\u003c/p\u003e\r\n\u003cdiv\u003ejs/weather-interface.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e apiKey = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./../.env'\u003c/span\u003e).apiKey;\r\n\r\n$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e'#weatherLocation'\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e city = $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val();\r\n    $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $.get(\u003cspan class=\"hljs-string\"\u003e'http://api.openweathermap.org/data/2.5/weather?q='\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e'\u0026amp;appid='\u003c/span\u003e + apiKey).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresponse\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"The humidity in \"\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e\" is \"\u003c/span\u003e + response.main.humidity + \u003cspan class=\"hljs-string\"\u003e\"%\"\u003c/span\u003e);\r\n    }).fail(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eerror\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(error.responseJSON.message);\r\n    });\r\n  });\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eCreating a Weather Object\u003c/h3\u003e\r\n\u003cp\u003eWe'll first create a back-end file to hold a JavaScript prototype for a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eWeather\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. We'll name it\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eweather.js\u003c/code\u003e, and start with a blank constructor and a method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.getWeather()\u003c/code\u003e, which simply prints to the console. Then, we will attach the entire object declaration to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eexports\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. We'll fill this in with actual code once our two files are successfully linked:\u003c/p\u003e\r\n\u003cdiv\u003ejs/weather.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eWeather\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n}\r\n\r\nWeather.prototype.getWeather = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Hi! I'm a weather object.\"\u003c/span\u003e);\r\n}\r\n\r\nexports.weatherModule = Weather;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll need to require this file in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eweather-interface.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cdiv\u003ejs/weather-interface.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e Weather = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./../js/weather.js'\u003c/span\u003e).weatherModule;\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we should be ready to instantiate a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eWeather\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject and call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.getWeather()\u003c/code\u003e. Let's add this inside\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv\u003ejs/weather-interface.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e currentWeatherObject = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Weather();\r\n  currentWeatherObject.getWeather();\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we save our files and run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ gulp build\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ gulp serve\u003c/code\u003e, we should see our \"Hi! I'm a weather object.\" message in the console. Excellent! This means our two files are communicating correctly!\u003c/p\u003e\r\n\u003cp\u003eNext, let's move our API call into our new prototype function:\u003c/p\u003e\r\n\u003cdiv\u003ejs/weather.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e apiKey = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./../.env'\u003c/span\u003e).apiKey;\r\n\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eWeather\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n}\r\n\r\nWeather.prototype.getWeather = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ecity\u003c/span\u003e) \u003c/span\u003e{\r\n  $.get(\u003cspan class=\"hljs-string\"\u003e'http://api.openweathermap.org/data/2.5/weather?q='\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e'\u0026amp;appid='\u003c/span\u003e + apiKey).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresponse\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"The humidity in \"\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e\" is \"\u003c/span\u003e + response.main.humidity + \u003cspan class=\"hljs-string\"\u003e\"%\"\u003c/span\u003e);\r\n  }).fail(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eerror\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(error.responseJSON.message);\r\n  });\r\n}\r\n\r\nexports.weatherModule = Weather;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe have copied our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$.get\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erequest into our new method, and added a parameter called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecity\u003c/code\u003e. We can't request the weather unless we provide a location, so we must pass in the city name that our user chooses from our form.\u003c/p\u003e\r\n\u003cp\u003eBut we don't need to be concerned with this in our back-end file. Given a correct location, we know that this function works because we tested it in our front-end. This means that we can now safely turn our attention to the front-end file and focus on user input logic. This is the separation of business logic from interface logic that we are looking for. We are still using jQuery from our back-end file to display our results in the browser, but the back-end file handles talking to the API and interpreting its data while our front-end file handles talking to our user.\u003c/p\u003e\r\n\u003cp\u003eThe other change we have made is that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapiKey\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable is now being used in the back-end file instead of the front-end file, so we move the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement over to the new file too.\u003c/p\u003e\r\n\u003cp\u003eLet's update the front-end next:\u003c/p\u003e\r\n\u003cdiv\u003ejs/weather-interface.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e Weather = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./../js/weather.js'\u003c/span\u003e).weatherModule;\r\n\r\n$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e currentWeatherObject = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Weather();\r\n  $(\u003cspan class=\"hljs-string\"\u003e'#weatherLocation'\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e city = $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val();\r\n    $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    currentWeatherObject.getWeather(city);\r\n  });\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe have moved the call to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecurrentWeatherObject\u003c/code\u003e's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.getWeather()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod into the click handler instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand we are now passing in the user's chosen city as an argument. Much cleaner! Each file has become more manageable, and has a specific job. At this point if we test it out in the browser, everything should work.\u003c/p\u003e\r\n\u003ch2\u003eHandling Asynchronicity\u003c/h2\u003e\r\n\u003cp\u003eFinally, it may be tempting to try to return the data from your API call and then handle displaying it in the front-end. But this will not work. Let's see what it looks like so we understand why to avoid this pattern:\u003c/p\u003e\r\n\u003cdiv\u003ejs/weather.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e apiKey = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./../.env'\u003c/span\u003e).apiKey;\r\n\r\nWeather = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n}\r\n\r\nWeather.prototype.getWeather = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ecity\u003c/span\u003e) \u003c/span\u003e{\r\n  $.get(\u003cspan class=\"hljs-string\"\u003e'http://api.openweathermap.org/data/2.5/weather?q='\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e'\u0026amp;appid='\u003c/span\u003e + apiKey).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresponse\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e response.main.humidity;\r\n  }).fail(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eerror\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(error.responseJSON.message);\r\n  });\r\n}\r\n\r\nexports.weatherModule = Weather;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cdiv\u003ejs/weather-interface.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e Weather = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./../js/weather.js'\u003c/span\u003e).weatherModule;\r\n\r\n$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e currentWeatherObject = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Weather();\r\n  $(\u003cspan class=\"hljs-string\"\u003e'#weatherLocation'\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e city = $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val();\r\n    $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e humidity = currentWeatherObject.getWeather(city);\r\n    $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"The humidity in \"\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e\" is \"\u003c/span\u003e + humidity + \u003cspan class=\"hljs-string\"\u003e\"%\"\u003c/span\u003e);\r\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(humidity);\r\n  });\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLooks right doesn't it? We are returning the humidity value from our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.getWeather()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, and displaying it using the same jQuery in the front-end file. But when we load this in the browser, we can see in our console log that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehumidity\u003c/code\u003eis\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eundefined\u003c/code\u003e. What?! Let's try putting the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003ein our back-end method instead:\u003c/p\u003e\r\n\u003cdiv\u003ejs/weather.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e apiKey = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./../.env'\u003c/span\u003e).apiKey;\r\n\r\nWeather = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n}\r\n\r\nWeather.prototype.getWeather = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ecity\u003c/span\u003e) \u003c/span\u003e{\r\n  $.get(\u003cspan class=\"hljs-string\"\u003e'http://api.openweathermap.org/data/2.5/weather?q='\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e'\u0026amp;appid='\u003c/span\u003e + apiKey).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresponse\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(response.main.humidity);\r\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e response.main.humidity;\r\n  }).fail(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eerror\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(error.responseJSON.message);\r\n  });\r\n}\r\n\r\nexports.weatherModule = Weather;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run this, we can see we're receiving the correct humidity value, but it doesn't exist outside of our API call function! This is due to the asynchronous nature of these requests. Essentially, the return statement is being executed\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe value is actually returned.\u003c/p\u003e\r\n\u003ch3\u003eUsing jQuery\u003c/h3\u003e\r\n\u003cp\u003eThere are two ways around this. The easy way is what we did above: Directly display the results in the browser using jQuery from inside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.then()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback.\u003c/p\u003e\r\n\u003cdiv\u003ejs/weather.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003eWeather.prototype.getWeather = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ecity\u003c/span\u003e) \u003c/span\u003e{\r\n  $.get(\u003cspan class=\"hljs-string\"\u003e'http://api.openweathermap.org/data/2.5/weather?q='\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e'\u0026amp;appid='\u003c/span\u003e + apiKey).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresponse\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"The humidity in \"\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e\" is \"\u003c/span\u003e + response.main.humidity + \u003cspan class=\"hljs-string\"\u003e\"%\"\u003c/span\u003e);\r\n  }).fail(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eerror\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(error.responseJSON.message);\r\n  });\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs discussed above, this is bending the rules a little - you may worry we are violating the separation of backend and front-end logic by doing this. But, we are still structuring our code in such a way that each file has a different job. The interface file retrieves user input and passes it to the back-end file, and the back-end file requests information from the API.\u003c/p\u003e\r\n\u003ch3\u003eUsing Callback Functions\u003c/h3\u003e\r\n\u003cp\u003eEssentially, we would pass in a callback function to handle displaying information rather than returning a value to display elsewhere. Let's declare a function to handle displaying the humidity in our interface file:\u003c/p\u003e\r\n\u003cdiv\u003ejs/weather-interface.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e displayHumidity = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ecity, humidityData\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"The humidity in \"\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e\" is \"\u003c/span\u003e + humidityData + \u003cspan class=\"hljs-string\"\u003e\"%\"\u003c/span\u003e);\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe want to display the chosen city name and its humidity, so we pass this information into this function as arguments and add our jQuery. This function is being stored in a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edisplayHumidity\u003c/code\u003e. This may seem a little strange, since we usually store things like strings and numbers in variables, but we can store functions in them too! A variable is like a bucket - it can hold pretty much anything!\u003c/p\u003e\r\n\u003cp\u003eNext, we need to tell our back-end function to expect another argument. We will pass in the function we've just created, and then run it from inside the back-end function, passing in the information to display: The city and the humidity (which we are retrieving from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable from the API.)\u003c/p\u003e\r\n\u003cdiv\u003ejs/weather.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e apiKey = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./../.env'\u003c/span\u003e).apiKey;\r\n\r\nWeather = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n}\r\n\r\nWeather.prototype.getWeather = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ecity, displayFunction\u003c/span\u003e) \u003c/span\u003e{\r\n  $.get(\u003cspan class=\"hljs-string\"\u003e'http://api.openweathermap.org/data/2.5/weather?q='\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e'\u0026amp;appid='\u003c/span\u003e + apiKey).then(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresponse\u003c/span\u003e) \u003c/span\u003e{\r\n    displayFunction(city, response.main.humidity);\r\n  }).fail(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eerror\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(error.responseJSON.message);\r\n  });\r\n}\r\n\r\nexports.weatherModule = Weather;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFinally, we need to modify our front-end file to pass this variable in when we call the back-end function:\u003c/p\u003e\r\n\u003cdiv\u003ejs/weather-interface.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e Weather = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'./../js/weather.js'\u003c/span\u003e).weatherModule;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e displayHumidity = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ecity, humidityData\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"The humidity in \"\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e\" is \"\u003c/span\u003e + humidityData + \u003cspan class=\"hljs-string\"\u003e\"%\"\u003c/span\u003e);\r\n}\r\n\r\n$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e currentWeatherObject = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Weather();\r\n  $(\u003cspan class=\"hljs-string\"\u003e'#weatherLocation'\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e city = $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val();\r\n    $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    currentWeatherObject.getWeather(city, displayHumidity);\r\n  });\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, everything should still work. And our front-end file is handling all display logic. We could add other functions for displaying other information in this manner, too. This is also a good solution for breaking complex jQuery into more manageable pieces.\u003c/p\u003e\r\n\u003cp\u003eIt may be odd to wrap your head around, but consider it like this: If you tell your friend to visit the market, and give them a shopping list containing ingredients to bake a cake, you're telling them about an action you want them to do. When we pass a function into another function as an argument, and tell it to run, we are telling the function to follow specific instructions for us (much like the specific items on our grocery list). The variable\u003cspan\u003e \u003c/span\u003e\u003cem\u003eholding\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe provided function is like the grocery list\u003cspan\u003e \u003c/span\u003e\u003cem\u003eholding\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eour cake ingredients.\u003c/p\u003e\r\n\u003cp\u003eNow, let's refactor our projects!\u003c/p\u003e","frontPage":false},{"exportId":"monday-bootstrap-the-basics","title":"Monday: Bootstrap: The Basics","type":"WikiPage","content":"\u003cp\u003eNow that we've gone over what Bootstrap does, why we would want to use it, and how to add it to a project, let's create a new project and start using some of its features.\u003c/p\u003e\r\n\u003cp\u003eLet's create a webpage to practice using Bootstrap. Create a new project named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap-practice\u003c/em\u003e, and inside, create an HTML file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eAdd some basic starter code to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003eindex.html\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"utf-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's preview this site in our browser before adding Bootstrap. Load up\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein your browser:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-04-bootstrap_test_no_styling.png\" alt=\"MP-W1D4-04-bootstrap_test_no_styling.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs you may have anticipated, we have some headers, lists, and paragraphs, but nothing terribly exciting. Now let's add some Bootstrap! As we covered in the previous lesson on Installing Bootstrap lesson, first we need to download the Bootstrap package from the website, and move the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile into this project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/p\u003e\r\n\u003cp\u003eThen, add the link to the stylesheet in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esection of index.html:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we refresh the page, we can see that some styling has already been applied, without even needing to make any other changes:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-05-bootstrap_test_plusbootstrap.png\" alt=\"MP-W1D4-05-bootstrap_test_plusbootstrap.png\" width=\"1118\" height=\"582\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eContainer\u003c/h2\u003e\r\n\u003cp\u003eLet's start adding some Bootstrap styles to our page. One of the most commonly used Bootstrap elements is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003e. As the name suggests, it provides a container for content that sets the margins and padding according to the size of the user's viewport.\u003c/p\u003e\r\n\u003cp\u003eHere is how we add a container to our page:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      ...\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe have added a div inside of the page body with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003e, and placed all of the page content inside of that div.\u003c/p\u003e\r\n\u003cp\u003eGo ahead and refresh the page, and you should see that some space has been added around the page content.\u003c/p\u003e\r\n\u003cp\u003eRemember,\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis just a really big stylesheet. Do you recall how we added classes to HTML elements to style our pages? We add Bootstrap styles to our page in a similar way. The only difference is that instead of defining the styles for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass in our own stylesheet, they have already been written for us. All we need to do is include\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein our project, and we can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003eclass in the same way.\u003c/p\u003e\r\n\u003cp\u003eSee for yourself! Open up\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand search for the word \"container\". You can open the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSearch \u003c/em\u003epanel in Atom by typing \u003cstrong\u003eCtrl + F\u003c/strong\u003e or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003cem\u003eCmd\u003c/em\u003e + \u003cem\u003eF\u003c/em\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(the \"F\" here is for \"find\"). Alternatively, in the Atom menu, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFind\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFind in Buffer\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-05-find_container.gif\" alt=\"MP-W1D4-05-find_container.gif\" width=\"651\" height=\"430\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYou should see the following code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n\u003cspan class=\"hljs-class\"\u003e.container\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding-right\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epadding-left\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e15px\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003emargin-right\u003c/span\u003e: auto\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003emargin-left\u003c/span\u003e: auto\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e768px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-class\"\u003e.container\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e750px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e992px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-class\"\u003e.container\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e970px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003emedia\u003c/span\u003e (min-width: \u003cspan class=\"hljs-number\"\u003e1200px\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-class\"\u003e.container\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n    \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ewidth\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1170px\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n  }\r\n}\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSee? There's nothing very special here! Just some predefined values for padding, margins, and width. Bootstrap is simply CSS that has already been written for us to serve a specific purpose.\u003c/p\u003e\r\n\u003cp\u003eAlso, notice that if we resize the browser window, the space around the content responds to the change in window size. As you can see in the Bootstrap code sample above, media queries are built right in! This means that when we use Bootstrap elements in our pages, they are already responsive.\u003c/p\u003e\r\n\u003ch2\u003eJumbotron\u003c/h2\u003e\r\n\u003cp\u003eAnother common Bootstrap element is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/#jumbotron\"\u003eJumbotron\u003c/a\u003e. Jumbotrons come in handy when you want to feature a portion of the page. They are often placed at the top of the page to act as the page header.\u003c/p\u003e\r\n\u003cp\u003eCan you guess how we add a Jumbotron section to our page? Much like the container, we simply add a div with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejumbotron\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass wherever we'd like it to appear on the page. Let's add one around the page header content for our page now:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"jumbotron\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    ...\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRefresh the page, and now we have a jumbotron at the top of our page.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-06-jumbotron.png\" alt=\"MP-W1D4-06-jumbotron.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eResize the browser window and notice that the Jumbotron is also responsive: the margins and font size change in response to the viewport size.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eWells\u003c/h2\u003e\r\n\u003cp\u003eAnother useful Bootstrap component for organizing your webpages is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/#wells\"\u003ewell\u003c/a\u003e. It makes the content of a div appear inset on the page. As with other Bootstrap effects, we add it to an element with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewell\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"well\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's what it looks like in our browser:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-07-well.png\" alt=\"MP-W1D4-07-well.png\"\u003e\u003c/p\u003e\r\n\u003ch2\u003ePanels\u003c/h2\u003e\r\n\u003cp\u003eAnother similar organization element is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/components/#panels\"\u003epanel\u003c/a\u003e. The panel wraps the contents of a div in a box, and also provides a section for a heading with a title and a footer.\u003c/p\u003e\r\n\u003cp\u003eFirst, we create the panel like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-default\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSimilarly to other Bootstrap elements, we added the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to the div. We also added a second class,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-default\u003c/code\u003e. By itself, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass describes the element, but does not actually have any features that appear on the screen. The second class,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-default\u003c/code\u003e, is called a helper class, which we will cover later in this lesson. It simply adds a border. You can add multiple Bootstrap classes to an element just like we did with our custom CSS classes.\u003c/p\u003e\r\n\u003cp\u003eWe can add heading and footer sections to a panel and format the body like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-default\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRefresh the page, and now the panel looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-08-panel.png\" alt=\"MP-W1D4-08-panel.png\"\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWe added a div with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-heading\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to format the area containing the heading.\u003c/li\u003e\r\n\u003cli\u003eWe added the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-title\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e, which adds a pre-styled heading. Note that the font size of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas overridden by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-title\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003c/li\u003e\r\n\u003cli\u003eWe added a div with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-body\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to format the area containing the panel's content.\u003c/li\u003e\r\n\u003cli\u003eWe added a div with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-footer\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto format an area for the panel's footer.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eGo ahead and resize the viewport and notice that all of these elements are responsive as well.\u003c/p\u003e\r\n\u003ch2\u003eHelper Classes\u003c/h2\u003e\r\n\u003cp\u003eAnother feature of Bootstrap is the wide variety of\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#helper-classes\"\u003ehelper classes\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eavailable to add to almost any element. As the name implies, these classes help us out by adding additional styles to the elements on a page.\u003c/p\u003e\r\n\u003cp\u003eLet's highlight a few list items on the page to remind us to come back to them later. We can do this by adding the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebg-danger\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to various\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags on the page, which will add a red background to the elements.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebg\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the class name stands for \"background\", and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edanger\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the name Bootstrap uses for this particular shade of red.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's what this looks like in the browser:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-09-helper_bg_danger.png\" alt=\"MP-W1D4-09-helper_bg_danger.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBootstrap comes with a number of preset color values for its elements that can come in handy:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprimary\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esuccess\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einfo\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewarning\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edanger\u003c/code\u003e. Let's add some color to the header of the same section, and use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebg-success\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to turn it green:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMany Bootstrap elements have helper classes built in. For example, we can add some color to our panel by adding the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-info\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elike this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003ePreviously, we used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-default\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, which only gave the div a border. We replaced that with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epanel-info\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, and we can see the change when we refresh the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-10-panel_info.png\" alt=\"MP-W1D4-10-panel_info.png\" width=\"673\" height=\"196\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe panel is now blue!\u003c/p\u003e\r\n\u003cp\u003eAs we've seen in this lesson, Bootstrap is a useful tool to have in our arsenal as developers. We were able to quickly transform the layout and style of our pages - and make them responsive - simply by adding a few extra classes. Over the next few lessons, we will learn how to work with Bootstrap on a deeper level to make it work for us!\u003c/p\u003e\r\n\u003cp\u003eAs we move forward and build more websites, start using Bootstrap to quickly create polished, professional pages.\u003c/p\u003e","frontPage":false},{"exportId":"monday-calculator-business-logic","title":"Monday: Calculator Business Logic","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal: \u003c/strong\u003eContinue to practice writing JavaScript functions by beginning the business logic for a calculator app. Eventually, we'll add user interface logic too, and familiarize ourselves with the differences between code for each, and how to keep them separated and organized.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between business and user interface logic?\u003c/li\u003e\r\n\u003cli\u003eWhat's another word for business logic? What about user interface logic?\u003c/li\u003e\r\n\u003cli\u003eHow do you provide a function multiple arguments?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eCalculator\u003c/h3\u003e\r\n\u003cp\u003eFollow along with the previous lesson to begin building a calculator app. Once you've written the code detailed in that lesson, create a project and migrate your code from JSFiddle into Atom by doing the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a \u003cem\u003ecalculator\u003c/em\u003e project folder on your computer.\u003c/li\u003e\r\n\u003cli\u003eInitialize a git repository in your newly created project folder.\u003c/li\u003e\r\n\u003cli\u003eCreate \u003cem\u003ejs\u003c/em\u003e and css folders in your project folder.\u003c/li\u003e\r\n\u003cli\u003eCreate an empty \u003cem\u003escripts.js file\u003c/em\u003e in your project's \u003cem\u003ejs\u003c/em\u003e subdirectory.\u003c/li\u003e\r\n\u003cli\u003eCopy the code from your JSFiddle into your \u003cem\u003escripts.js\u003c/em\u003e file to save it.\u003c/li\u003e\r\n\u003cli\u003eCreate an HTML file in your project directory and include in it a link to your scripts file: \u0026lt;script src=\"js/scripts.js\"\u0026gt;\u0026lt;/script\u0026gt; (see below for example HTML file)\u003c/li\u003e\r\n\u003cli\u003eAdd a \u003cem\u003eREADME.md\u003c/em\u003e file.\u003c/li\u003e\r\n\u003cli\u003eAdd everything to your local git repository and commit the changes.\u003c/li\u003e\r\n\u003cli\u003eCreate a calculator repository on GitHub and push your project to GitHub.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eExample\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHTML\u003c/em\u003e file:\u003c/p\u003e\r\n\u003cpre\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;Calculator\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Calculator\u0026lt;/h1\u0026gt;\u003cbr\u003e    \u0026lt;script src=\"js/scripts.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt;\u003c/pre\u003e\r\n\u003cp\u003eExample\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejavascript\u003c/em\u003e file:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003evar add = function(number1, number2) {\u003cbr\u003e  return number1 + number2;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003evar number1 = parseInt(prompt(\"Enter a number:\"));\u003cbr\u003evar number2 = parseInt(prompt(\"Enter another number:\"));\u003cbr\u003evar result = add(number1, number2);\u003cbr\u003ealert(result);\u003c/pre\u003e\r\n\u003cp\u003eIf you open your HTML file in the web browser, it should run your code just like it did on JSFiddle; popping up prompt boxes for input and then an alert with the calculated result. If this isn't working, check that you correctly link to your \u003cem\u003escripts.js\u003c/em\u003e file and that your scripts file includes both the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and code that actually calls that function. If something on your page isn't working right, an excellent initial troubleshooting step is to check the JavaScript Console to see if there are any helpful error messages that might point you in the right direction.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eNext, create functions to\u003cspan\u003e \u003c/span\u003e\u003cem\u003esubtract\u003c/em\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003emultiply\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003edivide\u003c/em\u003e. Verify that all four work by changing the line near the bottom of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(currently reads\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar result = add(number1, number2);\u003c/code\u003e) to call different functions. For now, you must manually change that line to choose between operations. In upcoming lessons we'll build a user interface for our calculator so that the user can choose between addition, subtraction, multiplication and division.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not build out the user interface yet. For now just focus on the business logic\u003c/strong\u003e.\u003c/p\u003e\r\n\u003ch3\u003eAdditional Custom Functions Practice\u003c/h3\u003e\r\n\u003cp\u003e(You can do these in JSFiddle)\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWrite a function that calculates body mass index (BMI) using two arguments. Then write another function that prompts the user for their height and weight, uses the BMI function and alerts the user of their BMI. \u003ca href=\"https://www.nhs.uk/common-health-questions/lifestyle/how-can-i-work-out-my-body-mass-index-bmi/\"\u003eClick here\u003c/a\u003e for information on BMI calculation.\u003c/li\u003e\r\n\u003cli\u003eWrite a function that converts temperature between Celsius and Fahrenheit. \u003ca href=\"https://www.rapidtables.com/convert/temperature/how-celsius-to-fahrenheit.html\"\u003eClick here\u003c/a\u003e for information on temperature conversion.\u003c/li\u003e\r\n\u003cli\u003eWrite functions to be used by a cooking app that converts between units. For example, a function that converts gallons to liters. Create a project for this like you did for the calculator so that you can return and build a front-end for this later.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003e\u003cem\u003eIf (and only if) you finish today's lessons and exercises with time to spare, spend the rest of your day exploring the following additional content. Do not worry about mastering regular expressions - remember that the goal for today is to practice using JavaScript.\u003c/em\u003e\u003c/p\u003e\r\n\u003ch3\u003eRegular Expressions\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eRegular Expressions\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare search strings used to locate and manipulate content that matches a particular pattern.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHere is an example of a variable set to a regular expression:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e sample_regex = \u003cspan class=\"hljs-regexp\"\u003e/moringaschool/gi\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe characters between the / slashes represent the regular expression. The characters following the regular expression,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egi\u003c/code\u003e, are modifiers. The g stands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"global\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand the \"i\" stands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecase-insensitive\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's try it out:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eGo to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://regex101.com/\" target=\"_blank\"\u003eRegular Expressions 101\u003c/a\u003e.\u003c/li\u003e\r\n\u003cli\u003eIn the Test String area, add this string: This is a big ol' long string with the word, Moringa, in it. We'll also add school, School, SCHooL and SchOOL just for searching fun.\u003c/li\u003e\r\n\u003cli\u003eIn the Regular Expression fields, add \"Moringaschool\" between the slashes / MoringaSchool /.\u003c/li\u003e\r\n\u003cli\u003eNotice that all lowercase\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMoringaSchool\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eappears in blue in the Test String area. This indicates a match with the pattern of the regular expression.\u003c/li\u003e\r\n\u003cli\u003eTry adding the i modifier. What happens?\u003c/li\u003e\r\n\u003cli\u003eTry adding the g modifier now. What happens?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTo learn all of the characters used when creating regular expressions, visit the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" target=\"_blank\"\u003eMDN documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eor just experiment on the Regex101 site paying attention the explanation area for what is happening. To use regular expressions to find and replace text that matches patterns, try using the built-in JavaScript method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.replace()\u003c/code\u003e. Here's an example from MDN that you can try in JSFiddle:\u003c/p\u003e\r\n\u003cpre\u003evar str = 'Twas the night before Xmas...';\u003cbr\u003evar newstr = str.replace(/xmas/i, 'Christmas');\u003cbr\u003ealert(newstr);\u003c/pre\u003e\r\n\u003cp\u003eTo practice how regular expressions create patterns, see how far you can get in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://regexcrossword.com/\" target=\"_blank\"\u003eRegex Crossword\u003c/a\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-fat-arrow-function","title":"Wednesday: Fat Arrow Function","type":"WikiPage","content":"\u003ch2\u003e\u003cspan\u003eFat Arrow Function\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eIn Javascript functions can be passed like all other values.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003efunction ping (){\r\n  setTimeout(function(){\r\n    console.log(\"Ping\")\r\n  },1000);\r\n}\r\nping()// waits one second then pings\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWe pass in an anonymous function as an argument to the\u003c/span\u003e\u003cstrong\u003e\u003ci\u003e\u003cspan\u003e \u003c/span\u003esetTimeout()\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e function. ES6 provides a new way to define anonymous functions. we call it the \u003c/span\u003e\u003cstrong\u003efat arrow syntax (=\u0026gt;).  \u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003efunction ping (){\r\n  setTimeout(()=\u0026gt;{console.log(\"Ping\")},1000);\r\n}\r\nping()\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eIf we have only one expression we can eliminate the curly braces altogether.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003efunction ping (){\r\n  setTimeout(()=\u0026gt;console.log(\"Ping\"),1000);\r\n}\r\nping()//ping\u003c/pre\u003e","frontPage":false},{"exportId":"thursday-practice-styling-with-classes","title":"Thursday: Practice - Styling with Classes","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice using classes to style large portions of our webpages, and applying classes to multiple HTML tags.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat's the difference between styling using classes and styling elements directly?\u003c/li\u003e\r\n\u003cli\u003eWhat does a class selector in the stylesheet look like?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson to create the page about giraffes that uses classes to style various sections of the page.\u003c/p\u003e\r\n\u003ch3\u003eTravel Agency\u003c/h3\u003e\r\n\u003cp\u003eCreate a webpage for the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHappy Trails Travel Agency\u003c/em\u003e. The page should have text, images, and links. Feature various travel destinations and get creative!\u003c/p\u003e\r\n\u003cp\u003eAdd a class named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etropical\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor tropical destinations. Give the headers the color\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#f7325e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the text the color\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#7dc410\u003c/code\u003e. Use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efantasy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efont family.\u003c/p\u003e\r\n\u003cp\u003eAdd a class named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epopular\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the most popular destination. Add some styling to distinguish it from the other destination listings. What happens when a popular destination is also a tropical destination? How can you make sure that the styles you want to see on the page are displayed?\u003c/p\u003e\r\n\u003ch3\u003eNews Article\u003c/h3\u003e\r\n\u003cp\u003eCreate a new project folder containing\u003cspan\u003e \u003c/span\u003e\u003cem\u003enews-article.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtaining a fake news article. Use lorem ipsum text with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags to give you paragraphs. Add a few images to illustrate the news, as well as headers to divide the page into sections.\u003c/p\u003e\r\n\u003cp\u003eLet the first section on the page be the introduction. Give it a subheader (\u003ccode\u003e\u0026lt;h2\u0026gt;\u003c/code\u003e), a paragraph or two, and an image. Each element in this section should have the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintroduction\u003c/code\u003e. Create styles for all of the elements in this section to set them apart from the rest of the content on the page. Use the selectors\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eh2.introduction\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep.introduction\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimg.introduction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the styles.\u003c/p\u003e\r\n\u003ch3\u003eFavorite Things: More Practice\u003c/h3\u003e\r\n\u003cp\u003eGet some more practice styling with classes by adding classes and class selectors for your CSS rules to your copy of\u003cspan\u003e \u003c/span\u003e\u003cem\u003efavorite-things.html\u003c/em\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-promises","title":"Thursday: Promises","type":"WikiPage","content":"\u003ch2\u003e\u003cspan\u003ePromises\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eSynchronous Task\u003c/strong\u003e\u003cspan\u003e - The Program has to wait for the previous task to finish before it moves on to the next part\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eAsynchronous Tasks\u003c/strong\u003e\u003cspan\u003e - The program moves to the next line of code before the task is completed.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eIn ES6 we get introduced to \u003c/span\u003e\u003cstrong\u003ePromises\u003c/strong\u003e\u003cspan\u003e. A promise is a placeholder for a future value\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eWe create promises using the \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e keyword.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003evar promise = new Promise((resolve,reject)=\u0026gt;{})\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eThe promise instance takes a function as a parameter and that function has 2 arguments. \u003c/span\u003e\u003cspan\u003eresolve\u003c/span\u003e\u003cspan\u003e and \u003c/span\u003e\u003cspan\u003ereject\u003c/span\u003e\u003cspan\u003e which are both functions.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eInside that inner function that we pass as a parameter is where we perform our asynchronous tasks. We usually return the promise from a function.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003efunction asycTask(){\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    var promise = new Promise((resolve,reject)=\u0026gt;{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        setTimeout(()=\u0026gt;{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            console.log(\"Action complete\");\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            resolve();\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        },1000);\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    });\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    return promise;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWe call the \u003c/span\u003e\u003cspan\u003eresolve\u003c/span\u003e\u003cspan\u003e function after the async task has been completed.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003efunction asycTask(){\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    var promise = new Promise((resolve,reject)=\u0026gt;{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        setTimeout(()=\u0026gt;{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            try{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e             console.log(\"Action complete\");\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e             resolve();\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            }catch(err){\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e              reject()\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            }\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        },1000);\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    });\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    return promise;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWhen we encounter an error we call the \u003c/span\u003e\u003cspan\u003ereject\u003c/span\u003e\u003cspan\u003e function.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003ePromise Notifications\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eA promise object has a then function that alerts us whether our asnc function has successfully completed or not.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003efunction asycTask(){\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    var promise = new Promise((resolve,reject)=\u0026gt;{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        setTimeout(()=\u0026gt;{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            try{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e             console.log(\"Action complete\");\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e             resolve();\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            }catch(err){\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e              reject()\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            }\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        },1000);\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    });\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    return promise;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003easycTask().then(()=\u0026gt;{console.log('Event was successful')},()=\u0026gt;{console.log('Event failed')},)\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eThe \u003c/span\u003e\u003cspan\u003ethen\u003c/span\u003e\u003cspan\u003e method takes on 2 anonymous functions as arguments. The first one is called if the Asynchronous Task was a success the second is called when the task fails.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eWe can also pass in values to the \u003c/span\u003e\u003cspan\u003eresolve\u003c/span\u003e\u003cspan\u003e and \u003c/span\u003e\u003cspan\u003ereject\u003c/span\u003e\u003cspan\u003e function and then can be used by the \u003c/span\u003e\u003cspan\u003ethen\u003c/span\u003e\u003cspan\u003e function’s arguments.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003efunction asycTask(){\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    var promise = new Promise((resolve,reject)=\u0026gt;{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        setTimeout(()=\u0026gt;{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            try{\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e             console.log(\"Action complete\");\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e             resolve(\"Success\");\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            }catch(err){\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e              reject(err)\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            }\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        },1000);\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    });\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    return promise;\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003easycTask().then((val)=\u0026gt;{console.log(val)},(err)=\u0026gt;{console.log(err)},)\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWe place the values inside the \u003c/span\u003e\u003cspan\u003eresolve\u003c/span\u003e\u003cspan\u003e and \u003c/span\u003e\u003cspan\u003ereject\u003c/span\u003e\u003cspan\u003e functions and log them when we call our \u003c/span\u003e\u003cspan\u003ethen\u003c/span\u003e\u003cspan\u003e function.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-introduction-and-interaction-with-the-command-line","title":"Tuesday: Introduction and Interaction with the Command Line","type":"WikiPage","content":"\u003cp\u003eOne of the first tools every developer needs to get familiar with is the terminal. No matter which language you use, you will be using the terminal a lot. As a person new to programming, using the terminal interface of a computer may be something you'll do for the first time in this lesson.\u003c/p\u003e\r\n\u003cp\u003eWhen you open up your computer and want to access a file or program, it's likely that you do this using a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003egraphical user interface\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eGUI\u003c/strong\u003e. This is simply the graphical, or visual, part of a computer program that the user can interact with.\u003c/p\u003e\r\n\u003cp\u003eFor example, when you want to open up your internet browser and you click on the icon in your computer's menu bar, you are using the GUI of your computer's operating system to access the program. The cursor to indicate where on the screen you are clicking and the icons that represent programs are both parts of the graphical user interface.\u003c/p\u003e\r\n\u003cp\u003eAnother example of a program with a GUI is a word processor. The GUI gives us a document to type in, a cursor to see where we're typing, letters on the screen to represent the text we've typed, menu options to format our text and save or documents, and more.\u003c/p\u003e\r\n\u003cp\u003eThe GUI gives us a visual representation of what the computer program is doing underneath the hood. However, it's not the only way to interact with a computer. We can also use our computer's terminal interface, and you often will when developing. The\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eterminal\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a text-based interface that allows users to interact with the computer by typing commands into the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecommand prompt\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou have probably navigated the folders and files on your computer using a GUI such as\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFinder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon Mac or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFiles\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon Linux. In the next lesson, we'll see how we can create, update, delete, and navigate folders and files using the terminal. We'll also learn some additional functionality not available by using a GUI.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eAccessing the Terminal\u003c/h2\u003e\r\n\u003ch3\u003eUbuntu Setup\u003c/h3\u003e\r\n\u003cp\u003eThe Terminal application on a PC with Ubuntu installed can be accessed by pressing\u003cspan\u003e \u003c/span\u003e\u003cem\u003ectrl + Alt + T\u003c/em\u003e. Alternatively, you can locate the Terminal application by searching\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTerminal\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eonce you click on the ubuntu icon on the upper left side of your screen.\u003c/p\u003e\r\n\u003ch3\u003eMac Setup\u003c/h3\u003e\r\n\u003cp\u003eThe Terminal application on a Mac is located in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUtilities\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder, which is located inside the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eApplications\u003c/em\u003efolder. Alternatively, you can locate the Terminal application by clicking on the magnifying glass icon at the upper right corner of the screen and typing\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTerminal\u003c/em\u003e.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCommand Prompt\u003c/h2\u003e\r\n\u003cp\u003eWhen you open up your computer's terminal, you should see a blank screen with a few lines of text in the corner, followed by a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$\u003c/code\u003e. This is called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eprompt\u003c/strong\u003e. It usually provides some contextual information such as who you are, your location on the computer, and other useful info. For example, the prompt on your computer might look something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~\u003c/span\u003e$\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn this example,\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eguest\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the name of the user currently logged in\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003emoringa-Lenovo-B50-80\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the nickname of the computer we're using\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e~\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eindicates that we are located in the Home directory (we'll learn more about what this means later)\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the end of the prompt\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTake note here that not all command prompts look the same. Your computer will likely have a different nickname or username, and you may be located somewhere else in the filesystem. There's no need to worry if the prompt on your computer looks different from the example above - this is totally normal.\u003c/p\u003e\r\n\u003cp\u003eAfter the prompt is a blinking grey rectangle, called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecursor\u003c/strong\u003e. This is where you will be typing commands.\u003c/p\u003e\r\n\u003cp\u003eBoth in the curriculum and in resources online, you will often see commands preceded by a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$\u003c/code\u003e. When typing the commands yourself, do not type the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- this is simply a common convention used to indicate that what follows is a command to be run.\u003c/p\u003e\r\n\u003cp\u003eNow that we have covered the basics of the terminal and command line, let's start using it. In the next lesson, we will learn some common and very useful commands, what they do, and how to use them.\u003c/p\u003e\r\n\u003ch1\u003eInteracting with the Command Line\u003c/h1\u003e\r\n\u003cp\u003eNow that we know what the command line is, how to access it, and what to use it for, let's start interacting with it. In this lesson, we will explore some of the most frequently used terminal commands. You will use these commands all the time at Moringa School, so start getting comfortable with them now.\u003c/p\u003e\r\n\u003cp\u003eTo type a command, simply open your terminal program and start typing. Anything you type will appear where the cursor is. Once you've typed the command, hit\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEnter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Linux or Windows) or\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Mac) to run it. For the remainder of this lesson,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEnter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill be used interchangeably.\u003c/p\u003e\r\n\u003ch3\u003eSee current location with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ pwd\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe first command on our journey will be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epwd\u003c/code\u003e, which prints your current location to the screen. It stands for \"print working directory\".\u003c/p\u003e\r\n\u003cp\u003eSee what happens when we use this command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003eguest@moringa-Lenovo-B50-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e:~$ \u003cspan class=\"hljs-built_in\"\u003epwd\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter we hit\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn or Enter\u003c/em\u003e, we see a series of words separated by slashes (\u003ccode\u003e/\u003c/code\u003e), also known as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efile path\u003c/strong\u003e. Each of the words is a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edirectory\u003c/strong\u003e, which is another word for a folder. So, in the example, the terminal returned:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs\"\u003e/home/nancy\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis tells us that we are located inside of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003enancy \u003c/em\u003edirectory, which is inside of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehome\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/p\u003e\r\n\u003cp\u003eThis default directory is also called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ehome directory\u003c/strong\u003e, and it is a sort of \"entry point\" for a system, and contains all of a user's files, directories, and programs. Remember when we first opened up the terminal and saw that our location was represented by a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e~\u003c/code\u003e? The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e~\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esymbol refers to the home directory.\u003c/p\u003e\r\n\u003ch3\u003eList out contents of folder with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eNow that we know which folder we are in, let's see what's inside of the folder. The next command we will learn is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003els\u003c/code\u003e, which lists all the content of a folder (\u003ccode\u003els\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"list\"). When I type it on my computer, I see a list of all files and directories in that folder.\u003c/p\u003e\r\n\u003cp\u003eThis tells us that I have each of the following folders in my\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers\u003c/em\u003e/\u003cem\u003eGuest\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\n\u003cspan class=\"hljs-constant\"\u003eDocuments\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003eDownloads\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003eMusic\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003ePictures\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003ePublic\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003eTemplates\u003c/span\u003e  \u003cspan class=\"hljs-constant\"\u003eVideos\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRemember, just like\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFinder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFile Explorer\u003c/em\u003e, the terminal interface lets us navigate and interact with our computer.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003els\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells us which files and folders are inside of a directory, just like the icons in the Graphical User Interface.\u003c/p\u003e\r\n\u003ch3\u003eChange folders with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eWhen we're using Finder and we want to move to a different folder, we find the icon for the folder where we want to go and double-click on it. In Terminal, we use the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cd folder-name\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(replacing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efolder-name\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the name of the folder to which you'd like to navigate).\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"change directory\". Be sure to always type a space after any command that has an additional argument, such as the name of a directory in this example.\u003c/p\u003e\r\n\u003cp\u003eFor instance, in order to navigate to my\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDocuments\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder, I use the command\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd \u003cspan class=\"hljs-constant\"\u003eDocuments\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter hitting\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn\u003c/em\u003e, the prompt reads\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents\u003c/span\u003e$\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice how\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDocuments\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enow precedes the \u003ccode\u003e$\u003c/code\u003e, indicating that our location has changed.\u003c/p\u003e\r\n\u003cp\u003eHere are a few more options to help you navigate your computer:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIf you type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand press the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReturn\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ekey - with no directory specified - you'll go back to your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHome \u003c/em\u003efolder. (You can also type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd ~\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto go there.)\u003c/li\u003e\r\n\u003cli\u003eIf you type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd ..\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(that's two periods), you'll go to the directory above the one you're currently in. So if you're in your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHome\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder, and type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecd ..\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eyou'll go to your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCreate folders with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mkdir\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emkdir\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"make directory\". We create a folder with a command like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mkdir name-of-directory\u003c/code\u003e, replacing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ename-of-directory\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith whatever we would like to name the folder. Make sure you are in your computer's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDesktop\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory and let's create a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir moringa-prep\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003els\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon our current folder, we can see that it contains a new folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nmoringa-prep\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eCreate new files with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etouch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand works a lot like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emkdir\u003c/code\u003e, but instead of creating a new directory, it creates a new file. The structure looks like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch new-file-name\u003c/code\u003e. For example, let's move to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep \u003c/em\u003edirectory we just made:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd moringa-prep\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd let's create a new file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-file.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003etouch my-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we list the files in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, we see that it contains\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-file.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nmy-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eCopy items with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cp\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecp\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for \"copy\", and it is used to copy files and directories. The basic structure of this command is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cp original-file new-file\u003c/code\u003e, where\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoriginal-file\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the name of the original file, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enew-file\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis what you want to name the copy. Here's how we would use it to create a copy of\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-file.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003enamed\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanother-file.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecp my-first-file.html another-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we list the contents of the directory, we can see that there are two files:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nanother-file.html    my-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe new file is an\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindependent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecopy of the original, meaning that any changes to one do not affect the other.\u003c/p\u003e\r\n\u003cp\u003eA word of caution in naming copies. If there is already a file with the name of the new file in a folder, the old file will be overwritten and its contents will be lost, so be careful to give your new documents and folders a unique name.\u003c/p\u003e\r\n\u003ch3\u003eMove and rename items with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand stands for \"move\". It can both move and rename files. To see how this works, let's list the contents of our current directory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nanother-file.html    my-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's say we want to call it\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanother-file.html\u003c/em\u003e. We use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv \u003c/code\u003ecommand to rename it like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emv another-file.html my-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLike\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ cp\u003c/code\u003e, the basic structure of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand requires two pieces of information: the name of the file we would like to rename or move; and the new name or location for the file or folder.\u003c/p\u003e\r\n\u003cp\u003eNow we can use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto see that the file has been renamed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nmy-first-file.html    my-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's see how we can use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto move a file. First, let's create a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto hold the file:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir brand-new-folder\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere is how we move\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emv my-second-file.html brand-new-folder/my-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we provided the name of the file that we want to move, which is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emy-second-file.html\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein this case. Then, separated by a space, we provided the new name and location of the file:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrand-new-folder/my-second-file.html\u003c/code\u003e. By changing the name of the file from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emy-second-file.html\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrand-new-folder/my-second-file.html\u003c/code\u003e, we are actually moving the file into the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/p\u003e\r\n\u003cp\u003eSee for yourself! List the contents of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emoringa-prep\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, and see that\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis no longer there:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nbrand-new-folder    my-first-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, navigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd brand-new-folder\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eList the contents of the folder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep/brand-new-folder\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\r\nmy-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd we can see that we have successfully used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ mv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to move\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch3\u003eDelete files with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eWe can delete files using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand. Let's see how it works. Here is how we delete\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-second-file.html\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep/brand-new-folder\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003erm my-second-file.html\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe basic structure of this command is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm file-to-delete\u003c/code\u003e, with a space between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the name of the file you'd like to delete. We can see with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ ls\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat the file has been removed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep/brand-new-folder\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003els\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow that the folder is empty, let's delete it as well. Note that we can not delete a folder from inside of it, so first, navigate up one folder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep/brand-new-folder\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd ..\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen we can delete the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebrand-new-folder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003eguest\u003cspan class=\"hljs-variable\"\u003e@moringa\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eLenovo\u003c/span\u003e-\u003cspan class=\"hljs-constant\"\u003eB50\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e\u003cspan class=\"hljs-symbol\"\u003e:~/Documents/moringa-prep\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003erm -r brand-new-folder\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that this looks a little different from removing a file: we have an extra option in there,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-r\u003c/code\u003e. As a safety measure,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edoes not delete directories by default. In order to delete directories, we need to include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-r\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eafter the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm\u003c/code\u003e, which stands for \"recursive\".\u003c/p\u003e\r\n\u003cp\u003eIf we would like to delete a folder that contains files, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-rf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eflag instead:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ rm -rf folder-name\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003eClear the terminal screen with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ clear\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eFinally, our terminal screen is getting pretty crowded with all of these commands! Sometimes it's nice to start with a blank screen. To clear the screen from previous commands, we use the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ clear\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eAfter the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ clear\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand has been issued, all that remains on the display screen is the command prompt. This does not actually clear any data, it simply gives us a blank screen to work with.\u003c/p\u003e\r\n\u003cp\u003eThere are a\u003cspan\u003e \u003c/span\u003e\u003cem\u003eton\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof commands for the terminal, but knowing the commands covered in this lesson will make you pretty effective at using the command line. Being able to use the command line is one way to make yourself a powerful and efficient developer, so get in the habit early!\u003c/p\u003e","frontPage":false},{"exportId":"monday-announcement","title":"Monday: Announcement","type":"WikiPage","content":"\u003cdiv\u003e\n\u003cstrong\u003eCongratulations\u003c/strong\u003e, you're almost done with this module! \u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003eA few updates/reminders for this week:\u003c/div\u003e\r\n\u003cdiv\u003e- All Independent Projects must be complete and reviewed by Technical Mentors before Tuesday of next week\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003eLet your TM know if you have any questions. Have a great week, keep up the great work.\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\u0026lt;3\u003c/div\u003e","frontPage":false},{"exportId":"wednesday-address-book-business-logic","title":"Wednesday: Address Book: Business Logic","type":"WikiPage","content":"\u003cp\u003eOur address book is great at keeping track of our contacts' full names; but conspicuously enough, it's missing any actual addresses! Let's add this functionality now.\u003c/p\u003e\r\n\u003cp\u003eIf you think about it, addresses have properties of their own. They have a street, a city, and a county. Because every address will have these same properties, let's create\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects. Then, we'll associate these\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects with the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject to which the address belongs. When we're done, we'll have a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject with an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty. This\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty will be an array that eventually contains multiple \u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects.\u003c/p\u003e\r\n\u003cp\u003eIn our app, we want to associate\u003cspan\u003e \u003c/span\u003e\u003cem\u003emultiple\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects to each of our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects, since a user may have a personal address, a work or business address, a mailing address, etc. that are all different.\u003c/p\u003e\r\n\u003cp\u003eBefore returning to our project, let's experiment with inserting \u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects\u003cspan\u003e \u003c/span\u003e\u003cem\u003einto\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects in the JavaScript console.\u003c/p\u003e\r\n\u003ch2\u003eBusiness Logic - Contact \u0026amp; Address Constructors\u003c/h2\u003e\r\n\u003cp\u003ePreviously we defined our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName = first;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName = last;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBut now we want each\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto contain not only a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efirstName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003elastName\u003c/code\u003e, but an array of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects too. When we first create a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e, this array will start out empty. Then, when the user provides addresses for the particular\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e, we will create a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eout of each, and push it to that\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e's\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray.\u003c/p\u003e\r\n\u003cp\u003eTo do this, let's make sure each new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject is initialized with an empty\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray. We'll add the following to the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName = first;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName = last;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.addresses = [];\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we will still create\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects the exact same way as before:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e jane = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Contact(\u003cspan class=\"hljs-string\"\u003e\"Jane\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Njeri\"\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBut now if we look at our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ejane\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, we'll see that it now includes an empty\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; jane\r\n  Contact {firstName: \u003cspan class=\"hljs-string\"\u003e\"Jane\"\u003c/span\u003e, lastName: \u003cspan class=\"hljs-string\"\u003e\"Njeri\"\u003c/span\u003e, addresses: \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou may have noticed we did\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epass in an empty array as an argument when we created our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eJane\u003c/code\u003eobject in the line\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003evar jane = new Contact(\"Jane\", \"Njeri\");\u003c/code\u003e. Since we're defining the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty as the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esame thing every single time\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe create a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e, there is no reason to require an empty array as an\u003cspan\u003e \u003c/span\u003e\u003cem\u003eargument\u003c/em\u003e. Instead, it's much more efficient to have our constructor automatically create an\u003cspan\u003e \u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eproperty and assign it to be an empty array.\u003c/p\u003e\r\n\u003cp\u003eNow we need to write an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor. At a minimum, each\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject will need to know its own street, city, and county. We can create an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor that will add each of those properties to every\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject created.\u003c/p\u003e\r\n\u003cp\u003eThis should look fairly similar to our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor. When our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor is called to create a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, we will provide it with parameters for a street, city and county. It will then set corresponding street, city and county properties on the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject it's creating as equivalent to the arguments that were passed in.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAddress\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003estreet, city, county\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.street = street;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.city = city;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.county = county;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's put this together in the JavaScript console.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll create our two\u003cspan\u003e \u003c/span\u003e\u003cem\u003econstructors\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003e    this\u003c/span\u003e.firstName = first;\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003e    this\u003c/span\u003e.lastName = last;\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003e    this\u003c/span\u003e.addresses = [];\u003cbr\u003e  }\r\n\u0026gt; \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAddress\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003estreet, city, county\u003c/span\u003e) \u003c/span\u003e{\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003e    this\u003c/span\u003e.street = street;\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003e    this\u003c/span\u003e.city = city;\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003e    this\u003c/span\u003e.county = county;\u003cbr\u003e  }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll create a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject and an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e jane = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Contact(\u003cspan class=\"hljs-string\"\u003e\"Jane\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Njeri\"\u003c/span\u003e);\r\n\u0026gt; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e home = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Address(\u003cspan class=\"hljs-string\"\u003e\"671 Ngong Road\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Nairobi\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Nairobi\"\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, let's double-check that these objects have been created correctly:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; jane\r\n  Contact {firstName: \u003cspan class=\"hljs-string\"\u003e\"Jane\"\u003c/span\u003e, lastName: \u003cspan class=\"hljs-string\"\u003e\"Njeri\"\u003c/span\u003e, addresses: \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]}\r\n\r\n\u0026gt; home\r\n  Address {street: \u003cspan class=\"hljs-string\"\u003e\"671 Ngong Road\"\u003c/span\u003e, city: \u003cspan class=\"hljs-string\"\u003e\"Nairobi\"\u003c/span\u003e, county: \u003cspan class=\"hljs-string\"\u003e\"Nairobi\"\u003c/span\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLooks good! Now, let's associate this particular\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe've just created by adding the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject to our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject's\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; jane.addresses.push(home);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFinally, we'll check that our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ejane\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject's\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray does indeed contain an object:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; jane\r\n  Contact {firstName: \u003cspan class=\"hljs-string\"\u003e\"Jane\"\u003c/span\u003e, lastName: \u003cspan class=\"hljs-string\"\u003e\"Njeri\"\u003c/span\u003e, addresses: \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can see that\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ejane\u003c/code\u003e's addresses array does now contain one element. Just to be sure it all worked, we can look and see the contents of that first array element, too:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; jane.addresses[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]\r\n  Address {street: \u003cspan class=\"hljs-string\"\u003e\"671 Ngong Road\"\u003c/span\u003e, city: \u003cspan class=\"hljs-string\"\u003e\"Nairobi\"\u003c/span\u003e, county: \u003cspan class=\"hljs-string\"\u003e\"Nairobi\"\u003c/span\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd sure enough it contains an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject with the correct information. Now, if we needed to access the individual elements of the address we could do the following:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; jane.addresses[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e].street\r\n\u003cspan class=\"hljs-string\"\u003e  \"671 Ngong Road\"\u003c/span\u003e\r\n\u0026gt; jane.addresses[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e].city\r\n\u003cspan class=\"hljs-string\"\u003e  \"Nairobi\"\u003c/span\u003e\r\n\u0026gt; jane.addresses[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e].county\r\n\u003cspan class=\"hljs-string\"\u003e  \"Nairobi\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd of course we can still access\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ejane\u003c/code\u003e's other properties the same as we've done previously:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u0026gt; jane.firstName\r\n\u003cspan class=\"hljs-string\"\u003e  \"Jane\"\u003c/span\u003e\r\n\u0026gt; jane.lastName\r\n\u003cspan class=\"hljs-string\"\u003e  \"Njeri\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow that we've seen how this works, let's incorporate it into our address book application.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll update our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor to initialize all\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects with an empty\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e array property:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eContact\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003efirst, last\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.firstName = first;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastName = last;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.addresses = [];\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll add our new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAddress\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003estreet, city, county\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.street = street;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.city = city;\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.county = county;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAwesome! In the next section, we'll update the user interface logic to support our new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efeature.\u003c/p\u003e","frontPage":false},{"exportId":"monday-practice-variables","title":"Monday: Practice - Variables","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: So far we have learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eVariables, in JavaScript, are written in lower camelcase\u003c/li\u003e\r\n\u003cli\u003eVariables are set using the var keyword\u003c/li\u003e\r\n\u003cli\u003eVariables can be used in arithmetic\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePractice creating and utilizing variables by completing the exercises listed below. Variables are a fundamental building block of programming; so begin getting comfortable with them now!\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhen is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eused? What does it mean?\u003c/li\u003e\r\n\u003cli\u003eHow can we use a variable after we've defined it?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eHere are a few exercises for you to practice using variables:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSet a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esomeName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eequal to your name. Put your name in quotation marks.\u003c/li\u003e\r\n\u003cli\u003eDisplay the value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esomeName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the console.\u003c/li\u003e\r\n\u003cli\u003eChange the value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esomeName\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eSet a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efavoriteNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eequal to your favorite number.\u003c/li\u003e\r\n\u003cli\u003eCalculate what your favorite number divided by 2 is.\u003c/li\u003e\r\n\u003cli\u003eSet another variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emichaelsFavorite\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eequal to 13.\u003c/li\u003e\r\n\u003cli\u003eChange the value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emichaelsFavorite\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto 7.\u003c/li\u003e\r\n\u003cli\u003eSubtract your favorite number from Michael's favorite.\u003c/li\u003e\r\n\u003cli\u003eChange the value of Michael's favorite number to be 26 times its current value.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"tuesday-practice-control-flows-with-logical-operators","title":"Tuesday: Practice - Control Flows with Logical Operators ","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Now that we have learned how to use control flows with \u003ccode\u003eif/else\u003c/code\u003e statements, and how to make logical decisions using \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, \u003ccode\u003e||\u003c/code\u003e, and \u003ccode\u003e!\u003c/code\u003e, let's put them together to further our understanding of both and make even more complex decisions.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003eDiscuss the following with your partner:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator and how do we use it?\u003c/li\u003e\r\n\u003cli\u003eWhat is the \u003ccode\u003e||\u003c/code\u003e and how do we use it?\u003c/li\u003e\r\n\u003cli\u003eWhat about the \u003ccode\u003e!\u003c/code\u003e operator?\u003c/li\u003e\r\n\u003cli\u003eWhat does the following statement check for? \u003ccode\u003eif (apples === 1 \u0026amp;\u0026amp; oranges === 1 || bananas === 2)\u003c/code\u003e\u003ccode\u003e\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eWhat Should I Wear Today?\u003c/h3\u003e\r\n\u003cp\u003eExtend on the weather app from the previous lessons so that the user can enter information about the day's weather (temperature, is it raining, and so on), and the app tells them what they should wear.\u003c/p\u003e\r\n\u003ch3\u003ePersonality Quiz\u003c/h3\u003e\r\n\u003cp\u003eAre you familiar with personality quizzes, where you can answer a series of questions and you learn something about your personality? \u003ca href=\"https://www.buzzfeed.com/quizzes/personality\"\u003eBuzzfeed has plenty of examples\u003c/a\u003e. Create a personality quiz that asks users some questions, and based on those answers, tells them something about their personality.\u003c/p\u003e\r\n\u003cp\u003eExample: Which pet should you get?\u003c/p\u003e\r\n\u003cp\u003eQuestion 1: \"Are you introverted or extroverted?\"\u003c/p\u003e\r\n\u003cp\u003eQuestion 2: \"Do you like the indoors or outdoors?\"\u003c/p\u003e\r\n\u003cp\u003eBased on these answers, the quiz could return \"cat\", \"dog\", \"both\", or \"neither\". \u003c/p\u003e\r\n\u003cp\u003eThis is just one example - get as creative and as complicated as you want!\u003c/p\u003e","frontPage":false},{"exportId":"resource-cheat-sheet-git-commands","title":"Resource: Cheat Sheet - Git Commands","type":"WikiPage","content":"\u003ch2\u003eDaily Git Workflow\u003c/h2\u003e\r\n\u003ch3\u003eSet Name and Email\u003c/h3\u003e\r\n\u003ch4\u003eSolo Programming\u003c/h4\u003e\r\n\u003cp\u003eUse the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit config\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to set your name and email for your local computer. This only needs to be done once.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e$ git config --\u003cspan class=\"hljs-built_in\"\u003eglobal\u003c/span\u003e user.name \u003cspan class=\"hljs-string\"\u003e\"Santa Claus\"\u003c/span\u003e\r\n$ git config --\u003cspan class=\"hljs-built_in\"\u003eglobal\u003c/span\u003e user.email santa\u003cspan class=\"hljs-property\"\u003e@northpole\u003c/span\u003e.com\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch4\u003eTracking Changes\u003c/h4\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate a new project directory with Git repository\r\n\u003cp\u003eIn the terminal type these commands:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003emkdir project-name\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003ecd project-name\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit init\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eAfter adding files or making changes, track the changes.\r\n\u003cp\u003eUse this command to add all changes:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add .\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eUse this command to add a specific file (replace\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efilename.html\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the name of the file to add):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add filename.html\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eCommit the changes.\r\n\u003cp\u003eIn terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"add a short, descriptive present-tense message here describing the changes made\"\u003c/span\u003e\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCreate repository for project on GitHub at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/new\"\u003ehttps://github.com/new\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAdd the remote to the project.\u003c/p\u003e\r\n\u003cp\u003eIn terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit remote add [remote name] [remote \u003cspan class=\"hljs-constant\"\u003eURL\u003c/span\u003e]\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e[remote name]\u003c/code\u003e: Name of the remote. When working solo, use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e[remote URL]\u003c/code\u003e: The URL of the remote on GitHub.\u003c/li\u003e\r\n\u003cli\u003eFor example, this command adds a remote named \u003cspan style=\"font-family: monospace;\"\u003e\u003cspan style=\"font-size: 13px;\"\u003eorigin \u003c/span\u003e\u003c/span\u003eto the repository at \u003cem\u003ehttps://github.com/moringaschool/hello-world\u003c/em\u003e:\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cpp\"\u003e$ git remote add origin https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git\u003c/span\u003e\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003ePush the changes to GitHub.\r\n\u003cp\u003eIn terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e [remote name] [branch name]\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e[branch name]\u003c/code\u003e: Name of the branch you're working on.\u003c/li\u003e\r\n\u003cli\u003eFor example, this command pushes to the remote named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorigin \u003c/code\u003eto the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch:\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003epush\u003c/span\u003e origin master\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eClone repository from GitHub.\r\n\u003cp\u003eIn terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e$ git \u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003e [remote URL]\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor example, this command clones the repository at\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehttps://github.com/moringaschool/hello-world\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e$ git \u003cspan class=\"hljs-keyword\"\u003eclone\u003c/span\u003e https:\u003cspan class=\"hljs-comment\"\u003e//github.com/moringaschool/hello-world.git\u003c/span\u003e\r\n      \u003c/code\u003e\u003c/pre\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch2\u003eGit Commands Overview\u003c/h2\u003e\r\n\u003cp\u003eIn this reference, examples in brackets [xxx], should be entirely replaced by what is indicated (do not leave the [ ] symbols).\u003c/p\u003e\r\n\u003ch3\u003eProject Setup\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git init\u003c/code\u003e: Initializes new local Git repository in the current directory.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eTracking Files\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git add .\u003c/code\u003e: Adds ALL files with changes to be committed.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git add [file]\u003c/code\u003e: Adds the named file to be committed.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git commit -m \"[message]\"\u003c/code\u003e: records all of the staged files permanently to the version history; message should describe the changes finishing the phrase \"This commit will…\".\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eExample:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git commit -m \"add submit functionality for the form\"\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eRemote Repositories\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git remote add [remote name] [remote URL]\u003c/code\u003e: Adds a remote with the name specified for the repository to the remote URL provided.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git remote -v\u003c/code\u003e: Shows the names and URLs for all of the remote repositories that the project's Git repository has stored.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git push [remote name] [branch name]\u003c/code\u003e: Copies the code to the remote repository from the local Git repository.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git clone [remote URL]\u003c/code\u003e: Copies the code and commit history from a remote repository to a local repository.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eReviewing Git Info\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git log\u003c/code\u003e: Lists commit history for the current branch.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git log --oneline\u003c/code\u003e: Lists a condensed format of the commit history for the current branch.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git status\u003c/code\u003e: Lists the files where changes have been made to be committed.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"wednesday-practice-foreach-and-map","title":"Wednesday: Practice - forEach and Map","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: As we have seen, looping and mapping are powerful concepts that can manipulate large amounts of data relatively quickly. Practice each by completing the exercises below using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand/or\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eRemember,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eunderstanding\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis the goal here. You're absolutely not expected to complete everything listed on this page. In fact, there is often intentionally\u003cspan\u003e \u003c/span\u003e\u003cem\u003emore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtent than can reasonably be completed in a single day. (This also allows students an opportunity to later review concepts without having to repeat exercises they've previously done). Focus on understanding the concepts, not on speed.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e. When might you use one over another?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eGroceries\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate function that allows a user to input items they need at the store, separating each item with a comma.\u003c/li\u003e\r\n\u003cli\u003eWhen the user submits their grocery list, log each item to the console on a separate line. Make sure that the commas do not display in the console log.\u003c/li\u003e\r\n\u003cli\u003eIf you'd like to take this further, print the list in alphabetical order. \u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eHint: To do this, build an array of the inputted items. Read up on the \u003ca href=\"https://www.w3schools.com/jsref/jsref_split.asp\"\u003estring split method\u003c/a\u003e. Explore the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\"\u003earrays entry\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eof the Mozilla Developer Network JavaScript documentation to research what method might be used to sort arrays.\u003c/p\u003e\r\n\u003ch3\u003eWord Play\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a function where users may enter a sentence.\u003c/li\u003e\r\n\u003cli\u003eTurn that sentence into an array using the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\"\u003esplit method\u003c/a\u003e.\u003c/li\u003e\r\n\u003cli\u003eThen, loop through this array to build a\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray out of every word in the sentence that is 3 or more characters in length.\u003c/li\u003e\r\n\u003cli\u003eFinally, reverse the order of the new array,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\" target=\"_blank\"\u003ejoin\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eit back together into a string, and print it to the console.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eBuild a Deck\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop within another\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop to build an array representing a deck of cards. A deck consists of 52 cards - 13 ranks in each of 4 suits.\u003c/li\u003e\r\n\u003cli\u003eThen, display a list of every card in the deck. (Hint: Each element of the array should read something like \"ace of spades\" or \"4 of hearts\").\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThe start of your output should look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/uow14lm92e275xg/deck.png\" alt=\"deck\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003ch4\u003eFilter, Reduce\u003c/h4\u003e\r\n\u003cp\u003eLook into the Array\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\"\u003efilter\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\"\u003ereduce\u003c/a\u003e\u003cspan\u003e \u003c/span\u003emethods. Refactor some of the projects above to make use of these methods.\u003c/p\u003e\r\n\u003ch4\u003eWord Order\u003c/h4\u003e\r\n\u003cp\u003eCreate a function that lets users input a block of text and returns a list of all the unique words and how many times they appeared.\u003c/p\u003e\r\n\u003cp\u003eFor example, if the user inputs \"hello world world\", the console should show:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ehello 1\u003c/li\u003e\r\n\u003cli\u003eworld 2\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf you finish, and feel comfortable with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloops, try to complete the above exercise but instead order the list by the number of appearances - greatest to least. For words that appear the same amount of times, order by which word appeared first.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eHint (and sneak peek at next week): Try creating and playing with an object hash and its contents in the JavaScript console:\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e\u0026gt; words = {programming: \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, fun: \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e};\r\n\u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e {programming: \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, fun: \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e}\r\n\u0026gt; \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e.keys(words);\r\n[\u003cspan class=\"hljs-string\"\u003e\"programming\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"fun\"\u003c/span\u003e]\r\n\u0026gt; words.programming\r\n\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e\r\n\u0026gt; words.fun\r\n\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e\r\n\u0026gt; words.nothing\r\n\u003cspan class=\"hljs-literal\"\u003eundefined\u003c/span\u003e\r\nwords.fun\u0026gt;words.programming\r\n\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs the JavaScript business logic separate from the user interface logic?\u003c/li\u003e\r\n\u003cli\u003eAre variable names descriptive and easy to understand?\u003c/li\u003e\r\n\u003cli\u003eIs code properly indented throughout?\u003c/li\u003e\r\n\u003cli\u003eAre loops being used correctly? What about mapping?\u003c/li\u003e\r\n\u003cli\u003eAre there any loops that could instead be replaced with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"wednesday-array-mapping","title":"Wednesday: Array Mapping","type":"WikiPage","content":"\u003cp\u003eWe just learned how to use the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to loop through every element of an array. Now let's briefly explore\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e, a frequently-used array method that allows us to loop through every element of an array and\u003cspan\u003e \u003c/span\u003e\u003cem\u003edo something\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto each element. Conveniently, the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod does not actually change the array it's called on, but it returns a new transformed array.\u003c/p\u003e\r\n\u003cp\u003eLet's say that we want to double every number in an array. We could do it with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis way:\u003c/p\u003e\r\n\u003cpre\u003evar numbers = [1,2,3,4,5];\u003cbr\u003evar doubledNumbers = [];\u003cbr\u003enumbers.forEach(function(number) {\u003cbr\u003e  doubledNumbers.push(number * 2);\u003cbr\u003e});\u003cbr\u003ealert(doubledNumbers);\u003c/pre\u003e\r\n\u003cp\u003eThis works fine, but by using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can make the intent clearer, and our code even cleaner:\u003c/p\u003e\r\n\u003cpre\u003evar numbers = [1,2,3,4,5];\u003cbr\u003e\u003cbr\u003evar doubledNumbers = numbers.map(function(number) {\u003cbr\u003ereturn number * 2;\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003ealert(doubledNumbers);\u003c/pre\u003e\r\n\u003cp\u003eHere instead of looping through an array, we're simply saying that we want to transform one array into another. Note that the original array has not been changed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs css\"\u003e\u0026gt; \u003cspan class=\"hljs-tag\"\u003edoubledNumbers\u003c/span\u003e;\r\n\u003cspan class=\"hljs-attr_selector\"\u003e[2, 4, 6, 8, 10]\u003c/span\u003e\r\n\u0026gt; \u003cspan class=\"hljs-tag\"\u003enumbers\u003c/span\u003e;\r\n\u003cspan class=\"hljs-attr_selector\"\u003e[1, 2, 3, 4, 5]\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe logic inside of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecan be as simple or as complicated as you want. Whatever you return will become the corresponding element of the new array. That is, when we say\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ereturn number * 2;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the example above, we're saying that each individual element of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray will be equivalent multiplying the corresponding element in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eold\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray by two.\u003c/p\u003e\r\n\u003cp\u003eSo, continuing with this example, the first element in the original array is 1. Since we're multiplying each element by 2 in the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003emap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, the first element in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray will be 2. The second element in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoriginal\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray is 2. So the second element in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earray will be 4, and so on.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003eFor more information, check out the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"\u003e\u003cspan\u003e\u003c/span\u003emap entry\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ein the Mozilla Developer Network's JavaScript documentation.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-divs-and-spans","title":"Thursday: Divs and Spans","type":"WikiPage","content":"\u003cp\u003eClasses are useful for applying styles to parts of a page, but sometimes you have a style that you want to apply to an entire part of your page, and adding a class to every tag can be unwieldy. It can also result in an HTML file that is difficult to read. Here's a new page I made about wildcats.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ewildcats.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eI'm going to teach you all about wildcats. First, the important stuff:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTypes of wildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eThere are many types of wildcats. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eHere are some types of wildcats:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLion\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eTiger\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJaguar\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMore important stuff\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003eYou should also know this about wildcats. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eNow, for some less important stuff about wildcats.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats communicate with over a dozen different types of sound.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats make great dance partners\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003eIt's a little-known fact that wildcats are actually great dance partners. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSee all of the classes we had to add to make certain elements\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimportant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eunimportant\u003c/code\u003e? We can simplify this using the new tag,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ewildcats.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003emedia\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"all\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eI'm going to teach you all about wildcats. First, the important stuff:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"important\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eTypes of wildcats\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThere are many types of wildcats. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere are some types of wildcats:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLion\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eTiger\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJaguar\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eOther important stuff\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere is some other really important stuff about wildcats. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eNow, for some less important stuff about wildcats.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"unimportant\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats communicate with over a dozen different types of sound.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWildcats make great dance partners\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eIt's a little-known fact that wildcats are actually great dance partners. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen we can style entire sections of the page using the selectors\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.important\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.unimportant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our CSS:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.important\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.unimportant\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag does not actually do anything on its own - it simply defines a section of a page. It acts as a container to separate the content of a page, so that when used with CSS, styles can be applied to an entire section. Remember, good code is code that is easy to change: When we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003es and want to change a class name, we only need to change one\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of all of the elements inside of it.\u003c/p\u003e\r\n\u003cp\u003eThere is a similar tag for inline elements called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ewildcats.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;Wildcats are versatile creatures that can live \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"important\"\u003c/span\u003e\u0026gt;many different climates\u0026lt;/span\u0026gt;. They can live \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"cat-climate\"\u003c/span\u003e\u0026gt;the jungle\u0026lt;/span\u0026gt;, \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"cat-climate\"\u003c/span\u003e\u0026gt;the mountains\u0026lt;/span\u0026gt;, and even \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"cat-climate\"\u003c/span\u003e\u0026gt;the desert\u0026lt;/span\u0026gt;. Look carefully, and you may find one \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0026lt;span \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"important\"\u003c/span\u003e\u0026gt;your own backyard\u0026lt;/span\u0026gt;!\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow let's add some style for our new class,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.cat-climate\u003c/code\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.important\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.unimportant\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: blue\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.cat-climate\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: yellow\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe same class can be used to apply the same styles to both spans and divs, as we did with \u003ccode\u003e.important\u003c/code\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"monday-build-and-clean-tasks","title":"Monday: Build and Clean Tasks","type":"WikiPage","content":"\u003ch1\u003eBuild and Clean Tasks\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003ch3\u003eTerminology\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eProduction\u003c/strong\u003e: The environment that is live for end users.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eDevelopment\u003c/strong\u003e: The environment where code is built.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eEnvironment variable\u003c/strong\u003e: A variable that indicates which environment - production or development, for instance - is being referenced.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003egulp-util\u003c/strong\u003e: A npm package that manages multiple utilities, including environmental variables.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eWe've been doing a great job of optimizing our app for the browser, but let's think about our development workflow now. Our\u003cspan\u003e \u003c/span\u003e\u003cem\u003egulpfile\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis growing. Each task that we add takes processing time. Are all of them necessary all the time? For example, if we were minifying a lot of files, this task might take a significant amount of time to run. This is worthwhile for optimizing a build that is going to be used by live users - we call this a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eproduction\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ebuild. But we don't need to re-minify our JavaScript over and over again as we develop.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eEnvironmental Variables\u003c/h2\u003e\r\n\u003cp\u003eWe should have one set of tasks for a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edevelopment\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ebuild (the copy of our project we work on while we're still developing it), and another set of tasks for a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eproduction\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ebuild (the copy of our project that will eventually be our 'final draft' that doesn't require tools we needed to develop it, like linters).\u003c/p\u003e\r\n\u003cp\u003eOne good way to accomplish this is with an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eenvironment variable\u003c/strong\u003e. This variable will simply indicate which environment (development or production) is being referenced.\u003c/p\u003e\r\n\u003ch3\u003eManaging Environmental Variables with gulp-util\u003c/h3\u003e\r\n\u003cp\u003eFirst, as usual, we need a new package from npm. It's called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp-util\u003c/code\u003e. Let's install it as a development dependency:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ npm \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e gulp-util \u003cspan class=\"hljs-comment\"\u003e--save-dev\u003c/span\u003e\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen let's require our new package at the top of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003egulpfile\u003c/em\u003e:\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e utilities = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'gulp-util'\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we're going to create an environment variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eproduction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand we will use it inside of a new gulp task called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebuild\u003c/code\u003e. The environment variable will tell our build task whether to create a development build or a production build. If we want to make a production version, which means we are including minification, we would use this command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egulp build --production\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe presence of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e--production\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eflag sets our environment variable to true. If we want to make a development build, we would just leave it out and would run this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egulp build\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere is the bit of code we will use to tell which kind of environment we are using.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n...\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e buildProduction = utilities.env.production;\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs an organizational suggestion, we will place this at the beginning of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003egulpfile\u003c/em\u003e, after the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire\u003c/code\u003estatements. Since we are setting up a variable in this block that we will use later, it makes sense to put it with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatements because they are also declaring variables.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eBuild Tasks\u003c/h2\u003e\r\n\u003cp\u003eLet's add our build task next! We'll put this at the end of our file, since it is using all our other tasks.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n...\r\ngulp.task(\u003cspan class=\"hljs-string\"\u003e\"build\"\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (buildProduction) {\r\n    gulp.start(\u003cspan class=\"hljs-string\"\u003e'minifyScripts'\u003c/span\u003e);\r\n  } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n    gulp.start(\u003cspan class=\"hljs-string\"\u003e'jsBrowserify'\u003c/span\u003e);\r\n  }\r\n});\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eEach of our tasks have their own dependency chains so all we have to do is specify the top level task that we want to run based on whether we are in development mode or deploying a production build.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eClean Tasks\u003c/h2\u003e\r\n\u003cp\u003eThe next thing that we're going to need is a task to clean up our environment before we make a build. We want to make sure that we are using up-to-date versions of our files every time that we build. To this end, we need a way to delete files using gulp. Surprise! There's a package for that, called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edel\u003c/code\u003e, which stands for delete. Let's install it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ npm \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e del \u003cspan class=\"hljs-comment\"\u003e--save-dev\u003c/span\u003e\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd require it at the top of our gulpfile:\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e del = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'del'\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow here is what our clean task should look like:\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\ngulp.task(\u003cspan class=\"hljs-string\"\u003e\"clean\"\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e del([\u003cspan class=\"hljs-string\"\u003e'build'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'tmp'\u003c/span\u003e]);\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe pass\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ean array of the paths to delete and it removes them. Here, we're telling it to delete the entire\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003etmp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolders. We'll put it right before the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebuild\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask and call it automatically by making it a dependency of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebuild\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask. Whether we're making a production or a development build, we will clean up first.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\ngulp.task(\u003cspan class=\"hljs-string\"\u003e\"build\"\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e'clean'\u003c/span\u003e], \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (buildProduction) {\r\n    gulp.start(\u003cspan class=\"hljs-string\"\u003e'minifyScripts'\u003c/span\u003e);\r\n  } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n    gulp.start(\u003cspan class=\"hljs-string\"\u003e'jsBrowserify'\u003c/span\u003e);\r\n  }\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, whether we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp build\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp build --production\u003c/code\u003e, we will have a fresh folder of the newest files to work with. We can keep adding to this build task as we develop and expand our\u003cspan\u003e \u003c/span\u003e\u003cem\u003egulpfile\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e- for example we could include tasks for compiling and minifying CSS.\u003c/p\u003e\r\n\u003ch3\u003egulp.start\u003c/h3\u003e\r\n\u003cp\u003eFinally, a short note on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp.start\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp.start\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction is undocumented on purpose because it will be deprecated in a future version of gulp. In fact, it is actually inherited from a different framework. However, it is\u003cspan\u003e \u003c/span\u003e\u003cem\u003every\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecommon to use it in this fashion to trigger tasks based on conditional statements. But developers are encouraged to use dependencies wherever possible (that array of other gulp tasks that run automatically) rather than\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp.start\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto trigger tasks at the correct time.\u003c/p\u003e\r\n\u003cp\u003eLet's try it out! If we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp build\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the terminal, we can see that it runs\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclean\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebuild\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econcatInterface\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsBrowserify\u003c/code\u003e, but not\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eminifyScripts\u003c/code\u003e. But if we run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp build --production\u003c/code\u003e, we can see that it runs\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eminifyScripts\u003c/code\u003e, as well as all the previous tasks.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp.start\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction is undocumented because it will be deprecated in a future version of gulp. However, it is\u003cspan\u003e \u003c/span\u003e\u003cem\u003every\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecommon to use it to trigger tasks based on conditional statements. Developers are encouraged to use dependencies (that array of other gulp tasks that run automatically) rather than\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp.start\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto trigger tasks whenever possible.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://www.npmjs.com/package/gulp-util\" target=\"_blank\"\u003egulp-util\u003c/a\u003e\u003cspan\u003e \u003c/span\u003edocumentation.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"monday-watchman-installations","title":"Monday: Watchman Installations","type":"WikiPage","content":"\u003ch2\u003e\u003cspan\u003eWatchman\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eWatchman exists to watch files and record when they change. It can also trigger actions (such as rebuilding assets) when matching files change.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003eLinux Installation\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ cd ~\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ git clone https://github.com/facebook/watchman.git\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003e\u003cspan\u003ecd\u003c/span\u003e\u003cspan\u003e watchman/\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ git checkout v4.7.0\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ sudo apt-get install -y autoconf automake build-essential python-dev\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ ./autogen.sh\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ ./configure\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ make\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ sudo make install\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ watchman --version\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\u003c/td\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e 999999 \u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\u003cspan\u003e sudo tee -a /proc/sys/fs/inotify/max_user_watches  \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e 999999 \u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\u003cspan\u003e sudo tee -a  /proc/sys/fs/inotify/max_queued_events \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e 999999 \u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\u003cspan\u003e sudo tee  -a /proc/sys/fs/inotify/max_user_instances \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e watchman  shutdown-server\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003eMac Installation\u003c/span\u003e\u003c/h3\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ brew update\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan\u003e$ brew install watchman\u003c/span\u003e\u003c/pre\u003e","frontPage":false},{"exportId":"monday-customizing-bootstrap-styles","title":"Monday: Customizing Bootstrap Styles","type":"WikiPage","content":"\u003cp\u003eNow that we've been working with Bootstrap for the past few lessons, hopefully you can see the benefits for a front-end framework in getting a website up and running quickly. However, you may have noticed that because Bootstrap applies the same styles across the board, all of your webpages look pretty similar. You probably want some way to customize Bootstrap styles to make your site more your own.\u003c/p\u003e\r\n\u003cp\u003eIt's common to start with a framework like Bootstrap and then add your own styles to customize it. You could go into bootstrap.css and add your custom styles there. But it's a huge file with a lot of CSS to dig through, and often styles come from more than one location. Additionally, if Bootstrap came out with a new version, you would have to remember all the changes you made, and add them to the new stylesheet.\u003c/p\u003e\r\n\u003cp\u003eA better option is to leave the original file as it is, and create your own stylesheet to override Bootstrap's styles.\u003c/p\u003e\r\n\u003cp\u003eLet's try it out. Here's an example of how we could override Bootstrap's default styles to make our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003etags red and italicized:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"utf-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello Bootstrap!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd our custom stylesheet:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecolor\u003c/span\u003e: red\u003c/span\u003e\u003c/span\u003e;\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e;\r\n}\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe important thing to remember when adding styles is that your custom stylesheet needs to be linked below the Bootstrap stylesheet. Remember from our discussion on cascading, how when multiple styles apply to an element, the one that's the farthest down in the CSS file takes precedence? This applies when we're linking stylesheets in the head as well.\u003c/p\u003e\r\n\u003cp\u003eThis is because stylesheets load in the order they appear on the page. So the Bootstrap stylesheet loads and instructs\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelements to look a certain way. Then the second stylesheet loads and also instructs\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelements to look a certain way. The rules from the second stylesheet override Bootstrap's rules simply because it loads last.\u003c/p\u003e\r\n\u003cp\u003eWhat do you think will happen if we reverse the order of the stylesheets? Try it out:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"utf-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello Bootstrap!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRefresh the page, and the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis black again, but the font style is still italic. Our custom styles are still loading, but Bootstrap's styles load last, so those are the styles that appear on the page. Bootstrap includes a rule for font color, but not for font style, which is why the font style remains but not the color.\u003c/p\u003e\r\n\u003cp\u003eThis is why we always link our custom stylesheets after Bootstrap!\u003c/p\u003e","frontPage":false},{"exportId":"monday-variables","title":"Monday: Variables","type":"WikiPage","content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the last lesson, when we wanted to add numbers together, we simply typed the numbers and added them. Now try this in the JavaScript console:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var myNumber = 3;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e3\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the code we typed above, \u003ccode\u003emyNumber\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is a variable that we set equal to 3. A variable is sort of like a container for storing values. You can almost read the code aloud: \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Variable myNumber is equal to 3\"\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Let's break down the above statement and look at each part:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003evar\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e stands for \"variable\", and is the JavaScript keyword that creates a variable for us.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003emyNumber\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is the name that we gave the variable\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is an assignment operator, meaning that it sets the value on the left side equal to the right side. It does not compare the two sides - we'll learn how to do this in an upcoming lesson\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e3\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is the value that we assign to the variable\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eOnce we set a variable equal to a value, we can use it just like the value. When we create a variable with a value like this, we say that we have declared the variable.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHere are some things we can do with variables. We can do arithmetic on the variable:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber + 5;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e8\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber + myNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e6\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNote that the value of a variable does not change when we do arithmetic on it. However, we can change the value of a variable once it has been set by using \u003ccode\u003e=\u003c/code\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber = 9;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e9\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e9\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can even use the variable to change its own value:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e9\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber = myNumber + 1;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e10\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; myNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e10\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can also use more than one variable at a time:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var firstNumber = 5;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var secondNumber = 8;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var thirdNumber = firstNumber + secondNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; thirdNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e13\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFor now, don't worry about the word \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e that prints to the console. When we declare a variable in this way, it does not actually evaluate to anything, so the return value is \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eNaming Conventions\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn JavaScript, it’s conventional to give variables names that start with a lowercase letter, and if the name has more than one word, to capitalize each word after the first, without spaces or punctuation (such as hyphens \u003ccode\u003e-\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e or underscores \u003ccode\u003e_\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e) between words. This capitalization style is called lower camelcase, named after the humps of a camel.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHere are some examples of good and bad naming:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eThe first letter of a variable must be lower case.\u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003elowerCamelCase\u003c/code\u003e: Good!\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003eNotLowerCamelCase\u003c/code\u003e: Bad - the first letter here is capitalized. This capitalization style is sometimes called upper camel case or Pascal case.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003eVariables should begin with a letter.\u003cbr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003efirstNumber\u003c/code\u003e: Good!\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e1stNumber\u003c/code\u003e: Bad - the first character here is a 1.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eVariables are case-sensitive\u003cbr\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003emyNumber\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is a different variable than \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003emyNUMBER\u003c/code\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eUse clear names that describe the value being stored.\u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003emyNumber\u003c/code\u003e: Good! This variable tells us that it a specific number.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003ex\u003c/code\u003e: Bad - this variable name does not tell us anything about what it represents. For example: \u003ccode\u003evar x = 45\u003c/code\u003e doesn't tell us much about the value. Is 45 an age, a distance, a size, a time?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\n\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003enum\u003c/code\u003e: Bad - it's possible that \u003ccode\u003enum\u003c/code\u003e here refers to the word \"number\", but abbreviations can be difficult for others (or even yourself).\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-agile","title":"Monday: Agile","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eAgile \u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAgile management, agile process management, or simply agile, refers to an iterative, incremental method of managing the design and build activities of engineering, information technology and other business areas that aim to provide a new product or service development in a highly flexible and interactive manner.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAgile, being a framework has many sub-frameworks:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eXP\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eSCRUM\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eDSDM\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCrystal\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFDD\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe will concentrate on SCRUM, the most widely used sub-framework of Agile.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eSoftware Project Life Cycle (Sprint)\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA sprint (or iteration) is the basic unit of development in SCRUM. The sprint is a timeboxed effort (a timebox is a short, fixed duration periods of time in which activities or work are undertaken); this means that sprints are restricted to a specific duration. The duration is fixed in advance for each sprint and is normally between one week and one month, with two weeks being the most common.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe phases of a sprint or Software Development Life Cycle (SDLC) are:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003ePlan:\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e During this phase, the scope of the project is defined and a project management plan is developed. It involves identifying the cost, quality, available resources, and a realistic timetable. The project plans also includes establishing baselines or performance measures. These are generated using the scope, schedule and cost of a project. A baseline is essential to determine if a project is on track.At this time, roles and responsibilities are clearly defined, so everyone involved knows what they are accountable for. \u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eAnalysis:\u003c/strong\u003e \u003cspan style=\"font-weight: 400;\"\u003eThe goal of system analysis is to determine where the problem is. This step involves breaking down the problem  in different pieces to analyze the situation, analyzing project goals, breaking down what needs to be created and attempting to engage users so that definite requirements can be defined.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eDesign:\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e Project design is an early phase of the project where a project's key features, structure, criteria for success, and major deliverables are all planned out. The point is to develop one or more designs which can be used to achieve the desired project goals.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eDevelopment:\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e This is the phase where deliverables are developed and completed. This often feels like the meat of the project since a lot is happening during this time, like status reports and meetings, development updates, and performance reports.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eTesting: \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003eSoftware testing is a process of executing a program or application with the intent of finding the software bugs. It can also be stated as the process of validating and verifying that a software program or application or product: Meets the business and technical requirements that guided its design and development.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eDeploy (demo):\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e Shipping tested code or product for customer use.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eAgile Principles\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe following principles are based on the agile manifesto. A formal proclamation of four key values and 12 principles to guide an iterative and people-centric approach to software development.\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eIndividuals and interactions over processes and tools: \u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBuild projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe best architectures, requirements and design emerge from self organizing teams .\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly (retrospective in the sprint cycle, a concept that we will cover later). \u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAgile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe most efficient \u0026amp; effective method of conveying info to and within a development team is a face-to-face conversation (co-location). \u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003eWorking software over comprehensive documentation:\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWorking Software is the primary measure of progress.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur highest priority is to satisfy the customer through the early \u0026amp; continuous delivery of valuable software.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eDeliver working Software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eContinuous attention to technical excellence and good design enhances agility.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eSimplicity, the art of maximizing the amount of work not done, is essential (design for today). \u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eCustomer collaboration over contract negotiation: \u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBusiness people and developers must work together daily throughout the project.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003eResponding to change over following a plan:\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eWelcome changes in requirements, even late in development. Agile processes harness change for the customer's competitiveadvantage..\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eSCRUM Overview \u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003eSCRUM is a structured process sub-framework of agile used  to develop \u0026amp; sustain complex products . SCRUM is a sum of roles, events, artifacts and rules . Using these, the SCRUM team iteratively builds increments of the solution, involving the customer frequently to ensure they are creating the right product.\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eSCRUM Roles \u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003eDuring the sprint cycle, we will have various individual in the SCRUM team taking up various roles. Each person has or sub-team has a task that they will oversee.\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eDevelopment Team \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003eA SCRUM team is a collection of individuals working together to deliver the requested and committed product increments, as set in the sprint backlog. To work effectively it is important for a SCRUM Team that everyone within the team:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFollows a common goal:\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe team must be cross-functional in that, people with different functional expertise working toward a common goal. It may include people from finance, marketing, operations, and human resources departments.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAdheres to the same norms and rules\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eShows respect to each other\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe optimum number of a SCRUM team should be between 3 to 9 members.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eSCRUM Master \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe SCRUM master is a facilitator for an agile development team. They have a deep understanding of SCRUM principles and how to enact them in a team.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe SCRUM master is responsible for:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003e Helping the team to reach a consensus for what can be achieved during a specific sprint.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eHelping the team to reach consensus during the daily stand up.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eHelping the team to stay focused and follow the agreed-upon rules for daily SCRUMs.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eRemoving obstacles that are impeding the team's progress.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eProtecting the team from outside distractions.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eProduct Owner \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe SCRUM product owner is typically a project's key stakeholder. Part of the product owner responsibilities is to have a vision of what he or she wishes to build, in conjunction with the customer’s vision, and convey that vision to the SCRUM team. This is key to successfully starting any agile software development project. The agile product owner does this in part through the product backlog, which is a prioritized features list for the product.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eSCRUM Events \u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003ePrescribed events are used in SCRUM to create regularity and to minimize the need for meetings not defined in SCRUM. All events are time-boxed events, such that every event has a maximum duration. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eOther than the Sprint itself, which is a container for all other events, each event in SCRUM is a formal opportunity to inspect and adapt something. These events are specifically designed to enable critical transparency and inspection. Failure to include any of these events results in reduced transparency and is a lost opportunity to inspect and adapt.\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eSprint \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe heart of Scrum is a Sprint, a time-box of one month or less during which a \"Done\" ,which means it must be in useable condition and meet the Scrum Team's definition of \"Done\", useable, and potentially releasable product increment (a sum of all the Product Backlog items completed during a Sprint and the value of the increments of all previous Sprints) is created. The best Sprints have consistent durations throughout a development effort. A new Sprint starts immediately after the conclusion of the previous Sprint.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSprints contain and consist of the Sprint Planning, daily stand up, the development work, the Sprint Review, and the Sprint Retrospective.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDuring the Sprint:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eNo changes are made that would endanger the sprint goal.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eQuality goals do not decrease.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eScope may be clarified and re-negotiated between the Product Owner and Development Team as more is learned.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eSprint Planning \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe work to be performed in the Sprint is planned at the Sprint Planning. This plan is created by the collaborative work of the entire Scrum Team. The output of this is called the sprint backlog. The Sprint Goal is an objective set for the Sprint that can be met through the implementation of Product Backlog. It provides guidance to the Development Team on why it is building the Increment. It is created during the Sprint Planning meeting. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSprint Planning is time-boxed to a maximum of eight hours for a one-month Sprint. For shorter Sprints, the event is usually shorter. The Scrum Master ensures that the event takes place and that attendants understand its purpose. The Scrum Master teaches the Scrum Team to keep it within the time-box.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eSprint Planning answers the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat can be delivered in the Increment resulting from the upcoming Sprint?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eHow will the work needed to deliver the Increment be achieved?\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eDaily Stand-up\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Daily Scrum is a 15-minute time-boxed event for the Development Team to synchronize activities and create a plan for the next 24 hours. This is done by inspecting the work since the last Daily Scrum and forecasting the work that could be done before the next one. The Daily Scrum is held at the same time and place each day to reduce complexity. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eDuring the meeting, the Development Team members explain:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat did I do yesterday that helped the Development Team meet the Sprint Goal?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat will I do today to help the Development Team meet the Sprint Goal?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eDo I see any impediment that prevents me or the Development Team from meeting the Sprint Goal?\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eSprint Review/Demo\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA Sprint Review is held at the end of the Sprint to inspect the Increment and adapt the Product Backlog if needed. During the Sprint Review, the Scrum Team and stakeholders collaborate about what was done in the Sprint. Based on that and any changes to the Product Backlog during the Sprint, attendees collaborate on the next things that could be done to optimize value. This is an informal meeting, not a status meeting, and the presentation of the Increment is intended to elicit feedback and foster collaboration. A demo of the increment is to be show at this point as per the MVPs (discussed later) set.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis is a four-hour time-boxed meeting for one-month Sprints. For shorter Sprints, the event is usually shorter. The Scrum Master ensures that the event takes place and that attendants understand its purpose. The Scrum Master teaches all to keep it within the time-box.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Sprint Review includes the following elements:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAttendees include the Scrum Team and key stakeholders invited by the Product Owner;\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Product Owner explains what Product Backlog items have been “Done” and what has not been “Done”;\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Development Team discusses what went well during the Sprint, what problems it ran into, and how those problems were solved;\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Development Team demonstrates the work that it has “Done” and answers questions about the Increment;\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Product Owner discusses the Product Backlog as it stands. He or she projects likely completion dates based on progress to date (if needed);\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe entire group collaborates on what to do next, so that the Sprint Review provides valuable input to subsequent Sprint Planning;\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eReview of how the marketplace or potential use of the product might have changed what is the most valuable thing to do next; and,\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eReview of the timeline, budget, potential capabilities, and marketplace for the next anticipated release of the product.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe result of the Sprint Review is a revised Product Backlog that defines the probable Product Backlog items for the next Sprint. The Product Backlog may also be adjusted overall to meet new opportunities.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eSprint Retrospective \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Sprint Retrospective is an opportunity for the Scrum Team to inspect itself and create a plan for improvements to be enacted during the next Sprint.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Sprint Retrospective occurs after the Sprint Review and prior to the next Sprint Planning. This is a three-hour time-boxed meeting for one-month Sprints. For shorter Sprints, the event is usually shorter. The Scrum Master ensures that the event takes place and that attendants understand its purpose. The Scrum Master teaches all to keep it within the time-box. The Scrum Master participates as a peer team member in the meeting from the accountability over the Scrum process.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe purpose of the Sprint Retrospective is to:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eInspect how the last Sprint went with regards to people, relationships, process, and tools;\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eIdentify and order the major items that went well and potential improvements; and,\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCreate a plan for implementing improvements to the way the Scrum Team does its work.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eSCRUM Artifacts \u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eScrum Artifacts provide key information that the Scrum Team and the stakeholders need to be aware of for understanding the product under development, the activities done, and the activities being planned in the project.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eProduct Backlog \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Product Backlog is an ordered list of everything that might be needed in the product and is the single source of requirements for any changes to be made to the product. The Product Owner is responsible for the Product Backlog, including its content, availability, and ordering.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Product Backlog lists all features, functions, requirements, enhancements, and fixes that constitute the changes to be made to the product in future releases. Product Backlog items have the attributes of a description, order, estimate and value.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eSprint Backlog \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Sprint Backlog is the set of Product Backlog items selected for the Sprint, plus a plan for delivering the product Increment and realizing the Sprint Goal. The Sprint Backlog is a forecast by the Development Team about what functionality will be in the next Increment and the work needed to deliver that functionality into a “Done” Increment.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Sprint Backlog makes visible all of the work that the Development Team identifies as necessary to meet the Sprint Goal. The Sprint Backlog is a plan with enough detail that changes in progress can be understood in the Daily Scrum.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eIncrement\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Increment is the sum of all the Product Backlog items completed during a Sprint and the value of the increments of all previous Sprints. At the end of a Sprint, the new Increment must be “Done,” which means it must be in useable condition and meet the Scrum Team’s definition of “Done.” It must be in useable condition regardless of whether the Product Owner decides to actually release it.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eUser Stories \u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA user story is a tool used in Agile software development to capture a description of a software feature from an end-user perspective. The user story describes the type of user, what they want and why. A user story helps to create a simplified description of a requirement. A user story should be small enough to complete in a sprint, or else it is split into another sprint.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFormat: As a \u0026lt;ROLE\u0026gt; I want to do \u0026lt;FEATURE\u0026gt; so that I can do \u0026lt;REASON/BENEFIT\u0026gt; . WHO wants WHAT \u0026amp; WHY. WHY is optional, but recommended \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs a user, I can backup my entire hard drive.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs a frequent traveler, I want to reserve a hotel room\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eMinimum Viable Product: MVP \u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA great place to start thinking about the project we are about to create is the minimum viable product, or MVP. As the name implies, this is the \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eminimum\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e or most basic version of an application that fulfills its goals. That is, the problem the application is meant to solve, or the service it is supposed to offer to the user.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's look at an example of an MVP. Consider the following example from Gerry Clapp's response to the question \"\u003c/span\u003e\u003ca href=\"https://www.quora.com/What-is-a-minimum-viable-product\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat is a Minimum Viable Product\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e?\" on Quora:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's pretend you're building a startup with the goal of creating the best donut ever.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe product team starts off by building a plain donut. At this point it's considered an MVP. The product works, but it's probably not quite the best donut product out there. Now the team can ask their customers questions about the donut, like:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat do like the most about the donut?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf you could choose any topping, what topping would you add?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWould you prefer a donut in a different shape?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAnd, so on.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eUsing this newfound validated learning from their customers, the team can create a better donut. But, depending on the context of the customers that provided feedback, the team can have wildly varying results:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn this particular case, it's to add candy sprinkles.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn a different market, with different customers, those customers may [have] wanted a chocolate donut.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf the team spoke to customers in another country, they may [have] wanted a strawberry donut.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFrom this example, we can see that creating an MVP has some benefits:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eWe complete a functional product sooner.\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e While it may not be the best donut ever or have all the features we would like, it is better to prioritize building a functioning prototype with fewer features than to attempt adding too many features and fail to produce a working project by the deadline. You can always add extra features after the MVP is finished.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eWe can collect user feedback before adding extra features. \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003eAfter creating the MVP, we can beta-test it with sample users, and their feedback to understand what kinds of features they actually want. They may have thought of something you hadn't considered!\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eStory Points\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA story point is an arbitrary measure used by SCRUM teams. This is used to measure the effort required to implement a story.In simple terms it's a number that tells the team how hard the story is.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch1\u003e\u003cstrong\u003eEngineering Practices\u003c/strong\u003e\u003c/h1\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eContinuous Integration (CI)\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eContinuous Integration (CI) is a development practice that requires developers to integrate code into a shared repository several times a day. Each check-in is then verified by an automated build, allowing teams to detect problems early. By integrating regularly, you can detect errors quickly, and locate them more easily.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe practices\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMaintain a single source repository\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAutomate the build\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMake your build self-testing\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eEvery commit should build on an integration machine\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eKeep the build fast\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eTest in a clone of the production environment\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMake it easy for anyone to get the latest executable version\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eEveryone can see what’s happening \u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAutomate deployment\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eTools \u003c/span\u003e\u003c/h2\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eInformation Radiator\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAn information radiator, also known as a Big Visible Chart (BVC), is a large graphical representation of project information kept plainly in sight within an agile development team’s shared workspace.The purpose of information radiators is to help keep the team focused on what really needs their attention and to promote transparency.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cstrong\u003eKanban/Task board\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA Kanban board is a work and workflow visualization tool that enables you to optimize the flow of your work. Physical Kanban boards, like the one pictured below, typically use sticky notes on a whiteboard to communicate status, progress, and issues.\u003c/span\u003e\u003cbr\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Agile%20content/Tools.png\" alt=\"Tools.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/2506\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003ePersonas\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA user persona is a representation of the goals and behavior of a hypothesized group of users. In most cases, personas are synthesized from data collected from interviews with users. The most important reason to create personas is to set a common understand of the final user. So that a coherent strategy is defined that will result in a product/service that is user oriented and meet the user goals.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Agile%20content/personas.png\" alt=\"personas.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/2507\" data-api-returntype=\"File\"\u003e\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-practice-string-methods","title":"Monday: Practice - String Methods","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the string methods lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMethods can be called on strings\u003c/li\u003e\r\n\u003cli\u003eMethods can be chained\u003c/li\u003e\r\n\u003cli\u003eYou can use the \u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e+\u003c/code\u003e\u003c/span\u003e operator on strings in place of the \u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e.concat()\u003c/code\u003e \u003c/span\u003emethod\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow that we've covered both methods and strings independently, practice common methods meant specifically for strings by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat does 'chaining' a method mean? What does that look like?\u003c/li\u003e\r\n\u003cli\u003eName two string methods.\u003c/li\u003e\r\n\u003cli\u003eName two ways to combine multiple strings together.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003ePractice calling methods on strings:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSet a variable equal to a string\u003c/li\u003e\r\n\u003cli\u003eCall a method on that variable.\u003c/li\u003e\r\n\u003cli\u003eSet another variable with a string in all uppercase.\u003c/li\u003e\r\n\u003cli\u003eUse the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econcat\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod with your two variables.\u003c/li\u003e\r\n\u003cli\u003eNow concatenate them with the shortcut.\u003c/li\u003e\r\n\u003cli\u003eUse the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoUpperCase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on your first variable.\u003c/li\u003e\r\n\u003cli\u003eNow use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoLowerCase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on your second variable.\u003c/li\u003e\r\n\u003cli\u003eFind the character at the 3rd position of either of your variables.\u003c/li\u003e\r\n\u003cli\u003eCheck out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype#Methods\"\u003eMDN's documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eof string methods and try out at least five new methods for yourself. If some of them don't make sense, don't worry about it - just try the ones that do. (Stick to the section labelled Methods unrelated to HTML. Click on the method itself to see how to use it in your code.)\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"thursday-cascading-and-inheritance","title":"Thursday: Cascading and Inheritance","type":"WikiPage","content":"\u003cp\u003eYou may have noticed that, in earlier lessons, we defined a style for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e, and it was applied to the text that was inside of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags. This is called inheritance: since the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags are nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003etags, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags inherit the styles given to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003es.\u003c/p\u003e\r\n\u003cp\u003eOn the other hand, when we applied a style to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags on the same page as a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e, it was not applied to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare not nested within another, so their styles are applied independently.\u003c/p\u003e\r\n\u003cp\u003eWe can use inheritance to change the font for the entire web page like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003ebody\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-family\u003c/span\u003e: sans-serif\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSince all of the other elements in the web page are nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag, all of the text for the page will be Sans Serif.\u003c/p\u003e\r\n\u003cp\u003eLet's see how we can use cascading to target specific child elements. For example, take this HTML:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eCats vs Dogs\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eCats vs Dogs: the Definitive Guide\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to the ultimate showdown between cats and dogs. May the best one win!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"cats\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere's why cats are great. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eFind out more about cats \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://www.example.com/cats.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003ehere\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"dogs\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere's why dogs are great. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eFind out more about dogs \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://www.example.com/dogs.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003ehere\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWho will win? You will be the judge.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSay we want to color-code each paragraph so that we can tell which paragraphs are about cats and which ones are about dogs. Here is how we can style the paragraphs in each div differently:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ecss/styles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.cats\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: coral\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.dogs\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003ebackground-color\u003c/span\u003e: steelblue\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThese rules tell the page that all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecats\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass need the background color\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecoral\u003c/code\u003e, and all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edogs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass need the background color\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esteelblue\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou can nest even further down:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.cats\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-weight\u003c/span\u003e: bold\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-class\"\u003e.dogs\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-style\u003c/span\u003e: italic\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou can actually nest as far down as you like. A word of caution, however: anything more than 3 or 4 levels deep is usually a sign that you should re-evaluate what you are trying to accomplish with your CSS. Chances are, there's a much more efficient way to accomplish what you're attempting to do.\u003c/p\u003e\r\n\u003cp\u003eNow, consider the following rules:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003estyles.css\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-class\"\u003e.dogs\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ep\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-weight\u003c/span\u003e: bold\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003cspan class=\"hljs-tag\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003efont-weight\u003c/span\u003e: normal\u003c/span\u003e\u003c/span\u003e;\r\n}\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen it comes to CSS rules, the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emore specific\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erule is applied. In this example, a link in a paragraph in an element with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edogs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass will be bold, because the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.dogs p a\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector is more specific than the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ea\u003c/code\u003eselector. This is called specificity.\u003c/p\u003e\r\n\u003cp\u003eThere's one more thing I'd like to cover about cascading: if two rules have the same specificity, the last one wins - in other words, the one that's the farthest down in the CSS file takes precedence. When more than one CSS file is linked in the page head, then again, the furthest one down takes precedence.\u003c/p\u003e\r\n\u003cp\u003eOccasionally, you'll run into HTML that looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003estyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"float: left\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"cute-kitten.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, the style is embedded in the HTML using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estyle\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estyle=\"float: left\"\u003c/code\u003e. This is called an inline style, and it should be avoided at all costs! It defeats the purpose of CSS when you do this, because it means that now you can't reuse your styles and keep them in one place. This is not a common practice, but you still may run into it every once in awhile. The main takeaway here is that if you see an inline style, it takes precedence over what's defined in your CSS.\u003c/p\u003e\r\n\u003cp\u003eThere are some additional rules about which style takes precedence in more complicated situations, but that's beyond the scope of what we're learning here.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-address-book-user-interface-logic","title":"Wednesday: Address Book: User Interface Logic","type":"WikiPage","content":"\u003cp\u003eNow that we have a constructor in place to create\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects, let's add user interface logic to collect address details for each new contact we create. Additionally, we'll also add code to display a contact's addresses when their name is clicked.\u003c/p\u003e\r\n\u003ch2\u003eUpdating HTML\u003c/h2\u003e\r\n\u003cp\u003eTo accomplish this, we'll need the following HTML elements:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eForm input fields to collect the data for the properties defined in our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor: street, city, and county.\u003c/li\u003e\r\n\u003cli\u003eAn \"Another Address\" button, so our users may add more than one address to a contact.\u003c/li\u003e\r\n\u003cli\u003eA place to display a contact's addresses in our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eshow-contact\u003c/code\u003e\u003cspan\u003e div \u003c/span\u003eon the right side of the screen.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eHere are the HTML updates to add these three elements:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eaddress-book.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-html hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/styles.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/jquery-1.12.0.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eAddress book\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eAddress book\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eAdd a contact:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-contact\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-first-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003eFirst name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-first-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-last-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003eLast name\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-last-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-addresses\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-address\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-street\"\u003c/span\u003e\u0026gt;\u003c/span\u003eStreet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control new-street\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-city\"\u003c/span\u003e\u0026gt;\u003c/span\u003eCity\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control new-city\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"new-county\"\u003c/span\u003e\u0026gt;\u003c/span\u003eCounty\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control new-county\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-primary\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"add-address\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAnother address\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAdd\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eContacts:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"contacts\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"show-contact\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eFirst name: \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"first-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLast name: \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"last-name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eAddresses:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"addresses\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we have fields to collect address data for street, city, and county, and a place to display them. We also have the button to allow a user to add multiple addresses, but it does not currently have any jQuery listeners to\u003cspan\u003e \u003c/span\u003e\u003cem\u003edo\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eanything when the button is clicked.\u003c/p\u003e\r\n\u003ch2\u003ejQuery Click Listener\u003c/h2\u003e\r\n\u003cp\u003eLet's incorporate jQuery to show new fields for another address when the user clicks the \"Another Address\" button we've just added.\u003c/p\u003e\r\n\u003cp\u003eWhen the form first loads, it will display one set of address form fields, like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/e8xecmvc31208t3/address-book-form.png\" alt=\"address-book-new-contact-form\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThen, when they click the button labeled \"Another address\", a second set of address form fields will be added, like so:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/hpyk6qtj9m8xuu8/address-book-form-with-additional-fields.png\" alt=\"address-book-new-contact-form-additional-address-fields\"\u003e\u003c/p\u003e\r\n\u003cp\u003eTo do this, we'll add the following code to the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e$(document).ready\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback function. Note that it should\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ereside in the form submit listener callback function. This is because the button must be functional\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe submit the form; after all, if the user wants to add two different addresses to a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e, they'll need to be able to hit the \"Another Address\" button to receive more address form fields\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esubmitting the form to create the new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"#add-address\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"#new-addresses\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e'\u0026lt;div class=\"new-address\"\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;div class=\"form-group\"\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;label for=\"new-street\"\u0026gt;Street\u0026lt;/label\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;input type=\"text\" class=\"form-control new-street\"\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/div\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;div class=\"form-group\"\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;label for=\"new-city\"\u0026gt;City\u0026lt;/label\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;input type=\"text\" class=\"form-control new-city\"\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/div\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;div class=\"form-group\"\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;label for=\"new-county\"\u0026gt;County\u0026lt;/label\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;input type=\"text\" class=\"form-control new-county\"\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/div\u0026gt;'\u003c/span\u003e +\r\n                               \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/div\u0026gt;'\u003c/span\u003e);\r\n  });\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen appending a large amount of HTML with jQuery, we'll break it into smaller strings on different lines, using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoperator to concatenate them, as you see above. This makes it more readable than if it was all on a single line. For further readability, we keep the spacing and indentation the same as our other HTML.\u003c/p\u003e\r\n\u003ch2\u003ejQuery Form Submit Listener\u003c/h2\u003e\r\n\u003cp\u003eNext, we'll add jQuery logic to our form submit listener in order to collect and utilize the address information provided by the user. Previously, when the form was submitted, we collected the first and last name and created a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject with that data. Now we must\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eloop through the address form fields to collect\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethat\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einformation, create\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects, and push them onto the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject's\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty.\u003c/p\u003e\r\n\u003cp\u003eThe code to accomplish this can be seen below. It should reside\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe line that creates a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e. (However, note that you will not\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyet\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esee the results of this, because we haven't added code to display the address information yet. We'll do this momentarily!)\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e...\r\n$(\u003cspan class=\"hljs-string\"\u003e\".new-address\"\u003c/span\u003e).each(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedStreet = $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).find(\u003cspan class=\"hljs-string\"\u003e\"input.new-street\"\u003c/span\u003e).val();\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedCity = $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).find(\u003cspan class=\"hljs-string\"\u003e\"input.new-city\"\u003c/span\u003e).val();\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedCounty = $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).find(\u003cspan class=\"hljs-string\"\u003e\"input.new-county\"\u003c/span\u003e).val();\r\n  \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newAddress = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Address(inputtedStreet, inputtedCity, inputtedCounty);\r\n  newContact.addresses.push(newAddress);\r\n});\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've created a loop that cycles through each DOM element with the class\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003enew-address\u003c/code\u003e. Much like looping through all elements of an array with the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, as we learned last week, we can look through all elements of a given jQuery class with the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eeach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. However, instead of taking a parameter that each element is assigned to, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword to refer to the current element. (That is, when we use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.forEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe say something like\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ekittens.forEach(function(kitten){ ...\u003c/code\u003e. We have the opportunity to provide a parameter that each individual element of the array will use as a variable name. \"kitten\", in this case. When using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eeach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein jQuery we\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecannot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eprovide a custom parameter in this fashion, and instead must use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ethis\u003c/code\u003e, as seen in the code above.)\u003c/p\u003e\r\n\u003cp\u003eWe also are using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efind()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in the code above, which looks through all child elements of the provided element for any\u003cspan\u003e \u003c/span\u003e\u003cem\u003eother\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eelements that match the criteria provided as an argument. There's a\u003ccode class=\"prettyprint\"\u003echildren()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, too, but\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003echildren()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill only traverse down a\u003cspan\u003e \u003c/span\u003e\u003cem\u003esingle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elevel, whereas\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efind()\u003c/code\u003ewill look through children, their children, and so on. Since our inputs are nested within\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eform-group\u003c/code\u003e\u003ccode class=\"prettyprint\"\u003e\u0026lt;div\u0026gt;\u003c/code\u003es, we need to traverse down two levels. Therefore, we use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efind()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003echildren()\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eDisplaying Addresses\u003c/h2\u003e\r\n\u003cp\u003eFinally, we need to display each of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e's addresses alongside their name.\u003c/p\u003e\r\n\u003cp\u003eWe'll do this in a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith an id of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddresses\u003c/code\u003e. To accomplish this, we'll place the following code inside the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.contact\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclick listener:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e...\r\n$(\u003cspan class=\"hljs-string\"\u003e\"ul#addresses\"\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\nnewContact.addresses.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eaddress\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"ul#addresses\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;\"\u003c/span\u003e + address.street + \u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e + address.city + \u003cspan class=\"hljs-string\"\u003e\" \"\u003c/span\u003e + address.County + \u003cspan class=\"hljs-string\"\u003e\"\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n});\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003ePhew! That was a lot to take in!\u003c/p\u003e\r\n\u003cp\u003eFor reference, here is the complete jQuery code that incorporates all changes we've made so far. (It also includes 3 lines at the end to clear the 3 address fields after the form is submitted)\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e...\r\n$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"#add-address\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"#new-addresses\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e'\u0026lt;div class=\"new-address\"\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;div class=\"form-group\"\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;label for=\"new-street\"\u0026gt;Street\u0026lt;/label\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;input type=\"text\" class=\"form-control new-street\"\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/div\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;div class=\"form-group\"\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;label for=\"new-city\"\u0026gt;City\u0026lt;/label\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;input type=\"text\" class=\"form-control new-city\"\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/div\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;div class=\"form-group\"\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;label for=\"new-county\"\u0026gt;County\u0026lt;/label\u0026gt;'\u003c/span\u003e +\r\n                                   \u003cspan class=\"hljs-string\"\u003e'\u0026lt;input type=\"text\" class=\"form-control new-county\"\u0026gt;'\u003c/span\u003e +\r\n                                 \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/div\u0026gt;'\u003c/span\u003e +\r\n                               \u003cspan class=\"hljs-string\"\u003e'\u0026lt;/div\u0026gt;'\u003c/span\u003e);\r\n  });\r\n\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"form#new-contact\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n    event.preventDefault();\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedFirstName = $(\u003cspan class=\"hljs-string\"\u003e\"input#new-first-name\"\u003c/span\u003e).val();\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedLastName = $(\u003cspan class=\"hljs-string\"\u003e\"input#new-last-name\"\u003c/span\u003e).val();\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newContact = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Contact(inputtedFirstName, inputtedLastName);\r\n\r\n    $(\u003cspan class=\"hljs-string\"\u003e\".new-address\"\u003c/span\u003e).each(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedStreet = $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).find(\u003cspan class=\"hljs-string\"\u003e\"input.new-street\"\u003c/span\u003e).val();\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedCity = $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).find(\u003cspan class=\"hljs-string\"\u003e\"input.new-city\"\u003c/span\u003e).val();\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e inputtedCounty = $(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e).find(\u003cspan class=\"hljs-string\"\u003e\"input.new-county\"\u003c/span\u003e).val();\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e newAddress = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Address(inputtedStreet, inputtedCity, inputtedCounty)\r\n      newContact.addresses.push(newAddress)\r\n    });\r\n\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"ul#contacts\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;\u0026lt;span class='contact'\u0026gt;\"\u003c/span\u003e + newContact.fullName() + \u003cspan class=\"hljs-string\"\u003e\"\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n\r\n    $(\u003cspan class=\"hljs-string\"\u003e\".contact\"\u003c/span\u003e).last().click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#show-contact\"\u003c/span\u003e).show();\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"#show-contact h2\"\u003c/span\u003e).text(newContact.fullName());\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".first-name\"\u003c/span\u003e).text(newContact.firstName);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\".last-name\"\u003c/span\u003e).text(newContact.lastName);\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"ul#addresses\"\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n      newContact.addresses.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eaddress\u003c/span\u003e) \u003c/span\u003e{\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"ul#addresses\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;\"\u003c/span\u003e + address.street + \u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e + address.city + \u003cspan class=\"hljs-string\"\u003e\" \"\u003c/span\u003e + address.county + \u003cspan class=\"hljs-string\"\u003e\"\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n      });\r\n    });\r\n\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input#new-first-name\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input#new-last-name\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input.new-street\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input.new-city\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input.new-county\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n\r\n  });\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur address book application is almost complete! Let's add a few finishing touches: In this lesson we'll write an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprototype method called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullAddress()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat will return all properties of an\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eAddress\u003c/code\u003eobject as a single string. It will work just like the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullName()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we added to the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eContact\u003c/code\u003e prototype in previous lessons.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll add the prototype itself to the business logic section of our scripts:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003eAddress.prototype.fullAddress = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.street + \u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e + \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.city + \u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e + \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.county;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, on the front-end, we can replace\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddress.street + \", \" + address.city + \" \" + address.county\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eaddress.fullAddress()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThis line:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e$(\u003cspan class=\"hljs-string\"\u003e\"ul#addresses\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;\"\u003c/span\u003e + address.street + \u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e + address.city + \u003cspan class=\"hljs-string\"\u003e\" \"\u003c/span\u003e + address.county + \u003cspan class=\"hljs-string\"\u003e\"\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003ebecomes:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e$(\u003cspan class=\"hljs-string\"\u003e\"ul#addresses\"\u003c/span\u003e).append(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;li\u0026gt;\"\u003c/span\u003e + address.fullAddress() + \u003cspan class=\"hljs-string\"\u003e\"\u0026lt;/li\u0026gt;\"\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd it still works!\u003c/p\u003e\r\n\u003cp\u003eThese\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullName()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efullAddress()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods may seem unnecessary, but doing as much of the work as possible in the business logic is a great habit to get into. This keeps your front-end logic can be as clear as possible, and independent of the back-end as much as possible. You may be tired of hearing it, but remember:\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAlways keep your business and user interface logic well separated!\u003c/em\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-bootstrap-grid-system","title":"Monday: Bootstrap Grid System","type":"WikiPage","content":"\u003cp\u003eLining up a page exactly the way we want using only HTML and CSS can prove to be a challenging task. And then, making the layout responsive adds another level of complexity. For this reason, one of the most commonly-used features of Bootstrap is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#grid\" target=\"_blank\"\u003eGrid System\u003c/a\u003e. The grid system allows us to set up our page layout with an invisible grid to space and line up page content. As with other Bootstrap elements, the grid system is also responsive!\u003c/p\u003e\r\n\u003cp\u003eIn this lesson, we will learn how to implement this powerful feature in our own pages.\u003c/p\u003e\r\n\u003cp\u003eThe grid system consists of two parts: rows and columns. As with other Bootstrap features, they are simply div tags with either a row or column class.\u003c/p\u003e\r\n\u003ch2\u003eRows\u003c/h2\u003e\r\n\u003cp\u003eTo create a row in your page layout, add a div with the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    ...\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSome important points to note about rows:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRows\u003cspan\u003e \u003c/span\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe placed inside of a container. The margins of the Bootstrap\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass are set in such a way that they do not work properly outside of a Bootstrap container.\u003c/li\u003e\r\n\u003cli\u003eRows act as wrappers for columns, and columns\u003cspan\u003e \u003c/span\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe be located inside of a row. Much like the relationship between the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtainer\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, the padding of the Bootstrap\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolumn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass do not work properly when placed outside of a Bootstrap row. We will see how to use columns in the next section.\u003c/li\u003e\r\n\u003cli\u003eAny page content must be placed in\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecolumns\u003c/em\u003e, not directly in rows.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eColumns\u003c/h2\u003e\r\n\u003cp\u003eWhen using the Bootstrap grid system, any content on the page needs to reside inside of a column. Columns can display any valid HTML, including images, headers, panels, wells, and other divs.\u003c/p\u003e\r\n\u003cp\u003eColumns are customizable and give us flexibility with page layout, so they require some explanation.\u003c/p\u003e\r\n\u003cp\u003eThe pattern followed for column class names looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003ecol-\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emedia\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003equery\u003c/span\u003e\u0026gt;\u003c/span\u003e-\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ewidth\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe class always starts with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecol\u003c/code\u003e, which stands for \"column\".\u003c/p\u003e\r\n\u003cp\u003eThe other two sections are placeholders:\u003c/p\u003e\r\n\u003ch3\u003eMedia Query\u003c/h3\u003e\r\n\u003cp\u003eThe media query portion of the class name has several options:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003exs\u003c/code\u003e: \"extra small\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003esm\u003c/code\u003e: \"small\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003emd\u003c/code\u003e: \"medium\"\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003elg\u003c/code\u003e: \"large\"\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThese refer to built-in Bootstrap media query values that can be applied to columns, which we will cover in more detail shortly.\u003c/p\u003e\r\n\u003ch3\u003eWidth\u003c/h3\u003e\r\n\u003cp\u003eBootstrap's grid system allows up to 12 columns across the page. Accordingly, the width portion of the class name may be any number from 1 to 12. The number represents the number of units that column takes up, out of a total 12 units. So for example, a row could fit 12 columns with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e1\u003c/code\u003e, 6 columns with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e2\u003c/code\u003e, 4 columns with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e3\u003c/code\u003e, and so on.\u003c/p\u003e\r\n\u003ch4\u003eExamples\u003c/h4\u003e\r\n\u003cp\u003eLet's start with a column that spans the full width of a row. Since it will be the only column in its row, it needs to be 12 units wide, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\r\n  \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"row\"\u003c/span\u003e\u0026gt;\r\n     \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-12\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n  \u0026lt;/div\u0026gt;\r\n\u0026lt;/div\u0026gt;\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow let's look at an example on the opposite end, with 12 columns each with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e1\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\r\n   \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"row\"\u003c/span\u003e\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-1\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n   \u0026lt;/div\u0026gt;\r\n\u0026lt;/div\u0026gt;\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis HTML look appear something like this on the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-09-html_grid.png\" alt=\"MP-W1D4-09-html_grid.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf you do not want to use all 12 columns individually, you can group the columns together to create wider columns. For example, one row could contain a column with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e7\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand a column with a width of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e5\u003c/code\u003e, since 7 + 5 = 12. Here's some sample HTML to create these columns:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"container\"\u003c/span\u003e\u0026gt;\r\n   \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"row\"\u003c/span\u003e\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-7\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n      \u0026lt;div \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e\"col-md-5\"\u003c/span\u003e\u0026gt;...\u0026lt;/div\u0026gt;\r\n   \u0026lt;/div\u0026gt;\r\n\u0026lt;/div\u0026gt;\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's how that HTML would appear on the page:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-10-html_grid_02.png\" alt=\"MP-W1D4-10-html_grid_02.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eKeep in mind that the width values should add up to a total of 12 for a single row. If they add up to more than 12, then the columns will stack no matter the viewport size.\u003c/p\u003e\r\n\u003ch2\u003eAdding a grid to an existing page\u003c/h2\u003e\r\n\u003cp\u003eLet's get some practice using Bootstrap's grid system in a webpage. The\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epage from our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap-practice\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eproject from the previous lesson contains five sections that lend themselves well to the grid system. Let's organize those now, into two rows: the first one with 2 columns, and the second one with 3 columns.\u003c/p\u003e\r\n\u003cp\u003eIn this case, we want our columns to be equal.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor our first row, we want 2 columns. The full width of a Bootstrap grid row is 12 units, so we can divide 12 by 2 to give us 6. This means that each column should be 6 units wide.\u003c/li\u003e\r\n\u003cli\u003eFor our second row, we want 3 columns. Again, divide the total width of 12 by 3, which gives us 4. Each column should be 4 units wide.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFirst, we need to add two divs with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to give us our two rows. The first one will include the first two sections, and the second one will include the last three. Here's what that looks like:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"jumbotron\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"well\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eNulla Semper Lorem\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  ...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that when we refresh the page, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erow\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass by itself doesn't actually change the layout of our page. We still need to add columns. Let's format the first row:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"jumbotron\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"well\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  ...\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we refresh the page, the first two sections should be next to each other in a row, each the width of half the page. The last three sections are still stacked on top of each other, so let's put those in columns. The entire page should now look like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"jumbotron\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eBootstrap Practice\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eSed finibus sapien luctus pretium interdum. Etiam accumsan nibh neque. Integer congue magna orci, vitae suscipit mi tincidunt quis. Suspendisse fringilla, orci eu aliquet ultricies, libero ipsum maximus massa, et mollis leo massa sed felis. Suspendisse molestie elit non mollis gravida.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"well\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem Ipsum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eLorem ipsum dolor sit amet\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eConsectetur adipiscing elit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eInteger finibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eNisl tempus semper semper\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePurus nisl hendrerit tellus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n              \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eNulla Semper Lorem\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow our content is spaced neatly into two rows!\u003c/p\u003e\r\n\u003cp\u003eBecause we're experimenting, let's see what happens when we try to fill a row with columns that exceed 12 units. Looking at the second row, let's change the width of the last column to 6 instead of 4:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eNulla Semper Lorem\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we refresh the page, we see that the last column has created another row.\u003c/p\u003e\r\n\u003cp\u003eWhat happens when the column widths total less than 12? Let's try it out! I will change the widths to 2, 2, and 4:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel panel-info\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-heading\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-title\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEt Consequat Magna\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-body\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eOrci ut velit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003ePellentesque cursus justo\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eIn felis condimentum cursus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"panel-footer\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePanel Footer\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-2\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eNulla Semper Lorem\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin dignissim lectus enim\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEu bibendum mauris euismod in\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi dictum\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eEx et malesuada pellentesque\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"col-md-4\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-success\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMorbi Lacinia Mollis Tortor\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eA sodales elit tempor ut\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eUt elit augue\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eImperdiet eu est faucibus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eTristique hendrerit mi\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eProin in ex lectus\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bg-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDonec accumsan in nisi non ultricies\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, the columns in the row do not span the width of the entire page, and are condensed to the left side of the page. This takes some degree of control away from our page layout, which is one of the great advantages of using the grid system in the first place. As you use the grid system in your own projects, try experimenting with the layout of the page by using different column sizes.\u003c/p\u003e\r\n\u003cp\u003eLet's revisit those media queries in the class name. How do we know which one we want to use?\u003c/p\u003e\r\n\u003cp\u003eBootstrap has four options for media queries, each corresponding to a standard size of device:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003exs\u003c/code\u003e: phones\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003esm\u003c/code\u003e: tablets\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003emd\u003c/code\u003e: desktops\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003elg\u003c/code\u003e: large desktops\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThese sizes instruct how narrow the page can be before the columns stack on top of one another. They refer to built-in breakpoints that are common for the viewport sizes listed above.\u003c/p\u003e\r\n\u003cp\u003eWhat does this look like? Remember how we used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia query for the columns in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e? The columns are side by side when the page is full size.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-10-responsive_grid_01.png\" alt=\"MP-W1D4-10-responsive_grid_01.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eHowever, start decreasing the width of your browser window. Once the page width is less than 992 pixels (the built-in value for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emd\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emedia query), the columns stack on top of each other, like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Thursday%20Content%20Images/MP-W1D4-11-responsive_grid_02.png\" alt=\"MP-W1D4-11-responsive_grid_02.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eSee the Bootstrap Grid documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://getbootstrap.com/css/#grid-media-queries\"\u003eMedia Queries\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor the specifics of how media queries are applied.\u003c/p\u003e","frontPage":false},{"exportId":"monday-writing-functions","title":"Monday: Writing Functions","type":"WikiPage","content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the last lesson, we learned how to use functions that are built into JavaScript. In this lesson, we'll learn to write our own.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's start by writing something simple, a function that will make an animal sound:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; function makeNoise() {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  alert(\"meow!\");\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFunctions in JavaScript are defined by the keyword \u003ccode\u003efunction\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, followed by:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe name of the function in lowerCamelCase.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eA pair of parentheses. We will learn what goes inside of the parentheses in just a moment.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eA pair of curly brackets.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe function code goes inside of the curly brackets.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNote that we can hit \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eEnter\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e to insert a line break as we're writing the function because the console knows what a function should look like, and will not execute any code.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can call the function just like we called the built-in JavaScript functions: by typing the name of the function followed by parentheses. Here is how we call the \u003ccode\u003emakeNoise\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; makeNoise();\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eEvery time we run \u003ccode\u003emakeNoise()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, JavaScript will execute the code in between the curly brackets to give us an alert reading \u003ccode\u003emeow!\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. This function doesn't let us do very much, so let's make it a little more interesting:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; function makeNoise(animalSound) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  alert(animalSound);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; makeNoise(\"woof!\");\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003e\"woof!\"\u003c/code\u003e in the above example is an argument to the \u003ccode\u003emakeNoise()\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function. It's data that we are passing to the function, just like the arguments we've used for methods and for predefined JavaScript functions. When we call \u003ccode\u003emakeNoise(\"woof!\");\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, the function uses the value \u003ccode\u003e\"woof!\"\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e inside of the function.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the \u003ccode\u003emakeNoise()\u003c/code\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003efunction, the value of the argument is assigned to the variable \u003ccode\u003eanimalSound\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. We call this variable, \u003ccode\u003eanimalSound\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, a \u003cstrong\u003eparameter\u003c/strong\u003e. Parameters and arguments are \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003enot\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e the same thing: the parameter will take on the value of an argument. You can think of parameters as placeholders for arguments.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's take a look at another, more complex example:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; function subtract(firstNumber, secondNumber) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  return firstNumber - secondNumber;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; subtract(5,4);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e1\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNotice that when we call \u003ccode\u003esubtract\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, the word \u003ccode\u003eundefined\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e does not print on the next line. That's because we defined a return statement for the function as \u003ccode\u003efirstNumber - secondNumber\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. The return statement is what prints on the line after we call the function. When we don't define a return statement, the return statement is technically undefined, which is why \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e prints to the console.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can use variables with functions, too. Let's look at one more example to illustrate the subtleties between arguments and parameters:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; function add(number1, number2) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  return number1 + number2;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var five = 5;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; var six = 6;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eundefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;add(five, six);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e11\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's step through what's going on here.\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eWe create a function named \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eadd\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e that takes two parameters, \u003ccode\u003enumber1\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003ccode\u003enumber2\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, and returns the sum of the two numbers\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eWe create a variable named \u003ccode\u003efive\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e with the value of \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e5\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eWe create a variable named \u003ccode\u003esix\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e with the value of \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e6\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eWe call the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eadd\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function and pass in \u003ccode\u003efive\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003ccode\u003esix\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e as the arguments\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eThe \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eadd\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function runs, with \u003ccode\u003enumber1\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e taking on the value of \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e5\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003ccode\u003enumber2\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e taking on the value of \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e6\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eThe \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eadd\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e function returns the sum of \u003ccode\u003efive\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and \u003ccode\u003esix\u003c/code\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThere is another syntax used to define functions in JavaScript that you may run into:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003evar add = function(number1, number2) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  return number1 + number2;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDeclaring a function like this is known as a \u003c/span\u003e\u003cstrong\u003efunction literal\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e or \u003c/span\u003e\u003cstrong\u003efunction expression\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e, whereas declaring a function like we do earlier in the lesson is called a \u003c/span\u003e\u003cstrong\u003efunction statement\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. There is a functional difference between the two, but it is subtle, and beyond the scope of this course. If you're interested in reading more about the difference, feel free to check out the \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\"\u003e\u003cspan style=\"font-weight: 400;\"\u003edocumentation\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e on Mozilla Developer Network or this post on \u003c/span\u003e\u003ca href=\"https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eJavaScript Weblog\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-inline-elements","title":"Tuesday: Inline Elements","type":"WikiPage","content":"\u003cp\u003eAll of the tags we learned about in the previous lessons are block elements, meaning that each element is displayed on a new line. In this lesson, we are going to look at elements that do not appear on their own line but share a line with other elements. These are called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einline elements\u003c/strong\u003e. We will see how to add text emphasis, links, and images to our pages. At the end of this lesson,\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-17-my_first_webpage_inline_elements.png\" alt=\"MP-W1D1-17-my_first_webpage_inline_elements.png\" width=\"615\" height=\"825\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1346\" data-api-returntype=\"File\"\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eOpen up\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e. We're going to modify it to include an inline element:\u003c/p\u003e\r\n\u003cpre\u003e\u0026lt;p\u0026gt;Welcome to my \u0026lt;strong\u0026gt;first web page\u0026lt;/strong\u0026gt;!\u0026lt;/p\u0026gt;\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag indicates that something is important. By default, it will make the text inside it bold (although we'll learn how to customize this soon), like the text below:\u003c/p\u003e\r\n\u003cp\u003eWelcome to my\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efirst web page\u003c/strong\u003e!\u003c/p\u003e\r\n\u003cp\u003eIf we want to emphasize something, we'll use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag, which will italicize it:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eem\u003c/span\u003e\u0026gt;\u003c/span\u003eMoringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eem\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's how the HTML should render in the browser:\u003c/p\u003e\r\n\u003cp\u003eWritten with a little guidance from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMoringa School\u003c/em\u003e\u003c/p\u003e\r\n\u003ch2\u003eLinks\u003c/h2\u003e\r\n\u003cp\u003eAnd now let's learn about one of the most useful HTML tags. Add the following line to the end of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eCheck out \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://moringaschool.com/\"\u003c/span\u003e\u0026gt;\u003c/span\u003eMoringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e. It's a great place to learn web development skills!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eanchor tag\u003c/strong\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e, creates a link to the address at the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehref\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute, or\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehypertext reference\u003c/em\u003e. An attribute is something that further defines what a tag does - in this case, it tells the link where to go.\u003c/p\u003e\r\n\u003cp\u003eHere's how the link should render in the browser:\u003c/p\u003e\r\n\u003cp\u003eCheck out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringaschool.com/\"\u003eMoringa School\u003c/a\u003e. It's a great place to learn web development skills!\u003c/p\u003e\r\n\u003cp\u003eWe can also use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag to link from one document to another. For example, if you've been following along with the exercises and have\u003cspan\u003e \u003c/span\u003e\u003cem\u003efavorite-things.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein your project directory, you can link to it from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elike this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere is a link to my \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"favorite-things.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003efavorite things\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn this link, instead of supplying a full path, we've provided a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003erelative path\u003c/strong\u003e. In other words, if a link doesn't start with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://\u003c/code\u003e, or a few other specific protocols you may come across), your web browser will look in the same folder as the HTML document folder for the file in the link.\u003c/p\u003e\r\n\u003cp\u003eThis brings up a pitfall you should be careful to avoid: if you write a link like this:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;a href=\"www.moringaschool.com\"\u0026gt;link\u0026lt;/a\u0026gt;\u003c/code\u003e, it will look for a file named \"www.moringaschool.com\" in the current directory. If you're linking to another website, remember to start it with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eImages\u003c/h2\u003e\r\n\u003cp\u003eLet's learn about one more inline tag, which will allow us to add images to the page. Find an image of an elephant online, save it in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder with the name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelephant.jpg\u003c/code\u003e, and then display it on our page like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"elephant.jpg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"A photo of an elephant\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag is a little different than the other tags that we've seen: it's\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eself-closing\u003c/strong\u003e, meaning that it does not need a closing tag - in other words, it doesn't need one of these:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/img\u0026gt;\u003c/code\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc\u003c/code\u003eattribute tells the tag where to find the image, and is required.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute is typically a description of the image, and is optional. However, it's a good idea to include for a few reasons. First, if the image fails to load, the user can hover the mouse over the image's area and read the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etext for a description of the image. Second, visually impaired users often browse the web with the aid of screen reading software. When you include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealt\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute, the screen reading software can read the image's description out loud to the user.\u003c/p\u003e\r\n\u003cp\u003eTypically, websites will store their images in a separate folder from the rest of the HTML. Create a folder named\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimages\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the main project directory and move the image there.\u003c/p\u003e\r\n\u003cp\u003eThe project directory should look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-16-hello_world_folder_structure.png\" alt=\"MP-W1D1-16-hello_world_folder_structure.png\" width=\"257\" height=\"178\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1345\" data-api-returntype=\"File\"\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eNow let's update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag so that knows where to find the image:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"images/elephant.jpg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"A photo of an elephant\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eimages/elephant.jpg\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells the browser to look in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimages\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder in the current directory and then look for the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eelephant.jpg\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003eRemember to commit and push to GitHub after updating!\u003c/p\u003e","frontPage":false},{"exportId":"monday-arithmetic","title":"Monday: Arithmetic","type":"WikiPage","content":"\u003cp\u003eNow that you have the basics of HTML and CSS under your belt, we're going to start learning our first programming language: JavaScript. Remember, web browsers can only do three things: display content with HTML, style it with CSS, and change what's displayed with JavaScript. Because all browsers support JavaScript, it's the de facto programming language of the web.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eWe're going to take a detour away from the aesthetically pleasing and obviously useful world of web pages, so that we can learn some programming fundamentals. But don't worry! We'll be back in no time.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eLike earlier, I'm going to assume you're using Google Chrome for these lessons. Chrome includes a nice little console that lets you type in JavaScript code. To access it, click on the ☰ button, go to the \u003cem\u003eMore Tools\u003c/em\u003e menu, and click \u003cem\u003eDeveloper Tools\u003c/em\u003e. Go to the \u003cem\u003eConsole\u003c/em\u003e tab on the window that pops up at the bottom of the screen. As a shortcut, you can also press \u003cem\u003eCmd\u003c/em\u003e + \u003cem\u003eOption\u003c/em\u003e + \u003cem\u003eJ\u003c/em\u003e on a Mac or \u003cem\u003eCtrl\u003c/em\u003e + \u003cem\u003eShift\u003c/em\u003e + \u003cem\u003eI\u003c/em\u003e on a PC.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eHere at the \u003ccode\u003e\u0026gt;\u003c/code\u003e prompt, you can type JavaScript and see what it does. Try typing 1 + 2; and pressing \u003cem\u003eEnter\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eCongratulations! You just ran your first JavaScript code.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eYou should see something like:\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eDon't you dare copy \u0026amp; paste!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u0026gt; 1 + 2;\u003cbr\u003e\u003c/code\u003e\u003ccode\u003e\u003c/code\u003e\u003ccode\u003e3\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJavaScript took your code\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e1 + 2\u003c/code\u003e evaluated it, and returned the result: 3.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThe semicolon at the end of the line tells JavaScript to run everything before it. You'd think JavaScript would know on its own, wouldn't you?\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eNow try these:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e4 - 3;\u003c/li\u003e\r\n\u003cli\u003e5 * 6;\u003c/li\u003e\r\n\u003cli\u003e10 / 2;\u003c/li\u003e\r\n\u003cli\u003e9 / 2;\u003c/li\u003e\r\n\u003cli\u003e7 + 8 * 9;\u003c/li\u003e\r\n\u003cli\u003e(7 + 8) * 9;\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTry some other arithmetic yourself. Play around with the \u003ccode\u003e%\u003c/code\u003e operator, called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emodulo\u003c/strong\u003e. It will give you the remainder of dividing two numbers. Don't be fooled into thinking it has something to do with percentages! \u003ccode\u003e+\u003c/code\u003e,\u003ccode\u003e-\u003c/code\u003e,\u003ccode\u003e*\u003c/code\u003e,/, and \u003ccode\u003e%\u003c/code\u003e are called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eoperators\u003c/strong\u003e. An operator is a special character (or characters) that indicates an action to be performed. Try dividing 0 by 0. The result,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e, stands for\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot a number\u003c/em\u003e. In JavaScript,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis actually considered a type of number (bizarre as that may seem). Try dividing any other number by 0. The result,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eInfinity\u003c/code\u003e, is also a number in JavaScript.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-readme-practice","title":"Tuesday: README practice","type":"WikiPage","content":"\u003cp\u003eGoal: Add some READMEs to your projects and understand what goes into them.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat are some features that make up a good README?\u003c/li\u003e\r\n\u003cli\u003eHow is Markdown similar to HTML? How is it different?\u003c/li\u003e\r\n\u003cli\u003eWhat is an open source license? Why is it a good idea to include one?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eAdd a README to one of each of you and your partner's projects.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-apis-and-ajax","title":"Tuesday: APIs and AJAX","type":"WikiPage","content":"\u003ch1\u003eUsing an API\u003c/h1\u003e\r\n\u003cp\u003eIn this lesson, we're going to learn how to use 3rd party web APIs in our JavaScript applications. API stands for \"Application Programming Interface\", and just means a way for programmers to program something. A web API is a way to program something by making web requests. In our case, we'll use web APIs to programmatically retrieve data from web backends.\u003c/p\u003e\r\n\u003ch2\u003eAJAX\u003c/h2\u003e\r\n\u003cp\u003eWe are going to be using AJAX to make our web requests. AJAX stands for \"Asynchronous JavaScript And XML\".\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAJAX\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a technique which allows you to make web requests without a page reload. One example of this is rating a movie on Netflix. When you give \"Star Wars: the Phantom Menace\" 1 star, there is an AJAX request made to the Netflix server saying \"Save the following information: UserX thinks Star Wars: the Phantom Menace was worth 1 star!\" With an AJAX request, this happens in the background without reloading your page, so that you can keep browsing movies in peace.\u003c/p\u003e\r\n\u003ch3\u003eSame Origin Policy and AJAX\u003c/h3\u003e\r\n\u003cp\u003eBy default, browsers use the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\"Same Origin Policy\"\u003c/strong\u003e, a security measure that only allows a web page to make AJAX requests to the same domain it was loaded from. To see the security problem with allowing cross-origin requests, imagine that you are logged into your bank. Your bank will trust requests that come from your web browser, since you're logged in. Now, you visit a malicious website, and it makes an AJAX request to your bank to transfer all your money out of your bank account. Thanks to the Same Origin Policy, your browser will block the request before it ever happens.\u003c/p\u003e\r\n\u003cp\u003eHowever, there are often cases where it's just fine to make a cross-origin request. For example, the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://openweathermap.org/\" target=\"_blank\"\u003eOpen Weather Map API\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewants\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto make its data available to any website, from any domain. To facilitate this, modern servers and browsers implement the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eCross-Origin Resource Sharing (CORS) standard\u003c/strong\u003e, in which the server can specify which domains are allowed to make AJAX requests to it. In the case of the Open Weather Map API, all domains are allowed.\u003c/p\u003e\r\n\u003ch2\u003eImplementing an API\u003c/h2\u003e\r\n\u003cp\u003eLet's create a little page for finding the current humidity in a city of the user's choice.\u003c/p\u003e\r\n\u003ch3\u003eHTML\u003c/h3\u003e\r\n\u003cp\u003eFor now, we can link to it from our pingpong app's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epage. We'll create a new one called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eweather.html\u003c/em\u003e, and we can leave it in the top level of our project directory for now. We will also load the same dependencies in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags as we do in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cdiv\u003eweather.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"build/css/vendor.css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"build/js/vendor.min.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"build/js/app.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eWeather\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eGet Weather Conditions From Anywhere!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"location\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEnter a location:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"location\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn-success\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"weatherLocation\"\u003c/span\u003e\u0026gt;\u003c/span\u003eGet Current Humidity!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"showWeather\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe page displays a form for a user to enter the name of a city. When they click a button, we are going to use jQuery to make an AJAX request in the background to the Open Weather Map API. We will then display the current humidity for that city. We can link to this page by adding an anchor tag to our pingpong app's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epage.\u003c/p\u003e\r\n\u003cdiv\u003eindex.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"weather.html\"\u003c/span\u003e\u0026gt;\u003c/span\u003eClick for the weather...\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eGulp Tasks\u003c/h3\u003e\r\n\u003cp\u003eAlso, now that we have more than one HTML file to keep track of, let's add a watcher to our server for HTML files. Remember to restart the server after changing the gulpfile.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003egulp.task(\u003cspan class=\"hljs-string\"\u003e'serve'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  browserSync.init({\r\n    server: {\r\n      baseDir: \u003cspan class=\"hljs-string\"\u003e\"./\"\u003c/span\u003e,\r\n      index: \u003cspan class=\"hljs-string\"\u003e\"index.html\"\u003c/span\u003e\r\n    }\r\n  });\r\n\r\n  gulp.watch([\u003cspan class=\"hljs-string\"\u003e'js/*.js'\u003c/span\u003e], [\u003cspan class=\"hljs-string\"\u003e'jsBuild'\u003c/span\u003e]);\r\n  gulp.watch([\u003cspan class=\"hljs-string\"\u003e'bower.json'\u003c/span\u003e], [\u003cspan class=\"hljs-string\"\u003e'bowerBuild'\u003c/span\u003e]);\r\n  gulp.watch([\u003cspan class=\"hljs-string\"\u003e'*.html'\u003c/span\u003e], [\u003cspan class=\"hljs-string\"\u003e'htmlBuild'\u003c/span\u003e]);\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we'll add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehtmlBuild\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask:\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003egulp.task(\u003cspan class=\"hljs-string\"\u003e'htmlBuild'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  browserSync.reload();\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis one is simpler than the other build tasks because there aren't any dependency tasks. We just want to reload the browser any time our HTML files change.\u003c/p\u003e\r\n\u003ch3\u003eAPI Keys\u003c/h3\u003e\r\n\u003cp\u003eNext, we'll need to sign up for a free account at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://openweathermap.org/\" target=\"_blank\"\u003ethe Open Weather Map website\u003c/a\u003e. We will be provided with an API key that we can use to access their data when we make our AJAX request. Let's check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://openweathermap.org/current\" target=\"_blank\"\u003eAPI docs for getting the current weather\u003c/a\u003e. From their example, we can see that the request should look something like:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-symbol\"\u003ehttp:\u003c/span\u003e/\u003cspan class=\"hljs-regexp\"\u003e/api.openweathermap.org/data\u003c/span\u003e\u003cspan class=\"hljs-regexp\"\u003e/2.5/weather\u003c/span\u003e?q=\u003cspan class=\"hljs-constant\"\u003eLondon\u003c/span\u003e,uk\u0026amp;appid=\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003ecd9353e5a1fe51e7565fa314b08c5d6\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll just want to replace\u003cspan\u003e \u003c/span\u003e\u003cem\u003eLondon\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith the city we're searching for, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003e3cd9353e5a1fe51e7565fa314b08c5d6\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith our own API key.\u003c/p\u003e\r\n\u003ch3\u003eJavaScript\u003c/h3\u003e\r\n\u003cp\u003eLet's add a new client side JavaScript file to actually do the work of making the AJAX request. Since we want to use it in the browser, we want this new file to get added to our final concatenated, browserified, minified\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. So we must follow the naming conventions that we set up in our gulpfile - it must end in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-interface.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand we must place it in our development\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder. Let's name it\u003cspan\u003e \u003c/span\u003e\u003cem\u003eweather-interface.js\u003c/em\u003e.\u003c/p\u003e\r\n\u003cdiv\u003eweather-interface.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"js hljs javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e apiKey = \u003cspan class=\"hljs-string\"\u003e\"YOUR-API-KEY-GOES-HERE\"\u003c/span\u003e;\r\n\r\n$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e'#weatherLocation'\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e city = $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val();\r\n    $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"The city you have chosen is \"\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e);\r\n  });\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe start by declaring a variable to hold our API key. Then, we attach a click handler to the button in our html to get the city name entered into our form. Then, we display it in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eshowWeather\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand clear the old text out of the form. This way we can make sure all our files are named correctly, and our gulp tasks are running correctly before we tackle the API request. Note that for extra jQuery practice we are simply using a click handler, not a form submission.\u003c/p\u003e\r\n\u003cp\u003eNow, inside the click handler, we're going to add in a call to the API using the jQuery method\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eget\u003c/code\u003e.\u003c/p\u003e\r\n\u003cdiv\u003eweather-interface.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"js hljs javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e apiKey = \u003cspan class=\"hljs-string\"\u003e\"YOUR-API-KEY-GOES-HERE\"\u003c/span\u003e;\r\n\r\n$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e'#weatherLocation'\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e city = $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val();\r\n    $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"The city you have chosen is \"\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e\".\"\u003c/span\u003e);\r\n    $.get(\u003cspan class=\"hljs-string\"\u003e'http://api.openweathermap.org/data/2.5/weather?q='\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e'\u0026amp;appid='\u003c/span\u003e + apiKey, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresponse\u003c/span\u003e) \u003c/span\u003e{\r\n      \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(response);\r\n    });\r\n  });\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe jQuery\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eget\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod makes a GET request using AJAX. It takes 2 arguments. The first is the URL to make the request to. This is basically the same URL we looked at earlier, just with variables for the city and the API key. The second argument is a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecallback function\u003c/strong\u003e. Remember that a callback function is a function that is called when something else happens - in this case, when the API has returned a response to our request. The parameter to the callback function,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresponse\u003c/code\u003e, will be assigned to the data returned from the API. We can print it out in the console and see that it is a large set of objects.\u003c/p\u003e\r\n\u003cp\u003eLet's enter \"Portland, OR\" into the form and press the button.\u003c/p\u003e\r\n\u003ch3\u003eAPI Responses and JSON\u003c/h3\u003e\r\n\u003cp\u003eThis data is in the JSON format.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eJSON\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003estands for JavaScript Object Notation, and is basically a way of representing data that looks like JavaScript objects. We are console logging the raw response data in the above example. It should look something like this in your console:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e\u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e {coord: \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e, weather: \u003cspan class=\"hljs-built_in\"\u003eArray\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e], base: \u003cspan class=\"hljs-string\"\u003e\"cmc stations\"\u003c/span\u003e, main: \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e, wind: \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e…}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe jQuery\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eget\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will automatically turn a JSON response into a JavaScript object that we can work with. We can click on the little triangle next to an object logged to the console in the browser to 'unfold it' and dig inside to see what data it contains. The first property has the name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecoord\u003c/code\u003e, and its value is another object. The next property is \"weather\". There is an array stored as its value. We can tell by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e[1]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat it has one element at index\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e0\u003c/code\u003e. We can look inside arrays at their elements by clicking on the little expanding triangle next to them too.\u003c/p\u003e\r\n\u003cp\u003eAlthough it's convenient that jQuery turned the JSON response into a JavaScript object for us, for learning purposes it's nice to see what the raw JSON looks like. We can also use the following line to turn the JavaScript object back into JSON and log it to the console:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"js hljs javascript\"\u003e\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-built_in\"\u003eJSON\u003c/span\u003e.stringify(response));\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere we are printing the result of passing our response data into the JSON\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estringify\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, which just turns it into a string, which we can copy out of the console:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs json\"\u003e{\"\u003cspan class=\"hljs-attribute\"\u003ecoord\u003c/span\u003e\":\u003cspan class=\"hljs-value\"\u003e{\"\u003cspan class=\"hljs-attribute\"\u003elon\u003c/span\u003e\":-\u003cspan class=\"hljs-number\"\u003e122.68\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003elat\u003c/span\u003e\":\u003cspan class=\"hljs-number\"\u003e45.52\u003c/span\u003e}\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003eweather\u003c/span\u003e\":\u003cspan class=\"hljs-value\"\u003e[{\"\u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e\":\u003cspan class=\"hljs-number\"\u003e804\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003emain\u003c/span\u003e\":\u003cspan class=\"hljs-string\"\u003e\"Clouds\"\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003edescription\u003c/span\u003e\":\u003cspan class=\"hljs-string\"\u003e\"overcast clouds\"\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003eicon\u003c/span\u003e\":\u003cspan class=\"hljs-string\"\u003e\"04n\"\u003c/span\u003e}]\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003ebase\u003c/span\u003e\":\u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"cmc stations\"\u003c/span\u003e\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003emain\u003c/span\u003e\":\u003cspan class=\"hljs-value\"\u003e{\"\u003cspan class=\"hljs-attribute\"\u003etemp\u003c/span\u003e\":\u003cspan class=\"hljs-number\"\u003e283.314\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003epressure\u003c/span\u003e\":\u003cspan class=\"hljs-number\"\u003e998.82\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003ehumidity\u003c/span\u003e\":\u003cspan class=\"hljs-number\"\u003e78\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003etemp_min\u003c/span\u003e\":\u003cspan class=\"hljs-number\"\u003e283.314\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003etemp_max\u003c/span\u003e\":\u003cspan class=\"hljs-number\"\u003e283.314\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003esea_level\u003c/span\u003e\":\u003cspan class=\"hljs-number\"\u003e1034.07\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003egrnd_level\u003c/span\u003e\":\u003cspan class=\"hljs-number\"\u003e998.82\u003c/span\u003e}\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003ewind\u003c/span\u003e\":\u003cspan class=\"hljs-value\"\u003e{\"\u003cspan class=\"hljs-attribute\"\u003espeed\u003c/span\u003e\":\u003cspan class=\"hljs-number\"\u003e3.41\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003edeg\u003c/span\u003e\":\u003cspan class=\"hljs-number\"\u003e200.001\u003c/span\u003e}\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003eclouds\u003c/span\u003e\":\u003cspan class=\"hljs-value\"\u003e{\"\u003cspan class=\"hljs-attribute\"\u003eall\u003c/span\u003e\":\u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e}\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003edt\u003c/span\u003e\":\u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-number\"\u003e1454720022\u003c/span\u003e\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003esys\u003c/span\u003e\":\u003cspan class=\"hljs-value\"\u003e{\"\u003cspan class=\"hljs-attribute\"\u003emessage\u003c/span\u003e\":\u003cspan class=\"hljs-number\"\u003e0.0098\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003ecountry\u003c/span\u003e\":\u003cspan class=\"hljs-string\"\u003e\"US\"\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003esunrise\u003c/span\u003e\":\u003cspan class=\"hljs-number\"\u003e1454772354\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003esunset\u003c/span\u003e\":\u003cspan class=\"hljs-number\"\u003e1454808255\u003c/span\u003e}\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e\":\u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-number\"\u003e5746545\u003c/span\u003e\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e\":\u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"Portland\"\u003c/span\u003e\u003c/span\u003e,\"\u003cspan class=\"hljs-attribute\"\u003ecod\u003c/span\u003e\":\u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e\u003c/span\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can then paste this into a\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsonprettyprint.com/\" target=\"_blank\"\u003eJSON pretty printer like this one\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand get something a lot easier to explore:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"js hljs javascript\"\u003e{\r\n  \u003cspan class=\"hljs-string\"\u003e\"coord\"\u003c/span\u003e: {\r\n    \u003cspan class=\"hljs-string\"\u003e\"lon\"\u003c/span\u003e: -\u003cspan class=\"hljs-number\"\u003e122.68\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"lat\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e45.52\u003c/span\u003e\r\n  },\r\n  \u003cspan class=\"hljs-string\"\u003e\"weather\"\u003c/span\u003e: [\r\n    {\r\n      \u003cspan class=\"hljs-string\"\u003e\"id\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e501\u003c/span\u003e,\r\n      \u003cspan class=\"hljs-string\"\u003e\"main\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"Rain\"\u003c/span\u003e,\r\n      \u003cspan class=\"hljs-string\"\u003e\"description\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"moderate rain\"\u003c/span\u003e,\r\n      \u003cspan class=\"hljs-string\"\u003e\"icon\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"10n\"\u003c/span\u003e\r\n    }\r\n  ],\r\n  \u003cspan class=\"hljs-string\"\u003e\"base\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"cmc stations\"\u003c/span\u003e,\r\n  \u003cspan class=\"hljs-string\"\u003e\"main\"\u003c/span\u003e: {\r\n    \u003cspan class=\"hljs-string\"\u003e\"temp\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e280.557\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"pressure\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e999.59\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"humidity\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e99\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"temp_min\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e280.557\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"temp_max\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e280.557\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"sea_level\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1035.08\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"grnd_level\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e999.59\u003c/span\u003e\r\n  },\r\n  \u003cspan class=\"hljs-string\"\u003e\"wind\"\u003c/span\u003e: {\r\n    \u003cspan class=\"hljs-string\"\u003e\"speed\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e4.77\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"deg\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e209.501\u003c/span\u003e\r\n  },\r\n  \u003cspan class=\"hljs-string\"\u003e\"rain\"\u003c/span\u003e: {\r\n    \u003cspan class=\"hljs-string\"\u003e\"3h\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e5.85\u003c/span\u003e\r\n  },\r\n  \u003cspan class=\"hljs-string\"\u003e\"clouds\"\u003c/span\u003e: {\r\n    \u003cspan class=\"hljs-string\"\u003e\"all\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e92\u003c/span\u003e\r\n  },\r\n  \u003cspan class=\"hljs-string\"\u003e\"dt\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1454724246\u003c/span\u003e,\r\n  \u003cspan class=\"hljs-string\"\u003e\"sys\"\u003c/span\u003e: {\r\n    \u003cspan class=\"hljs-string\"\u003e\"message\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e0.0031\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"country\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"US\"\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"sunrise\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1454772350\u003c/span\u003e,\r\n    \u003cspan class=\"hljs-string\"\u003e\"sunset\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e1454808259\u003c/span\u003e\r\n  },\r\n  \u003cspan class=\"hljs-string\"\u003e\"id\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e5746545\u003c/span\u003e,\r\n  \u003cspan class=\"hljs-string\"\u003e\"name\"\u003c/span\u003e: \u003cspan class=\"hljs-string\"\u003e\"Portland\"\u003c/span\u003e,\r\n  \u003cspan class=\"hljs-string\"\u003e\"cod\"\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can see that the humidity percent we want is inside of the object stored in the property \"main\", under the property \"humidity\". We can access it with dot notation:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresponse.main.humidity\u003c/code\u003e. We will display this in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eshowWeather\u003c/code\u003e. We can also remove the line we used for testing purposes where we displayed the chosen city.\u003c/p\u003e\r\n\u003cdiv\u003eweather-interface.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"js hljs javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e apiKey = \u003cspan class=\"hljs-string\"\u003e\"YOUR-API-KEY-GOES-HERE\"\u003c/span\u003e;\r\n\r\n$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e'#weatherLocation'\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e city = $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val();\r\n    $(\u003cspan class=\"hljs-string\"\u003e'#location'\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $.get(\u003cspan class=\"hljs-string\"\u003e'http://api.openweathermap.org/data/2.5/weather?q='\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e'\u0026amp;appid='\u003c/span\u003e + apiKey, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eresponse\u003c/span\u003e) \u003c/span\u003e{\r\n      $(\u003cspan class=\"hljs-string\"\u003e'.showWeather'\u003c/span\u003e).text(\u003cspan class=\"hljs-string\"\u003e\"The humidity in \"\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e\" is \"\u003c/span\u003e + response.main.humidity + \u003cspan class=\"hljs-string\"\u003e\"%\"\u003c/span\u003e);\r\n    });\r\n  });\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd that's all it takes to start using a web API! We've used the jQuery method\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eget\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto send the AJAX request to a CORS-compatible server, and we've learned how to parse the JSON sent from the API in response.\u003c/p\u003e","frontPage":false},{"exportId":"monday-npm-and-gulp-npm-packages","title":"Monday: NPM and Gulp NPM Packages","type":"WikiPage","content":"\u003ch1\u003eIntroducing Npm and Gulp\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003ch3\u003eGoals\u003c/h3\u003e\r\n\u003cp\u003eIn this lesson we're going to start using the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eNode Package Manager\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enpm\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto install tools from the command line for use in our project. When we installed Node.js, npm was\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einstalled automatically.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eInitializing npm\u003c/h2\u003e\r\n\u003cp\u003eWhenever we start a new project we need to run the following command from the top level of our project directory to begin using npm:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e$ \u003cspan class=\"hljs-built_in\"\u003enpm\u003c/span\u003e init\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis creates a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emanifest\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003efile which is where npm stores a list of packages needed for the project, along with which versions we need. Think of this file as a grocery store list for your project - it keeps track of all the third party packages that it needs to run.\u003c/p\u003e\r\n\u003cp\u003eWe'll be prompted to enter some information as we create this file. For\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ename\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe can type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eping-pong\u003c/code\u003eand then press enter. Other than that, we can press enter at each prompt to leave all the defaults. You can always edit this file later. It should look like this:\u003c/p\u003e\r\n\u003cdiv\u003epackage.json\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs json\"\u003e{\r\n    \"\u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"ping-pong\"\u003c/span\u003e\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003eversion\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"1.0.0\"\u003c/span\u003e\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003edescription\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003emain\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"index.js\"\u003c/span\u003e\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003edirectories\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e{\r\n        \"\u003cspan class=\"hljs-attribute\"\u003etest\u003c/span\u003e\": \u003cspan class=\"hljs-string\"\u003e\"test\"\u003c/span\u003e\r\n    }\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003escripts\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e{\r\n        \"\u003cspan class=\"hljs-attribute\"\u003etest\u003c/span\u003e\": \u003cspan class=\"hljs-string\"\u003e\"echo \\\"Error: no test specified\\\" \u0026amp;\u0026amp; exit 1\"\u003c/span\u003e\r\n    }\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003eauthor\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003elicense\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"ISC\"\u003c/span\u003e\r\n\u003c/span\u003e}\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\u003ch2\u003eGroup Project Development\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eFor the next four days you'll exercise all the coding knowledge you've gained over the last 4 weeks by working in groups of four on the cumulative group project you signed up for. At the end of the week we'll present these projects at our group project presentation day.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eBefore you begin coding, review the suggested workflow below, and complete the first three steps with your group:\u003c/p\u003e\r\n\u003ch3\u003eWorkflow\u003c/h3\u003e\r\n\u003ch4\u003e1. Planning\u003c/h4\u003e\r\n\u003cp\u003eDecide upon goals for your app. Separate all goals into three general categories:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eThings we\u003cspan\u003e \u003c/span\u003e\u003cem\u003eneed\u003c/em\u003e\u003c/strong\u003e: Features and functionalities absolutely essential to the application. Or, the minimum viable product (MVP). An MVP is a demonstrable prototype of your idea with basic and essential core elements in place.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eThings we\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewant\u003c/em\u003e\u003c/strong\u003e: Goals that aren't necessary for the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eminimum\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eviable product, but are still important to your team and overall quality of your application.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eThings on our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewishlist\u003c/em\u003e\u003c/strong\u003e: Goals that are non-essential, but would be great to include if there's enough time. This often includes fun bonus features, and exploring new technologies.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003e2. Wire-framing\u003c/h4\u003e\r\n\u003cp\u003eWith the 'things we need' or MVP in mind, brainstorm the 'flow' of your application. This doesn't necessarily mean the styling, but\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea user will interact with your site. What will greet them on the homepage? Where will they go in order to see X, Y, or Z? How many pages or sections will your site contain? Draft up a general idea of how you'd like today's project to work.\u003c/p\u003e\r\n\u003ch4\u003e3. Gameplan\u003c/h4\u003e\r\n\u003cp\u003eAgree upon what each pair will work on. Begin with core functionality outlined in your \"things we need\" list. Remember, pairs shouldn't\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efocus on the concepts they're already good at, but should also take this opportunity to practice the ones they may not yet feel confident in.\u003c/p\u003e\r\n\u003cp\u003eAlso, discuss\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eeach pair will complete the tasks assigned to them. Will they create constructors? Prototypes? Begin implementing user interface logic?\u003c/p\u003e\r\n\u003ch4\u003e4. Code\u003c/h4\u003e\r\n\u003cp\u003eOn separate branches, begin coding in two groups of two. Remember to commit frequently, including clear and descriptive messages. Review the previous lessons' content for reference, if necessary.\u003c/p\u003e\r\n\u003ch4\u003e5. Review and Merge\u003c/h4\u003e\r\n\u003cp\u003eAfter one group has completed a main feature or requirement listed above, review their code together as a team. Provide constructive feedback. Is it well-refactored? Does it complete the task at hand? Is it easy to follow?\u003c/p\u003e\r\n\u003cp\u003eMerge this code into your master branch after everyone has had the opportunity to review it. No code should enter the master branch without being reviewed, refactored, and discussed. Assess and resolve any merge conflicts as a team.\u003c/p\u003e\r\n\u003ch4\u003e6. Repeat!\u003c/h4\u003e\r\n\u003cp\u003eRepeat steps 4 and 5 for each feature. As the project develops, you may need to re-assess goals. Sometimes features we expected to complete quickly end up taking the longest. Sometimes the things we anticipate being the most challenging are finished surprisingly quickly. Continue to merge after the completion of each main feature. After you've integrated all \"things we need\" goals, move on to \"things we want\", and eventually \"wishlist\" goals.\u003c/p\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eGroup Project Development\u003c/h3\u003e\r\n\u003cp\u003eFor the next three days, the project is up to you!\u003c/p\u003e\r\n\u003cp\u003eRegardless of what your group is creating; continue writing plain English specs, committing frequently with descriptive messages, keeping business and user interface logic well separated, and including a detailed README. This will be the first larger project in your growing portfolio, make it something you're proud to show off!\u003c/p\u003e\r\n\u003cp\u003eKeep in mind that groups must present their projects at our final project presentations on Friday, and each individual group member must submit the project as their code review this week before the end of the day on Friday.\u003c/p\u003e\r\n\u003ch2\u003eGroup Debrief\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eDiscuss the following with your teammates at the end of each day:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat did we accomplish today?\u003c/li\u003e\r\n\u003cli\u003eWhat went well?\u003c/li\u003e\r\n\u003cli\u003eWhat could have gone better? How can we avoid similar issues tomorrow?\u003c/li\u003e\r\n\u003cli\u003eWhere are we in terms of our needs/wants/wishlist items? Do we need to adjust these for any reason?\u003c/li\u003e\r\n\u003cli\u003eWhat should we focus on tomorrow, and how should this work be divvied up?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; 9ec90cab07f6d534f167a17fb7ff86176c507ac7 \r\n \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\r\n\u003cdiv\u003e\r\n\u003ch3\u003eInstalling npm Packages\u003c/h3\u003e\r\n\u003cp\u003eNow, let's install our first package:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003egulp\u003c/strong\u003e. Gulp is a JavaScript package that runs development tasks for us.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ npm \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e gulp \u003cspan class=\"hljs-comment\"\u003e--save-dev\u003c/span\u003e\r\n        \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOne command is all we need to download a package using npm.\u003c/p\u003e\r\n\u003ch3\u003eWhat is gulp? How is it related to npm?\u003c/h3\u003e\r\n\u003cp\u003eGulp will be in charge of optimizing our code and packaging it up in a format that the browser can understand. While it is an npm package itself, it will also be in charge of using all the other npm packages that we will download later.\u003c/p\u003e\r\n\u003cp\u003eThink of gulp as an orchestra conductor. You are the all powerful composer of your program - in our orchestra example you wrote the actual sheet music for the symphony to play. But gulp is the one in charge of telling the horn section when to start, then telling the flute section that it's their turn next, etc.\u003c/p\u003e\r\n\u003cp\u003eIn our orchestra example, npm is the stage hand. It is in charge of actually getting the musicians out of their hotel rooms and telling them to sit in the correct places on stage. It downloads code for us.\u003c/p\u003e\r\n\u003cp\u003eWhen we run the above command, npm will create a\u003cspan\u003e \u003c/span\u003e\u003cem\u003enode_modules\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder in our project, and install the\u003cspan\u003e \u003c/span\u003e\u003cem\u003egulp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epackage in it. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e--save-dev\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eflag will save the\u003cspan\u003e \u003c/span\u003e\u003cem\u003egulp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epackage to the \"shopping list\" in our manifest file, which is called\u003cspan\u003e \u003c/span\u003e\u003cem\u003epackage.json\u003c/em\u003e. It should now look like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs json\"\u003e{\r\n    \"\u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"ping-pong\"\u003c/span\u003e\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003eversion\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"1.0.0\"\u003c/span\u003e\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003edescription\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003emain\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"index.js\"\u003c/span\u003e\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003escripts\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e{\r\n        \"\u003cspan class=\"hljs-attribute\"\u003etest\u003c/span\u003e\": \u003cspan class=\"hljs-string\"\u003e\"echo \\\"Error: no test specified\\\" \u0026amp;\u0026amp; exit 1\"\u003c/span\u003e\r\n    }\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003eauthor\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003elicense\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"ISC\"\u003c/span\u003e\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003edevDependencies\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e{\r\n        \"\u003cspan class=\"hljs-attribute\"\u003egulp\u003c/span\u003e\": \u003cspan class=\"hljs-string\"\u003e\"^3.9.1\"\u003c/span\u003e\r\n    }\r\n\u003c/span\u003e}\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can see that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas been added under \"devDependencies\". This stands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edevelopment dependency\u003c/strong\u003e, which means it will be used in app development, not in production in the browser. When we downloaded\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe used the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e--save-dev\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eflag, because gulp isn't actually a part of our app. It is only used in the build process. By separating out dependencies that are used in the final production app for users from dependencies that are just used in developing the app (such as gulp), the production app can be smaller and faster.\u003c/p\u003e\r\n\u003cp\u003eNpm also keeps track of which version of each package we need - we can see it is listed as version 3.9.1 (at the time of this writing).\u003c/p\u003e\r\n\u003c/div\u003e\r\n \r\n \r\n\u003cdiv\u003e\r\n\u003ch3\u003eMore Packages: Browserify\u003c/h3\u003e\r\n\u003cp\u003eLet's download another package with npm! This one is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebrowserify\u003c/strong\u003e. Again, in the command line we want to make sure we are in the top level of our project directory, and then enter the following command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ npm \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e browserify \u003cspan class=\"hljs-comment\"\u003e--save-dev\u003c/span\u003e\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we look inside of\u003cspan\u003e \u003c/span\u003e\u003cem\u003epackage.json\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eagain, we will see that \"browserify\" is also listed under \"devDependencies\".\u003c/p\u003e\r\n\u003ch3\u003eWhy browserify?\u003c/h3\u003e\r\n\u003cp\u003eIf we run\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the browser again at this point, it will complain about two things before we even submit our form:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003eUncaught \u003cspan class=\"hljs-attribute\"\u003eReferenceError\u003c/span\u003e: exports \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e defined\r\nUncaught \u003cspan class=\"hljs-attribute\"\u003eReferenceError\u003c/span\u003e: \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e defined\u003c/code\u003e\u003c/pre\u003e\r\n\u003cbr\u003e\r\n\u003cp\u003eThis is because both the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword and the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eexports\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword are provided by Node and aren't available in the browser. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrowserify\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage is responsible for using these keywords to translate the code into JavaScript our browser does understand. It follows each file path used by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elike a treasure map and collects all the code into some less readable code that will make sense to our browser.\u003c/p\u003e\r\n\u003cp\u003eWe will learn how to actually use gulp to run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrowserify\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the next lesson.\u003c/p\u003e\r\n\u003ch3\u003eManifest Best Practices\u003c/h3\u003e\r\n\u003cp\u003eIt's a best practice to have all of our packages listed in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003epackage.json\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile under version control and not to include the packages themselves. This keeps the size of our repository small.\u003c/p\u003e\r\n\u003c/div\u003e\r\n \r\n \r\n\u003cdiv\u003e\r\n\u003ch3\u003eIgnoring Packages in Git\u003c/h3\u003e\r\n\u003cp\u003eNext, we'll add a\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore file\u003c/em\u003e. If you haven't used one before, a\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile is a list of folders and files inside your project directory which won't be committed to your Git repository.\u003c/p\u003e\r\n\u003cp\u003eLet's add\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enode_modules/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. Because these packages of code are available for anyone to download, we don't need to push them to our Github repositories. Our manifest will declare which packages our projects require. Anyone who wants to download and run our project will run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ npm install\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto gather their\u003cspan\u003e \u003c/span\u003e\u003cem\u003eown\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecopies of these packages. This keeps our project from getting unnecessarily large and always ensures users are receiving up-to-date packages.\u003c/p\u003e\r\n\u003cp\u003eWe'll practice this process more later. But basically:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhen we start a new project, we run the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ npm init\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand.\u003c/li\u003e\r\n\u003cli\u003eThen, we download each package that our project needs using either the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e--save-dev\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eflag for development dependencies or the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e--save\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eflag for dependencies that are used in production. We actually won't be using npm for production dependencies in this class, but it's good to know what the flag means.\u003c/li\u003e\r\n\u003cli\u003eCommit the\u003cspan\u003e \u003c/span\u003e\u003cem\u003epackage.json\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile with the project but not the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enode_modules/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/li\u003e\r\n\u003cli\u003eWhen we clone a project to continue working on it, we simply run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ npm install\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand all packages saved to the manifest file will be downloaded into a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enode_modules/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eHere is an example\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. This should go in the top level of your project folder.\u003c/p\u003e\r\n\u003cdiv\u003e.gitignore\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs\"\u003enode_modules/.DS_Store\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e.DS_Store is just a Mac specific file that doesn't need to be committed with your repository. It looks cleaner without one.\u003c/p\u003e\r\n\u003c/div\u003e\r\n \r\n \r\n\u003ch1\u003eWriting Gulp Tasks\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003ch3\u003eTerminology\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eGulp\u003c/strong\u003e: A JavaScript package that automates development tasks such as running browserify or concatenating JavaScript files.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eCallback function\u003c/strong\u003e: A function that is executed at a particular time; for example, after an event is completed (eg. click handlers in jQuery have callback functions that fire when a target is clicked)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eOverview\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eTo install gulp:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ npm \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e gulp \u003cspan class=\"hljs-comment\"\u003e--save-dev\u003c/span\u003e\r\n$ npm \u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e gulp -g\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWhile you can technically name gulp tasks whatever you'd like, use camelCase and descriptive names to keep things organized and easy to understand.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAll\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elines to import other files and node packages should reside at the top of the file. This is simply common practice, as it's easy to see all dependencies at a glance.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n \r\n \r\n\u003cdiv\u003e\r\n\u003ch3\u003eGoals\u003c/h3\u003e\r\n\u003cp\u003eLet's learn how to actually use gulp. I promise that soon we'll be able to get back to the browser.\u003c/p\u003e\r\n\u003ch3\u003eInstalling Gulp\u003c/h3\u003e\r\n\u003cp\u003eWe already installed gulp with npm inside of our project folder using this command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ npm \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e gulp \u003cspan class=\"hljs-comment\"\u003e--save-dev\u003c/span\u003e\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, we will also need to install gulp globally to use it in the terminal. We do this by using a new flag:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-g\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor \"global\".\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e$ \u003cspan class=\"hljs-built_in\"\u003enpm\u003c/span\u003e install gulp -g\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou'll only need to do this once on your own machine and shouldn't have to do this in the classroom. If you get permission errors when running this command, or any other npm install command that uses the global\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-g\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eflag, you may need to run the command with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esudo\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e$ sudo \u003cspan class=\"hljs-built_in\"\u003enpm\u003c/span\u003e install gulp -g\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eWhen do we need to use the global flag?\u003c/h3\u003e\r\n\u003cp\u003eAnything that we use directly in the terminal (such as Git or npm) needs to be installed globally. When we run a command in the terminal that begins with the name of a program like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit add .\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit commit\u003c/code\u003e, the terminal has to understand the word\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit\u003c/code\u003e. We are saying: \"Hey terminal, find git and make it do things for me.\" In the case of npm, we are saying: \"Hey terminal, find npm and tell it to download things for me.\" Soon, we'll be saying: \"Hey gulp, I need you to do stuff to my code!\" That means we need to install it both globally with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-g\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eflag and locally with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e--save-dev\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eflag as we did in the last lesson. This way it will be saved in our manifest file and will also be accessible to the command line.\u003c/p\u003e\r\n\u003ch1\u003eGulpfile\u003c/h1\u003e\r\n\u003cp\u003eGulp will be looking for a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003egulpfile.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the top level of our project directory, so let's create that now.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e gulp = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'gulp'\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction again (just as we did in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003epingpong-interface.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile) in order to load the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage into a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable that can be used in our code.\u003c/p\u003e\r\n\u003cp\u003eWhen using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire\u003c/code\u003e, it's standard practice to have the variable name be the same as the package name, though technically the variable name could be anything.\u003c/p\u003e\r\n\u003ch3\u003eWriting Gulp Tasks\u003c/h3\u003e\r\n\u003cp\u003eLet's write our first gulp task! Just a small disclaimer: this is not actually a task we would need to write (as you can see, it only contains a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e!) It is merely an exercise to practice writing gulp tasks.\u003c/p\u003e\r\n\u003cp\u003eWe'll add the following lines after the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eline:\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e...\r\n\r\ngulp.task(\u003cspan class=\"hljs-string\"\u003e'myTask'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e'hello gulp'\u003c/span\u003e);\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's break this code down.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHere, we are calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etask\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod defined in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage to create a task. This method takes two arguments:\r\n\u003cul\u003e\r\n\u003cli\u003eThe first is a string representing the name of the task, so we can refer to it later.\u003c/li\u003e\r\n\u003cli\u003eThe second is the function to run when we tell gulp to run this task. In this case the task just prints \"hello gulp\" to the console.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe can run it with this simple command in the terminal (in the top level of your project directory):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egulp myTask\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can name our tasks whatever we want. We could have named this\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eeatApplePie\u003c/code\u003e. However, we should use JavaScript lowerCamelCase naming convention and choose descriptive names because the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulpfile\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecan get long very quickly. For this reason, it's also generally accepted that all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire\u003c/code\u003efunction calls go at the top of the file. This way the developer can see all dependencies at a glance.\u003c/p\u003e\r\n\u003ch3\u003eCallback Functions\u003c/h3\u003e\r\n\u003cp\u003eFinally, passing in a function definition as a parameter to another function is a common pattern, as we did above:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003egulp.task(name, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis function that we are passing in is a callback function. A\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecallback function\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a function which is executed at a particular time, such as after a particular event completes. The callback function we used with our gulp task is executed when we run the task. We've also used callback functions with jQuery when we attached a click handler:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e$( \u003cspan class=\"hljs-string\"\u003e\"#target\"\u003c/span\u003e ).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  alert( \u003cspan class=\"hljs-string\"\u003e\"Target clicked.\"\u003c/span\u003e );\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn this example, we're passing in a callback function which is executed when the target has been clicked.\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"wednesday-help-desk-and-curriculum-feedback","title":"Wednesday: Help Desk and Curriculum Feedback","type":"WikiPage","content":"\u003ch2\u003eCurriculum Feedback\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhile going through the curriculum, we would like to hear of suggestions or error that need to be addressed. This can be done inside the Moringa School LMS, making tracking, assigning and follow up of the feedback much easier.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo give feedback inside the LMS follow the steps in the following images.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Grading/Picture5.png\" alt=\"Picture5.png\" width=\"389\" height=\"628\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/3664\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the global navigation locate the and click the \u003c/span\u003e\u003cstrong\u003eHelp Desk\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e [1] icon then the \u003c/span\u003e\u003cstrong\u003eReport a problem\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e [2]\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003cimg src=\"viewer/files/Grading/Picture6.png\" alt=\"Picture6.png\" width=\"388\" height=\"560\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/3665\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eType a brief title for your feedback in the \u003c/span\u003e\u003cstrong\u003eSubject\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e field [3] and provide more details in the \u003c/span\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e [4] text area. The drop-down menu labeled '\u003c/span\u003e\u003cstrong\u003eHow is this affecting you?\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e' provides additional tags that tell Moringa School the urgency of the feedback\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOnce all the fields have been filled properly[ 3,4,5], click the \u003c/span\u003e\u003cstrong\u003eSubmit ticket \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e[6] button.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNOTE: \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003eTry to make your feedback as constructive as possible. If it is a problem you faced while coding, provide as much detail as you can on \u003c/span\u003e\u003ca href=\"https://whathaveyoutried.com/\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhat you tried\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e. If it is a suggestion on how the content can be improved, please provide actionable steps we can take to implement your feedback.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eGetting Help From Technical Mentors\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eMoringa School LMS has a way to support students such as yourself when doing Help Desk. You can send a message directly to their TM without leaving their course content view.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003cimg src=\"viewer/files/Grading/Picture7.png\" alt=\"Picture7.png\" width=\"382\" height=\"525\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/3666\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the global navigation, click \u003c/span\u003e\u003cstrong\u003eHelp Desk \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e[1], to view a side navigation menu. Click \u003c/span\u003e\u003cstrong\u003eAsk your instructor a question\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e link [2].\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003cimg src=\"viewer/files/Grading/Picture8.png\" alt=\"Picture8.png\" width=\"381\" height=\"340\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/3667\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the drop-down menu [3], select the class to which the question belongs. Type in your message in the \u003c/span\u003e\u003cstrong\u003eMessage\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e text box [4] then the \u003c/span\u003e\u003cstrong\u003eSend message\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e [5] to send your instructor the message.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the \u003c/span\u003e\u003cstrong\u003eMessage\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e text box [4], include the following:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf the question is related to the content, add the link located in the url bar. This will help the instructor know where the question is coming from and to effectively assist you.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eA description of what you were trying to do and ideas that you have used to try and solve the technical challenge\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOnce you are done giving the relevant information, click the \u003c/span\u003e\u003cstrong\u003eSend message [5] \u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003ebutton to send a message to the Technical Mentor assigned to you.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe single most important thing you will learn is \u003c/span\u003e\u003cstrong\u003ehow to teach yourself\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e, and our classroom is constructed to facilitate your learning that skill. This means that your Technical Mentors will never give you the answer, rather, we give you the tools that you need to succeed. You have to figure out how to do it, you have to figure out the answer, and you have to prove why you think your answers are what they are. The only way that you can fail is if you give up. If you continue to persevere, if you continue to try, if you continue to work through problems, you will get the answers and the environment at Moringa will help you. But if you give up, you will fail. You can do it.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"weekend-angular-js-objective","title":"Weekend: Angular JS Objective","type":"WikiPage","content":"\u003ch1\u003eAngular js Objectives\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eIn this section, we will be learning about how to build basic AngularJS apps using Angular 2 and the build tools from last week.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFirst, we'll learn about a new language called TypeScript.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eTypeScript\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a superset of JavaScript. It provides extra tools and syntax for class declarations and data types in order to make code more maintainable, and compiles into regular JavaScript.\u003c/li\u003e\r\n\u003cli\u003eSecond, we’ll learn how to use TypeScript to create\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAngular 2\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eapps. We will continue to use the build tools from last week in our development workflow as well.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eHomework Distribution\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eThis section contains a large amount of homework in the early portion of the week. This is intentional. We have found the best way to internalize it is to spend the entire rest of the week practicing what you see over the weekend. If you don't understand everything at first, don't worry. Get comfortable with the basic ideas first, then slowly hone in on the details. Don't get hung up on any one concept at first glance. Get a feel for the syntax and the structure used in TypeScript and Angular 2. As you practice using these tools the smaller details will become clearer.\u003c/p\u003e\r\n\u003cp\u003eIn our first discussion of TypeScript syntax, put your focus on basic variable\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003etype annotations\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eclass declarations\u003c/strong\u003e. Interfaces and inheritance are very useful and interesting topics, and you should be familiar for later when you may encounter them, but you will use them less frequently.\u003c/p\u003e\r\n\u003cp\u003eAs we progress to the Angular 2 lessons, you will see that there are a lot of them, but each lesson is fairly brief. They are intended to be a guide to building your apps. Each lesson adds another piece of functionality to a single app! No need to memorize at first, but\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edo not copy and paste from these lessons. You will miss crucial details if you do not write the syntax yourself.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eThese lessons will act as a structural roadmap for approaching Angular 2 apps. A to-do list is concerned with keeping track of Task objects. But in your project, you could use any object. Thus, the first lessons talk about how to construct the class declaration for your data object (books, restaurants, beers, anything) and how to structure your app around it. The next lesson talks about how to display an object's data, followed by displaying multiple objects. The next step in the lessons is concerned with how to add interactivity - we want to be able to click on a task and have the interface react. We will then want to be able to use forms to edit and create objects. Finally we will want to be able to sort them into categories - things like which tasks are complete or incomplete. To do that, we need something called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epipe\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eAt the end of the week, you should be able to:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHave a solid grasp of how the Model-View-Controller (MVC) pattern is used within an Angular 2 app.\u003c/li\u003e\r\n\u003cli\u003eUse TypeScript syntax as you write your apps.\u003c/li\u003e\r\n\u003cli\u003eManage build dependencies with npm.\u003c/li\u003e\r\n\u003cli\u003eManage front-end dependencies with Bower.\u003c/li\u003e\r\n\u003cli\u003eManage your development workflow with gulp.\u003c/li\u003e\r\n\u003cli\u003eWrite a basic Angular2 app using a model, multiple components, forms, event emitters and pipes.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eIndependent Project Objectives\u003c/h3\u003e\r\n\u003cp\u003eYour code at the end of the week will be reviewed for the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the website work as expected?\u003c/li\u003e\r\n\u003cli\u003eIs the app structured in a logical way, including a model, multiple components and TypeScript syntax?\u003c/li\u003e\r\n\u003cli\u003eDoes the app allow you to create and edit new instances of a model?\u003c/li\u003e\r\n\u003cli\u003eDoes the app include a list of models?\u003c/li\u003e\r\n\u003cli\u003eDoes the app allow you filter the list of models based on a given criteria? (For example, in a To-Do List app, we may want to view the tasks that are incomplete separately from old tasks that are completed.)\u003c/li\u003e\r\n\u003cli\u003eDo you manage your build tool dependencies with npm?\u003c/li\u003e\r\n\u003cli\u003eDo you manage your front-end dependencies with Bower?\u003c/li\u003e\r\n\u003cli\u003eDoes the app include a gulp-based asset pipeline with a development server? Does the asset pipeline include all tasks from the homework this week?\u003c/li\u003e\r\n\u003cli\u003eDoes the code stick to standards from previous weeks? (Testing is not required this week.)\u003c/li\u003e\r\n\u003cli\u003eAre you able to discuss the flow of your code and the concepts behind it with an instructor using correct terminology?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"tuesday-practice-creating-a-web-page","title":"Tuesday: Practice Creating a Web Page","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: familiarize yourself with the basic building blocks of a webpage by creating a basic website.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWork through the \u003ca href=\"pages/tuesday-creating-a-web-page\"\u003eprevious lesson\u003c/a\u003e with your partner to create your first web page. Remember to document your process on Git!\u003c/li\u003e\r\n\u003cli\u003eCreate a second web page in the same project folder, and this one will be all about your favorite things. Name it\u003cspan\u003e \u003c/span\u003e\u003cem data-redactor-tag=\"em\"\u003emy-favorite-things.html\u003c/em\u003e. We can't do too much with the page right now but go through the process of creating the page and give it an appropriate title all the same. You will be practicing your skills and add to this page in upcoming lessons. The folder structure of\u003cspan\u003e \u003c/span\u003e\u003cem data-redactor-tag=\"em\"\u003emy-first-website\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eshould look like this:\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cimg style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"viewer/files/MP-W1D1-16-hello_world_folder_structure.png\" alt=\"MP-W1D1-16-hello_world_folder_structure.png\" width=\"237\" height=\"164\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1345\" data-api-returntype=\"File\"\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-indentation-and-spacing","title":"Tuesday: Indentation and Spacing","type":"WikiPage","content":"\u003cp\u003eBefore we start writing any HTML, it's important that we go over some rules to make sure that we're writing our code properly.\u003c/p\u003e\r\n\u003cp\u003eWhen writing HTML (or any other programming language), well-written code follows consistent indentation and spacing patterns. In some languages, indentation and spacing are required for the code to function properly. In HTML, inconsistent indentation and spacing will not impact the functionality of the web page but will cause your code to be difficult to read and understand.\u003c/p\u003e\r\n\u003cp\u003eConsider this example of HTML with poor indentation and spacing:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e   \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e  Page Title\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHeader\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e  Page content   \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAt first glance, it's difficult to see where elements begin and end, and what elements are nested within each other.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eNested\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis another way of saying that the start tag and end tags of one element are inside of the start and end tags of another element.\u003c/p\u003e\r\n\u003cp\u003eHere's the same code with proper indentation and spacing:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHello world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ePage content\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eMuch better!\u003c/p\u003e\r\n\u003cp\u003eIn HTML, start tags and end tags on different lines are always left-aligned with one another. For example, when I see the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag, I can scan vertically down to see its closing tag. It's clear that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare nested within\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e. The same goes for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag alignment.\u003c/p\u003e\r\n\u003cp\u003eWhen an element is nested inside another element, it needs to be indented two spaces from the opening tag. You can see in the above example that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis indented two spaces from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis indented two spaces from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWith a text editor like Atom, you can use the tab key to indent quickly. If you use the tab option, make sure tabs are set to two spaces. Some defaults are set to other amounts, such as four spaces, which is too much white space for HTML and is not standard practice.\u003c/p\u003e\r\n\u003cp\u003eTo check your settings in Atom, go to the menu bar and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAtom\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePreferences\u003c/em\u003e, then choose the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEditor \u003c/em\u003emenu in the sidebar and scroll down to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTab Length\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-08-tab_length.jpeg\" alt=\"MP-W1D1-08-tab_length.jpeg\" width=\"565\" height=\"466\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1338\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAlso, notice that there is no space between the text content of an element and its tags. For example,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;Header\u0026lt;/h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas no spaces between\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the word\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHeader\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eRegardless of the language that you use to write code, learn its conventions for indentation and spacing. Getting in good habits now is much easier than breaking bad habits later. Practice consistency so that your code is easily understood by other developers, as well as yourself.\u003c/p\u003e","frontPage":false},{"exportId":"monday-practice-functions","title":"Monday: Practice - Functions","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the Functions lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFunctions perform actions in the browser\u003c/li\u003e\r\n\u003cli\u003eExamples of JavaScript functions are\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eMethods can be chained onto functions\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFunctions are an incredibly important part of programming, and you'll be using them constantly. Begin to get the hang of calling some common JavaScript functions by completing the practice exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow can we comment out code?\u003c/li\u003e\r\n\u003cli\u003eWhat happens when we run code that is commented out?\u003c/li\u003e\r\n\u003cli\u003eWhat are the differences between the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunctions in JavaScript?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003ePractice using JavaScript functions:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto pop up a dialog box with a warning for the user.\u003c/li\u003e\r\n\u003cli\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto ask a yes or no question.\u003c/li\u003e\r\n\u003cli\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto ask a question.\u003c/li\u003e\r\n\u003cli\u003eSave the response to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas a variable. All responses entered by a user in to a prompt input filed are saved as strings (even if the user enters 10, the value is saved as the string, \"10\"). Run at least 3 string methods of your choice on the string variable that you create from the prompt.\u003c/li\u003e\r\n\u003cli\u003eAsk a new question and save the response as a new variable and run 3 different string methods on it.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"tuesday-functional-programming-with-underscore","title":"Tuesday: Functional Programming with Underscore","type":"WikiPage","content":"\u003cp\u003eUnderscore is a JavaScript Library (like jQuery). It provides a bunch of pre-written code for solving common programming challenges. While jQuery helps web developers interact with the DOM, Underscore focuses on providing useful helpers for\u003cspan\u003e \u003c/span\u003e\u003ca class=\"popup\" href=\"http://en.wikipedia.org/wiki/Functional_programming\"\u003efunctional-style programming\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eInclude the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://underscorejs.org/\" target=\"_blank\"\u003eUnderscore library\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ein an empty HTML document, along with an array of products (you can use your own from the e-commerce exercise or use\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringaprep-ft.herokuapp.com/students/products.js\" target=\"_blank\"\u003ethis one\u003c/a\u003e) and try the following:\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003efirst:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ePass\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.first()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethe array of products and display the returned object in a \"featured\" section of your site.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003elast:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ePass\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.last()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethe array of products and display the returned object in a \"clearance\" section of your site.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003efilter:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.filter()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto display only products that belong to the \"books\" category.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003ereject:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.reject()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto display only products that are priced below $20.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003euniq:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.uniq()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto ensure that their are no duplicate selling points in any products before displaying them.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003emap:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto grab the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epicture_url\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof all products for sale, assign each to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty of a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag and return that DOM element. Pass the result of calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.map()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edirectly into a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$('#container').append()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eexpression to create a photo montage.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003epluck:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.pluck()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto quickly retrieve a list of the names of all products for sale to list them in an index\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003ereduce:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ePass a shopping cart (array of objects) to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.reduce()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand use it to add up the total price of the order.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003econtains:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eDetermine if the order\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.contains()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ea copy of 'Twilight'. If so, display a drastic message to the user asking them to re-evaluate their life choices.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eevery:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.every()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto determine if every item in the order has a price tag less than $10. If so, call the user a cheapskate!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003esome:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.some()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto determine if any item in the order has a price tag of $100 or more. If so, chide the user for their profligacy!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eextend:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eUse\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e_.extend()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto merge two objects together. What would this be good for?\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eReimplementing Underscore\u003c/h3\u003e\r\n\u003cp\u003eOk, now that we've tried them all out, let's try rebuilding a few from scratch. Download\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringaprep-ft.herokuapp.com/students/underbar.html\" target=\"_blank\"\u003ethe following HTML document\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand open it in your code editor to get started\u003c/p\u003e","frontPage":false},{"exportId":"monday-introduction-to-bootstrap","title":"Monday: Introduction To Bootstrap","type":"WikiPage","content":"\u003cp\u003eIf making websites look pretty is not your idea of a good time, don't worry: this isn't a design course. Still, there may come a time that you will need to understand enough CSS to be able to integrate a designer's CSS with your code. You may also be responsible for a project that requires you to make small changes to the CSS every now and then. Running into CSS is unavoidable as a web developer, and this is why it's so important for both web developers and designers to have some understanding of CSS basics.\u003c/p\u003e\r\n\u003cp\u003eFurthermore, you may want to build an app or website that looks nice, without spending a lot of time or effort on the user interface. In that case, front-end frameworks are immensely useful. We will spend this lesson learning what a front-end framework is, and getting familiar with one of the most popular front-end frameworks, Bootstrap.\u003c/p\u003e\r\n\u003ch2\u003eFront-end Frameworks\u003c/h2\u003e\r\n\u003cp\u003eWhen we use the term front-end in web development, we are talking about the parts of the website with which the user interacts: things like menus, buttons, images, navigation bars, and so on. The term framework refers to a package made of a structure of files and folders with pre-written code that can be used to get a project up and running more easily than building it from the ground up. Thus, a front-end framework is a set of code that helps us set up the front end of our websites. That is, the CSS, designs, layouts, and user interactions.\u003c/p\u003e\r\n\u003ch2\u003eBootstrap\u003c/h2\u003e\r\n\u003cp\u003eBootstrap is one of the most popular front-end frameworks. It allows developers to create clean, responsive, professional-looking websites relatively quickly and easily. Originally developed by Twitter as an internal tool to encourage consistency, Bootstrap was later released to the public as a free and open-source framework.\u003c/p\u003e\r\n\u003cp\u003eBootstrap is essentially a set of pre-built code that contains global CSS settings for various front-end elements in the form of fonts, colors, buttons, menus, table, a very useful grid system for page layout, and much more. One of the major advantages of using Bootstrap is that it is responsive, meaning that it has breakpoints and media queries built in, so any Bootstrap elements will automatically reformat according to the user's viewport size.\u003c/p\u003e\r\n\u003cp\u003eFeel free to visit Bootstrap's website\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://getbootstrap.com/docs/3.3/\" target=\"_blank\"\u003ehere\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand read more about it.\u003c/p\u003e\r\n\u003cp\u003eIf you're curious to see what Bootstrap can do, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://expo.getbootstrap.com/\" target=\"_blank\"\u003eSites Built With Bootstrap\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto see some of the possibilities.\u003c/p\u003e\r\n\u003cp\u003eOver the next few lessons, we will learn how to implement Bootstrap into our own web pages so that we can quickly create polished, professional sites with less effort than it would take to produce the same results on our own.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-practice-calculator-user-interface","title":"Thursday: Practice - Calculator User Interface","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eContinue to practice implementing jQuery and developing good organizational habits of separating front and back-end code by adding additional features to our ongoing calculator project, and completing the additional exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do the user interface and business logic 'communicate'?\u003c/li\u003e\r\n\u003cli\u003eWhat does\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edo? What can occur if we forget to add it?\u003c/li\u003e\r\n\u003cli\u003eIs the following code user interface or business logic? Why? How can you tell?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-string\"\u003e\"form#some-form\"\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e someInput = $(\u003cspan class=\"hljs-string\"\u003e\"input#some-input\"\u003c/span\u003e).val();\r\n        event.preventDefault();\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eCalculator User Interface\u003c/h3\u003e\r\n\u003cp\u003eIn the calculator user interface lesson, we built a site that collected two numbers from a form and then added them together by calling our pre-existing business logic\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.add()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Now it's your turn:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFollow along with the lesson to build out user interface logic for your calculator's addition capacity.\u003c/li\u003e\r\n\u003cli\u003eNow build out the user interface for subtraction, multiplication and division. You already have the business logic done. For now just have four separate forms - one for addition, one for subtraction, one for multiplication and one for division. In your JavaScript code, you'll need a form submit event handler for each form. (Soon, when we learn about branching, we'll adjust this to use just one form and allow the user to choose whether they want to add, subtract, multiply or divide.)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eAdditional jQuery Forms Practice\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd a form to each of the websites you are currently building. For example, on the resort website, the form should be used to submit a query from users wishing to find out more about your resort.\u003c/li\u003e\r\n\u003cli\u003eThank them for their query, and be sure to use their full name. Then reprint their address as a confirmation of receiving their question details. Go as wild as you can with the forms.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-jshint","title":"Monday: JSHint","type":"WikiPage","content":"\u003ch1\u003eJSHint\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003ch3\u003eTerminology\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eLinter\u003c/strong\u003e: A tool that analyzes your code and warns you about parts that don't follow stylistic conventions or could cause bugs in the future.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eJSHint\u003c/strong\u003e: A specific linter tool that can be installed with an npm package.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eAn example gulp task that uses JSHint to lint JavaScript code:\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e jshint = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'gulp-jshint'\u003c/span\u003e);\r\n\r\ngulp.task(\u003cspan class=\"hljs-string\"\u003e'jshint'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e gulp.src([\u003cspan class=\"hljs-string\"\u003e'js/*.js'\u003c/span\u003e])\r\n    .pipe(jshint())\r\n    .pipe(jshint.reporter(\u003cspan class=\"hljs-string\"\u003e'default'\u003c/span\u003e));\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eWe're going to take our JavaScript up a notch in this class by learning how to use a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elinter\u003c/strong\u003e. A linter is a tool that analyzes code and warns about parts that don't follow stylistic conventions, or could cause bugs in the future. Following the suggestions of a linter will help keep your code consistent and easier to debug. We're going to learn to use one of the most common linters called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eJSHint\u003c/strong\u003e.\u003c/p\u003e\r\n\u003ch2\u003eLinting with JSHint\u003c/h2\u003e\r\n\u003cp\u003eJSHint is available through npm, so let's start off by installing it as a development dependency. We'll need the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejshint\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage itself, and then we'll need the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp-jshint\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage to allow us to write a gulp task to automatically check our code using the linter.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs sql\"\u003e\r\n$ npm \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e jshint \u003cspan class=\"hljs-comment\"\u003e--save-dev\u003c/span\u003e\r\n$ npm \u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e gulp-jshint \u003cspan class=\"hljs-comment\"\u003e--save-dev\u003c/span\u003e\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eAutomated Linting Tasks\u003c/h3\u003e\r\n\u003cp\u003eNow, let's add our require statement and the gulp task. We don't need to require the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejshint\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage, only the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp-jshint\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage. Gulp will automatically use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejshint\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efiles that we downloaded. Here is what your task should look like:\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e jshint = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'gulp-jshint'\u003c/span\u003e);\r\n\r\ngulp.task(\u003cspan class=\"hljs-string\"\u003e'jshint'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e gulp.src([\u003cspan class=\"hljs-string\"\u003e'js/*.js'\u003c/span\u003e])\r\n    .pipe(jshint())\r\n    .pipe(jshint.reporter(\u003cspan class=\"hljs-string\"\u003e'default'\u003c/span\u003e));\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's put this task at the very bottom of our gulpfile since we will run it separately from the chain of build tasks. This is a good task to run periodically as you develop, and when you need some help debugging.\u003c/p\u003e\r\n\u003cp\u003eWe are pulling in all the JavaScript files in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder, running\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejshint\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon them, then using the default\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejshint\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereporter to show us our errors. To try it out, just run the command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egulp jshint\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn our case, it is pointing out a missing semicolon in\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs/pingpong.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon line 19:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"shell hljs bash\"\u003e[\u003cspan class=\"hljs-number\"\u003e03\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e] Starting \u003cspan class=\"hljs-string\"\u003e'jshint'\u003c/span\u003e...\r\njs/pingpong.js: line \u003cspan class=\"hljs-number\"\u003e19\u003c/span\u003e, col \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, Missing semicolon.\r\n\r\n\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e error\r\n[\u003cspan class=\"hljs-number\"\u003e03\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e49\u003c/span\u003e] Finished \u003cspan class=\"hljs-string\"\u003e'jshint'\u003c/span\u003e after \u003cspan class=\"hljs-number\"\u003e69\u003c/span\u003e ms\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIt wasn't causing any errors, but it's a good idea to fix small things like this to prevent errors in the future.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003cspan\u003e=======\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003ePrototyping\u003c/h2\u003e\r\n\u003cp\u003ePrototyping is used to convey the intention of a design both clearly and effectively. Prototypes help you think through design ideas, evaluate assumptions, and gather feedback from users. They're a low-cost way to understand what we need from the product: using prototypes, we can look at what works and what doesn't before spending valuable time on coding. At this stage, we want to think about application design, structure, user flows, and interactions.\u003c/p\u003e\r\n\u003ch3\u003eWireframing\u003c/h3\u003e\r\n\u003cp\u003eWireframing is the part of the design process where basic outlines of applications are planned and sketched out, either with modern digital tools (such as\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.invisionapp.com/\"\u003eInVision\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://balsamiq.com/\"\u003eBalsamiq\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e) or simply with paper and pencil. A wireframe can be as simple or as involved as you'd like, but what is important is that you include any information necessary to communicate your project needs, focusing on layout and content. Consider this example from the article\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://speckyboy.com/web-mobile-wireframe-sketch-examples/\"\u003e20 Examples of Web and Mobile Wireframe Sketches\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eby Paul Andrew.\u003c/p\u003e\r\n\u003cdiv\u003e\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/wireframe.png\" alt=\"wireframe\"\u003e\r\n\u003cp\u003eThis sketch is simple and gets the point across with visual cues, such as the \"play\" button to indicate a video and the box labels.\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/wireframetwo.png\" alt=\"wireframe\"\u003e\r\n\u003cp\u003eHere is another example that uses numbered labels and zoom-ins to clean up the design.\u003c/p\u003e\r\n\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/wireframethree.png\" alt=\"wireframe\"\u003e\r\n\u003cp\u003eHere's an example that shows that you don't need to be an artist or spend too much effort on the details to create an effective wireframe.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003ch3\u003eMapping User Flow\u003c/h3\u003e\r\n\u003cp\u003eNow that we know how to think of the general look of our app, we can start thinking about usability. Usability depends on how the user interacts with the product, so we need to map out possible user interactions with the product. Consider the following example from Nate Wang of\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.asknatewang.com/\"\u003eAsk Nate Wang:\u003c/a\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/userflow.png\" alt=\"wireframe\"\u003eWhile a visual representation of the application's user flow is desirable, some simple text boxes with arrows can be just as effective at conveying user flow. See the following examples by Peep Laja at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://conversionxl.com/how-to-design-user-flow/\"\u003eConversionXL:\u003c/a\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/userflowtwo.png\" alt=\"wireframe\"\u003eThe next example illustrates a stacked user flow, which uses a vertical arrow to distinguish between a first-time user and a more experienced user.\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/userflowthree.png\" alt=\"wireframe\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eTask:\u003c/h3\u003e\r\n\u003cp\u003eUsing the above information on wireframes and user flow, spend the next couple of minutes building out an interactive prototype of the application to represent how it will look and behave in production. Make sure they reflect how users would expect to use your app! Start adding colors, textures, images, and other details that communicate the product, and incorporate interactivity between the frames.\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003e\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; 9ec90cab07f6d534f167a17fb7ff86176c507ac7\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-array-methods","title":"Wednesday: Array Methods","type":"WikiPage","content":"\u003ch2\u003eComparing Arrays\u003c/h2\u003e\r\n\u003cp\u003eUnlike other data types we've seen so far, it is not possible to compare two arrays by using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e===\u003c/code\u003e comparison operator. In JavaScript, two primitive data type values can be the equal. For example, \u003ccode class=\"\"\u003e\"abc\"\u003c/code\u003e is the same as any other \u003ccode class=\"\"\u003e\"abc\"\u003c/code\u003e. But arrays are different -\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eno two arrays are the same, even if they have the same elements inside\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eIf you need to compare the\u003cspan\u003e \u003c/span\u003e\u003cem\u003econtents\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof two arrays, one way to accomplish this is to transform the arrays into strings using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etoString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction on each and comparing the return values. This will work when the elements are all data types that we have worked with previously, such as strings, numbers, and booleans.\u003c/p\u003e\r\n\u003cp\u003eTry this example in the console:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e a = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e]\r\n\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e b = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e]\r\n\u0026gt; a === b\r\n\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n\u0026gt; a.toString();\r\n\u003cspan class=\"hljs-string\"\u003e\"1,2,3\"\u003c/span\u003e\r\n\u0026gt; a.toString() === b.toString();\r\n\u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eCloning Arrays\u003c/h2\u003e\r\n\u003cp\u003eHere is another scenario where arrays may operate differently than we expect.\u003c/p\u003e\r\n\u003cp\u003eSuppose we have an array, and we want to keep in its original form, but we also need to manipulate in some ways. We might have one variable hold the original array and another variable with a copy of the same array that we can change.\u003c/p\u003e\r\n\u003cp\u003eTry this in the console:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e\u0026gt;var originalArray = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\u0026gt; originalArray\r\n[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\u0026gt;var \u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray = originalArray\r\n\u0026gt;\u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray\r\n[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e]\r\n\u0026gt;\u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray.push(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e)\r\n\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e\r\n\u0026gt;\u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray\r\n[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e]  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhat does\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eoriginalArray\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elook like now? We haven't touched it, so we may assume it would retain its original value of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e[1,2,3,4,5]\u003c/code\u003e. But if we check it again in the console, we see:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs css\"\u003e\u0026gt; \u003cspan class=\"hljs-tag\"\u003eoriginalArray\u003c/span\u003e\r\n\u003cspan class=\"hljs-attr_selector\"\u003e[1, 2, 3, 4, 5, 6]\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn JavaScript, the array is stored in memory, and the two variables\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eoriginal_array\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eclone_array\u003c/code\u003eare called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epointers\u003c/strong\u003e. A pointer references an object in memory but is\u003cspan\u003e \u003c/span\u003enot\u003cspan\u003e \u003c/span\u003ethe object itself. Therefore, as the array is changed, the new value is reflected in all of the variables that point to it.\u003c/p\u003e\r\n\u003cp\u003eThe way to clone an array\u003cspan\u003e \u003c/span\u003ewithout\u003cspan\u003e \u003c/span\u003esimply making another pointer is to create a new variable set to a new array:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003evar \u003cspan class=\"hljs-built_in\"\u003eclone\u003c/span\u003eArray = originalArray.slice()\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis ensures that the new array really is an entirely separate entity, instead of simply a pointer to the original array.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003eFor more details on how the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eslice\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod works, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\" target=\"_blank\"\u003eMDN's Javascript documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eon the Array.prototype.slice method.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-introduction-to-jquery-javascript-library","title":"Tuesday: Introduction to jQuery (Javascript Library)","type":"WikiPage","content":"\u003cp\u003eNow that we know a bit of JavaScript, let's learn jQuery, a JavaScript library that makes it easy to make web pages interactive. Let's start by learning how to pop up dialogue boxes when you click certain parts of the page.\u003c/p\u003e\r\n\u003cp\u003eImportant Note: jQuery is updated constantly! Faster than we can reasonably update this lesson! As such, make sure your \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tag links to the specific version and filename your project is using (e.g.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc=\"js/jquery-3.3.1.js\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc=\"js/jquery-2.10.1.js\"\u003c/code\u003e). The versions depicted in the \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tags in this lesson likely won't match the version in your project. In future, I recommend that you use a \u003ca href=\"https://code.jquery.com/\"\u003ejQuery CDN link\u003c/a\u003e which caches in the browser to enable fast load times for your web pages. Also, there is the shortcut of abbreviating\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$()\u003c/code\u003e. We've since updated this lesson's text to use the first, more explicit version after observing confusion from students. Know that these things are the same, and one is simply a shortcut for the other.\u003c/p\u003e\r\n\u003cp\u003eSet up a new project. (Make a project folder, create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejs\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecss\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimg\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolders inside of it, and initialize the git repository.) First, we need to add two files into our project's \u003cem\u003ejs\u003c/em\u003e folder - the jQuery library file and our custom scripts file. Go ahead and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jquery.com/download/\"\u003edownload jQuery\u003c/a\u003e. Choose the uncompressed, development version and save it into your project's \u003cem\u003ejs\u003c/em\u003e folder. Then, also inside your project's js folder, make an empty file called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escripts.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto store our own JavaScript code.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Wednesday/folder-structure.png\" alt=\"folder-structure.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1690\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBegin developing our page with this HTML in a file in our project directory:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML help\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML help\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThis is a very special page. If you click somewhere, it will tell you what type of HTML element you clicked on.\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eLook at this cute walrus!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"img/walrus.jpg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan\u003e\u0026lt;script   \u003c/span\u003e\u003cspan\u003esrc=\"https://code.jquery.com/jquery-3.3.1.min.js\"\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eintegrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003ecrossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003cspan class=\"xml\"\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIt's important that our own \u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile goes after jQuery, as it will rely on jQuery functionality that must be loaded first. Make sure your link to the jQuery file is correct, with the version number matching what you downloaded.\u003cspan\u003e The \u003ccode\u003eintegrity\u003c/code\u003e and \u003ccode\u003ecrossorigin\u003c/code\u003e attributes are used for \u003ca href=\"https://www.w3.org/TR/SRI/\" target=\"_blank\"\u003eSubresource Integrity (SRI) checking\u003c/a\u003e. This allows browsers to ensure that resources hosted on third-party servers have not been tampered with. Use of SRI is recommended as a best-practice, whenever libraries are loaded from a third-party source.\u003c/span\u003e\u003cbr\u003eOkay, we're finally ready to use jQuery! Here's the code to type in \u003cem\u003escripts.js\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\njQuery(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{  \r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"h1\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is a header.\"\u003c/span\u003e);\r\n  });\r\n\r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is a paragraph.\"\u003c/span\u003e);\r\n  });\r\n\r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"img\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is an image.\"\u003c/span\u003e);\r\n  });\r\n});\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBe sure you're indenting correctly! The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003es are two spaces in, because they're inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efunction()\u003c/code\u003es. If we load up the page and click on different parts, we'll get dialog boxes popping up and telling us what they are. Hooray! Now, let's look more closely at how this works. Here we have a new function: the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejQuery()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction! One thing that the jQuery function does is to select HTML elements on the page, based on the argument you pass in to it. So the code\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejQuery(\"p\")\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselects all of the paragraphs on the page. After we select the elements, we use jQuery's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.click()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to attach an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eevent handler\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto each of the selected elements. The event handler \"listens\" to the elements and responds when they're clicked. Next, we need to tell jQuery what to do when the user clicks that element. We pass in a function as an argument. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efunction()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe're using here is just like the ones we practiced before, but we aren't assigning it to a variable and we're passing it as an argument to another function. This is called an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eanonymous callback function\u003c/strong\u003e. It is a callback function because it is not executed immediately; instead the function is passed into the jQuery\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to be executed at a future time - in the case of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.click()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, when that event handler is triggered by a user clicking on any of the selected elements. Inside the callback function, we can put whatever code we want, just like in the functions we wrote before. Here we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to pop up a dialog box with some helpful information. We could actually pop up two alerts, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003ejQuery(\u003cspan class=\"hljs-string\"\u003e\"h1\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  alert(\u003cspan class=\"hljs-string\"\u003e\"This is a header.\"\u003c/span\u003e);\r\n  alert(\u003cspan class=\"hljs-string\"\u003e\"I told you, THIS IS A HEADER!\"\u003c/span\u003e);\r\n});\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo reiterate, when you pass in a function as an argument to another function, the function being passed in is called a \u003cstrong\u003ecallback\u003c/strong\u003e. Phew! That's a lot of work just to make a few silly pop-ups. Fortunately, even though this might feel a bit overwhelming at first, most of the jQuery we'll write will look an awful lot like this, so you'll get the hang of it pretty quickly. Let's do a couple things to clean up our code. First, it feels a bit wrong to put our \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tags in the document body, where the content of the page lives. Let's move them up into the \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e, which is where we put information about the page that isn't displayed:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e  \u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"css/bootstrap.css\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/css\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan\u003e  \u0026lt;script \u003c/span\u003e\u003cspan\u003esrc=\"https://code.jquery.com/jquery-3.3.1.min.js\" \u003c/span\u003e\u003cspan\u003eintegrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003ecrossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e  \u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e  \u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML help\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOh dear. Now, if we reload the page in our browser, nothing happens when we click anything. Let's review our JavaScript to see why this broke it. Remember that I said that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejQuery('p')\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill look for all of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags on the page? The web browser loads your page from the top of your HTML document to the bottom. So when we put our JavaScript in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e, rather than at the end of the document, there are no\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags yet, and so there's nothing for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.click()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto attach to. What we need to do is tell our JavaScript not to run until the document has finished loading. Fortunately, jQuery provides an easy way to do this:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003ejQuery(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"h1\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is a header.\"\u003c/span\u003e);\r\n  });\r\n\r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is a paragraph.\"\u003c/span\u003e);\r\n  });\r\n\r\n  jQuery(\u003cspan class=\"hljs-string\"\u003e\"img\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is an image.\"\u003c/span\u003e);\r\n  });\r\n});\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we tell jQuery to look at the HTML document, and then we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.ready()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on it. When the document has finished loading, jQuery will run the callback function that is passed into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.ready()\u003c/code\u003e. And that function will run our code. Generally, it's a good idea to wrap your JavaScript in a function passed to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.ready()\u003c/code\u003e, so that it's executed after the page loads and you don't run into the problem we just had. Check out our page - it works again. There's a handy shortcut that most JavaScript developers use: instead of writing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejQuery()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eall of the time, we can simply use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"h1\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is a header.\"\u003c/span\u003e);\r\n  });\u003cbr\u003e\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"p\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is a paragraph.\"\u003c/span\u003e);\r\n  });\r\n\r\n  $(\u003cspan class=\"hljs-string\"\u003e\"img\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e\"This is an image.\"\u003c/span\u003e);\r\n  });\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis isn't really necessary, but it saves us a little bit of repetitive typing and is how most people write the jQuery function. Here's one final trick I want to show you. If something on your page isn't working right, you can check in Chrome to make sure that you've attached the event listener correctly. Right-click the element you want to check, go to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInspect Element\u003c/em\u003e, and then, in the upper right corner of the box on the bottom, click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEvent Listeners\u003c/em\u003e. If you've attached the listener correctly, you should see it listed there.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-objects-within-objects","title":"Wednesday: Objects Within Objects","type":"WikiPage","content":"\u003cp\u003eLet's learn how to create an object that contains another object, then we'll use this to build out an address book.\u003c/p\u003e\r\n\u003cp\u003eWe'll begin by making some objects that represent cities and countries:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e nbo = { name: \u003cspan class=\"hljs-string\"\u003e\"Nairobi\"\u003c/span\u003e };\u003cbr\u003evar mba = { name: \"Mombasa\" };\u003cbr\u003evar kis = { name: \"Kisumu\" };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e qsi = { name: \u003cspan class=\"hljs-string\"\u003e\"Moshi\"\u003c/span\u003e };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dar = { name: \u003cspan class=\"hljs-string\"\u003e\"Dar Es Salaam\"\u003c/span\u003e };\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e kenya = { name: \u003cspan class=\"hljs-string\"\u003e\"Kenya\"\u003c/span\u003e };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tanzania = { name: \u003cspan class=\"hljs-string\"\u003e\"Tanzania\"\u003c/span\u003e };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e rwanda = { name: \u003cspan class=\"hljs-string\"\u003e\"Rwanda\"\u003c/span\u003e };    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eVery often, we'll want to create associations between objects; for example, we may want to know a list of cities in a particular country. Here's how we can do this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003evar nbo = { name: \"Nairobi\" };\u003cbr\u003evar mba = { name: \"Mombasa\" };\u003cbr\u003evar kis = { name: \"Kisumu\" };\u003cbr\u003evar qsi = { name: \"Moshi\" };\u003cbr\u003evar dar = { name: \"Dar Es Salaam\" };\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e kenya = { name: \u003cspan class=\"hljs-string\"\u003e\"Kenya\"\u003c/span\u003e, cities: [nbo, mba, kis] };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tanzania = { name: \u003cspan class=\"hljs-string\"\u003e\"Tanzania\"\u003c/span\u003e, cities: [qsi, dar] };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e rwanda = { name: \u003cspan class=\"hljs-string\"\u003e\"Rwanda\"\u003c/span\u003e, cities: [] };    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIt's very common to have a property of an object that's an array with other objects contained within it. Now we can do things like list all of the cities we know about for a country:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003ekenya.cities.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003ecity\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Let's go to \"\u003c/span\u003e + city.name + \u003cspan class=\"hljs-string\"\u003e\"!\"\u003c/span\u003e);\r\n});    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can also add cities to a country after the object is initially created:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e kgl = { name: \u003cspan class=\"hljs-string\"\u003e\"Kigali\"\u003c/span\u003e };\r\nrwanda.cities.push(kgl);    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode class=\"prettyprint\"\u003erwanda.cities\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns an array, and then we\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003epush()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethe new object onto the array.\u003c/p\u003e\r\n\u003cp\u003eLet's look at one more example before applying this to our address book:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tomatoes = { name: \u003cspan class=\"hljs-string\"\u003e\"Tomatoes\"\u003c/span\u003e, price: \u003cspan class=\"hljs-number\"\u003e300\u003c/span\u003e };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e potatoes = { name: \u003cspan class=\"hljs-string\"\u003e\"Potatoes\"\u003c/span\u003e, price: \u003cspan class=\"hljs-number\"\u003e150\u003c/span\u003e };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e onions = { name: \u003cspan class=\"hljs-string\"\u003e\"Onions\"\u003c/span\u003e, price: \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e };\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e groceryStore = { name: \u003cspan class=\"hljs-string\"\u003e\"Mama's Corner Market\"\u003c/span\u003e, products: [tomatoes, potatoes, onions] };\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e iPhone = { name: \u003cspan class=\"hljs-string\"\u003e\"iPhone\"\u003c/span\u003e, price: \u003cspan class=\"hljs-number\"\u003e699\u003c/span\u003e };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e android = { name: \u003cspan class=\"hljs-string\"\u003e\"Android\"\u003c/span\u003e, price: \u003cspan class=\"hljs-number\"\u003e499\u003c/span\u003e };\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e windowsPhone = { name: \u003cspan class=\"hljs-string\"\u003e\"Windows Phone\"\u003c/span\u003e, price: \u003cspan class=\"hljs-number\"\u003e399\u003c/span\u003e };\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e phoneStore = { name: \u003cspan class=\"hljs-string\"\u003e\"RadioShack\"\u003c/span\u003e, products: [iPhone, android, windowsPhone] };\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e stores = [groceryStore, phoneStore];\r\n\r\nstores.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003estore\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(store.name + \u003cspan class=\"hljs-string\"\u003e\" sells:\"\u003c/span\u003e);\r\n  store.products.forEach(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eproduct\u003c/span\u003e) \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(product.name);\r\n  });\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"\\n\"\u003c/span\u003e);\r\n});    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're looping through each store and displaying its name, and then within each store, looping through each of its products and displaying their names.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-git-html-and-css-objectives","title":"Tuesday: Git, HTML, and CSS Objectives","type":"WikiPage","content":"\u003cp\u003eThis week we will be learning the building blocks of making basic web pages: HTML and CSS. We will also focus on using the command line and Git to create a daily workflow for our coding projects.\u003c/p\u003e\r\n\u003ch2\u003eDaily Goals\u003c/h2\u003e\r\n\u003cp\u003eEveryone learns at a different pace. \u003cstrong\u003eUnderstanding is the most important goal every day.\u003c/strong\u003e If you feel like you will not be able to complete all of the lessons on a given day, talk to a TM about ways to ensure that you are covering the day's objectives. Always focus on understanding the concepts at hand, not finishing the work as quickly as possible.\u003c/p\u003e\r\n\u003ch2\u003ePlan\u003c/h2\u003e\r\n\u003cp\u003eWe will begin this week by practicing the command line, Git, Github, and exploring basic HTML. We'll create READMEs to include extra information with our projects on Github. We'll also learn a formatting language called Markdown to format READMEs. Then, we'll explore basic CSS to add styling to our web pages, and actually publish our sites online! Later in the week we will dive deeper into CSS by using divs and spans, floats, cascading, classes, ids, and the box model. Finally, we'll explore a tool called Bootstrap that offers even more powerful styling capability. You're in for a great time!\u003c/p\u003e\r\n\u003cp\u003eAt the end of this section, you will be able to:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eNavigate the command line to access and create directories and files\u003c/li\u003e\r\n\u003cli\u003eUse Git and GitHub to track the creation of static web pages\u003c/li\u003e\r\n\u003cli\u003eCreate a static webpage using HTML\u003c/li\u003e\r\n\u003cli\u003eStyle a static webpage using custom CSS rules in a linked stylesheet\u003c/li\u003e\r\n\u003cli\u003eCreate a project README.md in Markdown\u003c/li\u003e\r\n\u003cli\u003eAdapt a webpage for responsive design\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch2\u003eIndependent Project Objectives\u003c/h2\u003e\r\n\u003cp\u003eAt the end of this section, you will complete an independent project. Your instructor will review this project for the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse the most common HTML tags:\r\n\u003cul\u003e\r\n\u003cli\u003ep, h, ul, ol, li, em, strong, a, img, div, span\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eCreate a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eImplement standard indentation and spacing conventions of HTML and CSS\u003c/li\u003e\r\n\u003cli\u003eMake Git commits regularly with clear messages that finish the phrase \"It will…\"\u003c/li\u003e\r\n\u003cli\u003eAdd a README to the GitHub repository that includes:\r\n\u003cul\u003e\r\n\u003cli\u003eAuthor name\u003c/li\u003e\r\n\u003cli\u003eProject or program name\u003c/li\u003e\r\n\u003cli\u003eDescription of program\u003c/li\u003e\r\n\u003cli\u003eProgram setup instructions\u003c/li\u003e\r\n\u003cli\u003eLink to live version of site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eCopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"tuesday-running-typescript-apps","title":"Tuesday: Running TypeScript Apps","type":"WikiPage","content":"\u003ch2\u003eRunning TypeScript Apps\u003c/h2\u003e\r\n\u003cp\u003eWe first need to create a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello.ts. \u003c/em\u003eInside it, we write the following code.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003ehello.ts\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003econsole.log('I am a Typescript example');\u003c/pre\u003e\r\n\u003cp\u003eTo transpile the file, we run the following command in the terminal:\u003c/p\u003e\r\n\u003cpre\u003e$  tsc hello.ts\u003c/pre\u003e\r\n\u003cp\u003eThis converts the Typescript file to a normal JavaScript file, which is stored as\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehello.js.\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003eWe can now run the Javascript file in the terminal.\u003c/p\u003e\r\n\u003cpre\u003e$ node hello.js\u003cbr\u003eI am a Typescript example\u003c/pre\u003e","frontPage":false},{"exportId":"monday-practice-data-types","title":"Monday: Practice - Data Types","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: In the Data Types lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e5 data types - number, string, boolean, undefined, null\u003c/li\u003e\r\n\u003cli\u003eMethods are generally specific to a data type\u003c/li\u003e\r\n\u003cli\u003eHow to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etypeof\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto check data type\u003c/li\u003e\r\n\u003cli\u003eHow to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.toString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto convert between numbers and strings\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eExplore these different data types and their corresponding methods by completing the exercises listed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat data type is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e? What about\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eInfinity\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eHow do we tell what data type something is?\u003c/li\u003e\r\n\u003cli\u003eName one way to convert something of one data type into another data type.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003ePractice checking and converting data types by doing the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSet a variable equal to your favorite number and check the data type.\u003c/li\u003e\r\n\u003cli\u003eThen, create a new variable converting the previous variable to a string. Check the data type again.\u003c/li\u003e\r\n\u003cli\u003eNext, create a third variable, converting this string variable back to a number. Check the data type one more time.\u003c/li\u003e\r\n\u003cli\u003eCompare the first and third variables using \u003ccode\u003e===\u003c/code\u003e to confirm that they are equal.\u003c/li\u003e\r\n\u003cli\u003eCompare the first and second variables or second and third variables to confirm that they are NOT equal.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"wednesday-looping-with-for","title":"Wednesday: Looping with \"For\"","type":"WikiPage","content":"\u003cp\u003eLet's continue with looping in Javascript.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a nice, easy-to-read, easy-to-understand method, but it's actually a pretty new addition to JavaScript. It also is limited for use on collections of information where processing iterates through each element in the collection. Let's take a look at a more traditional way of looping called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efor loop\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003e\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (var \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e \u0026lt;= \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\r\n  alert(\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e);\r\n}  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's how the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop works:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement takes three parameters: initialization, condition, and final expression.\u003c/li\u003e\r\n\u003cli\u003eThe initialization parameter lets you initialize a variable at the start of the \u003ccode class=\"\"\u003efor\u003c/code\u003e loop. In this case, we've initialized a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eindex\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat starts at 1. This is the starting place for the loop. The initialization parameter is executed\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe loop runs.\u003c/li\u003e\r\n\u003cli\u003eThe condition parameter tells the loop when to stop running - or more accurately when to keep running. The loop will stop when the condition is no longer true. In our example, when the index variable is NOT less than or equal to 3, the loop will stop. Until then, it will keep going. The condition is evaluated every time the loop runs.\u003c/li\u003e\r\n\u003cli\u003eThe final expression parameter usually changes the initial value in some way; often by incrementing or decrementing it. In our example, the index variable will be increased by 1\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter each time the loop is executed\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eEach time the loop runs, the code within the loop will pop up an alert with the number of the pass we're on (index).\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eHere's an example we saw in the last lesson re-written using a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop instead of a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003evar languages = [\u003cspan class=\"hljs-string\"\u003e'HTML'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'CSS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Javascript'\u003c/span\u003e];\r\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (var \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e \u0026lt; languages.\u003cspan class=\"hljs-keyword\"\u003elength\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\r\n  alert(\u003cspan class=\"hljs-string\"\u003e'I love '\u003c/span\u003e + languages[\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e] + \u003cspan class=\"hljs-string\"\u003e'!'\u003c/span\u003e);\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThere is a new concept in this loop:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguages.length\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elength\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not a method. Notice it's missing the parentheses at the end. Length is a property on every array we create. Strings also have this property, e.g.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e'foobar'.length\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u0026gt; \u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e languages = [\u003cspan class=\"hljs-string\"\u003e'HTML'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'CSS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Javascript'\u003c/span\u003e];\r\n\u0026gt; languages.length;\r\n\u003cspan class=\"hljs-number\"\u003e  3\u003c/span\u003e\r\n\u003cspan class=\"hljs-reserved\"\u003e\u0026gt; var\u003c/span\u003e school = \u003cspan class=\"hljs-string\"\u003e\"Moringa School\"\u003c/span\u003e;\r\n\u0026gt; school.length;\r\n  14  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen we explore objects in the future, we will talk more about properties but for now, let's continue looping.\u003c/p\u003e\r\n\u003cp\u003eIn the \u003ccode class=\"\"\u003efor\u003c/code\u003e loop example above, we have an array containing 3 elements. When we first start the loop, we run our initialization statement (\u003ccode class=\"\"\u003evar index = 0\u003c/code\u003e), which creates a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eindex\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand initializes it with the value\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e0\u003c/code\u003e. We are now done with initialization, which only happens once, when we first enter the for loop. From now on the flow is:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCheck\u003cspan\u003e \u003c/span\u003econdition:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eindex \u0026lt; languages.length\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(continue to step 2 only if condition evaluates to\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etrue\u003c/code\u003e, otherwise exit out of the for loop)\u003c/li\u003e\r\n\u003cli\u003eExecute code block:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ealert('I love ' + languages[index] + '!');\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eExecute \"final expression\" update statement:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eindex += 1\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eRepeat, beginning with Step 1 above\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eThe first time through the loop index is 0, so languages[index] is \"HTML\". The second time through the loop index is 1, so languages[index] is \"CSS\". The third time through the loop index is 2, so \u003ccode class=\"hljs perl\"\u003elanguages[\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e]\u003c/code\u003e is \u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-string\"\u003e'Javascript'\u003c/span\u003e\u003c/code\u003e. The fourth time we try to enter the loop, \u003ccode class=\"hljs perl\"\u003e\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e\u003c/code\u003e is 3 which is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot less than\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguages.length \u003c/code\u003e(3), so we don't enter the loop again.\u003c/p\u003e\r\n\u003cp\u003eHere's a chart that may help illustrate the loop flow:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/1kh89c9j4hqbgif/for-loop-languages.png\" alt=\"for loop chart\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe previously used a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop to add all the elements of an array together. Let's rewrite that one too with a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs perl\"\u003evar total = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\nvar summands = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e];\r\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (var \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e \u0026lt; summands.\u003cspan class=\"hljs-keyword\"\u003elength\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\r\n  total += summands[\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e];\r\n}\r\nalert(total); \u003cspan class=\"hljs-regexp\"\u003e//\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's a corresponding chart:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/ca68ui2w2q4wqx8/for-loop-summands.png\" alt=\"for loop summands charts\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNote that when\u003cspan\u003e \u003ccode class=\"hljs perl\"\u003e\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eis 0 here, \u003ccode class=\"hljs perl\"\u003esummands[\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e]\u003c/code\u003eis 1 because the first element of the array is 1.\u003cspan\u003e \u003ccode class=\"hljs perl\"\u003e\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eis just being used here to refer to which element of the array - it's a bit confusing in this case because the elements of the array are also numbers.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod would have worked just as well in those above cases, but sometimes you'll find yourself in situations where you need a regular\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop rather than a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop - for instance, when you need to run a loop a certain number of times, rather than looping over an array.\u003c/p\u003e\r\n\u003cp\u003eHere's a version of our sum code that uses a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003efor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eloop but doesn't require an array to loop through:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e total = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e currentNumber = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e; currentNumber \u0026lt;= \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e; currentNumber += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) {\r\n  total += currentNumber;\r\n}\r\nalert(\u003cspan class=\"hljs-string\"\u003e\"Total is: \"\u003c/span\u003e + total);\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen the loop begins we initialize our loop variable\u003cspan\u003e \u003ccode class=\"hljs coffeescript\"\u003ecurrentNumber\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eto 1. (Note that we could have used\u003cspan\u003e \u003ccode class=\"hljs perl\"\u003e\u003cspan class=\"hljs-keyword\"\u003eindex\u003c/span\u003e\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eas the variable name here, but\u003cspan\u003e \u003ccode class=\"hljs coffeescript\"\u003ecurrentNumber\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eseems clearer since we'll be making use of the variable for something other than iterating through a loop; we'll be adding it to\u003cspan\u003e \u003ccode class=\"hljs coffeescript\"\u003etotal\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eeach time through the loop in addition to using it as an iterator.) We then execute our loop as long as\u003cspan\u003e \u003ccode class=\"hljs coffeescript\"\u003ecurrentNumber\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eis less than or equal to 5, iterating\u003cspan\u003e \u003ccode class=\"hljs coffeescript\"\u003ecurrentNumber\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eafter each run through the loop. Here's a chart showing the steps:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/uo80ur1fsffxl2e/for-loop-sum.png\" alt=\"for loop sum chart\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe first time through the loop,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 1, which is \u0026lt;= 5, so we go ahead and execute the statement in the code block:\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etotal += currentNumber\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etotal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis now 1 after this first time through the loop. At the end of each time through the loop we're incrementing\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e, so\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis now 2.\u003c/p\u003e\r\n\u003cp\u003eThe second time through the loop,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 2, which is still \u0026lt;= 5, so again we execute\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etotal += currentNumber\u003c/code\u003e, setting total to 3. We again increment\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe third time through,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 3, so total now becomes 6. And we increment\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe fourth time through,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 4, so total becomes 10 and then we increment\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe fifth time through,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 5, so total becomes 15 and we increment\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe sixth time we try to start going through the loop,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003ecurrentNumber\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis 6, which is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026lt;= 5, so we're done with the for loop. We then show the user an alert that includes the total.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-looping-in-arrays","title":"Wednesday: Looping in Arrays","type":"WikiPage","content":"\u003cp\u003eNow that you've got the basics of arrays under your belt, let's turn to a more advanced concept:\u003cspan\u003e l\u003c/span\u003e\u003cstrong\u003eooping\u003c/strong\u003e. Here's a very simple loop. Try it out in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsfiddle.net/\" target=\"_blank\"\u003eJSFiddle\u003c/a\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e languages = [\u003cspan class=\"hljs-string\"\u003e'HTML'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'CSS'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'JavaScript'\u003c/span\u003e];\r\n  languages.\u003cspan class=\"hljs-keyword\"\u003eforEach\u003c/span\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(language)\u003c/span\u003e \u003c/span\u003e{\r\n    alert(\u003cspan class=\"hljs-string\"\u003e'I love '\u003c/span\u003e + language + \u003cspan class=\"hljs-string\"\u003e'!'\u003c/span\u003e);\r\n  });\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's step through how this works:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate an array of strings.\u003c/li\u003e\r\n\u003cli\u003eCall the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on the array.\u003c/li\u003e\r\n\u003cli\u003ePass in a callback function to\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach\u003c/code\u003e, with a parameter called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguage\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eTake the first element in the array,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003e'HTML'\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand assign it to\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguage\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003ePop up an alert that says you love HTML.\u003c/li\u003e\r\n\u003cli\u003eRepeat 4 and 5 for the other elements in\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003elanguages\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch2\u003eAdding Numbers with Loops\u003c/h2\u003e\r\n\u003cp\u003eWe can use loops for more interesting problems, too. For example, we've written code to add two numbers, but what if we wanted to add an arbitrary amount of numbers?\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs php\"\u003e\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e total = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e summands = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e];\r\nsummands.\u003cspan class=\"hljs-keyword\"\u003eforEach\u003c/span\u003e(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(summand)\u003c/span\u003e \u003c/span\u003e{\r\n  total += summand;\r\n});\r\nalert(total);  \u003cspan class=\"hljs-comment\"\u003e// 15\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a variable named\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003etotal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand set it to start out at 0. Each time through the loop we will increase its value so that this variable keeps track of the running total. The first time through the loop, the variable\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esummand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecomes 1, the second time it becomes 2, and so on.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/1nf3aey8izv87ej/forEach-loop-summands.png\" alt=\"forEach loop chart\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIt's conventional that an array name is\u003cspan\u003e \u003c/span\u003e\u003cem\u003eplural\u003c/em\u003e, and that the parameter to the function passed into\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehave a\u003cspan\u003e \u003c/span\u003e\u003cem\u003esingular name\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(e.g.,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esummands\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the array and\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esummand\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the argument to the function). But for all JavaScript cares, the array\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003esummands\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the argument to the function could be called\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eapple\u003c/code\u003e, but that would make it slightly more difficult for other developers to pick up your code. Remember, we want to write clean, professional, easy-to-understand JavaScript.\u003ccode class=\"hljs javascript\"\u003e\u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003eYou might be getting tired of me pointing out the indentation, but I'm going to do it again because it's something worth taking your time to do right: everything inside the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"\"\u003eforEach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is indented two spaces, because it's code that's inside the callback function, and everything in a function gets indented so that it's obvious what's\u003cspan\u003e \u003c/span\u003e\u003cem\u003ein\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe function and what's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoutside\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eit.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-block-elements","title":"Tuesday: Block Elements","type":"WikiPage","content":"\u003cp\u003eWe're going to start adding content to our page by working with\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eblock elements\u003c/strong\u003e. These are HTML elements that start on their own line when displayed, like a\u003cspan\u003e \"\u003c/span\u003eblock\"\u003cspan\u003e \u003c/span\u003eon the page. In this lesson, we will learn how to add paragraphs, headers, and lists to our pages.\u003c/p\u003e\r\n\u003cp\u003eOpen up\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand modify it so that it looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe formatting instructions around the text are called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003etags\u003c/strong\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ep tag\u003c/strong\u003e. It means that everything that follows is a paragraph, until\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis reached. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eclosing tag\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eend tag \u003c/strong\u003eand indicates the end of the paragraph. Closing tags always match the header but have a backslash in front.\u003c/p\u003e\r\n\u003cp\u003eWhen we viewed this page without the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags in the last lesson, all of the text appeared on the same line, despite being written on different lines. When we load up the page now, the lines appear as separate paragraphs.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-12-webpage_screenshot_paragraphs.png\" alt=\"MP-W1D1-12-webpage_screenshot_paragraphs.png\" width=\"532\" height=\"254\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1342\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003eWe've just made a change to our code. Time to commit!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"add paragraph block elements to the page\"\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's try some more tags:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy First Webpage\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from Moringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've added a main\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eheader\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(\u003ccode\u003e\u0026lt;h1\u0026gt;My First Webpage\u0026lt;/h1\u0026gt;\u003c/code\u003e) and a subheader (\u003ccode\u003e\u0026lt;h2\u0026gt;Written with a little guidance from Moringa School\u0026lt;/h2\u0026gt;\u003c/code\u003e). Here's how it looks in the browser:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-13-webpage_screenshot_headers.png\" alt=\"MP-W1D1-13-webpage_screenshot_headers.png\" width=\"533\" height=\"329\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1343\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThere are six different levels of headers you can add using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethrough\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e. Like the paragraph tags, we have an opening tag that indicates where the header begins (\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e) and a closing tag that indicates where it ends (\u003ccode\u003e\u0026lt;/h1\u0026gt;\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003eHTML ignores empty spaces and blank lines, which is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewhitespace\u003c/strong\u003e. That's why the extra line we might add between our headers and paragraphs doesn't do anything when the HTML is displayed. We could take it out, or make it three spaces, and it would look exactly the same in the browser.\u003c/p\u003e\r\n\u003cp\u003eLet's commit again!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"add header block elements\"\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's add a little bit more:\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003emy-first-webpage.html\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eMy first webpage!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy First Webpage\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eWritten with a little guidance from Moringa School\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello, world!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eWelcome to my first web page!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHere are some things I'm going to learn about coding:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eCSS\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJavaScript\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eAnd a lot more!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere we've added an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eunordered list\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e) with four\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elist items\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e). Here's the page with the unordered list:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-14-webpage_screenshot_unordered_list.png\" alt=\"MP-W1D1-14-webpage_screenshot_unordered_list.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1344\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf we wanted to make an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eordered list\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat uses numbers and letters instead of bullets, we would use an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eol\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eHTML\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eCSS\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eJavaScript\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003eAnd beyond!\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eol\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere's the list now:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/MP-W1D1-15-webpage_screenshot_ordered_list.png\" alt=\"MP-W1D1-15-webpage_screenshot_ordered_list.png\" width=\"519\" height=\"200\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1352\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNotice in the code how I've indented the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003es within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003es. This makes it much easier to read which tags are nested, and makes it easy to see where the closing tag goes when it's not on the same line. It's a good idea to write your closing tag just after you write your opening tag, and then go back and fill in whatever comes in the middle. This way, you won't forget to close a tag after opening it.\u003c/p\u003e\r\n\u003cp\u003eLet's commit again!\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit add my-first-webpage.html\r\n\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit commit -m \u003cspan class=\"hljs-string\"\u003e\"add list elements\"\u003c/span\u003e\u003cbr\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe're done with this page for the moment. Now is a good time to push the project to GitHub. As a reminder, here are the steps:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a\u003cspan\u003e \u003c/span\u003e\u003cem\u003emy-first-webpage\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erepository on GitHub\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git remote add [remote nickname] [remote url]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(replacing [remote nickname] with your initials or another good nickname and [remote url] with the URL to the GitHub repository you just created)\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e$ git push [remote nickname] master\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(replacing [remote nickname] with the same nickname you used when you added the remote link)\u003c/li\u003e\r\n\u003cli\u003eCheck on GitHub that your code uploaded successfully\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-object-oriented-and-git-collaboration-objectives","title":"Monday: Object Oriented and Git Collaboration Objectives","type":"WikiPage","content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe've learned about JavaScript data types like strings, numbers, and booleans. We have also learned about JavaScript arrays which are collections of indexed data. This week we are going to learn about JavaScript \u003c/span\u003e\u003cstrong\u003eobjects\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e which collect data AND functions into a single \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eobject\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e unit. We will see how business logic and user interface logic work together in the creation and updating of objects.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt the end of the week, you should be able to:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ebuild JavaScript objects with constructors\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eadd methods to JavaScript objects by creating prototypes\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe will also expand our Git skillset and learn how to do more complex collaboration.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-to-do-list-and-movie-tickets","title":"Tuesday: To-Do List and Movie Tickets","type":"WikiPage","content":"\u003ch2\u003ePractice and Code\u003c/h2\u003e\r\n\u003ch3\u003eTo Do List\u003c/h3\u003e\r\n\u003cp\u003eMake a to do list webpage where people can add tasks to create a list of things to do. Add an option for users to indicate a task is done. Use jQuery to remove the task from the \"to do\" list. Make sure to identify specific behaviors your program should demonstrate, and create specifications with example input and output. List these in the project's README.\u003c/p\u003e\r\n\u003ch3\u003eMovie Tickets\u003c/h3\u003e\r\n\u003cp\u003eCreate a webpage where a user can select the name of a movie, the time of day that they would like to see the movie and their age. The webpage should let them know how much their movie ticket will cost, based on those three factors. Consider that non-\"first-release\" movies, matinee and senior tickets tend to be cheaper than the regular priced ticket. Your constructor and prototype could be called Ticket and you can come up with the formula for determining how the price is calculated depending on the input from the user.\u003c/p\u003e","frontPage":false},{"exportId":"monday-angular-installations","title":"Monday: Angular Installations","type":"WikiPage","content":"\u003ch2\u003eAngular Installation\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eAngular is a platform that makes it easy to build applications with the web. It is an Open source web framework that was developed and maintained by Google.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eWe will install\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAngular CLI (Command Line Interface)\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat will help us create and develop our\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eAngular apps.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan\u003e1. Installation\u003c/span\u003e\u003c/h4\u003e\r\n\u003cpre\u003e\u003cspan\u003ejames@james-Inspiron-15-3552:~$ npm install -g @angular/cli\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eThis command will install the Angular CLI.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan\u003e2. Confirmation\u003c/span\u003e\u003c/h4\u003e\r\n\u003cpre\u003e\u003cspan\u003ejames@james-Inspiron-15-3552:~$ ng\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eThis will bring up a screen to show all the available\u003cem\u003e ng\u003c/em\u003e commands.\u003c/span\u003e \u003c/p\u003e","frontPage":false},{"exportId":"wednesday-alarm-clock-weather-app","title":"Wednesday: Alarm Clock; Weather App","type":"WikiPage","content":"\u003ch1\u003eAlarm Clock, Weather App\u003c/h1\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice using Bower and npm to manage dependencies, and work with third-party APIs to retrieve and display data in our applications. Continue using gulp tasks, including a development server with live reloading.\u003c/p\u003e\r\n\u003ch3\u003eWarm Up\u003c/h3\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is Bower? What are some reasons why we would want to use it, as well as npm?\u003c/li\u003e\r\n\u003cli\u003eWhat does the gulp\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewatch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod do?\u003c/li\u003e\r\n\u003cli\u003eIf we want to tell gulp to complete a hypothetical\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efirstTask\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebefore starting\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esecondTask\u003c/code\u003e, how do we do that, and how would we refer to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efirstTask\u003c/code\u003e?\u003c/li\u003e\r\n\u003cli\u003eWhat is an AJAX request used for?\u003c/li\u003e\r\n\u003cli\u003eWhy do browsers use the \"Same Origin Policy\"?\u003c/li\u003e\r\n\u003cli\u003eWhen an API wants to make its data available to websites at any domain, how does it do that?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eAlarm Clock\u003c/h3\u003e\r\n\u003cp\u003eBuild an online alarm clock using Moment.js! Here are some goals for this project:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eContinue to get used to using Gulp in your projects. Start this project by following along with all the Gulp lessons from this weekend and yesterday to build a full asset pipeline with a development server. You should be moving towards a template project structure that you can continue to use throughout the week including\u003cspan\u003e \u003c/span\u003e\u003cem\u003epackage.json\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile, a complete\u003cspan\u003e \u003c/span\u003e\u003cem\u003egulpfile.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith all tasks, and a basic folder structure.\u003c/li\u003e\r\n\u003cli\u003eUse this project to build up to working with APIs. Work on figuring out 3rd party documentation by using Moment.js - API documentation can be very daunting, so this should be a good place to start practicing your research skills.\u003c/li\u003e\r\n\u003cli\u003eReview your jQuery for allowing your users to interact with your alarm clock in the browser.\u003c/li\u003e\r\n\u003cli\u003eContinue to practice Object Oriented JavaScript concepts.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFollow along with the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringaprep-ft.herokuapp.com/#04.html\" target=\"_blank\"\u003eBower lesson\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto install jQuery, Bootstrap, and Moment.js. Here are some goals to get you started:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAs a user of your alarm clock, I would like to be able to view the current time.\u003c/li\u003e\r\n\u003cli\u003eI would also like to be able to enter a time into a form to set an alarm.\u003c/li\u003e\r\n\u003cli\u003eThe alarm should turn on at the specified alarm time.\u003c/li\u003e\r\n\u003cli\u003eAs a user, when the alarm turns on I want it to either show me something on the screen (like a picture/animation) or make a sound, or both.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003eFurther Exploration\u003c/h4\u003e\r\n\u003cp\u003eBonus goals are below! These are optional - come back to them if you have extra time after working on the weather app.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAs a user I would like to be able to hit a snooze button, which makes the alarm turn off and then be activated again five minutes later.\u003c/li\u003e\r\n\u003cli\u003eI'd like the ability to change the amount of snooze time if I would actually prefer another ten minutes of sleep, instead of five.\u003c/li\u003e\r\n\u003cli\u003eAs a user I would like to be able to set multiple alarms because mornings are hard.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eOptional: Weather\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eUse the lesson on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringaprep-ft.herokuapp.com/#04.html\" target=\"_blank\"\u003eUsing an API\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eas a reference to create your own weather app with the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://openweathermap.org/\" target=\"_blank\"\u003eOpen Weather Map API\u003c/a\u003e. Be sure to build it from scratch instead of using ping-pong as a starting point as the lesson does. Here are your goals:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a button which displays the humidity of a city, as we do in the lesson. Remember to include error checking.\u003c/li\u003e\r\n\u003cli\u003eCreate a button to display the current temperature of the city. Hint: This data will be given to you in degrees Kelvin. Create a\u003cspan\u003e \u003c/span\u003e\u003cem\u003etemperature.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emodule to translate degrees Kelvin into Celsius and also into Fahrenheit. Include a separate\u003cspan\u003e \u003c/span\u003e\u003cem\u003etemperature-interface.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to handle triggering the API call and displaying the temperature.\u003c/li\u003e\r\n\u003cli\u003eFirst display both Kelvin and Celsius, then add functionality to allow the user to choose to display either Celsius or Fahrenheit.\u003c/li\u003e\r\n\u003cli\u003eChoose another part of the weather API to explore, and feel free to restructure your app's frontend. You could show more of the current weather conditions besides humidity and temperature. You could use the data in different ways - for example, what if I want to know how much warmer it is right now in Nairobi than in Kitale? Could you make an app for people to compare the weather in multiple cities? Or you could display data about the 5 day forecast for a given city. Or you could work with their interactive weather maps and historical data.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003ePeer Code Review\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the app function as designed? Is it clearly presented?\u003c/li\u003e\r\n\u003cli\u003eIs the project structured in a logical way, between node modules and separate frontend code?\u003c/li\u003e\r\n\u003cli\u003eIs the code clear and readable, following standard syntax with descriptive variable names?\u003c/li\u003e\r\n\u003cli\u003eDoes the gulpfile include all tasks that have been introduced so far, as well as a development server with live reloading?\u003c/li\u003e\r\n\u003cli\u003eDoes the project use Bower to manage frontend dependencies?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"thursday-separation-of-user-interface-and-business-logic","title":"Thursday: Separation of User Interface and Business Logic","type":"WikiPage","content":"\u003cp\u003eNow that we know how to use jQuery to gather input from forms, let's return to our calculator app. We should already have the business logic in place, but it still needs a user interface.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eRemember, just as we discussed previously,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebusiness (or back-end) logic\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ehandles calculations and manipulation of data 'behind the scenes', and\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003euser interface (or front-end) logic\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ehandles interacting with the user, including gathering user input, updating and displaying information on the page, etc. Furthermore, our project should be organized in a manner that keeps these two types of logic distinctly\u003cspan\u003e \u003c/span\u003eseparate.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we'll walk through adding user interface (front-end) logic to our existing calculator application, further explore the differences between business and user interface logic, and address how to keep them properly separated. For now we will focus exclusively on our addition functionality. In subsequent lessons we'll expand our user interface to support subtraction, division and multiplication too.\u003c/p\u003e\r\n\u003ch2\u003eLinking Resources\u003c/h2\u003e\r\n\u003cp\u003eClone your existing calculator application, and we'll pick up right where we left off. (If you're concerned your previous calculator project may not contain the correct code, don't worry! All necessary code for a functioning calculator is present in this lesson for review.) If you were able to complete all directions in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/monday-calculator-business-logic?module_item_id=1919\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/pages/monday-calculator-business-logic\" data-api-returntype=\"Page\"\u003e\u003cspan\u003ePractice: Calculator Business Logic\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eexercise, your project should already contain an HTML file. Let's update its \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e section to link to everything our application will need. This includes a link to Bootstrap, our own CSS stylesheet, the jQuery library, and our own custom JavaScript \u003cem\u003escripts.js\u003c/em\u003e file. Here's an example HTML file with these resources correctly linked:\u003c/p\u003e\r\n\u003cpre\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e     \u0026lt;title\u0026gt;Calculator\u0026lt;/title\u0026gt;\u003cbr\u003e     \u0026lt;link href=\"css/bootstrap.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003cbr\u003e     \u0026lt;link href=\"css/styles.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003cbr\u003e     \u0026lt;script   src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e     \u0026lt;script src=\"js/scripts.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e     \u0026lt;h1\u0026gt;Calculator\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt;\u003c/pre\u003e\r\n\u003cp\u003eDo note that the file above assumes you've downloaded\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebootstrap.css\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto your project's \u003cem\u003ecss\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder and the latest version of jQuery into your project's \u003cem\u003ejs\u003c/em\u003e folder, as we've covered in previous lessons. You should already have a\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in your js folder containing the JavaScript business logic we wrote in the previous calculator exercise. Additionally, make sure the link to jQuery comes before the link to your own\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. Because we're going to write code in\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat will use jQuery, our application must load the jQuery library before it loads\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e. If jQuery isn't loaded beforehand, our application won't know what to do when it reaches the jQuery code in\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebecause it won't even know what jQuery is yet!\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAlways link any scripts files that use jQuery after you link the jQuery library itself.\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdding Forms\u003c/h2\u003e\r\n\u003cp\u003eNow that we have our necessary resources in place, let's begin adding to our application's HTML. Instead of asking the user to provide our calculator numbers with dialog boxes, let's allow them to submit numbers through our actual HTML web page. To do this, we'll add an HTML form. Since we're focusing only on creating a user interface for our addition functionality for now, we'll give this form the id\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd\u003c/code\u003e. We'll use this id to target the form later on in our jQuery code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\u003c/code\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;html\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e   \u0026lt;head\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;title\u0026gt;Calculator\u0026lt;/title\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;link href=\"css/bootstrap.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;link href=\"css/styles.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;script   src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;script src=\"js/scripts.js\"\u0026gt;\u0026lt;/script\u0026gt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e   \u0026lt;/head\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e   \u0026lt;body\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;h1\u0026gt;Calculator\u0026lt;/h1\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;form id=\"add\"\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e         \u0026lt;div class=\"form-group\"\u0026gt; \u0026lt;label for=\"add1\"\u0026gt;1st number:\u0026lt;/label\u0026gt; \u0026lt;input id=\"add1\" class=\"form-control\" type=\"text\"\u0026gt; \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e         \u0026lt;div class=\"form-group\"\u0026gt; \u0026lt;label for=\"add2\"\u0026gt;2nd number:\u0026lt;/label\u0026gt; \u0026lt;input id=\"add2\" class=\"form-control\" type=\"text\"\u0026gt; \u0026lt;/div\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e         \u0026lt;button type=\"submit\" class=\"btn\"\u0026gt;Add!\u0026lt;/button\u0026gt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e      \u0026lt;/form\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e   \u0026lt;/body\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003ctable\u003e\u003c/table\u003e\r\n\u003ch2\u003eAdding User Interface Logic\u003c/h2\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile should already contain some code. If you successfully completed the previous calculator exercise, the business logic present in your \u003cem\u003escripts.js\u003c/em\u003e file should look similar to this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003c/code\u003e\u003cspan style=\"font-weight: 400;\"\u003evar add = function(number1, number2) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  return number1 + number2;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e};\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003evar subtract = function(number1, number2) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  return number1 - number2;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e};\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003evar multiply = function(number1, number2) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  return number1 * number2;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e};\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003evar divide = function(number1, number2) {\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e  return number1 / number2;\u003c/span\u003e\u003cbr\u003e\u003cspan style=\"font-weight: 400;\"\u003e};\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd the code currently responsible for gathering user input should resemble this:\u003c/p\u003e\r\n\u003cpre\u003evar number1 = parseInt(prompt(\"Enter a number:\"));\u003cbr\u003evar number2 = parseInt(prompt(\"Enter another number:\"));\u003cbr\u003ealert(add(number1, number2));\u003c/pre\u003e\r\n\u003cp\u003eIf your calculator's business logic doesn't resemble the examples above yet, pause here and take some time to review the example code, or revisit the \u003ca href=\"pages/monday-calculator-business-logic?module_item_id=1919\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/pages/monday-calculator-business-logic\" data-api-returntype=\"Page\"\u003ePractice: Calculator Business Logic\u003c/a\u003e exercise before moving forward. We'll continue to add to this calculator project in future lessons, so make sure your version is up-to-date.\u003c/p\u003e\r\n\u003ch2\u003eGathering Form Input with jQuery\u003c/h2\u003e\r\n\u003cp\u003eNow, let's change the logic responsible for interacting with the user. Let's add functionality to gather information the user has supplied in our new form when they hit 'submit'. This will be much nicer than relying on those pesky pop-up dialog boxes. We'll begin by moving our existing user interface logic into a function passed to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e. We only want logic responsible for interacting with the user in this block of code that begins with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$(document).ready()\u003c/code\u003e. The business logic code should not be within this function, but the jQuery user interface logic should. This is because it's fine if the business logic functions are loaded into the computer's memory\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe HTML finishes rendering, but we don't want to begin dealing with input or output until the HTML document is fully loaded. Otherwise, we could hit some pretty big errors. Our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile should now look like this (although you don't need the comments; those are just for reference here in this lesson):\u003c/p\u003e\r\n\u003cpre\u003e// Business (or back-end) logic:\u003cbr\u003e\u003cbr\u003evar add = function(number1, number2) {\u003cbr\u003e return number1 + number2;\u003cbr\u003e};\u003cbr\u003evar subtract = function(number1, number2) {\u003cbr\u003e return number1 - number2;\u003cbr\u003e};\u003cbr\u003evar multiply = function(number1, number2) {\u003cbr\u003e return number1 * number2;\u003cbr\u003e};\u003cbr\u003evar divide = function(number1, number2) {\u003cbr\u003e return number1 / number2;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003e// Everything below this line is user interface (or front-end) logic:\u003cbr\u003e\u003cbr\u003e$(document).ready(function() {\u003cbr\u003e var number1 = parseInt(prompt(\"Enter a number:\"));\u003cbr\u003e var number2 = parseInt(prompt(\"Enter another number:\"));\u003cbr\u003e alert(add(number1, number2));\u003cbr\u003e});\u003c/pre\u003e\r\n\u003cp\u003eNow, let's add code to gather the data users provide in our form. Before we add this directly into\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e, let's experiment in the console. Visit your HTML page, and enter some values in the form. Then, if we open the JavaScript console on that same page we can test out the following jQuery to see what will successfully return the input we've placed in the form. Let's try out the following lines of jQuery:\u003c/p\u003e\r\n\u003cpre\u003e$(\"#add1\").val();\u003cbr\u003e$(\"#add2\").val();\u003c/pre\u003e\r\n\u003cp\u003eHere, we're targeting two HTML form elements in each of the two lines listed above. An input with the id of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand an input with the id of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd2\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.val()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto fetch the current value of that form.\u003c/p\u003e\r\n\u003cp\u003eAnd hey, it works! We can see that each of these two lines of jQuery successfully returned the value currently present in the respective form fields. Now that we know these two lines of code gather the information we need, we can include them in our user interface logic:\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-size: 1rem;\"\u003e\u003cspan style=\"font-size: 10pt;\"\u003e$(document).ready(function()\u003c/span\u003e {\u003c/span\u003e\u003cbr\u003e  var number1 = parseInt($(\"#add1\").val());\u003cbr\u003e  var number2 = parseInt($(\"#add2\").val());\u003cbr\u003e  alert(add(number1, number2));\u003cbr\u003e});\u003c/pre\u003e\r\n\u003cp\u003eHere, we're replacing the values retrieved via\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edialog boxes with jQuery to instead retrieve these values from our form. We still need\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecause, like the information we gathered with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eprompt()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edialog boxes, content gathered from form inputs is also always in string format, and our calculator's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction requires numbers.\u003c/p\u003e\r\n\u003ch2\u003eWaiting for Users to Submit Form\u003c/h2\u003e\r\n\u003cp\u003eNow, if we open our HTML file in the browser, it displays our form, but immediately greets us with an alert reading\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e. Even though we're now waiting for the HTML document to finish loading!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Thursday/no-submit-listener-resulting-in-NaN-alert.png\" alt=\"no-submit-listener-resulting-in-NaN-alert.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1716\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis is because we're not actually waiting for the user to submit the form, and the alert above is being triggered\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe HTML loads, but before the user has time to fill our form out! Our code is grabbing the empty form inputs and attempting to add them together, resulting in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evalue we see here. Ideally, we want to wait until the user actually submits the form. Let's add a form submit event handler and its accompanying\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eevent.preventDefault()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe discussed in the \u003ca href=\"pages/wednesday-forms?module_item_id=67\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/pages/wednesday-forms\" data-api-returntype=\"Page\"\u003eForms\u003c/a\u003e lesson:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003c/code\u003evar add = function(number1, number2) {\u003cbr\u003ereturn number1 + number2;\u003cbr\u003e};\u003cbr\u003evar subtract = function(number1, number2) {\u003cbr\u003ereturn number1 - number2;\u003cbr\u003e};\u003cbr\u003evar multiply = function(number1, number2) {\u003cbr\u003ereturn number1 * number2;\u003cbr\u003e};\u003cbr\u003evar divide = function(number1, number2) {\u003cbr\u003ereturn number1 / number2;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003e$(document).ready(function() {\u003cbr\u003e$(\"form#add\").submit(function(event) {\u003cbr\u003eevent.preventDefault();\u003cbr\u003evar number1 = parseInt($(\"#add1\").val());\u003cbr\u003evar number2 = parseInt($(\"#add2\").val());\u003cbr\u003ealert(add(number1, number2));\u003cbr\u003e});\u003cbr\u003e});\u003c/pre\u003e\r\n\u003ch2\u003eDisplaying Results Directly in HTML\u003c/h2\u003e\r\n\u003cp\u003eIf we refresh our page and try again, everything should work correctly this time:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Week%202%20Thursday/calculator-dialog-with-correct-answer.png\" alt=\"calculator-dialog-with-correct-answer.png\" width=\"516\" height=\"327\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1691\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe don't see that alert dialog box with the result until\u003cspan\u003e \u003c/span\u003eafter we provide two numbers and submit the form. Perfect!\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eHowever, that pop-up\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edialog doesn't make for the nicest user interface. Instead, let's display our calculator's answer directly in our HTML web page and bypass the need for pop-up dialogs all together. This is also part of the user interface logic. Below the form, let's add in an empty div where we may place the result. We'll give it an id of\u003cspan\u003e \u003ccode\u003eoutput\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003ein order to target it using jQuery:\u003c/p\u003e\r\n\u003cpre\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e     \u0026lt;title\u0026gt;Calculator\u0026lt;/title\u0026gt;\u003cbr\u003e     \u0026lt;link href=\"css/bootstrap.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003cbr\u003e     \u0026lt;link href=\"css/styles.css\" rel=\"stylesheet\" type=\"text/css\"\u0026gt;\u003cbr\u003e     \u0026lt;script   src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e     \u0026lt;script src=\"js/scripts.js\"\u0026gt;\u0026lt;/script\u0026gt; \u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e     \u0026lt;h1\u0026gt;Calculator\u0026lt;/h1\u0026gt;\u003cbr\u003e     \u0026lt;form id=\"add\"\u0026gt;\u003cbr\u003e        \u0026lt;div class=\"form-group\"\u0026gt; \u0026lt;label for=\"add1\"\u0026gt;1st number:\u0026lt;/label\u0026gt; \u0026lt;input id=\"add1\" class=\"form-control\" type=\"text\"\u0026gt; \u0026lt;/div\u0026gt;\u003cbr\u003e        \u0026lt;div class=\"form-group\"\u0026gt; \u0026lt;label for=\"add2\"\u0026gt;2nd number:\u0026lt;/label\u0026gt; \u0026lt;input id=\"add2\" class=\"form-control\" type=\"text\"\u0026gt; \u0026lt;/div\u0026gt;\u003cbr\u003e        \u0026lt;button type=\"submit\" class=\"btn\"\u0026gt;Add!\u0026lt;/button\u0026gt; \u003cbr\u003e     \u0026lt;/form\u0026gt;\u003cbr\u003e     \u0026lt;div id=\"output\"\u0026gt; \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt;\u003c/pre\u003e\r\n\u003cp\u003eAnd, instead of popping up that \u003cspan\u003e\u003ccode\u003ealert\u003c/code\u003e\u003c/span\u003e dialog, we'll simply replace the contents of our new\u003cspan\u003e \u003ccode\u003eoutput\u003c/code\u003e\u003c/span\u003e div\u003cspan\u003e \u003c/span\u003ewith the result, using jQuery's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.text()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Let's also assign the result of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.add()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to the variable name result, then simply insert result directly onto our page in order to make our code clean and easy to follow:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\u003c/code\u003e\u003ccode class=\"javascript hljs\"\u003e\u003c/code\u003evar add = function(number1, number2) {\u003cbr\u003ereturn number1 + number2;\u003cbr\u003e};\u003cbr\u003evar subtract = function(number1, number2) {\u003cbr\u003ereturn number1 - number2;\u003cbr\u003e};\u003cbr\u003evar multiply = function(number1, number2) {\u003cbr\u003ereturn number1 * number2;\u003cbr\u003e};\u003cbr\u003evar divide = function(number1, number2) {\u003cbr\u003ereturn number1 / number2;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003e$(document).ready(function() {\u003cbr\u003e$(\"form#add\").submit(function(event) {\u003cbr\u003eevent.preventDefault();\u003cbr\u003evar number1 = parseInt($(\"#add1\").val());\u003cbr\u003evar number2 = parseInt($(\"#add2\").val());\u003cbr\u003evar result = add(number1, number2);\u003cbr\u003e$(\"#output\").text(result);\u003cbr\u003e});\u003cbr\u003e});\u003c/pre\u003e\r\n\u003cp\u003eNow, we should be able to run our application in the browser, insert two numbers into the form fields, and submit the form to see our answer added to the page.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg style=\"border: 1px solid #000000; padding: 2px;\" src=\"viewer/files/Week%202%20Thursday/calculator-result-added-directly-to-page.png\" alt=\"calculator-result-added-directly-to-page.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1692\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYou may have noticed that our calculator's user interface only offers the option to add two numbers together; despite our business logic containing functions that offer subtraction, multiplication, and division too. In future lessons we'll add support for users to choose which mathematic operation they'd like to execute on the provided numbers, instead of defaulting to addition.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eBut for now, we have a fully functioning addition calculator, complete with a user interface. That's awesome!\u003c/p\u003e\r\n\u003ch2\u003eSeparation of Logic Review\u003c/h2\u003e\r\n\u003cp\u003eLet's take a moment to review the manner we organized our business and user interface logic:\u003c/p\u003e\r\n\u003cpre\u003e// Business (or back-end) logic:\u003cbr\u003evar add = function(number1, number2) {\u003cbr\u003e  return number1 + number2;\u003cbr\u003e};\u003cbr\u003evar subtract = function(number1, number2) {\u003cbr\u003e  return number1 - number2;\u003cbr\u003e};\u003cbr\u003evar multiply = function(number1, number2) {\u003cbr\u003e  return number1 * number2;\u003cbr\u003e};\u003cbr\u003evar divide = function(number1, number2) {\u003cbr\u003e  return number1 / number2;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003e// User interface (or front-end) logic:\u003cbr\u003e$(document).ready(function() {\u003cbr\u003e  $(\"form#add\").submit(function(event) {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    var number1 = parseInt($(\"#add1\").val());\u003cbr\u003e    var number2 = parseInt($(\"#add2\").val());\u003cbr\u003e    var result = add(number1, number2);\u003cbr\u003e    $(\"#output\").text(result);\u003cbr\u003e  });\u003cbr\u003e});\u003c/pre\u003e\r\n\u003cp\u003eWe can see that the business logic and user interface logic are in distinctly separate sections of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. The user interface sections is responsible for gathering user-provided values, parsing them into integers, and calling our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction when the user submits a form. It also displays the result of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction directly on the page for the user to view. Essentially, this section is handling all interactivity with our user. It can call a back-end function (as seen in the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar result = add(number1, number2);\u003c/code\u003e), but the function is not defined here in this block of code. That's the responsibility of the business, or back-end logic.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThe business logic contains functions for all capabilities our calculator will eventually have. It instructs our application what to do when a user opts to add two numbers, versus what to do when a user opts to divide two numbers (a feature we'll add later on). However, notice that it does not contain anything that interacts with the user. All logic here occurs 'behind the scenes'. The user interface logic may call one of the business logic's functions when necessary, but the functions themselves are defined in the back-end or business logic.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThis is ideal separation between front and back-end logic. They're distinctly separate areas of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003escripts.js\u003c/em\u003efile, are responsible for distinctly different things, and our front-end logic simply calls functions defined in the back-end when necessary.\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eNow that we've created a working application with functioning front-end and back-end logic, revisit the Business and User Interface Logic if necessary.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003eBefore we move on make sure to also take a look at the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/\"\u003ejQuery documentation\u003c/a\u003e. It may feel a bit overwhelming at first, since it contains many concepts we haven't yet covered, but that's absolutely okay! Reading documentation is an incredibly important part of programming, so begin to familiarize yourself with it now. Not everything may make sense, but you'll be surprised at the amount you do understand after only a few weeks of programming! In particular, check out the sections on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/effects/\"\u003eEffects\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/events/mouse-events/\"\u003eMouse Events\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/events/form-events/\"\u003eForm Events\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/manipulation/\"\u003eManipulation\u003c/a\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/category/traversing/\"\u003eTraversing\u003c/a\u003e. Consider trying out some of the methods listed here your next projects! And in the future, when you're trying to figure out how to do something with jQuery, the documentation is always the first place to look.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-control-flows","title":"Tuesday: Control Flows","type":"WikiPage","content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf you think about what we've been doing so far, we've been writing instructions for computers. That's all programming really is: a list of instructions for computers. The main difficulty of being a developer is translating our ideas in human-speak into ideas in computer-speak.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn this lesson, we will start to learn how we can ask JavaScript to think like us and make decisions like us.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's start with human-speak. Many decisions we make everyday boil down to this sentence in some form:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"If something is true, let's do option 1, or else, if it is false, let's do option 2.\"\u003c/span\u003e\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis sentence looks fairly similar when we write it with JavaScript. See for yourself:\u003c/span\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003evar\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e enoughSleep = \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003etrue\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eif\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (enoughSleep) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"I'm ready to go!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e} \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eelse\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"I need a nap.\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis code is called an\u003c/span\u003e\u003cstrong\u003e if/else statement\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e, or \u003c/span\u003e\u003cstrong\u003ebranching\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Here's how it works. If the variable \u003ccode\u003eenoughSleep\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e is true, JavaScript will run the first code block and print \"I'm ready to go!\" to the console. Otherwise (else), the other code block will run and \"I need a nap.\" will print.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003eif\u003c/code\u003e statements are made of the keyword \u003ccode\u003eif\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e, followed by a condition in parentheses. The condition must evaluate to either true or false. If the condition is true, then the code block following the condition is executed. Otherwise, JavaScript moves on. The else block does not need a condition because it acts as a catch-all for the if statement - the code inside of the else block will run if the if condition is false.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn general, JavaScript code runs from top to bottom, kind of like a car driving straight down the road. When the car encounters an if statement, it is like encountering a split in the road. You can't take both paths - if the condition is true, the car turns down the path and the \u003ccode\u003eif\u003c/code\u003e code runs; otherwise the car keeps going down its current path and the \u003ccode\u003eelse\u003c/code\u003e code runs.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe \u003ccode\u003eif\u003c/code\u003e condition must evaluate to either true or false - this means that we can use an expression in the parentheses. It does not need to be a single variable like in the previous example. if/else statements are even more powerful when we use comparison operators (for example, greater than \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and less than \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e), like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003evar\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e temperature = \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e30\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt; undefined\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e if (temperature \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt; 20) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e    console.log(\"Don't forget a jacket!\");\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e} else {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e    console.log(\"Keep cool today!\");\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the code above, we create a variable named \u003ccode\u003etemperature\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and set it equal to 30. Then we write our if/else statement: If the value of \u003ccode\u003etemperature\u003c/code\u003e is less than 20, print \"Don't forget a jacket!\". Else (that is to say, if the temperature is greater than 20), print \"Keep cool today!\". Because temperature equals 30, the message \"Keep cool today!\" logs to the console.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat if we want more conditions? After all, there is a huge range of temperatures to prepare for, not just hot and cold! We can add another condition with \u003ccode\u003eelse if\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Let's see how it fits into our current \u003ccode\u003eelse if\u003c/code\u003e statement:\u003c/span\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eif\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (temperature \u0026lt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e15\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Don't forget a jacket!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e} \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eelse\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eif\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (temperature \u0026lt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e25\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Have a nice day :)\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e} \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eelse\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Keep cool today!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003ccode\u003eelse if\u003c/code\u003e is just like an alternate \u003ccode\u003eif\u003c/code\u003e. It also has a condition to be checked in parenthesis next to it, and if that condition is true then the code in curly braces following it runs. But\u003ccode\u003e else if\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e's condition is only checked when the \u003ccode\u003eif\u003c/code\u003e condition has already been found to be false.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFor example, let's set our \u003ccode\u003etemperature\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e variable equal to 23 and run the code. When JavaScript hits the first if statement, it checks the condition. Is \u003ccode\u003etemperature\u003c/code\u003e less than 15? No: \u003ccode\u003etemperature\u003c/code\u003e is 23, so the condition is false. JavaScript proceeds and skips the code block containing \u003ccode\u003econsole.log(\"Don't forget a jacket!\")\u003c/code\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e and goes to the next condition in the \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eelse\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eif\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Is temperature less than 25? Yes, 23 is less than 25. The condition evaluates to true and the code block with the line\u003ccode\u003e console.log(\"Have a nice day :)\");\u003c/code\u003e runs. Then the if statement is complete and JavaScript moves on and skips the else code block.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe can add as many\u003ccode\u003e else if\u003c/code\u003e statements as we like. For example, let's say we want to print a warning when the weather is extremely cold:\u003c/span\u003e\u003c/p\u003e\r\n\u003ctable\u003e\r\n\u003ctbody\u003e\r\n\u003ctr\u003e\r\n\u003ctd\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eif\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (temperature \u0026lt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e0\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Brr! Don't freeze out there!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e} \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eelse\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eif\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (temperature \u0026lt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e15\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Don't forget a jacket!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e} \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eelse\u003c/span\u003e \u003cspan style=\"font-weight: 400;\"\u003eif\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (temperature \u0026lt; \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e25\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e) {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Have a nice day :)\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e} \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eelse\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e {\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e  \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003econsole\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.log(\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"Keep cool today!\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e);\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/tbody\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWe step through this sequence in the same way: first we check if \u003ccode\u003etemperature\u003c/code\u003e is less than 0, and if it's not, then we check if it's less than 15, and so on.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-practice-branching-and-merging","title":"Wednesday: Practice: Branching and Merging","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Now that you have spent some time learning about branching and merging, let’s practice! The goal of this exercise is to work on branching and merging along with your new CSS skills.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the benefit of branching?\u003c/li\u003e\r\n\u003cli\u003eHow do we create a new branch of a project?\u003c/li\u003e\r\n\u003cli\u003eWhy would we want to merge back into master?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eResort Website\u003c/h3\u003e\r\n\u003cp\u003eYou are hired by an investor to create a website for a private island resort that they are building.\u003c/p\u003e\r\n\u003cp\u003eYour website should have:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eA main home page\u003c/li\u003e\r\n\u003cli\u003ePages for:\r\n\u003cul\u003e\r\n\u003cli\u003eaccommodations\u003c/li\u003e\r\n\u003cli\u003eactivities\u003c/li\u003e\r\n\u003cli\u003etravel arrangements\u003c/li\u003e\r\n\u003cli\u003econtact information\u003c/li\u003e\r\n\u003cli\u003epictures, etc.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThe investor doesn't know exactly what style they want for the website, so they have asked you to use your best judgement and provide them with at least two options for styling so they can make their decision later.\u003c/p\u003e\r\n\u003cp\u003eMake a branch for each style and when you are done, call a teacher over so that the \"investor\" can see their options and decide which style they would prefer. Once the \"investor\" (your TM) has made their selection, merge that branch into master.\u003c/p\u003e\r\n\u003cp\u003eMake sure you have been making commits throughout building this project and make a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egh-pages\u003c/code\u003ebranch to display it on GitHub Pages. And don't forget your README!\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you and your partner finish all activities for the day with time to spare, make a website for your favorite restaurant. Include a page to display the menu, a page with contact information and hours, and a homepage describing the cuisine, or restaurant's history. Add styles using CSS, and publish the site on GitHub Pages.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-address-book-refactoring","title":"Wednesday: Address Book: Refactoring","type":"WikiPage","content":"\u003cp\u003eThe jQuery section of our address book application is becoming a little cumbersome. Let's refactor to improve its readability and efficiency. After all, we always want to write clean, easy-to-read code with well-separated business and user interface logic. It's easier to read, easier to collaborate on, and generally appears much more professional in nature.\u003c/p\u003e\r\n\u003cp\u003eBy pulling some of the code into functions\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoutside\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof the event listener we can actually pre-process it\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe document is ready. Then, for the code within the event listener, we can simply call the pre-processed functions.\u003c/p\u003e\r\n\u003cp\u003eFor example, we can create a function to reset the fields:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e\u003cem\u003ejs/scripts.js\u003c/em\u003e\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-javascript hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eresetFields\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input#new-first-name\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input#new-last-name\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input.new-street\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input.new-city\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n    $(\u003cspan class=\"hljs-string\"\u003e\"input.new-county\"\u003c/span\u003e).val(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n}\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we can remove the lines of code previously responsible for resetting the fields from the form submit callback, and simply call\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eresetFields()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead. Easy enough!\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-git-merging","title":"Wednesday: Git Merging","type":"WikiPage","content":"\u003cp\u003eIn the last lesson we explored creating and managing multiple branches in a single Git repository. As we learned, branches allow us to create multiple copies of our code. These copies may be used to experiment with implementing new code, without putting the \"final version\" or master branch at risk of bugs or errors.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, branches can be used to simply try out different options before deciding which should end up in the final iteration of the project; like we did in the previous lesson with different sets of CSS styles.\u003c/p\u003e\r\n\u003cp\u003eHowever, once we confirm the code located in a feature branch works, and that we want to include it in the final version of our project, we need to integrate this code into the master branch that represents our final product. The act of incorporating code from multiple branches together is called \u003cstrong\u003emerging\u003c/strong\u003e. In this lesson, we'll walk through merging branches together in our example project.\u003c/p\u003e\r\n\u003ch2\u003eMerging Branches\u003c/h2\u003e\r\n\u003cp\u003eLet's say we've decided to use the CSS we wrote in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch in the final version of our project. Since the master branch represents the final product, we'll need to merge the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eTo merge two branches you must first navigate to the branch you'd like to introduce new code into. In our case, this is the master branch, because we'd like to integrate the CSS we created in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto see where we are currently located:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n  master\r\n* \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you followed along with the previous lesson exactly, you should still be located in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e. Let's navigate into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eusing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git checkout\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit checkout master\r\n\u003cspan class=\"hljs-constant\"\u003eSwitched\u003c/span\u003e to branch \u003cspan class=\"hljs-string\"\u003e'master'\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eagain to confirm we've successfully navigated to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n  \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git merge\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand to bring the contents and commits of an outside branch into our current branch. In our case, we'll bring the commits from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch we are currently located in. We'll run the following command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git merge \u003cspan class=\"hljs-keyword\"\u003ered_t\u003c/span\u003eheme\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis should result in something that looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-title\"\u003eUpdating\u003c/span\u003e 982b0f2..d5bae64\r\nFast-forward\r\n css/styles.css | \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e ++++++++++++++++-\r\n \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e file changed, \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e insertions(+), \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e deletion(-)\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git log\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto view our commit history:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git log\r\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e d5bae6406669988e154608ce990e08fed51e9cb3\r\nAuthor: Albert Einstien \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e13\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e00\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e42\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    Make \u003cspan class=\"hljs-keyword\"\u003eall\u003c/span\u003e font sans-serif style.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003ef2d9510cdc76736c7c5cf7e5d56264cd405fcd1\r\nAuthor: Albert Einstien \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e51\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e11\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e styles \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e h1, h2, p, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e body \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e fit red theme.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e982\u003c/span\u003eb0f21463be34d909c45dd67778d6ffe3d7668\r\nAuthor: Albert Einstien \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e06\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e35\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eAdd\u003c/span\u003e CSS rule \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e make H1 headers blue.\r\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e8e36\u003c/span\u003ef8bfd58643487565c5a4fbcb5250fed0808b\r\nAuthor: Albert Einstien \u0026lt;einstein@email.com\u0026gt;\r\n\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e:   Mon Jul \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e04\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e27\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e0700\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003eCreate\u003c/span\u003e stylesheet, link \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e head \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e website.\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNotice that the two most recent commits from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare now part of the commit history here in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. This is because we merged\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. This means all code and commits from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehave been incorporated into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e, too.\u003c/p\u003e\r\n\u003cp\u003eThe commit structure of our project across all branches currently looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/MP-W1D2-18-flow_chart_4.png\" alt=\"MP-W1D2-18-flow_chart_4.png\" width=\"794\" height=\"723\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/1384\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNotice that merging\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas brought all commits previously exclusive to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehere in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. Also, notice that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommits don't instantly disappear when we merge them into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. They still exist in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch.\u003c/p\u003e\r\n\u003ch3\u003eDeleting Branches\u003c/h3\u003e\r\n\u003cp\u003eAfter successfully merging a branch (always confirm all of the branch's commits are present), you may delete it if you do not plan on using it further. This is safe to do because all commits\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eonce contained are now present in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emaster\u003c/code\u003e. So, we don't risk losing any work.\u003c/p\u003e\r\n\u003cp\u003eWe can delete a branch using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch -D\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit branch -\u003cspan class=\"hljs-constant\"\u003eD\u003c/span\u003e red_theme\r\n\u003cspan class=\"hljs-constant\"\u003eDeleted\u003c/span\u003e branch red_theme (was d5bae64).\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can run\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git branch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand see\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas been removed from the repository entirely:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e$ git branch\r\n  \u003cspan class=\"hljs-keyword\"\u003eblue_t\u003c/span\u003eheme\r\n* master\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd, since we opted to integrate the styles in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ered_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e, we no longer need the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblue_theme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebranch either. We'll delete it at this time, too:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egit branch -\u003cspan class=\"hljs-constant\"\u003eD\u003c/span\u003e blue_theme\r\n\u003cspan class=\"hljs-constant\"\u003eDeleted\u003c/span\u003e branch blue_theme (was \u003cspan class=\"hljs-number\"\u003e268363\u003c/span\u003ea).\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eKnow that merging doesn't always go quite this smoothly, unfortunately. If multiple branches contain edits to the same lines of code, Git won't know which edit should supersede which, and requires the developer to manually intervene (this primarily occurs when branches are working on the same code simultaneously, and both attempt to merge with master). This is known as a merge conflict.\u003c/p\u003e\r\n\u003cp\u003eHowever, we shouldn't encounter any merge conflicts quite yet. For now, simply make sure you're familiar with the general concepts of branching and merging, and able to create branches for use with GitHub Pages. We'll explore merge conflicts, what they look like, and how to resolve them later on.\u003c/p\u003e\r\n\u003cp\u003eAs you can see, merging and branching in Git is a powerful, complex feature. However, don't feel overwhelmed if you don't yet have a handle on everything we've covered in these past two lessons. Feel free to refer back to this content whenever necessary. Soon enough, branching and merging will become second nature!\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-variable-scope","title":"Tuesday: Variable Scope","type":"WikiPage","content":"\u003ch2\u003eHomework: Variable Scope\u003c/h2\u003e\r\n\u003cp\u003eBefore we move on, let's pause to discuss\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003evariable scope\u003c/strong\u003e. The scope of a variable defines where and when it is available to be used or modified. Scope can be global or local depending on how it is declared.\u003c/p\u003e\r\n\u003ch2\u003eGlobal Scope\u003c/h2\u003e\r\n\u003cp\u003eVariables declared outside of functions have\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eglobal scope\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich means that all code and functions can access them.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e globalString = \u003cspan class=\"hljs-string\"\u003e\"This is a global variable\"\u003c/span\u003e;\r\n\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esampleFunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(globalString);\r\n        globalString = \u003cspan class=\"hljs-string\"\u003e\"This is a global variable update!!\"\u003c/span\u003e;\r\n        alert(globalString);\r\n      }\r\n\r\n      alert(globalString);\r\n      sampleFunction();\r\n      alert(globalString);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's run this in JSFiddle and see what we get each time we ask for an alert.\u003c/p\u003e\r\n\u003ch2\u003eLocal Scope\u003c/h2\u003e\r\n\u003cp\u003eVariables declared inside of functions have\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elocal scope\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ewhich means they are only locally available during the execution of the function. When we look at a variable that is defined within a function, we find that it's scope ends when the function is finished processing. In fact, the variable is created and destroyed each time the function runs.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIf we move the variable declaration from the global to the local by adding it inside the function, let's see what happens:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esampleFunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e globalString = \u003cspan class=\"hljs-string\"\u003e\"This is a global variable\"\u003c/span\u003e;\r\n        alert(globalString);\r\n        globalString = \u003cspan class=\"hljs-string\"\u003e\"This is a global variable update!!\"\u003c/span\u003e;\r\n        alert(globalString);\r\n      }\r\n\r\n      alert(globalString);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNothing. Look in the console and the error\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eUncaught ReferenceError: globalString is not defined\u003c/code\u003e. We have not run the function so as the error message indicates,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eglobalString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas not actually been defined yet. It now has local scope.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eLet's look at another example:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\r\n      \u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan\u003e\u0026lt;script   \u003c/span\u003e\u003cspan\u003esrc=\"https://code.jquery.com/jquery-3.3.1.min.js\" \u003c/span\u003e\u003cspan\u003eintegrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" \u003c/span\u003e\u003cspan\u003ecrossorigin=\"anonymous\"\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"js/scripts.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eAn adventure in variable scope\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"click-one\"\u003c/span\u003e\u0026gt;\u003c/span\u003eclick me first\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n          \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"click-two\"\u003c/span\u003e\u0026gt;\u003c/span\u003eclick me second\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn your\u003cspan\u003e \u003c/span\u003e\u003cem\u003escript.js\u003c/em\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"div#click-one\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e whatToSay = \u003cspan class=\"hljs-string\"\u003e\"Hello!\"\u003c/span\u003e;\r\n          alert(whatToSay);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"div#click-two\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          alert(whatToSay);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eclick me first\u003c/em\u003e, a dialog box pops open that says \"Hello!\". If we then click click me second, what happens? Nothing. If we look to the JavaScript console, we find the familiar error\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUncaught ReferenceError: whatToSay is not defined\u003c/em\u003e. And that's true. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable is defined inside a function. Therefore, the program only knows about the variable while it is inside the function processing the code there. As soon as the function is complete, the variable is no longer defined; it's outside the limits of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e's variable scope.\u003c/p\u003e\r\n\u003ch2\u003eUnscoped variables (bad practice!)\u003c/h2\u003e\r\n\u003cp\u003eWhen you create a variable, it is important to declare it to the program using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eIf you declare a variable by assigning it a value like this (without\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eNamer\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n        sampleName = \u003cspan class=\"hljs-string\"\u003e\"Cindy Lou\"\u003c/span\u003e\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJavaScript will make it a global variable\u003cspan\u003e \u003c/span\u003e\u003cem\u003eautomatically\u003c/em\u003e, even if it is inside of a function. In the above function,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esampleName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewould become a global variable with global scope which allows any part of the code to access or modify it.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eThis is something you should\u003cspan\u003e \u003c/span\u003e\u003cem\u003enever\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edo. Always use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword to declare your variables and consciously determine whether their scope should be global or local.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's just carry this through so that you understand what's going on if you see it elsewhere:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      $(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"div#click-one\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          whatToSay = \u003cspan class=\"hljs-string\"\u003e\"Hello!\"\u003c/span\u003e;\r\n          alert(whatToSay);\r\n        });\r\n\r\n        $(\u003cspan class=\"hljs-string\"\u003e\"div#click-two\"\u003c/span\u003e).click(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n          alert(whatToSay);\r\n        });\r\n      });\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWith the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword removed from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e, if we click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eclick me first\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand then click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eclick me second\u003c/em\u003e, the dialog box will open up both times because it has defaulted to a global variable.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eThis code is very small, so you may not see the problem with using a global variable. But imagine a code base that's thousands or tens of thousands of lines long. If you see a function that looks like:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e) \u003c/span\u003e{\r\n        alert(whatToSay);\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eit would be incredibly difficult to figure out where\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas defined. And if\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewhatToSay\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas used and changed in multiple places, it would be next to impossible to figure out where it's value was last set. (For a horror story on a missing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e, read Geoffrey Hayes's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.pixelstech.net/article/1320253282-How-One-Missing-%60var%60-Ruined-our-Launch\"\u003e\"How one missing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eruined our launch\"\u003c/a\u003estarting at the \"Seem kinda bad?\" paragraph.)\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eTo conclude, always create variables with either global or local scope using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword. Using scoped variables lets us easily follow the flow of our application and ensures our functions don't step on each other's execution in unexpected ways.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIs jQuery used to hide and show definitions when flashcards are clicked on?\u003c/li\u003e\r\n\u003cli\u003eIs code indented properly throughout?\u003c/li\u003e\r\n\u003cli\u003eAre Git commit messages descriptive, and in the correct tense?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"thursday-looping","title":"Thursday: Looping","type":"WikiPage","content":"\u003ch2\u003e\u003cspan\u003eLooping\u003c/span\u003e\u003c/h2\u003e\r\n\u003ch3\u003e\u003cspan\u003eFor-In loops\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eThe for-in loop is designed to loop over an object and its properties.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003econst person={\"first\":\"James\",\"last\":\"Muriuki\"}\r\n\r\nfor(let prop in person){\r\n  console.log(prop)\r\n}\r\n\r\n// first\r\n// last\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWe loop over the properties inside the object.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003eFor-Of loops\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eFor-of loop allows us to easily loop over arrays\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003econst numbers=[1,2,3,4,5,6,7,8,9,10]\r\nfor (let num of numbers){\r\n  console.log(num);\r\n}\r\n/*\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10*/\u003c/pre\u003e","frontPage":false},{"exportId":"monday-team-week-project-pitch","title":"Monday: Team Week - Project Pitch","type":"WikiPage","content":"\u003cp\u003eIn the final week of this course we will be working on web applications in groups of four. In preparation, we'll take the coming week to generate ideas and sign up for teams, so we'll be organized and ready to go first thing Monday of week 5!\u003c/p\u003e\r\n\u003ch2\u003eHomework \u003c/h2\u003e\r\n\u003cp\u003eGenerate an idea you would like to help develop into a working application. It could be a game, a new business idea, something educational, something fun, something to help others or something to change the world, an application or website a friend or family member could use, etc.\u003c/p\u003e\r\n\u003ch3\u003ePast Student Work\u003c/h3\u003e\r\n\u003cp\u003eHere are just a few examples of the types of projects past students have built during Team Week:\u003c/p\u003e\r\n\u003ch4\u003e\u003cstrong\u003eSites to plan activities\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eVacations, camping trips, road trips, weddings, pub crawls, organizing your friends together for a weekend.\u003c/p\u003e\r\n\u003ch4\u003e\u003cstrong\u003eRide sharing\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eA car pooling site fro people using the same routes\u003c/p\u003e\r\n\u003ch4\u003e\u003cstrong\u003eApps to lend a hand\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eLocate stolen bikes, missing pets, organize resources after natural disasters,\u003c/p\u003e\r\n\u003ch4\u003e\u003cstrong\u003eTools to connect people\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eHelping musicians find other musicians for jam sessions, puppy playdate finders, dating sites, interest-based meetups or communication tools, virtual study groups.\u003c/p\u003e\r\n\u003ch4\u003e\u003cstrong\u003eGames\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eText-oriented games like \"Choose your own adventure\"-style storytelling games, room escape, RPGs, word games, Oregon Trail.\u003c/p\u003e\r\n\u003cp\u003eDigital versions of your favorite games, such as Clue, Poker, Magic, Chess, Monopoly, Cards Against Humanity, Breakout, matching games, etc.\u003c/p\u003e\r\n\u003ch4\u003e\u003cstrong\u003eProductivity Tools\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eChecklists, organizers, note-taking, household grocery or to-do lists.\u003c/p\u003e\r\n\u003ch4\u003e\u003cstrong\u003eWebsites for real people\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eWebsites and apps for local businesses, family friends, etc.\u003c/p\u003e\r\n\u003ch2\u003eTimeline for This Week\u003c/h2\u003e\r\n\u003ch3\u003eMonday and Tuesday\u003c/h3\u003e\r\n\u003ch4\u003e\u003cstrong\u003e\u003cem\u003eBrainstorm Ideas\u003c/em\u003e\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eStarting Monday morning (today), begin listing project ideas on the glass wall including:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eA title and brief description of the project\u003c/li\u003e\r\n\u003cli\u003eYour name\u003c/li\u003e\r\n\u003cli\u003eThe language you are learning\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eOver the first two days of the week, ideas will be added and updated on the board. Students may sign up as they see projects that interest them. Talk to potential groups; ask questions; sign up for a project you feel most interested in and passionate about!\u003c/p\u003e\r\n\u003ch3\u003eWednesday\u003c/h3\u003e\r\n\u003ch4\u003e\u003cstrong\u003e\u003cem\u003eSign Up\u003c/em\u003e\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eEveryone is required to sign up for a team no later than Wednesday. Remember,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eall teams should contain 4 students.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf a team already has 4 people, it is full and cannot take on additional members. Sign up by entering your full name next to a project.\u003c/p\u003e\r\n\u003ch3\u003eThursday\u003c/h3\u003e\r\n\u003ch4\u003e\u003cstrong\u003e\u003cem\u003eConfirmation\u003c/em\u003e\u003c/strong\u003e\u003c/h4\u003e\r\n\u003cp\u003eOn Thursday Technical Mentors will confirm all teams have 4 members and a project idea to begin working on next week. If teams are short of members we'll help facilitate connecting with additional teammates, or re-arranging teams as necessary.\u003c/p\u003e\r\n\u003cp\u003eWhile you won't begin work on your project until the following Monday, you're encouraged to trade contact information with your teammates, and start any planning or brainstorming outside of class!\u003c/p\u003e","frontPage":false},{"exportId":"weekend-classes","title":"Weekend: Classes","type":"WikiPage","content":"\u003ch1\u003eClasses\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003ch3\u003eOverview\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eYou can think of a class as a blueprint for an object, which itself is the most basic and most customizable building block of JavaScript. Classes allow us to declare methods - actions that every instance of that class will be able to take.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003epublic\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a shorthand that automatically assigns a parameter to a public property of the same type and name declared in the constructor. All properties and methods are public by default. This means they can be accessed from anywhere.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eExamples\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eExample TypeScript class:\u003c/p\u003e\r\n\u003cdiv\u003eapp/greetings.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGreeter\u003c/span\u003e {\r\n  greeting: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e;\r\n\r\n  constructor (message: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e) {\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.greeting = message;\r\n  }\r\n\r\n  greet() {\r\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"Hello, \"\u003c/span\u003e + \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.greeting;\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch3\u003eFunctions vs. Methods\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eWe've learned how to declare types for our variables and the parameters of our functions. But another way to declare our intentions and organize our code is using classes. You can think of a class as a blueprint for an object, which itself is the most basic and most customizable building block of JavaScript. Classes allow us to declare methods - actions that every instance of that class will be able to take. Methods are functions that are defined inside a class, while functions are blocks of code that can be called and run outside of a class - for example in the JavaScript console.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eDeclaring Classes in TypeScript\u003c/h2\u003e\r\n\u003cp\u003eWe have learned how to use constructors and prototypes to simulate classes in JavaScript, but TypeScript makes it much easier and cleaner. It gives us a new syntax to declare classes. This still translates into vanilla JavaScript when we compile, but TypeScript takes care of all the heavy lifting in the background for us.\u003c/p\u003e\r\n\u003cp\u003eThis is an example of a class from the TypeScript\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.typescriptlang.org/Playground\" target=\"_blank\"\u003edocumentation page.\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eLet's try putting it into a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003egreetings.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder:\u003c/p\u003e\r\n\u003cdiv\u003eapp/greetings.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGreeter\u003c/span\u003e {\r\n  greeting: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e;\r\n\r\n  constructor (message: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e) {\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.greeting = message;\r\n  }\r\n\r\n  greet() {\r\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"Hello, \"\u003c/span\u003e + \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.greeting;\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe have a class called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGreeter\u003c/code\u003e, which will be the blueprint for objects whose job it is to say hello.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGreeter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects have a property called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreeting\u003c/code\u003e, which stores a string. We use the keyword\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econstructor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto say that a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGreeter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject\u003cspan\u003e \u003c/span\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe passed a string on initialization for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emessage\u003c/code\u003eparameter, which is to be stored in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreeting\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty.\u003c/p\u003e\r\n\u003cp\u003eFinally, we declare a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreet\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, which may be called on any\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGreeter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. It returns a phrase composed of the word \"Hello\", followed by whatever message is in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGreeter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreeting\u003c/code\u003eproperty.\u003c/p\u003e\r\n\u003cp\u003eLet's try it out! We'll add some code to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp/greetings.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to make some new instances of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGreeter\u003c/code\u003eobjects.\u003c/p\u003e\r\n\u003cdiv\u003eapp/greetings.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003egreeters\u003c/span\u003e: Greeter[] = [];\r\ngreeters.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Greeter(\u003cspan class=\"hljs-string\"\u003e\"world\"\u003c/span\u003e));\r\ngreeters.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Greeter(\u003cspan class=\"hljs-string\"\u003e\"how are you?\"\u003c/span\u003e));\r\ngreeters.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Greeter(\u003cspan class=\"hljs-string\"\u003e\"my baby, hello my honey, hello my ragtime gal!\"\u003c/span\u003e));\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(greeters);\r\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e greeter \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e greeters){\r\n  alert(greeter.greet());\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe start with a variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreeters\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand we declare it to be an array. And using TypeScript, we are able to say that it isn't just any array - it will be an array used to hold our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGreeter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects. But, at the end of the day it's still a normal JavaScript array, so we can call its\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epush\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod each time that we create a new instance of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGreeter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith a different message passed into its constructor. We still use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enew\u003c/code\u003ekeyword to create new instances of an object. Finally, we print the array of objects in the console, loop through the array, and call each object's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreet\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in an alert box.\u003c/p\u003e\r\n\u003cp\u003eLet's compile this and add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to load it. We should see all our greetings printed to the console, and they should each be displayed in an alert box.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eLooping in TypeScript\u003c/h3\u003e\r\n\u003cp\u003eLet's briefly address this fancy new looping syntax:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e thing \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e things) {\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(thing);\r\n};\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis is a handy way to loop through all the elements in an array called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethings\u003c/code\u003e. (in PHP the order is reversed - pay attention to the fact that the collection comes first in this syntax). It means \"take each item in the array and put it into a variable. Then run the operations in the curly brackets once for each item, using the variable we created to represent the current element.\" There is also a variation on this loop using the word\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ein\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eof\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e thing \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e things) {\r\n  \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(thing);\r\n};\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis puts the index number of each element of the array into the variable we create. This is often used for looping through an object, where the property names would be stored in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ething\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of index numbers. Try these loops out in the console, and keep them in your utility belt for later.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003ePublic\u003c/h3\u003e\r\n\u003cp\u003eNext, we can shorten the class declaration by adding the word\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epublic\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our constructor parameter list. This is a shorthand which will automatically assign the incoming parameter to a public property of the same type and name as declared in the constructor. All properties and methods are public by default. This means they can be accessed from anywhere, don't worry too much about the alternatives yet - we're going to start by keeping everything public.\u003c/p\u003e\r\n\u003cp\u003eLet's try this. Since the constructor is now doing the job of creating a property called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emessage\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto hold the incoming parameter, we can now delete the property declaration for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreeting\u003c/code\u003e, and we can change the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egreet\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to use the property\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emessage\u003c/code\u003e.\u003c/p\u003e\r\n\u003cdiv\u003eapp/greetings.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs coffeescript\"\u003e\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGreeter\u003c/span\u003e {\u003c/span\u003e\r\n  constructor (public \u003cspan class=\"hljs-attribute\"\u003emessage\u003c/span\u003e: string) {}\r\n  greet() {\r\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"Hello, \"\u003c/span\u003e + \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.message;\r\n  }\r\n}\r\n\r\n\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003egreeters\u003c/span\u003e: Greeter[] = [];\r\ngreeters.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Greeter(\u003cspan class=\"hljs-string\"\u003e\"world\"\u003c/span\u003e));\r\ngreeters.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Greeter(\u003cspan class=\"hljs-string\"\u003e\"how are you?\"\u003c/span\u003e));\r\ngreeters.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Greeter(\u003cspan class=\"hljs-string\"\u003e\"my baby, hello my honey, hello my ragtime gal!\"\u003c/span\u003e));\r\n\u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(greeters);\r\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-reserved\"\u003evar\u003c/span\u003e greeter \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e greeters){\r\n  alert(greeter.greet());\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eTo Do in TypeScript\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eLet's try another example. We're going to start a little TypeScript To Do List as a way to practice with classes. We'll create a new file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eto-do.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/p\u003e\r\n\u003cdiv\u003eapp/to-do.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTask\u003c/span\u003e {\r\n  done: boolean;\r\n  constructor(\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e description: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e priority: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.done = \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n  }\r\n  markDone(){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.done = \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n  }\r\n}\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e tasks: Task[] = [];\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Task(\u003cspan class=\"hljs-string\"\u003e\"Do the dishes.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"High\"\u003c/span\u003e));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Task(\u003cspan class=\"hljs-string\"\u003e\"Buy chocolate.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Low\"\u003c/span\u003e));\r\ntasks.push(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Task(\u003cspan class=\"hljs-string\"\u003e\"Wash the laundry.\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"High\"\u003c/span\u003e));\r\ntasks[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e].markDone();\r\nconsole.log(tasks);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere we declare a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTask\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, which has 3 properties. One is named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edone\u003c/code\u003e, and it is a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBoolean\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype since a task is either completed or it isn't. The other two properties are initialized by the constructor - a description and priority - both are strings. The class has one method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emarkDone\u003c/code\u003e. Its job is to change the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty from false to true - we might want this to happen when we click a button in the interface when the task has been completed.\u003c/p\u003e\r\n\u003cp\u003eThen we create three tasks at different priority levels. We mark the first one done and then we print out the array of tasks.\u003c/p\u003e\r\n\u003cp\u003eLet's compile this file and run it in the browser.\u003c/p\u003e\r\n\u003cp\u003eRemember, that by using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epublic\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword, we are using a shorthand for this (no need to write this into your file):\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTask\u003c/span\u003e {\r\n  done: boolean;\r\n  description: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e;\r\n  priority: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e;\r\n  constructor(descriptionParameter: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e, priorityParameter: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.done = \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.description = descriptionParameter;\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.priority = priorityParameter;\r\n  }\r\n  markDone(){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.done = \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBut creating our properties by using parameters in the constructor means much less repeating ourselves. We do declare the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty because its value is not set by a parameter of the constructor. We can actually shorten it even more:\u003c/p\u003e\r\n\u003cdiv\u003eapp/to-do.ts\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTask\u003c/span\u003e {\r\n  done: boolean = \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n  constructor(\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e description: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e priority: \u003cspan class=\"hljs-keyword\"\u003estring\u003c/span\u003e){}\r\n  markDone(){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.done = \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis is because we can declare class properties the same way that we declare regular variables. Remember this?\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs css\"\u003e\u003cspan class=\"hljs-tag\"\u003evar\u003c/span\u003e \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003egreeting\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e string = \u003cspan class=\"hljs-string\"\u003e\"Hi TypeScript!\"\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe follow the same structure for a property in a class declaration:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs css\"\u003e\u003cspan class=\"hljs-tag\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eThing\u003c/span\u003e \u003cspan class=\"hljs-rules\"\u003e{\r\n  \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003epropertyName\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e type = initialValue\u003c/span\u003e\u003c/span\u003e;\r\n}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"monday-practice-writing-functions","title":"Monday: Practice - Writing Functions","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn the previous lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eArguments to functions can be assigned to variables called parameters\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword tells JavaScript to return the result from the line of code\u003c/li\u003e\r\n\u003cli\u003eDon't abbreviate variable names because it can get confusing after time has passed\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBegin familiarizing yourself with writing custom functions in JSFiddle by completing the exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do we call a function?\u003c/li\u003e\r\n\u003cli\u003eWhat is a parameter, and how do we provide one to a function?\u003c/li\u003e\r\n\u003cli\u003eWhen do we need to parse integers?\u003c/li\u003e\r\n\u003cli\u003eWhat is a return value? How do we tell our functions what value to return?\u003c/li\u003e\r\n\u003cli\u003eWhat method is responsible for parsing integers?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eWrite a custom function for each of the following prompts. Then, call the function providing the necessary parameters to see if your function successfully returns the correct value. And don't forget to parse integers when necessary!\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eTake somebody's name and say a greeting to them.\u003c/li\u003e\r\n\u003cli\u003eWrite a function to subtract two numbers.\u003c/li\u003e\r\n\u003cli\u003eNow a function to multiply two numbers. Then create a new function called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethreeTimes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto multiply three numbers together.\u003c/li\u003e\r\n\u003cli\u003eNow write one to divide two numbers. Then write a new function called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eremainder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto find the remainder of two numbers.\u003c/li\u003e\r\n\u003cli\u003ePrompt the user to enter their age, another prompt to enter their name and another prompt to enter their favorite food. Pass these as arguments to a function that returns a sentence combining all of this information. Then display the returned string with an alert.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"tuesday-objectives","title":"Tuesday: Objectives","type":"WikiPage","content":"\u003ch1\u003eModern JS Apps Objectives\u003c/h1\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eIn this section, we will be learning about the tools used to build modern JavaScript apps.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFirst, we'll learn about tools that will help us build large JavaScript apps, allowing us to separate them out into multiple files and manage external dependencies.\u003c/li\u003e\r\n\u003cli\u003eSecond, we'll see how to use AJAX to communicate with a back-end using the JSON data format.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAt the end of the week, you should be able to:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate an asset pipeline using Gulp\u003c/li\u003e\r\n\u003cli\u003eManage build dependencies with npm\u003c/li\u003e\r\n\u003cli\u003eManage front-end dependencies with Bower\u003c/li\u003e\r\n\u003cli\u003eMake requests to a back-end server using AJAX\u003c/li\u003e\r\n\u003cli\u003eUse SASS for improved styling of your pages\u003c/li\u003e\r\n\u003cli\u003eParse JSON responses to AJAX requests\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eIndependent Project Objectives\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eYour code at the end of the week will be reviewed for the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the website work as expected?\u003c/li\u003e\r\n\u003cli\u003eDid you follow all setup instructions, including storing your API key correctly?\u003c/li\u003e\r\n\u003cli\u003eDoes the app include at least 2 JavaScript files?\u003c/li\u003e\r\n\u003cli\u003eIs\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eexports\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eused successfully in at least one JavaScript file?\u003c/li\u003e\r\n\u003cli\u003eAre dependencies managed with npm and Bower?\u003c/li\u003e\r\n\u003cli\u003eDoes the app include a gulp-based asset pipeline with a development server? Does the asset pipeline include all tasks from the homework this week?\u003c/li\u003e\r\n\u003cli\u003eAre previous standards met?\u003c/li\u003e\r\n\u003cli\u003eAre you able to discuss the flow of your code and the concepts behind it with an instructor using correct terminology?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"tuesday-practice-jquery-effects","title":"Tuesday: Practice - jQuery Effects","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: In the previous lesson, we learned:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow to show and hide elements using\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eshow\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003ehide\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eHow to toggle with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003etoggle\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eHow to style a link with CSS\u003c/li\u003e\r\n\u003cli\u003eHow to use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;span\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags to limit the scope of CSS and JavaScript\u003c/li\u003e\r\n\u003cli\u003eClasses are used for elements that show up in\u003cspan\u003e \u003c/span\u003e\u003cem\u003emultiple\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eplaces on our web page\u003c/li\u003e\r\n\u003cli\u003eIDs are used for an element that shows up only\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonce\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon our web page\u003c/li\u003e\r\n\u003cli\u003eWhen we use JavaScript to manipulate a web page, we are really manipulating the DOM, not just the HTML structure or styling.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow, let's begin to familiarize ourselves with jQuery by completing the exercises detailed below.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow do we tell jQuery which part of the page to add an effect to? What does the code look like?\u003c/li\u003e\r\n\u003cli\u003eWhat is the DOM? How do we interact with it?\u003c/li\u003e\r\n\u003cli\u003eWhen do we use an id? What about a class?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003ejQuery Effects Practice\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eImportant Note\u003c/strong\u003e: To use the jQuery Methods\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003efadeIn\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003efadeOut\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eslideDown\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e, or\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eslideUp\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eyou will need two separate\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eclick\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eJavaScript events (One for the in/out or down/up) whereas\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003etoggle\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eonly requires one\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eclick\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevent.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eOn the walrus page, add some clickable text that alternates between saying \"Hide/show images\", and toggles the images appropriately.\u003c/li\u003e\r\n\u003cli\u003eOn either the walrus page or the webpage from the previous exercise, try fading and sliding elements with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003efadeIn\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003efadeOut\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003efadeToggle\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eslideDown\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eslideUp\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eslideToggle\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eMake a webpage with a few different sections, where a few of the sections are hidden by default, with a bit of teaser text that expands when you click on it (e.g., \"Click to learn about the giant sandcastles of this fabulous country!\"). Be creative!\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"tuesday-introduction-to-es6-let-keyword","title":"Tuesday: Introduction to ES6- Let Keyword","type":"WikiPage","content":"\u003ch2\u003e\u003cspan\u003eLet keyword\u003c/span\u003e\u003c/h2\u003e\r\n\u003ch3\u003e\u003cspan\u003eScope\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eA scope is the lifecycle of a variable that is where a variable is visible and accessible and for how long.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eJavascript typically has 2 scopes:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cstrong\u003eglobal scope\u003c/strong\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cstrong\u003efunction scope\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch4\u003e\u003cspan\u003eGlobal scope\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan\u003eThe global scope means a variable is accessible in the whole file and can be used anywhere in the file.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003evar name = 'James'\r\n\r\nfunction changeName(){\r\n  name = 'Hames'\r\n}\r\nchangeName()\r\nconsole.log(name) //Hames\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eHere create a global variable \u003c/span\u003e\u003cstrong\u003e\u003ci\u003ename.\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e We then create a\u003c/span\u003e\u003cstrong\u003e\u003ci\u003e\u003cspan\u003e \u003c/span\u003echangeName\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e function that takes the global variable\u003c/span\u003e\u003cstrong\u003e\u003ci\u003e\u003cspan\u003e \u003c/span\u003ename\u003cspan\u003e \u003c/span\u003e\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003eand changes its value. We then call the function and log the variable.  We can run the file in the terminal\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003e$ node global-scope.js\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch4\u003e\u003cspan\u003eFunction Scope\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan\u003eVariables defined in a function are only accessible to that function. They cannot be called outside of the function.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003evar name = 'James'\r\n\r\nfunction changeName(){\r\n  var name = 'Hames'\r\n}\r\nchangeName()\r\nconsole.log(name)// James\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eIn this example, we initialize the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003ename\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e variable as a global scope with the value \u003c/span\u003e\u003cstrong\u003e\u003ci\u003e\"James\"\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e. We then initialize another variable \u003c/span\u003e\u003cstrong\u003e\u003ci\u003ename\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e inside the\u003c/span\u003e\u003cstrong\u003e\u003ci\u003e\u003cspan\u003e \u003c/span\u003echangeName\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003efunction with the name \u003c/span\u003e\u003cstrong\u003e\u003ci\u003e\"Hames\"\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e. We then call the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003echangeName\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e function and log the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003ename\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e variable. But this time we get the name \u003c/span\u003e\u003cstrong\u003e\u003ci\u003e\"James\"\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e that is defined in the\u003c/span\u003e\u003cstrong\u003e\u003cspan\u003e \u003c/span\u003eglobal scope\u003c/strong\u003e\u003cspan\u003e. The \u003c/span\u003e\u003cstrong\u003e\u003ci\u003ename\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evariable defined in the function is contained only in that function.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eThe \u003c/span\u003e\u003cstrong\u003eLet\u003c/strong\u003e\u003cspan\u003e keyword is a new ES6 keyword to initialize variables. It allows \u003c/span\u003e\u003cstrong\u003eblock scoping\u003cspan\u003e \u003c/span\u003e\u003c/strong\u003e\u003cspan\u003ethat means variables are contained within blocks\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cstrong\u003e\u003ci\u003e{ }\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e{\r\nlet name = 'James'\r\n}\r\nfunction changeName(){\r\n  var name = 'Hames'\r\n}\r\nchangeName()\r\nconsole.log(name) //undefined\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWhen we define the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003ename\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e variable inside the blocks and when we try to log the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003ename\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e variable get an \u003c/span\u003e\u003cstrong\u003e\u003ci\u003eundefined\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e result. This is because the variable defined is only defined in the block.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-forking-with-git","title":"Tuesday: Forking with Git","type":"WikiPage","content":"\u003ch2\u003e\u003cspan style=\"font-size: 18pt;\"\u003eObjectives\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003eIn this lesson, we will:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eFork a project from an account to your account \u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-size: 18pt;\"\u003eForking a Repository\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003eA \u003cstrong\u003efork\u003c/strong\u003e is a copy of a repository. Most commonly, forks are used to propose changes to someone's project or to use someone else's project as a starting point for your own idea. We are going to learn how to collaborate effectively later in the course. When going through Moringa Prep, you will be working in pairs for the most part. After working on your pair partner's computer and pushing changes to their GitHub account, there's the need to create a copy of the project in your own GitHub account. \u003c/p\u003e\r\n\u003cp\u003eTo get started, open the \u003ca href=\"https://github.com/iantheninja/delani_studio_site\"\u003eGitHub repository\u003c/a\u003e we will be working with throughout this lesson. On the top right corner of your screen, you should see a button with the text 'Fork' as shown in the image below. Clicking on this button should start the process of copying the project/repository to your own account. This is the \u003cstrong\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Open-source_software\"\u003eopen source\u003c/a\u003e \u003c/strong\u003eadvantage of sharing projects on Github allowing people to collaborate on their work.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Tuesday%20Content%20Images/fork-button-1.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"\" data-decorative=\"true\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/2645\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eClick on that button which should result in a modal prompting you to choose the account to which you want to fork. Select your account name which should take you to the repo you forked in your account. For example, if your GitHub username is \u003cem\u003e'iantheninja' \u003c/em\u003ejust like mine is, you should select it and not anything else that appears in the modal. This may take a couple of seconds so be patient as the process takes place. To know that the forking process is complete, check the \u003cstrong\u003etop left\u003c/strong\u003e corner of your repo. You should be in your account in a repo with the same name as the original repository (\u003cstrong\u003eyour_username\u003c/strong\u003e/delani_studio_site). This shows that the forking process is complete.\u003c/p\u003e\r\n\u003cp\u003eIt shows that you are now working on your forked version that was forked from\u003cem\u003e iantheninja/delani_studio_site.\u003c/em\u003e\u003cem\u003e \u003c/em\u003eHaving copied \u003cem\u003eiantheninja\u003c/em\u003e'\u003cem\u003es\u003c/em\u003e repo to your own account, we can then proceed to \u003cstrong\u003eclone\u003c/strong\u003e it like we learned to do in the previous lesson. Remember that \u003cstrong\u003ecloning makes a copy in a location on your device\u003c/strong\u003e, in this case, your laptop. \u003c/p\u003e\r\n\u003ch3\u003eCloning a repo \u003c/h3\u003e\r\n\u003cp\u003eRun the \u003ccode\u003egit clone\u003c/code\u003e command to clone the repo to your preferred location. At this point, you should have a \u003cem\u003emoringa-school-projects \u003c/em\u003efolder which should host all projects you are going to work on at Moringa School. If you do not have such a folder, make sure you create one right now. Make sure to clone the repository to that directory (\u003cem\u003emoringa-school-projects\u003c/em\u003e) to avoid making a mess of your folder structure. Take the next 5 minutes and figure out if you and your pair partner can figure out how to correctly clone the repo. \u003c/p\u003e\r\n\u003cp\u003e[\u003cem\u003e5 minute practice session\u003c/em\u003e] \u003c/p\u003e\r\n\u003cp\u003eConfirm that you did the right thing by opening the \u003cem\u003emoringa-school-projects\u003c/em\u003e folder\u003cem\u003e \u003c/em\u003eand checking that you have the hello-world project. If you did not nail the task (cloning the repo), here's a bit of guidance to assist you. Follow the following steps:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eOpen the terminal application. \u003c/li\u003e\r\n\u003cli\u003eNavigate to the moringa-school-projects folder from the terminal. Remember to use the \u003cem\u003ecd \u003c/em\u003eand \u003cem\u003emkdir\u003c/em\u003e commands where necessary.\u003c/li\u003e\r\n\u003cli\u003eRun the command: \r\n\u003cpre\u003e\u003cem\u003egit clone \u003ca href=\"https://github.com/iantheninja/hello-world.git\"\u003ehttps://github.com/\u003cstrong\u003eyour-username\u003c/strong\u003e/hello-world.git\u003c/a\u003e\u003c/em\u003e\u003c/pre\u003e\r\n(remember to replace '\u003cstrong\u003e\u003cem\u003eyour-username\u003c/em\u003e\u003c/strong\u003e' with your GitHub username to prevent cloning the wrong repository)\u003c/li\u003e\r\n\u003cli\u003eNavigate to inside the cloned repository by using the change directory (\u003ccode\u003ecd\u003c/code\u003e) command. \u003c/li\u003e\r\n\u003cli\u003eOpen your editor by using the command \u003ccode\u003eatom .\u003c/code\u003e for Atom users or \u003ccode\u003ecode .\u003c/code\u003e for Visual Studio Code users.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eYou are now ready to make modifications to the project you forked from the user \u003cem\u003e'iantheninja'\u003c/em\u003e (who seems to be a pretty cool person from his username). The project you forked now belongs to you. You should consult the licensing information in GitHub repos to make sure you do not get sued for using other people's work illegally. Play around with \u003ca href=\"https://choosealicense.com/\"\u003echoosealicense.com\u003c/a\u003e to get to know what types of open source licenses there are.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-template-strings-and-variable-substitution","title":"Wednesday:Template Strings and Variable substitution","type":"WikiPage","content":"\u003ch2\u003e\u003cspan\u003eTemplate Strings and Variable substitution\u003c/span\u003e\u003c/h2\u003e\r\n\u003ch3\u003e\u003cspan\u003eTemplate Strings\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eIn ES5 we write multiline strings using the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003e+\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e concatenation. In ES6 we get to introduce to a new syntax to write multiline strings,\u003c/span\u003e\u003cstrong\u003e\u003cspan\u003e \u003c/span\u003ebackticks\u003c/strong\u003e\u003cspan\u003e(\u003c/span\u003e\u003cstrong\u003e\u003ci\u003e`\u003cspan\u003e \u003c/span\u003e\u003c/i\u003e\u003c/strong\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003elet multiline =`Hi I am a\r\n    Multiline\r\n    String and I use backticks to make sure\r\n    I can go anywhere\r\n    `\r\nconsole.log(multiline);\r\n/*Hi I am a\r\n    Multiline\r\n    String and I use backticks to make sure\r\n    I can go anywhere*/\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWe see we can write multiline strings in our code using the \u003c/span\u003e\u003cstrong\u003e\u003ci\u003ebackticks.\u003c/i\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003eVariable Substitution\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eES6 also provides us with a way to embed variables into our strings. It follows the following format \u003c/span\u003e\u003cstrong\u003e\u003ci\u003e${name-of-variable}\u003c/i\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cpre\u003econst name = 'James Muriuki'\r\nlet introduction = `Hi, my name is ${name}`\r\nconsole.log(introduction); //Hi, my name is James Muriuki\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false},{"exportId":"wednesday-practice-address-book","title":"Wednesday: Practice: Address Book","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: The goal for today is to practice creating objects using constructors and prototypes. Practice adding properties and methods to objects and calling out those properties and methods in your webpage.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between a Constructor and Prototype?\u003c/li\u003e\r\n\u003cli\u003eWhen would you use a Constructor, and when would you use a Prototype?\u003c/li\u003e\r\n\u003cli\u003eWhat functionality do they offer?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eAddress Book\u003c/h3\u003e\r\n\u003cp\u003eFollow along with the Address Book lessons to add Address objects and support for multiple addresses. Complete these items for it too:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd address type to the addresses entered\u003c/li\u003e\r\n\u003cli\u003eRemove any additional address fields when the form is submitted. (One way to do this would be to use the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/not/\" target=\"_blank\"\u003e.not()\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://api.jquery.com/remove/\" target=\"_blank\"\u003e.remove()\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efunctions.)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf you wish, work on these too:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRefactor some of the other sections of the jQuery into functions as we did with\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eresetFields()\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eTry a jQuery method from either the CSS or Effects options in the documentation (e.g.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003efadeIn()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.css()\u003c/code\u003e)\u003c/li\u003e\r\n\u003cli\u003eTry a jQuery method from the Events options (e.g.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ehover()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.keypress()\u003c/code\u003e)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the web app work as expected?\u003c/li\u003e\r\n\u003cli\u003eIs business logic and user interface logic kept separate?\u003c/li\u003e\r\n\u003cli\u003eWere constructors and prototypes used to create new objects?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"tuesday-practice-with-gulp-and-npm","title":"Tuesday: Practice with Gulp and npm","type":"WikiPage","content":"\u003ch1\u003ePractice with Gulp and npm\u003c/h1\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice using npm and gulp tasks to to streamline your development process.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003ePut your program's functions into their own module(s) using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eexports\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword and use separate files for your front-end DOM manipulation logic. Your project should contain at least two JavaScript files.\u003c/li\u003e\r\n\u003cli\u003eInclude gulp tasks to concatenate, minify, browserify, and check your code with JSHint. Also remember to create a build task, and a clean task.\u003c/li\u003e\r\n\u003cli\u003eRemember that we want the browser to load as few files as possible, and generated production files should be kept in a separate\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/li\u003e\r\n\u003cli\u003eYou are not intended to complete all of the possibilities on this page. It is recommended to do the Calculator exercise first, following along with the prevoius work, then proceed to the journal,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eand then if you have time pick either Memory or Simon.\u003c/strong\u003e\n\u003c/li\u003e\r\n\u003cli\u003eFeel free to expand on these problems to challenge yourself if you want, but only after you have the basics working. You must have at least 2 JavaScript files for each of these projects, including object declarations in the back-end file and using instances of these objects in your front-end file. You must also have a functioning gulpfile with all tasks described on Monday's work, as well as all npm packages included in your manifest file.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a main difference between the Node runtime environment and the browser?\u003c/li\u003e\r\n\u003cli\u003eWhat is npm? Why would we want to use it?\u003c/li\u003e\r\n\u003cli\u003eWhat is gulp and what is it used for?\u003c/li\u003e\r\n\u003cli\u003eWhat is a common use for environment variables?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between concatenation and minification?\u003c/li\u003e\r\n\u003cli\u003eWhat is linting? Why is it useful in development?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eCalculator\u003c/h3\u003e\r\n\u003cp\u003eFollow along with the previuos work to build the basic calculator app. The calculator object should include the pingPong method. Be sure to take your time on going through setting up your npm packages, your gulpfile and your file structure. Optionally, try expanding on this to create standard arithmetic methods such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e*\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e/\u003c/code\u003e. These methods should be called on a single\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCalculator\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject from your front-end file whenever the user submits the appropriate form. Then, display the results - remember the front-end interface file gets user input and displays results, while the calculations should be done on the back-end as part of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCalculator\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject.\u003c/p\u003e\r\n\u003ch3\u003eJournal\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eCreate a journaling website where a user can write entries including at least a title and body. Create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEntry\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects that include a method to return the number of words in the entry. Then, add a separate method (or methods) to return the number of vowels and consonants in each entry. Call each of these methods from your front-end file to display their return values. Finally, add a method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetTeaser\u003c/code\u003eto return the first sentence of the entry. If the sentence is over 8 words, only display those first 8 words. Be sure to call this method from your front-end file to display the results as well, whenever a new journal entry is created.\u003c/p\u003e\r\n\u003ch3\u003eOptional: Memory\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eCreate a game based on the card game Memory.\u003c/p\u003e\r\n\u003cp\u003eYou'll need to generate a grid of cards. Each card should have a picture on it, and there should be 2 of each picture. So, if you have a deck of 10 cards there should be 5 different pictures.\u003c/p\u003e\r\n\u003cp\u003eAll cards should start face down. Each time the user takes a turn they click on 2 cards. When a card is clicked it should reveal its picture. If the user gets a pair of cards with the same picture, the the cards remain face-up. If the user's selected cards are different they should return to face down. When all the cards are face up, the user has won. The object of the game is to find all the pairs in as few turns as possible.\u003c/p\u003e\r\n\u003ch3\u003eOptional:Simon\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eCreate a version of the old game\u003cspan\u003e \u003c/span\u003e\u003ca class=\"\" href=\"https://www.youtube.com/watch?v=4YhVyt4q5HI\" target=\"_blank\"\u003eSimon\u003c/a\u003e. In Simon, the game generates a sequence of colored lights for you to mirror. It starts out simple; first only one color, then if you get that right then you have to remember 2 colors. The sequence does not change every time, it just gets longer and longer.\u003c/p\u003e\r\n\u003cp\u003eFor example, here is a sequence of turns:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs bash\"\u003e[\u003cspan class=\"hljs-string\"\u003e\"red\"\u003c/span\u003e]\r\n[\u003cspan class=\"hljs-string\"\u003e\"red\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"blue\"\u003c/span\u003e]\r\n[\u003cspan class=\"hljs-string\"\u003e\"red\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"blue\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"yellow\"\u003c/span\u003e]\r\n[\u003cspan class=\"hljs-string\"\u003e\"red\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"blue\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"yellow\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"red\"\u003c/span\u003e]\r\n[\u003cspan class=\"hljs-string\"\u003e\"red\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"blue\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"yellow\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"red\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"red\"\u003c/span\u003e]\r\n[\u003cspan class=\"hljs-string\"\u003e\"red\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"blue\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"yellow\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"red\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"red\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"yellow\"\u003c/span\u003e]\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou do not have to use the above format to generate sequences, this is just an example.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003esince this game involves timed events (we have to time how fast it takes for the sequence to play on each turn) you may wish to investigate the JavaScript function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetInterval()\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the app function and look well presented in the browser? Is the code clean and readable?\u003c/li\u003e\r\n\u003cli\u003eIs the project structured in a logical way, with functions kept in separate files from DOM manipulation code?\u003c/li\u003e\r\n\u003cli\u003eDoes the project have an npm manifest file and\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile?\u003c/li\u003e\r\n\u003cli\u003eDoes the gulpfile include tasks to minify, concatenate, browserify, lint, build and clean?\u003c/li\u003e\r\n\u003cli\u003eIs there a\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder for production files? Are there separate tasks for production builds and development builds?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"weekend-modern-javascript-mvcs","title":"Weekend: Modern Javascript MVCs","type":"WikiPage","content":"\u003ch1\u003eModern JavaScript MVCs\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003ch3\u003eTerminology\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eMVC\u003c/strong\u003e: Abbreviation for Model-View-Controller that refers to a pattern where data, processing and display duties are divided into models, views and controllers.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eComponent\u003c/strong\u003e: In MVC frameworks, a container for a section of a website's functionality including both the user interface and the logic to connect it with the models.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eRouting\u003c/strong\u003e: In MVC frameworks, the mapping of a URL to a component.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eModel\u003c/strong\u003e: In the MVC context, the data that is provided to a component.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eAs web applications gain increasingly rich and complex user interfaces, a new breed of tools called \"client-side MVCs\" have emerged to help developers be more productive and build these user interfaces more easily.\u003c/p\u003e\r\n\u003ch2\u003eModel-View-Controller Pattern\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eMVC\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003estands for Model-View-Controller and refers to a pattern where data, processing and display duties are divided into models, views and controllers. Up until now, the apps you've written have been written in a programming style in which you give your program a list of commands to run one after the other to insert DOM elements and register event listeners. These apps written in jQuery or native JavaScript get very complex, very quickly, and become hard to reason about and debug. Imagine trying to build a complex app like Gmail or Facebook purely with jQuery - it would be nearly impossible.\u003c/p\u003e\r\n\u003ch3\u003eBenefits of MVCs\u003c/h3\u003e\r\n\u003cp\u003eClient-side JavaScript MVCs offer tools to write code that scales more efficiently. While they take more time to learn than jQuery, they provide simpler code, fewer bugs, and better overall performance. Three of the most popular client-side JavaScript MVC tools are Angular, Ember, and React. They all have differences, but in the year they've converged with a very similar programming model originally pioneered by React.js.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eOrganization\u003c/h3\u003e\r\n\u003cp\u003eThe basic idea behind the Model-View-Controller (MVC) pattern is simple: Organize your apps' user interface into\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecomponents\u003c/strong\u003e, which you can think of as pieces of a user interface. For example, in an email application you may have a component for the user interface required to compose a message; a component for displaying the list of all messages; a component for displaying contents of an individual message; a component for the search bar, and so on. Components are often nested, too. For example, the message list component may have the search bar component nested\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewithin\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eit, along with a series of components for each\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindividual\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emessage.\u003c/p\u003e\r\n\u003cp\u003eA nested component is often called a\u003cspan\u003e \u003c/span\u003e\u003cem\u003echild\u003c/em\u003e, and the component in which it's nested is often called its\u003cspan\u003e \u003c/span\u003e\u003cem\u003eparent\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://moringaprep-ft.herokuapp.com/assets/images/javascript_mvc.png\" alt=\"component-graphic\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eComponents\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eComponents are represented by a custom HTML element, like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;user-profile\u0026gt;\u003c/code\u003e. Data is passed in using attributes, like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;user-profile name=\"Diane\" job=\"Teacher\"\u0026gt;\u003c/code\u003e. The component renders some sort of HTML, like\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;Diane is a teacher.\u0026lt;/p\u0026gt;\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWhen the value of an attribute changes, the component automatically updates the user interface, so\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;user-profile name=\"John\" job=\"Teacher\"\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eautomatically updates the UI to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;p\u0026gt;John is a teacher.\u0026lt;/p\u0026gt;\u003c/code\u003e. This way we can use the one component to represent a large set of data, such as a large group of users. Components usually have some sort of interactivity, too; perhaps our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003euser-profile\u003c/code\u003ecomponent displays contact information about a set of users, but hovering over the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003euser-profile\u003c/code\u003ecomponent would display a photo.\u003c/p\u003e\r\n\u003ch3\u003eComponent Relationships\u003c/h3\u003e\r\n\u003cp\u003eComponents are isolated, which means they can't directly change other components. Instead, they can do what is often called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eemitting an action\u003c/em\u003e. When the action is emitted, then the parent component can receive that action, and take action of its own, such as updating information that's passed into its child components.\u003c/p\u003e\r\n\u003cp\u003eA nice phrase to describe this model is\u003cspan\u003e \u003c/span\u003e\u003cem\u003edata down, actions up\u003c/em\u003e. Parent components can pass data into their child components. Child components can emit actions up to their parents. The beauty of this programming model is that it makes it very easy to reason about complex user interfaces.\u003c/p\u003e\r\n\u003cp\u003eUltimately, each part of a web application will have a final parent component. The typical way to figure out which parent component to display is by the URL, an approach pioneered by Ember.js. So, if you visit\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e/teachers\u003c/code\u003e, then the app might load a component to show a list of teachers (which in turn may load many child components). Or if you visit\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e/inbox\u003c/code\u003e, the app may display a list of new messages. Sometimes, the URL may contain more information;\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e/teachers/285\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emay display the teacher with ID 285. The mapping of a URL to a component is typically called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003erouting\u003c/strong\u003e.\u003c/p\u003e\r\n\u003ch3\u003eData in the MVCs\u003c/h3\u003e\r\n\u003cp\u003eFinally, the app must retrieve data for that first parent component from somewhere, typically from a back-end web server. Usually, part of the routing system is responsible for requesting necessary data from the back-end server. This data is then provided to the component. Data provided to components in this fashion are called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emodels\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eEven though the client-side JavaScript world is very fragmented, Angular, Ember, and React all share these similar ideas about components, routes, and models. No matter which you learn, keep in mind these general ideas so that you have a solid foundation to start from if you end up in a project using a different technology.\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"thursday-defining-a-problem-statement","title":"Thursday: Defining a Problem Statement","type":"WikiPage","content":"\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eSession Objective\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBy the end of the session, groups should be able to create a problem statement for their group project that addresses the gap, impact, and the solution in a clear and concise way.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup Task #1\u003c/span\u003e\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn your respective project groups, go through and discuss:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat is a problem statement.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample of a good problem statement.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eExamples of bad problem statements.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat is a problem statement?\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eA concise and clear explanation as to why an application or project needs to be built or developed. \u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eExamples of good problem statements.\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eTwo out of five people use a taxi. However, to request for a taxi, an average person has to stand on the street to hail a ride. Sometimes, it takes a considerable amount of time to get a ride and the pricing tends to be expensive and irregular. Also, weather conditions and safety can be a big issue to finding a taxi in Nairobi.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThat is why our team came up with Uber, an application that allows users to find taxis in a more affordable and efficient way with their safety also guaranteed.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhy is the Uber problem statement a good one?\u003c/span\u003e\u003c/h3\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe Gap\u003c/span\u003e\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eIdentifies the gap which is in the private transport sector i.e. it identifies the problem that has been observed \u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eImpact\u003c/span\u003e\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eShows the impact that this gap has on the users e.g. time, affordability, efficiency\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eSolution\u003c/span\u003e\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eProvides a solution, the Uber application, that is efficient, offering affordable prices and guarantees safety for the users.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eConcise \u0026amp; Clear\u003c/span\u003e\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eThe problem statement is clear, brief and direct to the point.\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eExamples of bad problem statements\u003c/span\u003e\u003c/h2\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCurrently, Brand Spark website needs a ‘fresh look’. We propose a complete redesign of the website in order to make it better.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eTo fulfill Moringa prep requirements in order to graduate we decided to build a game that is fun and different from what is currently available. \u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup Task #2\u003c/span\u003e\u003c/h1\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eUsing the Uber problem statement as a reference, what makes the above 2 bad problem statements bad? Discuss.\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eAre they concise and clear? Do they clearly outline the reason \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e‘why’\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e behind building the projects and the impact expected?.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup Task #3\u003c/span\u003e\u003c/h1\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eSelect one person from your group and use their laptop to:\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eGo to \u003c/span\u003e\u003ca href=\"https://drive.google.com\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eGoogle Drive\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e and create a new Google document.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eSave the document as “MPFT[Cohort #] - Group Project Name.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs a group discuss the components that make a good problem statement and complete the tasks assigned.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eComponents of a good problem statement\u003c/span\u003e\u003c/h2\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eA good problem statement should be able to address the following:\u003c/span\u003e\u003c/h3\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eA Gap\u003c/span\u003e\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eThis captures the motivation behind building a certain application. Keep asking yourself ‘\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003ewhy?\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e’ There must be \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003esomething \u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003ethat is driving the application you are building.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eYou have either identified a sector/area that a problem is situated e.g. payment sector, transport sector, medical field, tourism industry e.t.c.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eOther reasons for building an application might be for example, building a game in order to improve your technical competence. \u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup Task #4\u003c/span\u003e\u003c/h1\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eDiscuss the reason or motivation behind building your group project.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eType down the reason in the google document you created.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003c/span\u003e\u003c/h3\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eImpact \u003c/span\u003e\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat impact does building this project have either on the users the project is targeting or on you as a group.\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eDoes it showcase your technical strength?, Does it challenge your thinking?, Does it prove that you can learn a new technology in a short span of time? e.t.c.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAre there any benefits for the users who will interact with your application/website? E.g. time/cost efficient e.t.c\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eOR/AND\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eExplain the consequences of the gap in the specific industry.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eState the user/stakeholder that is directly affected by this gap. For example, people in general or people in certain groups (age, gender, occupation e.t.c.)\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eUse your market research to quantify the impact of the gap.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup Task #5\u003c/span\u003e\u003c/h1\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eDepending on the type of project you are working on, discuss the impact that the gap has on the people it is directly affecting.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eOR\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe impact that this project has made in you as a group especially if it doesn't directly solve a problem in the society.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eType down the impact in the google document.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eSolution\u003c/span\u003e\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow that you have identified the motivation/reason behind building your application, it’s time to introduce your idea and state how it will bridge the ‘gap.’ \u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis could be by addressing a need not currently met or by providing certain benefits to the users of your application\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup Task #6\u003c/span\u003e\u003c/h1\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eDiscuss the solution that your project is offering to the user.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eType down the solution in the google document.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eClear and Concise\u003c/span\u003e\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eA good problem statement should be brief but still elaborate, informative and clear.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup Task #7\u003c/span\u003e\u003c/h1\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eRead through your groups problem statement and ensure that it is brief, clear and to the point.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch1\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup Task #8\u003c/span\u003e\u003c/h1\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eNow that you are done creating the problem statement for your group project, read it out loud as a group. Does it make sense or sound good to the ear?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eEnsure that it meets the above components of a good problem statement\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMake corrections if any.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eRead it out loud once more and make sure it is perfect.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCongratulations!! You just created your projects problem statement.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat is the importance of the activity you just completed?\u003c/span\u003e\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eA good problem statement helps you define and understand a problem in order to work towards the intended solution.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eA good problem statement helps an audience understand the necessity and importance of the project that your team is working on.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-concatenation","title":"Monday: Concatenation","type":"WikiPage","content":"\u003ch1\u003eConcatenation\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003ch3\u003eTerminology\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eConcatenation\u003c/strong\u003e: A process of copying all JavaScript files into one file to be used in the browser and decrease load time.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003egulp-concat\u003c/strong\u003e: An npm package that concatenates multiple files into one for use in the browser.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eGlobbing pattern\u003c/strong\u003e: Using wildcard characters (such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e*\u003c/code\u003e) to specify sets of filenames.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eExamples\u003c/h3\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eThe following is an example gulp task for using gulp-concat to consolidate multiple files:\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003egulp.task(\u003cspan class=\"hljs-string\"\u003e'concatInterface'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e gulp.src([\u003cspan class=\"hljs-string\"\u003e'./js/*-interface.js'\u003c/span\u003e])\r\n    .pipe(concat(\u003cspan class=\"hljs-string\"\u003e'allConcat.js'\u003c/span\u003e))\r\n    .pipe(gulp.dest(\u003cspan class=\"hljs-string\"\u003e'./tmp'\u003c/span\u003e));\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe following is an example of adding\u003cspan\u003e \u003c/span\u003e\u003cem\u003eother\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eGulp tasks as dependencies in a gulp task:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003egulp.task(\u003cspan class=\"hljs-string\"\u003e'jsBrowserify'\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e'concatInterface'\u003c/span\u003e], \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e browserify({ entries: [\u003cspan class=\"hljs-string\"\u003e'./tmp/allConcat.js'\u003c/span\u003e] })\r\n    .bundle()\r\n    .pipe(source(\u003cspan class=\"hljs-string\"\u003e'app.js'\u003c/span\u003e))\r\n    .pipe(gulp.dest(\u003cspan class=\"hljs-string\"\u003e'./build/js'\u003c/span\u003e));\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, there is a second argument,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e['concatInterface']\u003c/code\u003e, after the name of the task. This is an array of dependencies. Each dependency represents other Gulp tasks that will run automatically before\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethis\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eGulp task we are defining. In the example above, we are instructing Gulp to run the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econcatInterface\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask automatically whenever it runs the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsBrowserify\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eWhat if we have more than one JavaScript file that we need to use in the browser? Remember, we want to improve browser performance by having as few\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags as possible. Could we combine these JavaScript files into one and browserify it?\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eThe answer is\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyes\u003c/em\u003e! This process of consolidating multiple JavaScript files into one is called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003econcatenation\u003c/strong\u003e, and it drastically decreases load time. We will take all the JavaScript the browser needs and place it into one\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003eSmushing all the code together in this manner means that the file won't be very easy for\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehumans\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto read, but it is\u003cspan\u003e \u003c/span\u003e\u003cem\u003every\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efast for the browser to use.\u003c/p\u003e\r\n\u003cp\u003eThankfully, we can have the best of\u003cspan\u003e \u003c/span\u003e\u003cem\u003eboth\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eworlds by preserving our separate JavaScript files for development, but running a concatenation task to create a separate, combined file for the browser to use!\u003c/p\u003e\r\n\u003ch3\u003eConcatenating with Gulp-Concat\u003c/h3\u003e\r\n\u003cp\u003eWe are going to add another form for the user to submit their email address, and a separate JavaScript file to retrieve the value from the form and display a thank you message.\u003c/p\u003e\r\n\u003cp\u003ePerhaps one day we'll have a fancy ping-pong app related newsletter people can sign up for.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll add the form to our HTML file:\u003c/p\u003e\r\n\u003cdiv\u003eindex.html\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"html hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"build/js/app.js\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"undefined\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003ePing Pong\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"ping-pong-form\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goal\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEnter a number:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goal\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"number\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSubmit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"signup\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"email\"\u003c/span\u003e\u0026gt;\u003c/span\u003eEnter your email:\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"email\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSubmit\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"solution\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let's add a JavaScript file to process the form. Let's call it\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esignup-interface.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand put it in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/p\u003e\r\n\u003cdiv\u003esignup-interface.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e$(\u003cspan class=\"hljs-built_in\"\u003edocument\u003c/span\u003e).ready(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e{\r\n  $(\u003cspan class=\"hljs-string\"\u003e'#signup'\u003c/span\u003e).submit(\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003eevent\u003c/span\u003e)\u003c/span\u003e{\r\n    event.preventDefault();\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e email = $(\u003cspan class=\"hljs-string\"\u003e'#email'\u003c/span\u003e).val();\r\n    $(\u003cspan class=\"hljs-string\"\u003e'#signup'\u003c/span\u003e).hide();\r\n    $(\u003cspan class=\"hljs-string\"\u003e'#solution'\u003c/span\u003e).prepend(\u003cspan class=\"hljs-string\"\u003e'\u0026lt;p\u0026gt;Thank you, '\u003c/span\u003e + email + \u003cspan class=\"hljs-string\"\u003e' has been added to our list!\u0026lt;/p\u0026gt;'\u003c/span\u003e);\r\n  });\r\n});\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll also need a new package called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp-concat\u003c/code\u003e. We'll install it with npm now:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs sql\"\u003e$ npm \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einstall\u003c/span\u003e gulp-\u003cspan class=\"hljs-keyword\"\u003econcat\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e--save-dev\u003c/span\u003e\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, let's require this package and create a gulp task to use it. While the order of tasks in\u003cspan\u003e \u003c/span\u003e\u003cem\u003egulpfile.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edoesn't actually matter to gulp, let's place it before our browserify task, since this concatenation task will happen before the browserify task. This will help keep our project more organized for human eyes.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e...\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e concat = \u003cspan class=\"hljs-built_in\"\u003erequire\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e'gulp-concat'\u003c/span\u003e);\r\n\r\n...\r\n\r\ngulp.task(\u003cspan class=\"hljs-string\"\u003e'concatInterface'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e gulp.src([\u003cspan class=\"hljs-string\"\u003e'./js/pingpong-interface.js'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'./js/signup-interface.js'\u003c/span\u003e])\r\n    .pipe(concat(\u003cspan class=\"hljs-string\"\u003e'allConcat.js'\u003c/span\u003e))\r\n    .pipe(gulp.dest(\u003cspan class=\"hljs-string\"\u003e'./tmp'\u003c/span\u003e));\r\n});\r\n\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eHere, we have created a task called 'concatInterface'. It uses\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp.src\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto pull in all the files used in the browser. These files are formatted as an array of file names we are passing in.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe next line calls our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econcat()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction, created with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequire\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eat the top. We pass it the name of the file we want it to create,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eallConcat.js\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eNext, we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp.dest\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto tell gulp where to save our new file, which contains both of our JavaScript files. We're going to put it inside of a folder called\u003cspan\u003e \u003c/span\u003e\u003cem\u003etmp\u003c/em\u003e, which stands for temporary. This is because\u003cspan\u003e \u003c/span\u003e\u003cem\u003eallConcat.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill not be used in the browser. First, we have to browserify it to pull in any modules it uses.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eLet's modify the browserify task to do this next.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs javascript\"\u003e...\r\ngulp.task(\u003cspan class=\"hljs-string\"\u003e'jsBrowserify'\u003c/span\u003e, [\u003cspan class=\"hljs-string\"\u003e'concatInterface'\u003c/span\u003e], \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e browserify({ entries: [\u003cspan class=\"hljs-string\"\u003e'./tmp/allConcat.js'\u003c/span\u003e] })\r\n    .bundle()\r\n    .pipe(source(\u003cspan class=\"hljs-string\"\u003e'app.js'\u003c/span\u003e))\r\n    .pipe(gulp.dest(\u003cspan class=\"hljs-string\"\u003e'./build/js'\u003c/span\u003e));\r\n});\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe first thing we've done is added an additional argument to the task definition, after the name of the task. This is an array of dependencies (tasks that we want to run automatically before the task we are defining). In this case, we are telling it to run the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econcatInterface\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask to put all client-side JavaScript into one file\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebrowserifying it.\u003c/p\u003e\r\n\u003cp\u003eThen we just make one more change to the task. Instead of browserifying the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e./js/pingpong-interface.js\u003c/em\u003efile, and the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e./js/signup-interface.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile, we are going to browserify the new file and use the path\u003cspan\u003e \u003c/span\u003e\u003cem\u003e./tmp/allConcat.js\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe define this in the object passed to the browserify function, under the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eentries\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekey. With this setup, it's easy to see that there is a chain from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrowserify\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask, backwards to the output of its dependency, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econcatInterface\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etask.\u003c/p\u003e\r\n\u003cp\u003eNow our long file path used in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar Calculator = require('./../js/pingpong.js').calculatorModule;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emakes sense. After running our concatenation task, the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs/pingpong-interface.js\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eends up in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etmp/allConcat.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile. Then, when it is browserified, it will actually be located in\u003cspan\u003e \u003c/span\u003e\u003cem\u003etmp\u003c/em\u003e. it will need to traverse the directory structure and find our back-end\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epingpong.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile by starting in\u003cspan\u003e \u003c/span\u003e\u003cem\u003etmp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e./\u003c/code\u003e, then going up one level to the top of our project directory with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e./../\u003c/code\u003e, then it will need to look inside of our development\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejs\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/p\u003e\r\n\u003cp\u003eLet's run the new version of our browserify task:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-variable\"\u003e$ \u003c/span\u003egulp jsBrowserify\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow if we open our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in the browser we can use our new signup form with no errors.\u003c/p\u003e\r\n\u003cp\u003eWe can shorten our new concatenation task even more by using a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eglobbing pattern\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eusing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e*\u003c/code\u003e, the wildcard symbol. We can tell the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egulp-concat\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage to concatenate and browserify all files inside of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003efolder that end in the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-interface.js\u003c/code\u003e.\u003c/p\u003e\r\n\u003cdiv\u003egulpfile.js\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\r\ngulp.task(\u003cspan class=\"hljs-string\"\u003e'concatInterface'\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e gulp.src([\u003cspan class=\"hljs-string\"\u003e'./js/*-interface.js'\u003c/span\u003e])\r\n    .pipe(concat(\u003cspan class=\"hljs-string\"\u003e'allConcat.js'\u003c/span\u003e))\r\n    .pipe(gulp.dest(\u003cspan class=\"hljs-string\"\u003e'./tmp'\u003c/span\u003e));\r\n});\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we maintain this naming convention as our project grows we won't need to modify our gulp concatenate/browserify tasks if we add new files - we just name them something ending in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e-interface.js\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eif they are going to be used in the browser, and keep them in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder. Then they will automatically be included in\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild/js/app.js\u003c/em\u003e.\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false}],"assignments":[{"exportId":"i6b4f79c974dbc18ca84a97e25829bc5d","title":"Assignment: Practice the Command Line","type":"Assignment","content":"\u003ch1\u003ePractice: Command Line\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Start using the command line to interact with your computer. Learn some basic commands.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e\u003cem\u003eDiscuss the following question with your partner:\u003c/em\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between a GUI and the command line?\u003c/li\u003e\r\n\u003cli\u003eWhat are some advantages you can think of for using the command line?\u003c/li\u003e\r\n\u003cli\u003eName two commands and what they do.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003eFollow along with the lesson to start interacting with your computer through the command line. Then, once you have experience using the command line and using basic commands, complete the following exercise in the terminal.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eIf you're not already there, navigate to the home directory.\u003c/li\u003e\r\n\u003cli\u003ePrint your location to the screen to make sure you're in the right spot.\u003c/li\u003e\r\n\u003cli\u003eList the contents of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHome\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory to the terminal.\u003c/li\u003e\r\n\u003cli\u003eNavigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDesktop\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/li\u003e\r\n\u003cli\u003eCreate a directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/li\u003e\r\n\u003cli\u003eCreate a file named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile1.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eCreate two more files named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile2.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile3.html\u003c/em\u003e. (Here's a tip: you can create two files with a single command! Simply separate the two file names with a space:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ touch file2.html file3.html\u003c/code\u003e)\u003c/li\u003e\r\n\u003cli\u003eCreate a directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eMove\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile1.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einto\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eCopy\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile2.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand name the copy\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile4.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eRename\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile3.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethird-file.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate into\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eDelete\u003cspan\u003e \u003c/span\u003e\u003cem\u003efile1.html\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNavigate up one directory so that you are back in\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003ePrint your location to verify that you are back in\u003cspan\u003e \u003c/span\u003e\u003cem\u003etest\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eDelete\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eList the contents to the page to make sure that\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst-directory\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewas successfully deleted.\u003c/li\u003e\r\n\u003cli\u003eClear the terminal screen.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eStill want more practice? Check out the adventure game at\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://web.mit.edu/mprat/Public/web/Terminus/Web/main.html\" target=\"_blank\"\u003ethis link\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ethat uses the same terminal commands that we just learned to navigate through the levels.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":0.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i6738612b529467812ceaeeebf51cb730","title":"Friday: Independent Project - Pig Dice","type":"Assignment","content":"\u003ch2\u003eProject\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: The goal of this project is to exercise your JavaScript programming skills with constructors, prototypes, objects, properties, methods, jQuery and DOM manipulation and traversal.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eFirst, carefully read the project description below. You may discuss it with your previous pairs. Then, group up for a collective whiteboard session. Discuss the following; map out a basic approach on a whiteboard, collaborate, and get creative!\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat will happen when a user clicks \"Play\"?\u003c/li\u003e\r\n\u003cli\u003eWhat objects will you need? What functions?\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli\u003eHow will these be triggered throughout the gameplay?\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli\u003eHow will information be collected from the user? How will it be displayed?\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli\u003eWhen you have a broad overview of how you want to build your game, identify the simplest behavior, and perhaps what behaviors to tackle after that. Remember to start simple and work one step at a time.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003ePig Dice\u003c/h3\u003e\r\n\u003cp\u003eWrite a program where two users can play\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Pig_%28dice_game%29\" target=\"_blank\"\u003ePig dice\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eagainst each other. Don't forget to write plain English specifications with example inputs and outputs before you begin coding!\u003c/p\u003e\r\n\u003ch4\u003eFurther Exploration\u003c/h4\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd options to play one of the other variations of Pig Dice using two or more dice\u003c/li\u003e\r\n\u003cli\u003eAdd option to play the computer - easy or hard levels:\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eEasy\u003c/strong\u003e: Computer always stops after second roll.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eHard\u003c/strong\u003e: Computer uses strategy based on current total and rolled dice.\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eYour project will be evaluated for the following:\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eBootstrap classes are used to style your page.\u003c/li\u003e\r\n\u003cli\u003ePage incorporates a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eIndentation and spacing of HTML and CSS is accurate and consistent.\u003c/li\u003e\r\n\u003cli\u003eCommits are made regularly with clear messages associated with them\u003c/li\u003e\r\n\u003cli\u003eProject is deployed to GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eProject works as expected.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of week’s concepts. If prompted, you are able to discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject submittion time. It is to be submitted by 6pm onFriday unless otherwise stated\u003c/li\u003e\r\n\u003cli\u003eA project README that includes:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://gist.github.com/PurpleBooth/109311bb0361f32d87a2\"\u003eHere is an example\u003c/a\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eproject or program name\u003c/li\u003e\r\n\u003cli\u003eauthor name\u003c/li\u003e\r\n\u003cli\u003edescription of project\u003c/li\u003e\r\n\u003cli\u003eproject setup instructions\u003c/li\u003e\r\n\u003cli\u003elink to live site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003ecopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eProject is in a polished, portfolio-quality state.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003e(Suggestions for what this can mean: Intuitive, easy to follow layout. Simple yet polished styling. Form field labels where appropriate. Form fields that are validated correctly, and get cleared after submitting. Detailed, well put together readme. No typos. And much more.)\u003c/em\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eSubmission of Independent Projects\u003c/h2\u003e\r\n\u003cp\u003eIndependent Projects must be submitted by\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e6pm on Friday.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(For Moringa prep part-time students, code review and deadlines will be discussed in class.)\u003c/p\u003e\r\n\u003cp\u003eComplete the following steps to submit your project:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eBefore you start working on your project, create a Github repository for your project\u003c/li\u003e\r\n\u003cli\u003eSubmit your project -- use the top right button\u003cstrong\u003e (Submit Assignment)\u003c/strong\u003e\n\u003c/li\u003e\r\n\u003cli\u003eStart working on your project\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eBefore pushing your final code to Github,\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eat 5pm do a final check for each objective. Spend a few minutes checking indentation, removing commented-out code, creating a detailed README, etc. Your project should be polished and complete.\u003c/li\u003e\r\n\u003cli\u003e\u003cstrong\u003ePush the final code to your GitHub repo by 6pm local time.\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eEven if you are not completely done working on your project, push anyways which will communicate to your TM how much you have completed\u003c/li\u003e\r\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":24.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i3e972ae6b1ab43e61f968faf81ddabc2","title":"Friday: Independent Project - Portfolio Landing Page ","type":"Assignment","content":"\u003cp\u003eCongratulations on beginning your journey toward becoming a developer! As a developer, you need a web portfolio to showcase your work. Today, you will be creating the landing page for your programming portfolio. \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eRequirements\u003c/h2\u003e\r\n\u003cp\u003eHere are the requirements for your page:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eYour name\u003c/li\u003e\r\n\u003cli\u003eAn image of you or something that represents who you are\u003c/li\u003e\r\n\u003cli\u003eA list of projects you have created with active links to them (either on GitHub or GitHub pages)\r\n\u003cul\u003e\r\n\u003cli\u003eFor each, include a brief description of the project and what languages it uses\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eAn \"About Me\" section including:\r\n\u003cul\u003e\r\n\u003cli\u003eYour background (for example, your education, job experience, a paragraph on why you decided to take a class on programming, etc.)\u003c/li\u003e\r\n\u003cli\u003eYour current interests/hobbies/skills\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eDeploy your site onto GitHub pages so that a live site can be viewed at\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour-username.github.io/portfolio\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(for example)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eObjectives\u003c/h2\u003e\r\n\u003cp\u003eIn addition to these requirements, your portfolio will be evaluated on the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eSome of the most common HTML tags are incorporated, including:\r\n\u003cul\u003e\r\n\u003cli\u003ep, h, ul, ol, li, em, strong, a, img, div, span\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003ePage incorporates a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eIndentation and spacing of HTML and CSS is accurate.\u003c/li\u003e\r\n\u003cli\u003eCommits are made regularly with clear messages associated with them\u003c/li\u003e\r\n\u003cli\u003eProject is deployed to GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eA project README that includes:\r\n\u003cul\u003e\r\n\u003cli\u003eproject or program name\u003c/li\u003e\r\n\u003cli\u003eauthor name\u003c/li\u003e\r\n\u003cli\u003edescription of project\u003c/li\u003e\r\n\u003cli\u003eproject setup instructions\u003c/li\u003e\r\n\u003cli\u003elink to live site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003ecopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":20.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i1132a4c6f26441f01cff15ecaadc8d6f","title":"Friday: Independent Project - Quiz Board","type":"Assignment","content":"\u003ch3\u003eQuiz Board\u003c/h3\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eYour high school has started an after-school computer club and they need your help! The club is finishing a course on JavaScript and they need a quiz for students to take at the end. They have asked you to create a page that contains questions about JavaScript. .\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cstrong\u003eGoal\u003c/strong\u003e:  The goal of this project is to create a project that allows the user to answer questions from a multiple choice questions that you would have created\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cstrong\u003eRequirements\u003c/strong\u003e\u003c/h2\u003e\r\n\u003cp\u003eAs a user, I would like have the freedom to choose the answers to a question. This means you will create  questions and the provide multiple choice to those questions. Lets take an example:\u003c/p\u003e\r\n\u003cp\u003eWhat is the other name for JavaScript?\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eECMAScript\u003c/li\u003e\r\n\u003cli\u003eVue\u003c/li\u003e\r\n\u003cli\u003eI don't know\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBreak the program down into simple, individual behaviors with input/output examples. Begin with the simplest possible behavior. List these behaviors (also known as \"specs\" or \"specifications\") in the project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eREADME.md\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003ch3\u003eExample Layout\u003c/h3\u003e\r\n\u003cp\u003eInitially, the website should have a form of questions with multiple choice answers as shown below:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/rsz_quizboard.png\" alt=\"rsz_quizboard.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/7324\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAfter filling up the form, the form should hide and then display the score. Each question should have a scope point allocated to it. For example, If you have answered question 1 correctly you will be awarded 20 points. :\u003cbr\u003e\u003cimg src=\"viewer/files/rsz_results_quiz_board.png\" alt=\"rsz_results_quiz_board.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/10/files/7325\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eAnd so on...\u003c/p\u003e\r\n\u003cp\u003eYour final application is not required to look like the example. Make it look better!\u003c/p\u003e\r\n\u003ch3\u003eExample Specifications Section in README\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"http://dl.dropboxusercontent.com/s/y3s9xmnmpl6yqfi/example-specs-in-readme.png\" alt=\"example-specs-in-readme-file\"\u003e\u003c/p\u003e\r\n\u003cp\u003eInclude similar specifications in your README for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebehaviors your program demonstrates.\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you finish meeting the objectives for this project, consider adding additional features, such as:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRecreate the example layout.\u003c/li\u003e\r\n\u003cli\u003eAdd images and other custom aesthetics.\u003c/li\u003e\r\n\u003cli\u003eImplement different behaviors/effects/images for different inputs.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eObjectives\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eYour code will be reviewed for the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eJavaScript business logic and user interface logic are separate.\u003c/li\u003e\r\n\u003cli\u003eBootstrap classes are used to style your page.\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003ejQuery effects are used\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan style=\"font-weight: 400;\"\u003eForm gathers input from the user\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003eVariable names are descriptive and use lower camel case (e.g. myVariableExample) \u003cspan style=\"font-weight: 400;\"\u003eare descriptive of what they represent\u003c/span\u003e.\u003c/li\u003e\r\n\u003cli\u003eCode has proper indentation and spacing.\u003c/li\u003e\r\n\u003cli\u003eAll previous objectives have been met.\u003c/li\u003e\r\n\u003cli\u003eProject is broken down into \"plain English\" specs, listed in README.\u003c/li\u003e\r\n\u003cli\u003ePage incorporates a custom-made stylesheet that uses cascading, the box model, and floats\u003c/li\u003e\r\n\u003cli\u003eIndentation and spacing of HTML and CSS is accurate and consistent.\u003c/li\u003e\r\n\u003cli\u003eCommits are made regularly with clear messages associated with them\u003c/li\u003e\r\n\u003cli\u003eProject is deployed to GitHub Pages\u003c/li\u003e\r\n\u003cli\u003eProject works as expected.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of week’s concepts. If prompted, you are able to discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject submittion time. It is to be submitted by 6pm onFriday unless otherwise stated\u003c/li\u003e\r\n\u003cli\u003eA project README that includes:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://gist.github.com/PurpleBooth/109311bb0361f32d87a2\"\u003eHere is an example\u003c/a\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eproject or program name\u003c/li\u003e\r\n\u003cli\u003eauthor name\u003c/li\u003e\r\n\u003cli\u003edescription of project\u003c/li\u003e\r\n\u003cli\u003eproject setup instructions\u003c/li\u003e\r\n\u003cli\u003elink to live site on GitHub Pages\u003c/li\u003e\r\n\u003cli\u003ecopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eProject is in a polished, portfolio-quality state.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003e(Suggestions for what this can mean: Intuitive, easy to follow layout. Simple yet polished styling. Form field labels where appropriate. Form fields that are validated correctly, and get cleared after submitting. Detailed, well put together readme. No typos. And much more.)\u003c/em\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eSubmission of Independent Projects\u003c/h2\u003e\r\n\u003cp\u003eIndependent Projects must be submitted by\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e6pm on Friday.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(For Moringa prep part-time students, code review and deadlines will be discussed in class.)\u003c/p\u003e\r\n\u003cp\u003eComplete the following steps to submit your project:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eBefore you start working on your project,create a github repository for your project\u003c/li\u003e\r\n\u003cli\u003eStart working on your project\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eBefore pushing your final code to Github,\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eat 5pm do a final check for each objective. Spend a few minutes checking indentation, removing commented-out code, creating a detailed README, etc. Your project should be polished and complete.\u003c/li\u003e\r\n\u003cli\u003e\u003cstrong\u003ePush the final code to your GitHub repo by 6pm local time.\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eEven if you are not completely done working on your project, push anyways which will communicate to your TM how much you have completed\u003c/li\u003e\r\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":22.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ic60e745b5529d2c11126c7bd05139504","title":"Friday: Independent Project - Triangle Tracker","type":"Assignment","content":"\u003ch2 style=\"text-align: left;\"\u003eTRIANGLE TRACKER\u003c/h2\u003e\r\n\u003ch4\u003eGOAL\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFor this week's Independent Project, we will be building an application that will help us know whether a triangle is isosceles, equilateral, scalene or NOT a triangle at all.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBased on the functionality of the application, key points to note are:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFor an equilateral triangle, all sides must be equal.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFor an isosceles triangle, two sides are exactly equal.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFor a scalene triangle, none of the sides is equal. However, the sum of any two sides of the triangle must be greater than the third side. \u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMost importantly, if the sum of any two sides of the triangle is equal to or less than the third remaining side, then a triangle CANNOT be formed using those values. (For example, the values 9,4 \u0026amp; 3 cannot form a triangle.)\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eUSER STORY\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs a user, I want to enter the length values of the three sides of my triangle in the application.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAfter submitting my values, the application should tell me what type of triangle my values will produce, whether an isosceles, equilateral, scalene or NO triangle at all.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHINT: For you to actualize your project, consider researching on how to use HTML input fields and how to link them to the business logic using javascript.  \u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003eOBJECTIVES\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project will be evaluated based on the following objectives:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project uses one or more javascript functions.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAppropriate control flows and logical operators are used in the project.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project makes use of one or more arrays in javascript.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project uses a  HTML input to collect user data.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project uses a custom CSS stylesheet that incorporates cascading, box model and floats.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project works as expected, achieving the functionality required.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project demonstrates an understanding of the week's concepts. If requested, you should be able to explain your code to your instructor.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eTECHNICAL REQUIREMENTS\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eThe project contains a well-documented README file. This should have: \u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eProject name.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eProject description. \u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAuthor(s) information.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eSetup instructions - includes any scripts that need to be run if necessary.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBDD.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eTechnologies used.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eContact information.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eLicense and Copyright information.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003eThe project code is consistently indented and follows the language syntax.\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003eThe project is submitted in time. It should be submitted before 6:00 pm Friday unless otherwise stated.\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project code is pushed to Github and the project is deployed to gh-pages.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project name, description and URL to live site are provided on the Github repository.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCommits are made regularly with relevant and clear commit messages associated with them.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe project should be polished in a portfolio-quality state.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":24.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i4646139234f48f6fcfbf104e6d462a71","title":"Roll Call Attendance","type":"Assignment","content":null,"submissionTypes":"an external tool","graded":true,"pointsPossible":100.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i746f50c45d7d4cbfe6cc141b06e3ad29","title":"Thursday: Team Week Code Review","type":"Assignment","content":"\u003ch2\u003eCode Review\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eGroup projects count as one of your required code reviews, and must be submitted on time. Remember, successful completion of each code review is required to pass the course.\u003c/p\u003e\r\n\u003cp\u003eYour presentation on at the end of the project will take the place of a one-on-one code review with your instructor. You will receive feedback directly.\u003c/p\u003e\r\n\u003ch3\u003eObjectives\u003c/h3\u003e\r\n\u003cp\u003eYour code will be reviewed for the following objective:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eParticipation in creating and presenting a project; including collaborating effectively with teammates.\u003c/li\u003e\r\n\u003c/ul\u003e","submissionTypes":null,"graded":true,"pointsPossible":0.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i786ee54e4d8a2efbf09e0fa7afd1ae8a","title":"Thursday: Team Week Project Submission","type":"Assignment","content":"\u003cp\u003e\u003cspan\u003eThis rubric is a technical retrospective of the technical group dynamics and application of concepts that were gone through the module. Submit the link of your GitHub repo and deployed site to your TM, and review the scores in your groups.\u003c/span\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":9.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i0b3761a968403d8d18af4b93c8f8e08c","title":"Thursday: Team Week Retrospective","type":"Assignment","content":"\u003cp\u003e\u003cspan\u003eThis rubric describes different parts of being a team member. Review the categories and score descriptions, and fill one out for each of your teammates. The review is anonymous and does not count for any final grade, so that you can give candid and honest feedback to help each other grow.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eSubmit your name in the \u003cstrong\u003eSubm\u003c/strong\u003e\u003c/span\u003e\u003cspan\u003e\u003cstrong\u003eit assignment\u003c/strong\u003e section\u003c/span\u003e\u003c/p\u003e","submissionTypes":"a text entry box","graded":true,"pointsPossible":25.0,"dueAt":null,"lockAt":null,"unlockAt":null}],"discussion_topics":[{"exportId":"icf39d29fd7924bb6b2ede5bfa34403f7","title":"Discussion: Indentation and Spacing","type":"DiscussionTopic","content":"\u003cp\u003e\u003cem\u003eDiscuss the following:\u003c/em\u003e\u003c/p\u003e\n\u003ch2\u003e\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eWhy is indentation and spacing important? What benefit is there to ensuring that it is consistent?\u003c/li\u003e\n\u003cli\u003eWhen do we indent?\u003c/li\u003e\n\u003cli\u003eHow many spaces should make up one indent?\u003c/li\u003e\n\u003cli\u003eIf we wanted to change the little icon that displays next to the page title, would that code go in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e?\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cimg src=\"viewer/files/MP-W1D1-11-favicon.png\" alt=\"MP-W1D1-11-favicon.png\" width=\"484\" height=\"143\"\u003e\n\u003c/li\u003e\n\u003cli\u003eWhat is an opening tag? What is a closing tag?\u003c/li\u003e\n\u003cli\u003eWhat does it mean when an element is nested within another? Can you give an example of when we would use nested elements?\u003c/li\u003e\n\u003cli\u003eWhat is the difference between a block element and an inline element?\u003c/li\u003e\n\u003cli\u003eWhat does it mean to provide a relative path?\u003c/li\u003e\n\u003cli\u003eWhat is an HTML attribute? Can you give some examples of ones that we have seen so far?\u003c/li\u003e\n\u003c/ol\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"iceabe33ee77ccc9edfd195c98ed31460","title":"Discussion: HTML Forms","type":"DiscussionTopic","content":"\u003ch2\u003eWarm Up\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eWhy does variable scope matter?\u003c/li\u003e\n\u003cli\u003eWhat happens when you don't use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evar\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto declare a variable? Why is that bad?\u003c/li\u003e\n\u003cli\u003eThere are two alerts that display the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erabbitName\u003c/code\u003e, one when the function runs and one at the end of the code. What value do you expect at each alert? (Use JSFiddle to test your theories.)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e rabbitName = \u003cspan class=\"hljs-string\"\u003e\"Njoro\"\u003c/span\u003e;\n\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehoppity\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        alert(rabbitName);\n        rabbitName=\u003cspan class=\"hljs-string\"\u003e\"Fredi\"\u003c/span\u003e;\n      }\n\n      hoppity();\n      alert(rabbitName);\n    \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat values do you expect at these alerts?\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"javascript hljs\"\u003e\n      \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e rabbitName = \u003cspan class=\"hljs-string\"\u003e\"Njoro\"\u003c/span\u003e;\n\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehoppity\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e rabbitName = \u003cspan class=\"hljs-string\"\u003e\"Tanu\"\u003c/span\u003e\n        alert(rabbitName);\n        rabbitName=\u003cspan class=\"hljs-string\"\u003e\"Fredi\"\u003c/span\u003e;\n      }\n\n      hoppity();\n      alert(rabbitName);\n    \u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eWhy do you need\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eevent.preventDefault()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen working with jQuery forms?\u003c/li\u003e\n\u003c/ul\u003e","lockAt":null,"unlockAt":null,"graded":false}],"quizzes":[],"files":[{"type":"folder","name":"Week 2 Wednesday","size":null,"files":[{"type":"file","name":"folder-structure.png","size":8327,"files":null},{"type":"file","name":"dom-visual-reference.png","size":180797,"files":null}]},{"type":"folder","name":"Week 4 Wednesday","size":null,"files":[]},{"type":"file","name":"rsz_results_quiz_board.png","size":15368,"files":null},{"type":"file","name":"MP-W1D1-06-submodule.png","size":16141,"files":null},{"type":"file","name":"MP-W1D1-14-webpage_screenshot_unordered_list.png","size":39044,"files":null},{"type":"folder","name":"Week 3 Monday","size":null,"files":[]},{"type":"folder","name":"Wednesday Content Images","size":null,"files":[{"type":"file","name":"MP-W1D3-01-box_model.png","size":5141,"files":null},{"type":"file","name":"MP-W1D3-02-box_model_inspect.png","size":10039,"files":null}]},{"type":"folder","name":"Week 4 Thursday","size":null,"files":[{"type":"file","name":"bank account.png","size":9340,"files":null}]},{"type":"file","name":"MP-W1D1-03-atom_hello_world.jpg","size":33850,"files":null},{"type":"folder","name":"Week 3 Thursday","size":null,"files":[]},{"type":"file","name":"MP-W1D1-13-webpage_screenshot_headers.png","size":30529,"files":null},{"type":"file","name":"MP-W1D1-03-new_repo_screen-1.png","size":64377,"files":null},{"type":"file","name":"MP-W1D2-04-overridden_rules.png","size":55996,"files":null},{"type":"file","name":"MP-W1D1-04-empty_repo.png","size":82750,"files":null},{"type":"folder","name":"Agile content","size":null,"files":[{"type":"file","name":"Tools.png","size":280482,"files":null},{"type":"file","name":"personas.png","size":480734,"files":null},{"type":"file","name":"delete option.png","size":42205,"files":null}]},{"type":"folder","name":"Grading","size":null,"files":[{"type":"file","name":"Picture5.png","size":73336,"files":null},{"type":"file","name":"Picture3.png","size":55067,"files":null},{"type":"file","name":"Picture7.png","size":89973,"files":null},{"type":"file","name":"Picture6.png","size":173102,"files":null},{"type":"file","name":"Picture4.png","size":102931,"files":null},{"type":"file","name":"Picture1.png","size":15797,"files":null},{"type":"file","name":"Picture2.png","size":10299,"files":null},{"type":"file","name":"Picture8.png","size":86371,"files":null}]},{"type":"folder","name":"Week 2 Thursday","size":null,"files":[{"type":"file","name":"select-box-form-input.png","size":10415,"files":null},{"type":"file","name":"calculator-result-added-directly-to-page.png","size":16602,"files":null},{"type":"file","name":"date-select-form-input.png","size":24149,"files":null},{"type":"file","name":"radio-button-form-input.png","size":10110,"files":null},{"type":"file","name":"color-select-form-input.png","size":57463,"files":null},{"type":"file","name":"no-submit-listener-resulting-in-NaN-alert.png","size":33712,"files":null},{"type":"file","name":"calculator-dialog-with-correct-answer.png","size":30041,"files":null}]},{"type":"file","name":"Screenshot from 2018-07-29 18-56-00.png","size":10205,"files":null},{"type":"file","name":"MP-W1D2-02-failed_to_load_resource.png","size":15442,"files":null},{"type":"folder","name":"Thursday Content Images","size":null,"files":[{"type":"file","name":"MP-W1D4-09-html_grid.png","size":9013,"files":null},{"type":"file","name":"MP-W1D4-08-panel.png","size":14288,"files":null},{"type":"file","name":"MP-W1D3-05-single_column.png","size":140619,"files":null},{"type":"file","name":"MP-W1D4-07-well.png","size":17713,"files":null},{"type":"file","name":"MP-W1D4-10-responsive_grid_01.png","size":84809,"files":null},{"type":"file","name":"MP-W1D4-15-progress_bars_example_02.png","size":114330,"files":null},{"type":"file","name":"MP-W1D4-03-bootstrap_cdn_links.png","size":145487,"files":null},{"type":"file","name":"MP-W1D4-04-bootstrap_test_no_styling.png","size":62329,"files":null},{"type":"file","name":"MP-W1D4-11-responsive_grid_02.png","size":46311,"files":null},{"type":"file","name":"MP-W1D4-11-navigation_links.png","size":23834,"files":null},{"type":"file","name":"MP-W1D4-17-bootstrap_js_cdn.png","size":89565,"files":null},{"type":"file","name":"MP-W1D3-06-multiple_column.png","size":154462,"files":null},{"type":"file","name":"MP-W1D4-09-helper_bg_danger.png","size":18623,"files":null},{"type":"file","name":"MP-W1D4-14-progress_bars_example.png","size":109036,"files":null},{"type":"file","name":"MP-W1D4-12-css_nav_sidebar.png","size":20982,"files":null},{"type":"file","name":"MP-W1D4-05-bootstrap_test_plusbootstrap.png","size":68124,"files":null},{"type":"file","name":"MP-W1D3-04-resize_window_responsive.gif","size":1893612,"files":null},{"type":"file","name":"MP-W1D4-05-find_container.gif","size":77977,"files":null},{"type":"file","name":"MP-W1D4-10-panel_info.png","size":12875,"files":null},{"type":"file","name":"MP-W1D4-10-html_grid_02.png","size":3405,"files":null},{"type":"file","name":"MP-W1D4-16-progress_bars_example_code.png","size":114181,"files":null},{"type":"file","name":"MP-W1D4-13-components_nav_sidebar.png","size":37922,"files":null},{"type":"file","name":"MP-W1D4-06-jumbotron.png","size":66032,"files":null},{"type":"file","name":"MP-W1D4-02-bootstrap_filestructure.png","size":57641,"files":null}]},{"type":"file","name":"MP-W1D1-12-webpage_screenshot_paragraphs.png","size":18315,"files":null},{"type":"folder","name":"Week 2 Tuesday","size":null,"files":[{"type":"file","name":"button-on-calculator.png","size":32857,"files":null},{"type":"file","name":"function-arguments-returns.png","size":18133,"files":null},{"type":"file","name":"result-displayed-from-calculator.png","size":32311,"files":null},{"type":"file","name":"jsfiddle-screenshot.png","size":36698,"files":null}]},{"type":"file","name":"MP-W1D2-01-folder_structure_css.png","size":14110,"files":null},{"type":"file","name":"MP-W1D1-07-hello_world_webpage.png","size":17887,"files":null},{"type":"folder","name":"Tuesday Content Images","size":null,"files":[{"type":"file","name":"resolveconflicts.png","size":101788,"files":null},{"type":"file","name":"after-fork.png","size":197733,"files":null},{"type":"file","name":"readmelinkadded.png","size":73185,"files":null},{"type":"file","name":"mergeconfig.png","size":220294,"files":null},{"type":"file","name":"remote-output.png","size":41172,"files":null},{"type":"file","name":"MP-W1D2-07-github_repo_main.png","size":59932,"files":null},{"type":"file","name":"MP-W1D2-14-test_site_red_theme.png","size":38424,"files":null},{"type":"file","name":"fork-button-1.png","size":79130,"files":null},{"type":"file","name":"MP-W1D2-05-github_branch_tab.png","size":44103,"files":null},{"type":"file","name":"author-section.png","size":70717,"files":null},{"type":"file","name":"MP-W1D2-15-flow_chart_2.png","size":73095,"files":null},{"type":"file","name":"MP-W1D2-08-github_branch_dropdown.png","size":23116,"files":null},{"type":"file","name":"cloning-link.png","size":242014,"files":null},{"type":"file","name":"aftereditmerge.png","size":42301,"files":null},{"type":"file","name":"newpullrequest.png","size":141215,"files":null},{"type":"file","name":"MP-W1D2-16-red_theme_sans_serif.png","size":39509,"files":null},{"type":"file","name":"MP-W1D2-11-test_site_blue_theme.png","size":37934,"files":null},{"type":"file","name":"MP-W1D2-09-project_structure_branching.png","size":11217,"files":null},{"type":"file","name":"readmeconflicts.png","size":86970,"files":null},{"type":"file","name":"MP-W1D2-13-flow_chart_1.png","size":55317,"files":null},{"type":"file","name":"allconflictsresolved.png","size":23894,"files":null},{"type":"file","name":"MP-W1D2-17-flow_chart_3.png","size":81332,"files":null},{"type":"file","name":"MP-W1D2-06-github_branch_delete.png","size":44458,"files":null},{"type":"file","name":"MP-W1D2-18-flow_chart_4.png","size":97637,"files":null},{"type":"file","name":"MP-W1D2-10-test_site_blue_headers.png","size":31048,"files":null}]},{"type":"file","name":"MP-W1D1-17-my_first_webpage_inline_elements.png","size":287122,"files":null},{"type":"file","name":"MP-W1D1-09-my_first_webpage.png","size":16856,"files":null},{"type":"file","name":"MP-W1D1-11-favicon.png","size":16028,"files":null},{"type":"file","name":"rsz_quizboard.png","size":33405,"files":null},{"type":"file","name":"MP-W1D1-10-web_browser_logos.png","size":490478,"files":null},{"type":"file","name":"cryptosquare.png","size":16562,"files":null},{"type":"file","name":"MP-W1D1-08-tab_length.jpeg","size":103615,"files":null},{"type":"folder","name":"Week 3 Wednesday","size":null,"files":[]},{"type":"folder","name":"Week 4 Monday","size":null,"files":[{"type":"file","name":"weatherapi.png","size":53615,"files":null},{"type":"file","name":"ajax.png","size":81830,"files":null}]},{"type":"file","name":"MP-W1D2-03-inspect_element_dock_options.png","size":87589,"files":null},{"type":"folder","name":"Week 3 Tuesday","size":null,"files":[{"type":"file","name":"bdd-leap-year-grid.png","size":67696,"files":null},{"type":"file","name":"bdd-title-case-grid.png","size":128180,"files":null},{"type":"file","name":"leapyear_result.png","size":13827,"files":null},{"type":"file","name":"leapyear.png","size":11542,"files":null}]},{"type":"file","name":"MP-W1D1-15-webpage_screenshot_ordered_list.png","size":11007,"files":null},{"type":"file","name":"MP-W1D1-16-hello_world_folder_structure.png","size":11972,"files":null}]}