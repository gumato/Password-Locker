window.COURSE_DATA = {"language":"en-GB","lastDownload":"2019-01-08T10:02:41+03:00","title":"JavaScript - AngularJS","modules":[{"id":74,"name":"Week 1","status":"completed","unlockDate":null,"prereqs":[],"requirement":"one","sequential":false,"exportId":"i606efa8204d44dfb9dfdfeb8166a27ce","items":[{"id":2048,"title":"Monday: Angular Objectives","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eWe will be learning how to create basic Angular apps using Angular CLI over the next two weeks.\u003c/p\u003e\r\n\u003cp\u003eAngular can be written using Javascript, Typescript or Dart. In our case, we will write our Angular apps using Typescript, which you learned over the pre-course work.\u003c/p\u003e\r\n\u003cp\u003eAngular CLI is a command-line interface that helps us build Angular apps quickly.\u003c/p\u003e\r\n\u003ch3\u003ePlan\u003c/h3\u003e\r\n\u003cp\u003eThis week we will start off by learning how to add content and interactivity to our Angular app. To start with, we will use templates and directives to display data dynamically. Then, we'll organise our data by adding models to our application and use event binding for adding interactivity.\u003c/p\u003e\r\n\u003cp\u003eMonday and Tuesday have been structured to have slightly more content so that you have enough basic knowledge which will help you practice on building an Angular application from scratch. Additionally, it also gives you a chance to engage with the content more and better understand the week's concepts.\u003c/p\u003e\r\n\u003cp\u003eBy the end of the week, you will be able to create a fully functional Angular Application.\u003c/p\u003e\r\n\u003cp\u003eNext week we will explore the framework further by adding pages to our application using routers and so much more.\u003c/p\u003e\r\n\u003ch2\u003eIndependent Project Objectives\u003c/h2\u003e\r\n\u003cp\u003eThe week's independent project will be evaluated for the following objectives:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eUse Angular CLI to create your Project.\u003c/li\u003e\r\n\u003cli\u003eCreate a model for your Quote objects.\u003c/li\u003e\r\n\u003cli\u003eCreate a custom directive that highlights the quote that has the highest vote.\u003c/li\u003e\r\n\u003cli\u003eImplement a form component that has input sections for the quote.\u003c/li\u003e\r\n\u003cli\u003eInitialize an initial value of 0 for both upvote and downvote for each quote\u003c/li\u003e\r\n\u003cli\u003eAdd a custom pipe which displays the time passed since the quote was created.\u003c/li\u003e\r\n\u003cli\u003eMake a well-documented README that highlights:\r\n\u003col\u003e\r\n\u003cli\u003eAuthor\u003c/li\u003e\r\n\u003cli\u003eA brief description of the project \u003c/li\u003e\r\n\u003cli\u003eProgram set-up instructions\u003c/li\u003e\r\n\u003cli\u003eA link to the deployed site of your project\u003c/li\u003e\r\n\u003cli\u003eCopyright and License information\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eAt least use bootstrap  to style you project\u003c/li\u003e\r\n\u003cli\u003eHigh-Quality  and portfolio-ready project\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e","exportId":"monday-angular-objectives"},{"id":1892,"title":"Monday: MVC Architecture with Angular","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOne of the popular ways of organising application is using the \u003c/span\u003e\u003cstrong\u003eMVC architecture\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Angular uses this architecture to organise its application. Let's look at what is MVC architecture in Angular.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eModel-view-controller, or MVC as its popularly known, is a software design pattern for developing web applications. This design pattern is made up of three parts:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003e Model\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e: Responsible for maintaining data\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eView\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e:Responsible for displaying data to the user\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eController\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e: Responsible for controlling the interaction between the Model and Views\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe MVC design pattern separates the application's logic from the user interface.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe MVC concept can be represented graphically as follows:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cimg src=\"viewer/files/MVC.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"MVC\" width=\"561\" height=\"421\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/11/files/6805\" data-api-returntype=\"File\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's walk through what's happening in the diagram. Assume that you have an application that tracks your goals. Each time you delete or add a new goal, the controller updates the model by either deleting or adding a goal. In other words, the controller updates the model as per the user input.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe model then notifies the controller of the changes, which in turn updates the views to display the updated information. When you add your goals and the model is updated, the controller updates the view which displays the new goal on your site.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's look at each part separately and how they function:\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cstrong\u003eModel\u003c/strong\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis is the application's data structure. It represents the actual data that an app deals with, and it responds to requests from views and instructions from controllers to update itself. Moreover, a model does not depend on either view or controller.  In Angular applications, models are represented by objects. In the example of the goal application from earlier, our model would be:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eclass Goal{\u003cbr\u003e  constructor(){}\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDon't worry about mastering the code right now - we'll be creating applications soon enough. For now, focus on what each part represents, and how they relate to one another.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cstrong\u003eView\u003c/strong\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eViews are what is presented to the user and how they interact with it. In other words, it's what the user actually sees on their screen, and can be made with HTML, CSS or Javascript. It displays the model data. In Angular, we can create a view in HTML by using double curly braces.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;h4 id=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"{{i}}\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e appStrikethrough\u0026gt; {{goal.name}} due on {{goal.completeDate|date|uppercase}} \u0026lt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e/h4\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch2\u003e\u003cstrong\u003eController\u003c/strong\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe controller is essentially the glue between the model and the view. It updates the view when the view changes and also adds event listeners to the view. Additionally, it updates the model when the user manipulates the view.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSince the controller links both the model and the views, it can be separated into two; view controllers and model controllers\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eView controllers are responsible for pulling together the model used by the view and handling the input from the user of the view. For example, if you wanted to delete a goal from your goal application, you would have an event listener in the HTML that listens for when the user clicks the delete button and then a function that actually deletes the clicked goal.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal.component.html\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;button \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eclass\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"btn btn-danger btn-sm\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (click)=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'deleteGoal(i)'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;Delete Goal\u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the example above the event listener is `(click)` and the function that deletes the goal is `deleteGoal(i)`\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e For now, do not worry about how to create the function, we'll explain that later as we look at angular in depth. The important thing to understand for now is how the event listeners work together with functions as view controllers.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOn the other hand, model controllers contain the data to be displayed as well as the data to be collected as input in forms. It can also be functions that are invoked based on the user's activity such as clicking a button or making changes to the model data. For example, a function that adds a new goal to the model. Whenever you add a new goal through a form, there is a function that is responsible for adding that goal to your database. This function is a model controller because it interacts directly with your model. \u003c/span\u003e\u003c/p\u003e","exportId":"monday-mvc-architecture-with-angular"},{"id":749,"title":"Monday: Angular Apps","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eAngular Apps\u003c/h2\u003e\r\n\u003cp\u003eAfter that brief introduction to typescript and ES6, we can dive right into Angular. We will use the Angular\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCLI\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e-\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eCommand Line Interface\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto generate a new Angular app.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng new Goals\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis command will take some time to run but in essence, it is creating a new angular application by providing us with boilerplate code and by installing the latest\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enpm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edependencies that are needed in our project.\u003c/p\u003e\r\n\u003cp\u003eWhen the command is done we get a new shiny Angular app.\u003c/p\u003e\r\n\u003cp\u003eWe can now go into our newly created project and run the app to see what we have\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ cd Goals\u003cbr\u003e$ ng serve \r\n** NG Live Development Server is listening on localhost:\u003cspan class=\"hljs-number\"\u003e4200\u003c/span\u003e, open your browser on http://localhost:\u003cspan class=\"hljs-number\"\u003e4200\u003c/span\u003e/ **\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis opens a live development server that we can view our application on. We just type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://localhost:4200/\u003c/code\u003ein our browser’s URL tab. We can see the default Angular welcome page. But we haven’t even written any code how is the browser displaying content?\u003c/p\u003e\r\n\u003cp\u003eLet us open the new Angular app in our favorite editor. We immediately see a lot of files that we did not create but was generated by the Angular CLI. We will ignore most of them for now and head directly to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder. This is where we will write most of our code.\u003c/p\u003e\r\n\u003cp\u003eEvery new Project is created with one\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eComponent\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppComponent\u003c/code\u003e\u003cspan\u003e .\u003c/span\u003ewe will discuss what Components later on. Inside our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder we have another subfolder called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat is where our app component lives. It has a CSS file and template HTML file. It also has a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile where we define all our logic.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp.module.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estores all top-level configurations.\u003c/p\u003e\r\n\u003cp\u003eIn Angular, each component has a unique selector. This allows it to be called into any other component or to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eindex.html\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epage.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003esrc/index.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!doctype html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003elang\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"en\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"utf-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eGoals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebase\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"/\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"viewport\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"width=device-width, initial-scale=1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"icon\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"image/x-icon\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"favicon.ico\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-root\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-root\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn our index page we render the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppcomponent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent to our page using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp-root\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emain.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile is responsible for importing the main module and bootstrapping the root component to be displayed first once we load the page.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Updating_Our_Components_46\"\u003e\u003c/a\u003eUpdating Our Components\u003c/h3\u003e\r\n\u003cp\u003eWe are going to be building a simple goal tracking application. We can start by updating our AppComponent.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-root'\u003c/span\u003e,\r\n  template: \u003cspan class=\"hljs-string\"\u003e`\r\n    \u0026lt;h1\u0026gt; My Goals \u0026lt;/h1\u0026gt;\r\n    \u0026lt;p\u0026gt; My goal for today is {{goal}} \u0026lt;/p\u0026gt;\r\n  `\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppComponent\u003c/span\u003e \u003c/span\u003e{\r\n  goal = \u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e;\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe change the contents of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.component.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. We create a property called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand give it a value. We then use backticks to generate multiline HTML code. We use the string interpolation\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e{{}}\u003c/code\u003eand the property to out template. Now we can serve the application and see the changes made.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Template_File_68\"\u003e\u003c/a\u003eTemplate File\u003c/h3\u003e\r\n\u003cp\u003eRight now our application is very small and we can get away with writing our HTML code together with our logic. In larger apps, we need to separate our logic from the View file. But in a Larger application, this might be very confusing and difficult to maintain. Each component is created with a HTML template file we can use to render template code.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-root'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./app.component.html'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppComponent\u003c/span\u003e \u003c/span\u003e{\r\n  goal = \u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFirst, we remove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etemplate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparameter and replace it with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etemplateUrl\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis will point to the template file.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e My Goals \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e My goal for today is {{goal}} \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe replace the initial content on the page with what was in our logic file. When we run the app again we should see nothing has changed.\u003c/p\u003e","exportId":"monday-angular-apps"},{"id":1041,"title":"Monday: Angular File Review","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\n\u003cspan\u003e Angular File \u003c/span\u003eReview\u003c/h2\u003e\r\n\u003cp\u003eWe can now examine the files inside our goals app. A good starting point is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eREADME\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile where we can see all the Angular commands we can use to work with our app.\u003c/p\u003e\r\n\u003cp\u003eWe will mostly work inside our\u003cspan\u003e \u003c/span\u003e\u003cem\u003esrc/\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003esrc\r\n|\r\n|---app/\r\n|      | ---app.component.css\r\n|      | ---app.component.html\r\n|      | ---app.component.spec.ts\r\n|      | ---app.component.ts\r\n|      | ---app.module.ts\r\n|---assets/\r\n|      | ---.gitkeep\r\n|---environments/\r\n|      | ---environment.prod.ts\r\n|      | ---environment.ts\r\n|---favicon.ico\r\n|---index.html\r\n|---main.ts\r\n|---polyfills.ts\r\n|---styles.css\r\n|---test.ts\r\n|---tsconfig.app.json\r\n|    tsconfig.spec.json\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThese files and folders are what are found in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder where our app will live. Angular documentation defines them this way:\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"appappcomponenttshtmlcssspects_30\"\u003e\u003c/a\u003eapp/app.component.{ts,html,css,spec.ts}\u003c/h3\u003e\r\n\u003cp\u003eDefines the AppComponent along with an HTML template, CSS stylesheet, and a unit test. It is the root component of what will become a tree of nested components as the application evolves.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"appappmodulets_34\"\u003e\u003c/a\u003eapp/app.module.ts\u003c/h3\u003e\r\n\u003cp\u003eDefines AppModule, the root module that tells Angular how to assemble the application. Right now it declares only the AppComponent. Soon there will be more components to declare.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"assets_38\"\u003e\u003c/a\u003eassets/*\u003c/h3\u003e\r\n\u003cp\u003eA folder where you can put images and anything else to be copied wholesale when you build your application.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"environments_42\"\u003e\u003c/a\u003eenvironments/*\u003c/h3\u003e\r\n\u003cp\u003eThis folder contains one file for each of your destination environments, each exporting simple configuration variables to use in your application. The files are replaced on-the-fly when you build your app. You might use a different API endpoint for development than you do for production or maybe different analytics tokens. You might even use some mock services. Either way, the CLI has you covered.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"faviconico_46\"\u003e\u003c/a\u003efavicon.ico\u003c/h3\u003e\r\n\u003cp\u003eEvery site wants to look good on the bookmark bar. Get started with your very own Angular icon.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"indexhtml_50\"\u003e\u003c/a\u003eindex.html\u003c/h3\u003e\r\n\u003cp\u003eThe main HTML page that is served when someone visits your site. Most of the time you’ll never need to edit it. The CLI automatically adds all js and css files when building your app so you never need to add any \u0026lt;script\u0026gt; or \u0026lt;link\u0026gt; tags here manually.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"maints_54\"\u003e\u003c/a\u003emain.ts\u003c/h3\u003e\r\n\u003cp\u003eThe main entry point for your app. Compiles the application with the Just-in-Time (JIT) compiler and bootstraps the application’s root module (AppModule) to run in the browser. You can also use the Ahead-of-Time (AOT) compiler without changing any code by appending the–aot flag to the ng build and ng serve commands.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"polyfillsts_58\"\u003e\u003c/a\u003epolyfills.ts\u003c/h3\u003e\r\n\u003cp\u003eDifferent browsers have different levels of support of the web standards. Polyfills help normalize those differences. You should be pretty safe with core-js and zone.js, but be sure to check out the Browser Support guide for more information.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"stylescss_62\"\u003e\u003c/a\u003estyles.css\u003c/h3\u003e\r\n\u003cp\u003eYour global styles go here. Most of the time you’ll want to have local styles in your components for easier maintenance, but styles that affect all of your app need to be in a central place.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"testts_66\"\u003e\u003c/a\u003etest.ts\u003c/h3\u003e\r\n\u003cp\u003eThis is the main entry point for your unit tests. It has some custom configuration that might be unfamiliar, but it’s not something you’ll need to edit.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"tsconfigappspecjson_70\"\u003e\u003c/a\u003etsconfig.{app|spec}.json\u003c/h3\u003e\r\n\u003cp\u003eTypeScript compiler configuration for the Angular app (tsconfig.app.json) and for the unit tests (tsconfig.spec.json).\u003c/p\u003e\r\n\u003ch2\u003e\n\u003ca id=\"The_root_folder_74\"\u003e\u003c/a\u003eThe root folder\u003c/h2\u003e\r\n\u003cpre\u003e\u003ccode\u003eGoals\r\n|---e2e/\r\n|   |---app.e2e-spec.ts\r\n|   |---app.po.ts\r\n|   |---tsconfig.e2e.json\r\n|---node_modules/...\r\n|---src/...\r\n|---.angular-cli.json\r\n|---.editorconfig\r\n|---.gitignore\r\n|---karma.conf.js\r\n|---package.json\r\n|---protractor.conf.js\r\n|---README.md\r\n|---tsconfig.json\r\n|---tslint.json\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\n\u003ca id=\"e2e_93\"\u003e\u003c/a\u003ee2e/\u003c/h3\u003e\r\n\u003cp\u003eInside e2e/ live the end-to-end tests. They shouldn’t be inside src/ because e2e tests are really a separate app that just so happens to test your main app. That’s also why they have their own tsconfig.e2e.json.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"node_modules_97\"\u003e\u003c/a\u003enode_modules/\u003c/h3\u003e\r\n\u003cp\u003eNode.js creates this folder and puts all third party modules listed in package.json inside of it.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"angularclijson_101\"\u003e\u003c/a\u003e.angular-cli.json\u003c/h3\u003e\r\n\u003cp\u003eConfiguration for Angular CLI. In this file you can set several defaults and also configure what files are included when your project is built. Check out the official documentation if you want to know more.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"editorconfig_105\"\u003e\u003c/a\u003e.editorconfig\u003c/h3\u003e\r\n\u003cp\u003eSimple configuration for your editor to make sure everyone that uses your project has the same basic configuration. Most editors support an .editorconfig file. See\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://editorconfig.org/\"\u003ehttp://editorconfig.org\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor more information.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"gitignore_109\"\u003e\u003c/a\u003e.gitignore\u003c/h3\u003e\r\n\u003cp\u003eGit configuration to make sure autogenerated files are not commited to source control.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"karmaconfjs_113\"\u003e\u003c/a\u003ekarma.conf.js\u003c/h3\u003e\r\n\u003cp\u003eUnit test configuration for the Karma test runner, used when running ng test.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"packagejson_117\"\u003e\u003c/a\u003epackage.json\u003c/h3\u003e\r\n\u003cp\u003enpm configuration listing the third party packages your project uses. You can also add your own custom scripts here.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"protractorconfjs_121\"\u003e\u003c/a\u003eprotractor.conf.js\u003c/h3\u003e\r\n\u003cp\u003eEnd-to-end test configuration for Protractor, used when running ng e2e.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"READMEmd_125\"\u003e\u003c/a\u003e\u003ca href=\"http://readme.md/\"\u003eREADME.md\u003c/a\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eBasic documentation for your project, pre-filled with CLI command information. Make sure to enhance it with project documentation so that anyone checking out the repo can build your app!\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"tsconfigjson_129\"\u003e\u003c/a\u003etsconfig.json\u003c/h3\u003e\r\n\u003cp\u003eTypeScript compiler configuration for your IDE to pick up and give you helpful tooling.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"tslintjson_133\"\u003e\u003c/a\u003etslint.json\u003c/h3\u003e\r\n\u003cp\u003eLinting configuration for TSLint together with Codelyzer, used when running ng lint. Linting helps keep your code style consistent.\u003c/p\u003e","exportId":"monday-angular-file-review"},{"id":750,"title":"Monday: Components","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eComponents\u003c/h2\u003e\r\n\u003cp\u003eThe browser has a set list of tags that it understands and knows how to render to the user. But, what if we wanted to teach the browser new tags? How would we go about it? This is where components come in handy.\u003c/p\u003e\r\n\u003cp\u003eComponents are the building blocks of angular applications. We can nest components inside other components to make up larger components. Each Angular app has to have a root component which acts as the top-level component and is rendered first to the user.\u003c/p\u003e\r\n\u003cp\u003eTo bootstrap, an angular application means we tell the browser to render the top level component that will render its child component.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Structure_of_a_Component_8\"\u003e\u003c/a\u003eStructure of a Component\u003c/h3\u003e\r\n\u003cp\u003eComponents have 2 parts:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eThe Component Annotation\u003c/li\u003e\r\n\u003cli\u003eThe Component definition class.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eWe will use our AppComponent file to view these different sections.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-root'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./app.component.html'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppComponent\u003c/span\u003e \u003c/span\u003e{\r\n  constructor(){}\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimport\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword to import modules we want to use in our application.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@angular/core\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis is where we want to find our modules.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Component_Annotation_31\"\u003e\u003c/a\u003eComponent Annotation\u003c/h4\u003e\r\n\u003cp\u003eAnnotations are ways to add functionality to our code during compilation.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-root'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./app.component.html'\u003c/span\u003e\r\n})\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn Angular, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Component\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eannotation to add metadata to our Component class.\u003cbr\u003eIn this example, we have the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eselector\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute to define a selector for our component and also the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etemplateUrl\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute to define the location of our template file.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Component_Defination_Class_43\"\u003e\u003c/a\u003eComponent Definition Class\u003c/h4\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppComponent\u003c/span\u003e \u003c/span\u003e{\r\n  constructor(){}\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis is a normal javascript class that will be used to define the logic of the component. We export the class so that we can import it anywhere we need it in the application. We also define a constructor function that will help us create a new instance of the class.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Displaying_an_Array_51\"\u003e\u003c/a\u003eDisplaying an Array\u003c/h4\u003e\r\n\u003cp\u003eNow we are typically going to be having more than one goal so we want to store our goals in an array and display them.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-root'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./app.component.html'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppComponent\u003c/span\u003e \u003c/span\u003e{\r\n    goals: string[];\r\n\r\n  constructor(){\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals = [\u003cspan class=\"hljs-string\"\u003e\"Watch Finding Nemo\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"Buy Cookies\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"Get new phone case\"\u003c/span\u003e];\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a new property in our class called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand we give it a type of string array. We then initialize the property with an array of goals we want to complete.\u003cbr\u003eWe can now display this list in the template.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals'\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engFor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edirective to loop through a list of items. A directive is a class that changes either the appearance and behavior of an element or changes the structure of a template, by adding or removing elements. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engFor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edirective is a structural directive that changes the structure of the element.\u003cbr\u003eIn the statement above we are telling the directive to loop through the list of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand assign each a temporary variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e. We then display each\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable as a list element.\u003c/p\u003e","exportId":"monday-components"},{"id":751,"title":"Monday: Creating a class","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eCreating a class\u003c/h2\u003e\r\n\u003cp\u003eWe have been defining our goals up to this point just as strings. But normally goals usually have much more like the ID, the goal's name, even the intended completion date. We can define these in our component but it will be tedious to create a goal object for each of our goals.\u003c/p\u003e\r\n\u003cp\u003eLet us generate a class to help us define the blueprint of a goal.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate class Goal\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egenerate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand provided by the Angular CLI to create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003cbr\u003eWe can then define the properties of the class. For now, let us only create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ename\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof the goal.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/goal.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoal\u003c/span\u003e \u003c/span\u003e{\r\n    constructor(public id:number, public name:string){}\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a constructor function and define the properties of each instance of the class. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epublic\u003c/code\u003ekeyword is an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAccess modifier\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eit determines where the properties of a class are visible. This allows the id and number to be visible anywhere outside the class.\u003c/p\u003e\r\n\u003cp\u003eNow we need to change our array of goals\u003cbr\u003e\u003cstrong\u003eapp/app.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goal} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./goal'\u003c/span\u003e\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-root'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./app.component.html'\u003c/span\u003e\r\n})\r\nexport class AppComponent {\r\n    goals = [\r\n        new Goal(1,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e),\r\n        new Goal(2,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e),\r\n        new Goal(3, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e),\r\n        new Goal(4, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e),\r\n        new Goal(5, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e),\r\n        new Goal(6, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e),\r\n\r\n    ]\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. We then create an array of new instances of the goal class. Now we need to update the template files to target the name. of the goal.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehr\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals'\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.name}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe now bind the name attribute to our list element using the curly braces.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"NgIf_55\"\u003e\u003c/a\u003eNgIf\u003c/h3\u003e\r\n\u003cp\u003eWe now want to see another structural directive we can use in our templates.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehr\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals'\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.name}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'goals.length \u0026gt; 5'\u003c/span\u003e\u0026gt;\u003c/span\u003eYou have too many goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e*ngIf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edirective that adds some conditional logic to our templates. We check if the length of our goals exceeds 5. If so we display a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag that tells us we have too many goals.\u003c/p\u003e\r\n\u003cp\u003eWhen we run the application now we see the list of goals and a paragraph. If we remove one goal we see our page reloads and the paragraph is gone.\u003c/p\u003e","exportId":"monday-creating-a-class"},{"id":752,"title":"Monday: Creating Components","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eCreating Components\u003c/h2\u003e\r\n\u003cp\u003eSince it is the root components job render all other components let us start out by creating a goal component to handle the logic on goals.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate component goal\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis command generates a new folder\u003cspan\u003e \u003c/span\u003e\u003cem\u003egoal\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat hosts our new components code. It also registers the new component in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp.module.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003eWe can move the array property for our goals into our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal.component.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component, OnInit } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goal} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goal'\u003c/span\u003e\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-goal'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./goal.component.html'\u003c/span\u003e,\r\n  styleUrls: [\u003cspan class=\"hljs-string\"\u003e'./goal.component.css'\u003c/span\u003e]\r\n})\r\nexport class GoalComponent implements OnInit {\r\n\r\n    goals = [\r\n        new Goal(1,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e),\r\n        new Goal(2,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e),\r\n        new Goal(3, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e),\r\n        new Goal(4, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e),\r\n        new Goal(5, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e),\r\n        new Goal(6, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e),\r\n    ]\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engOnInit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction is a life cycle hook. Life cycle hooks are called to show different stages in the life cycle of a component.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engOnInit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called immediately the component is created.\u003c/p\u003e\r\n\u003cp\u003eWe also move the Template logic to our new components template file.\u003cbr\u003e\u003cstrong\u003egoal/goal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals'\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.name}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e   \r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'goals.length \u0026gt; 5'\u003c/span\u003e\u0026gt;\u003c/span\u003eYou have too many goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Nesting_Components_50\"\u003e\u003c/a\u003eNesting Components\u003c/h3\u003e\r\n\u003cp\u003eSince we have moved the code from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppcomponent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoalComponent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe need to link our new component with the root component.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe place the selector tags from our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoalComponent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einside our root components template file. This will ensure the component is loaded.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Child_Components_60\"\u003e\u003c/a\u003eChild Components\u003c/h3\u003e\r\n\u003cp\u003eWhat if we wanted to display the details of a goal. We need to create a component for that.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate component goal-details\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe now need to update our goal class to add a new property for details.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/goal.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoal\u003c/span\u003e \u003c/span\u003e{\r\n    constructor(public id:number, public name:string,public description:string){}\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe now need to update our goal instances in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoalComponent\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/goal/goal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e.....\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    goals = [\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Find an online version and watch merlin find his son'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'I have to buy cookies for the parrot'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Diana has her birthday coming up soon'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Pupper likes expensive sancks'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Damn Math'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Cause I am an evil overlord'\u003c/span\u003e),\r\n    ]\r\n  constructor() { }\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Input_Property_Binding_97\"\u003e\u003c/a\u003eInput Property Binding\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehr\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u0026gt;\u003c/span\u003e{{goal.name}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e \r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e [\u003cspan class=\"hljs-attribute\"\u003egoal\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e'goal'\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'goals.length \u0026gt; 5'\u003c/span\u003e\u0026gt;\u003c/span\u003eYou have too many goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eInput property binding is a method of passing data to child components from our views.\u003cbr\u003eWe add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp-goal-details\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector that will responsible for displaying details of our goals. We pass in the goal to display using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e[goal]='goal'\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute. This passes in the goal into the child component. Let us access the new value passed in the new component.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details/goal-details.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component, OnInit,Input } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goal} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goal'\u003c/span\u003e\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-goal-details'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./goal-details.component.html'\u003c/span\u003e,\r\n  styleUrls: [\u003cspan class=\"hljs-string\"\u003e'./goal-details.component.css'\u003c/span\u003e]\r\n})\r\nexport class GoalDetailsComponent implements OnInit {\r\n\r\n  @Input() goal:Goal;\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import the Input decorator that will allow us to access any value passed into the component.\u003cbr\u003eWe then define the value name and type inside our component class. Lastly we can now create the value template.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details/goal-details.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.description}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a simple paragraph tag to display the details. Now when we serve our application we can see our goals together with the description.\u003c/p\u003e","exportId":"monday-creating-components"},{"id":753,"title":"Tuesday: Output Property Binding","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eOutput Property Binding\u003c/h2\u003e\r\n\u003cp\u003eWe do not want to always be seeing the description. We can create a toggle effect to allow us toggle the goal description on and off.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/goal.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoal\u003c/span\u003e \u003c/span\u003e{\r\n    public showDescription:boolean;\r\n    constructor(public id:number, public name:string,public description:string){\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.showDescription=\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first update our goal class and add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eshowDescription\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty which is a boolean value and we set it to false immediately the object is created. We can now create the toggle button in our template file.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehr\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals;let i = index'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u0026gt;\u003c/span\u003e{{goal.name}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e  (\u003cspan class=\"hljs-attribute\"\u003eclick\u003c/span\u003e)=\u003cspan class=\"hljs-value\"\u003e'toogleDetails(i)'\u003c/span\u003e\u0026gt;\u003c/span\u003eToogle Details\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goal.showDescription\"\u003c/span\u003e [\u003cspan class=\"hljs-attribute\"\u003egoal\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e'goal'\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'goals.length \u0026gt; 5'\u003c/span\u003e\u0026gt;\u003c/span\u003eYou have too many goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first add an attribute\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ei=index\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis registers the position index of each list item. We then create a button and we pass in the attribute\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e(click)='toogleDetails(i)'\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eThis is an example of output property binding. Where when the button is clicked it will trigger the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoggleDetails\u003c/code\u003efunction that takes in the index position as an argument in our component. Let us create that function.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n    goals = [\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Find an online version and watch merlin find his son'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'I have to buy cookies for the parrot'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Diana has her birthday coming up soon'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Pupper likes expensive sancks'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Damn Math'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Cause I am an evil overlord'\u003c/span\u003e),\r\n\r\n    ]\r\n\r\n    toogleDetails(index){\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals[index].showDescription = !\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals[index].showDescription;\r\n    }\r\n\r\n  constructor() { }\r\n  ngOnInit() {\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoogleDetails\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction locates the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eat the index passed in and converts the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eshowDescription\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eProperty from true to false and vice verca . Now when we serve our application we can toggle the description on and off.\u003c/p\u003e","exportId":"tuesday-output-property-binding"},{"id":754,"title":"Tuesday:Emitting Events","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eEmitting Events\u003c/h2\u003e\r\n\u003cp\u003eWhen we want a child component to communicate with the Parent component we have them emit events that will be taken by the parent.\u003c/p\u003e\r\n\u003cp\u003eLet us add a delete button to our goal-details component that will delete a goal.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details/goal-details.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.description}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eclick\u003c/span\u003e) = '\u003cspan class=\"hljs-attribute\"\u003egoalComplete\u003c/span\u003e(\u003cspan class=\"hljs-attribute\"\u003etrue\u003c/span\u003e)'\u0026gt;\u003c/span\u003e Complete \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a button that creates an output event calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoalComplete\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and passing in a boolean true.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details/goal-details.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component, OnInit,Input,Output,EventEmitter } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goal} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goal'\u003c/span\u003e\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-goal-details'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./goal-details.component.html'\u003c/span\u003e,\r\n  styleUrls: [\u003cspan class=\"hljs-string\"\u003e'./goal-details.component.css'\u003c/span\u003e]\r\n})\r\nexport class GoalDetailsComponent implements OnInit {\r\n\r\n  @Input() goal:Goal;\r\n  @Output() isComplete= \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e EventEmitter\u0026lt;boolean\u0026gt;();\r\n\r\n  goalComplete(complete:boolean){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.isComplete.emit(complete);\r\n  }\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOutput\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edecorator and the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEventEmitter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. We then create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEventEmitter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject which will take on a boolean.\u003cbr\u003eWe create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoalComplete\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and inside it we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eemit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eisComplete\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEventEmitter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. This passes this event to the parent component.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals;let i = index'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u0026gt;\u003c/span\u003e{{goal.name}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e  (\u003cspan class=\"hljs-attribute\"\u003eclick\u003c/span\u003e)=\u003cspan class=\"hljs-value\"\u003e'toogleDetails(i)'\u003c/span\u003e\u0026gt;\u003c/span\u003eToogle Details\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goal.showDescription\"\u003c/span\u003e [\u003cspan class=\"hljs-attribute\"\u003egoal\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e'goal'\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eisComplete\u003c/span\u003e)= '\u003cspan class=\"hljs-attribute\"\u003ecompleteGoal\u003c/span\u003e($\u003cspan class=\"hljs-attribute\"\u003eevent\u003c/span\u003e,\u003cspan class=\"hljs-attribute\"\u003ei\u003c/span\u003e)'\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'goals.length \u0026gt; 5'\u003c/span\u003e\u0026gt;\u003c/span\u003eYou have too many goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe capture the event being transmitted using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparenthesis. When we receive the event we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompleteGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and pass in the special\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$event\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable. This variable is a placeholder for values that are emitted with the event. We also pass in the index of the goal.\u003c/p\u003e\r\n\u003cp\u003eWe can now create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompleteGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction in our component.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e.............\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    goals = [\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Find an online version and watch merlin find his son'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'I have to buy cookies for the parrot'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Diana has her birthday coming up soon'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Pupper likes expensive sancks'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Damn Math'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Cause I am an evil overlord'\u003c/span\u003e),\r\n\r\n    ]\r\n\r\n    completeGoal(isComplete,index){\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (isComplete){\r\n            \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals.splice(index,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\r\n            }\r\n            }\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompleteGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eFunction where we use the javascript\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esplice\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to remove the complete goal and delete it from our array.\u003c/p\u003e\r\n\u003cp\u003eNow when we run the server we can click the delete button the goal disappears.\u003c/p\u003e","exportId":"tuesday-emitting-events"},{"id":755,"title":"Tuesday:Custom Directives","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eCustom Directives\u003c/h2\u003e\r\n\u003cp\u003eWe talked about the two types of directives. We have structural directives that change the structure of the template and attribute directives that change the appearance and the behavior of the elements.\u003c/p\u003e\r\n\u003cp\u003eWe can also create our own custom attribute directives. What if we wanted instead of deleting a goal after finishing it we could strike through it. Let us create a directive that will help us with that behavior.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate directive  strikethrough\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet us write the code for that behavior.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003estrikethrough.directive.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Directive } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Directive({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'[appStrikethrough]'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eStrikethroughDirective\u003c/span\u003e \u003c/span\u003e{\r\n  constructor(){}\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eA directive is a class that has the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@directive\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eannotation. The annotation only has the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eselector\u003c/code\u003eproperty which is passed in as the attribute to the host element.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003estrikethrough.directive.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Directive,ElementRef } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Directive({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'[appStrikethrough]'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eStrikethroughDirective\u003c/span\u003e \u003c/span\u003e{\r\n  constructor(private elem:ElementRef){}\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eElementRef\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype that we use to define the property in the constructor. This constructor property will be the element that the directive will be hosted on.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003estrikethrough.directive.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Directive,ElementRef} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Directive({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'[appStrikethrough]'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eStrikethroughDirective\u003c/span\u003e \u003c/span\u003e{\r\n\r\n  constructor(private elem:ElementRef){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.elem.nativeElement.style.textDecoration=\u003cspan class=\"hljs-string\"\u003e'line-through'\u003c/span\u003e;\r\n  }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe then target the host element’s style attribute and change the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etextDecoration\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eline-through\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe can add the new attribute directive to our target element and view the changes.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u0026lt;h1\u0026gt;My Goals\u0026lt;/h1\u0026gt;\r\n\u0026lt;ul\u0026gt;\r\n    \u0026lt;div *ngFor='let goal of goals;let i = index'\u0026gt;\r\n        \u0026lt;li appStrikethrough\u0026gt;{{goal.name}}\u0026lt;/li\u0026gt;\r\n        \u0026lt;button  (click)='toogleDetails(i)'\u0026gt;Toogle Details\u0026lt;/button\u0026gt;\r\n\r\n    \u0026lt;app-goal-details *ngIf=\"goal.showDescription\" [goal]='goal' (isComplete)= 'completeGoal($event,i)'\u0026gt;\u0026lt;/app-goal-details\u0026gt;\r\n    \r\n    \u0026lt;/div\u0026gt;\r\n\u0026lt;/ul\u0026gt;\r\n\u0026lt;p *ngIf='goals.length \u0026gt; 5'\u0026gt;You have too many goals\u0026lt;/p\u0026gt;\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe use the directive selector attribute and add it to our list element. Now when we run the server we see all the list items have been stricken through. That's not really useful. We can have a setting that when we click the list item we can strike it and when we double-click it we can remove the strike.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003estrikethrough.directive.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Directive,ElementRef} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Directive({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'[appStrikethrough]'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eStrikethroughDirective\u003c/span\u003e \u003c/span\u003e{\r\n\r\n  constructor(private elem:ElementRef){ }\r\n  \r\n  private textDeco(action:string){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.elem.nativeElement.style.textDecoration=action;\r\n\r\n  }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe then create a function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etextDeco\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat targets the element reference and takes in a CSS style attribute as an argument.\u003c/p\u003e\r\n\u003cp\u003eWe will target the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estyle.textDecoration\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estyle and it can only have two states\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor when the goal is not completed and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eline-through\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen the goal is complete.\u003cbr\u003e\u003cstrong\u003estrikethrough.directive.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Directive,ElementRef,HostListener} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Directive({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'[appStrikethrough]'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eStrikethroughDirective\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \r\n  constructor(private elem:ElementRef){}\r\n\r\n  @HostListener(\u003cspan class=\"hljs-string\"\u003e\"click\"\u003c/span\u003e) onClicks(){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.textDeco(\u003cspan class=\"hljs-string\"\u003e\"line-through\"\u003c/span\u003e)\r\n  }\r\n\r\n  @HostListener(\u003cspan class=\"hljs-string\"\u003e\"dblclick\"\u003c/span\u003e) onDoubleClicks(){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.textDeco(\u003cspan class=\"hljs-string\"\u003e\"None\"\u003c/span\u003e)\r\n  }\r\n\r\n  private textDeco(action:string){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.elem.nativeElement.style.textDecoration=action;\r\n\r\n  }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe then import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHostListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eannotation. This will be responsible for capturing events that occur on the host element. We create two\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHostListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eannotation functions that listen to single clicks and double clicks. When a user clicks the host element once the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etextDeco\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction is called and a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eline-through\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis passed an argument. When the user double-clicks the host element we pass in None as an argument to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etextDeco\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction.\u003c/p\u003e\r\n\u003cp\u003eWe can now run our application and test out our new features.\u003c/p\u003e","exportId":"tuesday-custom-directives"},{"id":756,"title":"Tuesday: Pipes","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003ePipes\u003c/h2\u003e\r\n\u003cp\u003eIn angular Pipes take in data as Input and transform it to the desired output.\u003cbr\u003eLet us look at some examples. We will add a completion date for our goals.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/goal.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoal\u003c/span\u003e \u003c/span\u003e{\r\n    public showDescription:boolean\r\n    constructor(public id:number, public name:string,public description:string,public completeDate:\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e){\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.showDescription=\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompleteDate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eargument to our constructor and we give it a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype.\u003cbr\u003eWe then update our array of goal objects to add a completion date.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n    goals = [\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Find an online version and watch merlin find his son'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'I have to buy cookies for the parrot'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Diana has her birthday coming up soon'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Pupper likes expensive sancks'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Damn Math'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Cause I am an evil overlord'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n\r\n    ]\r\n\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstance takes 3 arguments the first one is the year,the second argument is the month the third argument is the date. The month is calculated from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e0-11\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhere\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e0\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis January and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e11\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis December.\u003cbr\u003eWe can now display the dates when we list out our goals.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals;let i = index'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e  \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"{{i}}\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eappStrikethrough\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.name}} due on {{goal.completeDate|date}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    ........\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  ..............\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompleteDate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the argument then we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e|\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epipe character to transform the date into something readable to us.We use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epipe, which is inbuilt in angular, that takes in date objects and transforms them. When we load the server we can see the changes that we made.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Chaining_pipes_48\"\u003e\u003c/a\u003eChaining pipes\u003c/h3\u003e\r\n\u003cp\u003eWe can also chain pipes to extend the transformation we give to the input.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals;let i = index'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e  \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"{{i}}\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eappStrikethrough\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.name}} due on {{goal.completeDate|date|uppercase}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    ........\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  ..............\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe add another pipe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003euppercase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis will transform our date to uppercase and we can see the changes when we load the server and we see the month now is in uppercase.\u003c/p\u003e","exportId":"tuesday-pipes"},{"id":763,"title":"Tuesday: Create Pipes","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eCreating Custom Pipes\u003c/h2\u003e\r\n\u003cp\u003eWe can also create custom pipes to customize the variable to fit our needs. What if we did not want to know when the goal will be complete but how many days left until we finish the goal. Let us create a Pipe for that.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate pipe date-count\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe generate a new pipe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edate-count\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand now we can add the logic to count the dates.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/date-count.pipe.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Pipe, PipeTransform } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Pipe({\r\n  name: \u003cspan class=\"hljs-string\"\u003e'dateCount'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDateCountPipe\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ePipeTransform\u003c/span\u003e \u003c/span\u003e{\r\n\r\n  transform(value: any): number {\r\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e today:\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(); \u003cspan class=\"hljs-comment\"\u003e//get current date and time\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e todayWithNoTime:any = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(today.getFullYear(),today.getMonth(),today.getDate())\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dateDifference =\u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.abs(value-todayWithNoTime )\u003cspan class=\"hljs-comment\"\u003e// returns value in milliseconds\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e secondsInADay= \u003cspan class=\"hljs-number\"\u003e86400\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e//60 seconds*60 minutes in an hour *24 hours\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dateDifferenceSeconds=dateDifference*\u003cspan class=\"hljs-number\"\u003e0.001\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e//converts to seconds\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dateCounter = dateDifferenceSeconds/secondsInADay;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (dateCounter \u0026gt;= \u003cspan class=\"hljs-number\"\u003e1 \u0026amp;\u0026amp; value \u0026gt; todayWithNoTime\u003c/span\u003e){\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e dateCounter;\r\n    }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\n    }\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first have the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Pipe\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edecorator that defines the name of the pipe. We then have the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDateCountPipe\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass that has a transform function that takes in a value of type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eany\u003c/code\u003e. This value will be our date object from the goals.\u003cbr\u003eWe then use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enew Date();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to get the current date and time. But since we do not need the time aspect we create a new date object for today's date which we store in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etodayWithNoTime\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable.\u003c/p\u003e\r\n\u003cp\u003eWe then get the difference of the date we get in the pipe input and subtract the current date to get the difference in milliseconds.\u003c/p\u003e\r\n\u003cp\u003eWe then convert the milliseconds to seconds. And we then divide the seconds by the seconds in a day to get how many days are left.\u003c/p\u003e\r\n\u003cp\u003eWe then return the days left if the goal date has not been passed. But if it past due we post\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e0\u003c/code\u003e. We can now add the pipe to our goal details.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details/goal-details.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.description}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThis goal will be completed in {{goal.completeDate|dateCount}} days\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n.....\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe add the pipe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edateCount\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompleteDate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty. Now when we load our app we can see how many days to complete the goal.\u003c/p\u003e","exportId":"tuesday-create-pipes"},{"id":2049,"title":"Monday \u0026 Tuesday: Practice - To Do List,Flash Cards","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Over the course of the last two days, you have learnt how to create a basic application using Angular, including the file structure, components, property binding, event emitting, directives, and pipes. Take this time to familiarize and solidify your understanding of these concepts.\u003c/p\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eGoals\u003c/h3\u003e\r\n\u003cp\u003eFirst, follow along with the Monday and Tuesday lessons, creating the Goals application.   \u003c/p\u003e\r\n\u003cp\u003eOnly after you have completed the lessons and understand how an Angular application is built, move on to practice your skills further with the next projects.\u003c/p\u003e\r\n\u003ch3\u003eTo Do List\u003c/h3\u003e\r\n\u003cp\u003eCreate a to-do list application in Angular. Just like we did in our Goals application, you will have to hard code your Task objects. For now, your Task object should have properties such as name and description. \u003c/p\u003e\r\n\u003ch3\u003eFlash Card\u003c/h3\u003e\r\n\u003cp\u003eYou have learnt a lot since you start this journey of becoming a Programmer.  Wouldn't it be really cool if you could have somewhere to record all the new programming vocabularies (and their explanations) that you have encountered?\u003c/p\u003e\r\n\u003cp\u003eOnce you finish creating the to-do list project above and feel comfortable about the concepts you learnt so far, you can challenge yourself further and create a flashcard app. A flashcard app is a site where you create cards that contain new words you learnt and their explanations.\u003c/p\u003e\r\n\u003cp\u003eFollow along with the lessons you've covered so far and add functionality similar to the Goals app with the following user stories as your guide:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eAs a user, I would like to see the title of each flash card\u003c/li\u003e\r\n\u003cli\u003eas a user, I want to be able to click on the card's title to see it's explanation/detail.\u003c/li\u003e\r\n\u003cli\u003eAs a user, I want to be able to hide a card detail when am done viewing them.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e","exportId":"monday-and-tuesday-practice-to-do-list-flash-cards"},{"id":772,"title":"Wednesday: Deleting Goals","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eDeleting Goals\u003c/h2\u003e\r\n\u003cp\u003eSince we created a custom directive that strikes through our goal when we click the goal we can replace the complete button in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal-details\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent to make us delete the goal when we are sure we want to get rid of it.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.description}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThis goal will be completed in {{goal.completeDate|dateCount}} days\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eclick\u003c/span\u003e) = '\u003cspan class=\"hljs-attribute\"\u003egoalDelete\u003c/span\u003e(\u003cspan class=\"hljs-attribute\"\u003etrue\u003c/span\u003e)'\u0026gt;\u003c/span\u003e Delete Goal \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe modify the button to emit a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoutput event that calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoalDelete\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction which takes a boolean as an argument.\u003c/p\u003e\r\n\u003cp\u003eWe then can remove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoalComplete\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal-details\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent class. We replace it with our new \u003ccode\u003egoalDelete\u003c/code\u003e function.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e.......\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalDetailsComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n.....\r\n  goalDelete(complete:boolean){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.isComplete.emit(complete);\r\n  }\r\n.......\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eisComplete\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevent emitter that we had defined and emit the boolean value passed in. We can now update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparent component.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e........\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals;let i = index'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    .........\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goal.showDescription\"\u003c/span\u003e [\u003cspan class=\"hljs-attribute\"\u003egoal\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e'goal'\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eisComplete\u003c/span\u003e)= '\u003cspan class=\"hljs-attribute\"\u003edeleteGoal\u003c/span\u003e($\u003cspan class=\"hljs-attribute\"\u003eevent\u003c/span\u003e,\u003cspan class=\"hljs-attribute\"\u003ei\u003c/span\u003e)'\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n............\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp-goal-details\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag to add the output event that gets the emitted event and calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edeleteGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction passing in the emitted value and the index of the goal.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n    goals = [\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Find an online version and watch merlin find his son'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'I have to buy cookies for the parrot'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Diana has her birthday coming up soon'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Pupper likes expensive sancks'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Damn Math'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Cause I am an evil overlord'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n\r\n    ]\r\n\r\n    deleteGoal(isComplete,index){\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (isComplete){\r\n            \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e toDelete=confirm(\u003cspan class=\"hljs-string\"\u003e`Are you sure you want to delete \u003cspan class=\"hljs-subst\"\u003e${this.goals[index].name}\u003c/span\u003e`\u003c/span\u003e)\r\n            \r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(toDelete){\r\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals.splice(index,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)\r\n            }\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create the deleteGoal function that takes the boolean value and index of the goal. We then create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoDelete\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eboolean variable that calls the Javascript\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction that creates a browser prompt for the user to confirm if they actually want to delete the goal. If the user confirms the goal to be deleted we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esplice\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to remove the goal from the list of goals using the index\u003c/p\u003e","exportId":"wednesday-deleting-goals"},{"id":773,"title":"Wednesday: Add Boostrap","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eAdding Bootstrap\u003c/h2\u003e\r\n\u003cp\u003eOur angular app looks very dull. We can use bootstrap to easily style our application. Let us first install bootstrap to our application.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ npm install --save bootstrap\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis will add a bootstrap folder to our Node modules folder. To make Bootstrap available to our application we have to import it from the Node Modules folder to the application\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estyles.css\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003esrc/styles.css\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-css\"\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"~bootstrap/dist/css/bootstrap.css\"\u003c/span\u003e\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we can use bootstrap in our application.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehr\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"let goal of goals;let i = 'index'\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh4\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"{{i}}\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eappStrikethrough\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.name}} due on {{goal.completeDate|date|uppercase}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh4\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-primary\"\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eclick\u003c/span\u003e)=\u003cspan class=\"hljs-value\"\u003e'toogleDetails(i)'\u003c/span\u003e\u0026gt;\u003c/span\u003eToogle Details\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goal.showDescription\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e  [\u003cspan class=\"hljs-attribute\"\u003egoal\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e'goal'\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eisComplete\u003c/span\u003e)= '\u003cspan class=\"hljs-attribute\"\u003edeleteGoal\u003c/span\u003e($\u003cspan class=\"hljs-attribute\"\u003eevent\u003c/span\u003e,\u003cspan class=\"hljs-attribute\"\u003ei\u003c/span\u003e)'\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'goals.length \u0026gt; 5'\u003c/span\u003e\u0026gt;\u003c/span\u003eYou have too many goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.description}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ecomplete in {{goal.completeDate|dateCount}} days\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-danger\"\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eclick\u003c/span\u003e) = '\u003cspan class=\"hljs-attribute\"\u003egoalDelete\u003c/span\u003e(\u003cspan class=\"hljs-attribute\"\u003etrue\u003c/span\u003e)'\u0026gt;\u003c/span\u003e Delete Goal \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe update our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal-details\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent’s HTML file to add bootstrap classes to our tags.\u003c/p\u003e","exportId":"wednesday-add-boostrap"},{"id":774,"title":"Wednesday:Form Component","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eCreate Goal Form\u003c/h2\u003e\r\n\u003cp\u003eWe now need to create a new goal. We need to create a form to allow us to do that. Let us generate a form component.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate component goal-form\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis will generate a new component where we will define our form.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-form.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container-fluid\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e\u0026gt;\u003c/span\u003eName\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"description\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDescription\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etextarea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"description\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erows\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etextarea\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"complete\"\u003c/span\u003e\u0026gt;\u003c/span\u003eCompletion\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'date'\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"complete\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a new form with 3 input tags for the new goal’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ename\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e,\u003ccode\u003edescription\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompletionDate\u003c/code\u003e.\u003cbr\u003eWe need to then add the form component to the goal component where it will be displayed.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal-form\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal-form\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n..........\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp-goal-form\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag to the parent\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent. To make template forms work in angular applications we need to import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eforms\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule to our application.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp.module.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edefines the applications root module. We define all external modules used in the application and declare the components that belong to the module. When we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eng generate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand Angular CLI automatically declares the components for us in the root module.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { BrowserModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/platform-browser'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { NgModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {FormsModule} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/forms'\u003c/span\u003e;\r\n..............\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule\r\n  ],\r\n..........\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the above code excerpt, we add the following line to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp.module.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile.\u003cbr\u003e\u003ccode\u003eimport {FormsModule} from '@angular/forms';\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis imports the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFormsModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the root module. We then place the newly imported module to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimports\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray.\u003c/p\u003e","exportId":"wednesday-form-component"},{"id":775,"title":"Wednesday: NgModel","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eTwo-way Data Binding\u003c/h2\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFormModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003egives the application access to all of the template-driven forms features, including\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engModel\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engModel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eallows us to perform two-way data binding, this is transmitting data from our template to our Component class and data from the component class back to the template.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-form.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goal} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goal'\u003c/span\u003e;\r\n.......\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalFormComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n    newGoal=\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e());\r\n    ........\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFirst, we import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.Then we create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoalFormComponent\u003c/code\u003eclass. This will be a default object that will be changed by the form inputs.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-form.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container-fluid\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e #\u003cspan class=\"hljs-attribute\"\u003egoalForm\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'ngForm'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e\u0026gt;\u003c/span\u003eName\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e [(\u003cspan class=\"hljs-attribute\"\u003engModel\u003c/span\u003e)]=\u003cspan class=\"hljs-value\"\u003e\"newGoal.name\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!--Testing  to see if we get data--\u0026gt;\u003c/span\u003e\r\n                Display {{newGoal.name}}\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"description\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDescription\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etextarea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"description\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erows\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etextarea\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"complete\"\u003c/span\u003e\u0026gt;\u003c/span\u003eCompletion\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'date'\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"complete\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-success btn-lg\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAdd Goal\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe add a template reference variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoalForm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our form tag and equate it to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engForm\u003c/code\u003e. This will provide the form element with additional features and monitor the changes and validity of input elements.\u003c/p\u003e\r\n\u003cp\u003eWe then add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e[(ngModel)]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute to our name input and equate it to the name attribute of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject we created in our Component class. We then define a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ename\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute which is a requirement when using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e[(ngModel)]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand a form.\u003c/p\u003e\r\n\u003cp\u003eWe then create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDisplay {{newGoal.name}}\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eline where we temporarily display the data is being received. Now when we start typing in the goal name input box we can see the data being displayed. This confirms that two-way data binding is occurring.\u003c/p\u003e","exportId":"wednesday-ngmodel"},{"id":776,"title":"Wednesday: Form Validation","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eForm Validation\u003c/h2\u003e\r\n\u003cp\u003eWe can hide and show validation messages under our input elements.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-form.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container-fluid\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e #\u003cspan class=\"hljs-attribute\"\u003egoalForm\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'ngForm'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Name Form --\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e\u0026gt;\u003c/span\u003eName\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e  \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e [(\u003cspan class=\"hljs-attribute\"\u003engModel\u003c/span\u003e)]=\u003cspan class=\"hljs-value\"\u003e\"newGoal.name\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e #\u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"ngModel\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e [\u003cspan class=\"hljs-attribute\"\u003ehidden\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e\"name.valid || name.pristine\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"alert alert-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e Name is Required\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                    \r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n............\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe add a template reference variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#name\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto access the input box’s Angular control from within the template.\u003cbr\u003eWe then create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ediv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement with the attribute template attribute\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehidden\u003c/code\u003e. This will display an alert message if the input is invalid. We then equate it to only be true if the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ename\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einput is valid. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epristine\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty allows us not to show the\u003cbr\u003emessage when we load a blank page.\u003c/p\u003e\r\n\u003cp\u003eWe can now replicate this to all the other fields in the form.\u003cbr\u003e\u003cstrong\u003egoal-form.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container-fluid\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e #\u003cspan class=\"hljs-attribute\"\u003egoalForm\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'ngForm'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Name Form --\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e\u0026gt;\u003c/span\u003eName\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e  \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e [(\u003cspan class=\"hljs-attribute\"\u003engModel\u003c/span\u003e)]=\u003cspan class=\"hljs-value\"\u003e\"newGoal.name\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e #\u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"ngModel\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e [\u003cspan class=\"hljs-attribute\"\u003ehidden\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e\"name.valid || name.pristine\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"alert alert-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e Name is Required\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                    \r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Description Input --\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"description\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDescription\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etextarea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"description\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erows\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4\"\u003c/span\u003e [(\u003cspan class=\"hljs-attribute\"\u003engModel\u003c/span\u003e)]=\u003cspan class=\"hljs-value\"\u003e\"newGoal.description\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"description\"\u003c/span\u003e #\u003cspan class=\"hljs-attribute\"\u003edescription\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"ngModel\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etextarea\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e [\u003cspan class=\"hljs-attribute\"\u003ehidden\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e\"description.valid || description.pristine\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"alert alert-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e Description is Required\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                    \r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Date Input --\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"complete\"\u003c/span\u003e\u0026gt;\u003c/span\u003eCompletion\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'date'\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"complete\"\u003c/span\u003e [(\u003cspan class=\"hljs-attribute\"\u003engModel\u003c/span\u003e)]=\u003cspan class=\"hljs-value\"\u003e\"newGoal.completeDate\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"completeDate\"\u003c/span\u003e #\u003cspan class=\"hljs-attribute\"\u003ecompleteDate\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"ngModel\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e \u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e [\u003cspan class=\"hljs-attribute\"\u003ehidden\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e\"completeDate.valid || completeDate.pristine\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"alert alert-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e Complete Date is Required\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                    \r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-success btn-lg\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAdd Goal\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we load the page and type something in the Input box then delete it you can see the alert message is displayed.\u003c/p\u003e","exportId":"wednesday-form-validation"},{"id":777,"title":"Wednesday: Submit Form","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eSubmitting forms using ngSubmit\u003c/h2\u003e\r\n\u003cp\u003eCurrently when we click our submit button nothing happens. We can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engSubmit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevent to call a function that will handle the form inputs.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-form.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e......\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003engSubmit\u003c/span\u003e)=\u003cspan class=\"hljs-value\"\u003e'submitGoal()'\u003c/span\u003e #\u003cspan class=\"hljs-attribute\"\u003egoalForm\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'ngForm'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n....\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engSubmit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevent attribute that calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esubmitGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction which we will create next.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-form.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component, OnInit,Output,EventEmitter } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalFormComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n    newGoal=\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e());\r\n    @Output() addGoal=\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e EventEmitter\u0026lt;Goal\u0026gt;();\r\n    \r\n    submitGoal(){\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.addGoal.emit(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.newGoal);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOutput\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEventEmitter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunctions. Next we create a new event emitter object\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich is of type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoal\u003c/code\u003e. We create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esubmitGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction where we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eemit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod and pass in the newGoal property.\u003c/p\u003e\r\n\u003cp\u003eSo now when we click the submit button the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esubmitGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction is called and the new goal that has properties gotten from the form is emitted to the parent component.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal-form\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eaddGoal\u003c/span\u003e)=\u003cspan class=\"hljs-value\"\u003e\"addNewGoal($event)\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal-form\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n............\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe then update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent template. We add the output event\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat triggers the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddNewGoal\u003c/code\u003e\u003cspan\u003e function\u003c/span\u003e passing in the new goal that was emitted.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n    goals = [\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Find an online version and watch merlin find his son'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'I have to buy cookies for the parrot'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Diana has her birthday coming up soon'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Pupper likes expensive sancks'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Damn Math'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Cause I am an evil overlord'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n\r\n    ]\u003cbr\u003e.................\r\n\r\n    addNewGoal(goal){\r\n        \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e goalLength = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals.length;\r\n        goal.id=goalLength+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\r\n        goal.completeDate = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(goal.completeDate)\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals.push(goal)\r\n\r\n    }\u003cbr\u003e....................\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe then create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddNewGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction that takes a goal object as an argument. We first need to change the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty of the goal. We get the length of the array of goals and store it in the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoalLength\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe then add one to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoalLength\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand set that as the new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the goal. We then set the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompleteDat\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty of the goal object to a Date Object. Lastly, we push the new goal to our array of goals.\u003c/p\u003e\r\n\u003cp\u003eWhen you run the server now you can add a new goal and see it appear on the screen.\u003c/p\u003e","exportId":"wednesday-submit-form"},{"id":778,"title":"Wednesday: Bootstrapping","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eBootstrapping\u003c/h2\u003e\r\n\u003cp\u003eAll Angular apps have at least one Angular Module which is the root module that is used to launch the application. By convention, it is called the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich is contained in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.module.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Imports_4\"\u003e\u003c/a\u003eImports\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { BrowserModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/platform-browser'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { NgModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {FormsModule} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/forms'\u003c/span\u003e;\r\n\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { AppComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./app.component'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { GoalDetailsComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./goal-details/goal-details.component'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { GoalComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./goal/goal.component'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { StrikethroughDirective } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./strikethrough.directive'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { DateCountPipe } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./date-count.pipe'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { GoalFormComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./goal-form/goal-form.component'\u003c/span\u003e;\r\n\r\n..........\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eUsing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our application. The first part is the Import section where we import external modules that are used in our application and we also we import the components and directives that will be declared in our app module.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"NgModule_decorator_23\"\u003e\u003c/a\u003eNgModule decorator\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    GoalDetailsComponent,\r\n    GoalComponent,\r\n    StrikethroughDirective,\r\n    DateCountPipe,\r\n    GoalFormComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edecorator identifies the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. It has metadata that tells Angular how to run the application.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Declarations_array_45\"\u003e\u003c/a\u003eDeclarations array\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    GoalDetailsComponent,\r\n    GoalComponent,\r\n    StrikethroughDirective,\r\n    DateCountPipe,\r\n    GoalFormComponent\r\n  ],\r\n ......\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAngular knows what apps belong to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby finding it in the declaration array. We also place custom directives and pipes that we create in the declarations array.\u003cbr\u003eThe Angular CLI’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egenerate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand adds the generated pipes, components and directives to the declaration array automatically for us.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Imports_Array_63\"\u003e\u003c/a\u003eImports Array\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@NgModule({\r\n.........\r\nimports: [\r\n    BrowserModule,\r\n    FormsModule\r\n  ],\r\n  \r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn Angular, we group features into specific units called modules. We add these modules when the application wants to use its features. When we want to run our applications in the browser we use features provided in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBrowserModule\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Providers_Array_78\"\u003e\u003c/a\u003eProviders Array\u003c/h4\u003e\r\n\u003cp\u003eWe deliver services to different parts of an application using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edependency injection\u003c/code\u003e. We use the providers array to register the different services needed by our application. We do not have any services yet that is why our array is empty.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Bootstrapping_Array_82\"\u003e\u003c/a\u003eBootstrapping Array\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@NgModule({\r\n.........\r\n bootstrap: [AppComponent]\r\n .......\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe launch the application by bootstrapping the root component which is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppComponent\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Bootstraping_an_Appplication_93\"\u003e\u003c/a\u003eBootstrapping an Application\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003emain.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { enableProdMode } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { platformBrowserDynamic } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/platform-browser-dynamic'\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { AppModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./app/app.module'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { environment } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./environments/environment'\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err =\u0026gt; \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(err));\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe bootstrap an Angular Application in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emain.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. Here angular dynamically creates a browser platform and bootstraps the root Module which is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e.The process of bootstrapping sets up an execution environment finding the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppComponent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebootstrap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand creating an instance of it within its selector tag in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e","exportId":"wednesday-bootstrapping"},{"id":779,"title":"Wednesday: Deployment","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eDeploying Angular Applications\u003c/h2\u003e\r\n\u003cp\u003eWe can now deploy our Angular applications for people to interact with them Online. We will host our applications on\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eghpages\u003c/strong\u003e. We first need to install the CLI tool that will help us deploy our application.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ npm i -g angular-cli-ghpages\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe install the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eangular-cli-ghpages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eCLI tool globally in our computer. Now we can start the deployment process.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Step_1_Creating_a_Build_Folder_9\"\u003e\u003c/a\u003eStep 1 :Creating a Build Folder\u003c/h3\u003e\r\n\u003cp\u003eWe first have to run the following command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng build --prod --base-href=\u003cspan class=\"hljs-string\"\u003e\"https://GithubUserName.github.io/GithubREPO/\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis will create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edist/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder in our application’s root folder. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e--prod\u003c/code\u003e\u003cspan\u003e \u003c/span\u003especifies that we are building for production. We then create the base link for our\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eindex.html\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003efile. We set our Github username and the name of the repository.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Step_2_Remove_dist_from_gitignore_17\"\u003e\u003c/a\u003eStep 2: Remove\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edist/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.gitignore\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eNext, we go to our gitignore folder and remove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edist/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eline.This will enable us to send the file to GitHub.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Step_3_Push_to_Github_21\"\u003e\u003c/a\u003eStep 3: Push to Github.\u003c/h3\u003e\r\n\u003cp\u003eWe can now add and commit our changes and push our project to Github.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Step_4_Deploy_using_the_CLI_24\"\u003e\u003c/a\u003eStep 4: Deploy using the CLI\u003c/h3\u003e\r\n\u003cp\u003eNow we can run the following command to deploy to ghpages\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003esudo npx ngh --dir=dist/project-name \r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe \u003ccode class=\"language-bash\"\u003eproject-name \u003c/code\u003e should be the name of your project in your local computer\u003c/p\u003e\r\n\u003cp\u003eIf successful you can run your project from ghpages using the base link you provided\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://GithubUserName.github.io/GithubREPO/\u003c/code\u003e\u003c/p\u003e","exportId":"wednesday-deployment"},{"id":757,"title":"Thursday:  Diary","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eThe Diary\u003c/h2\u003e\r\n\u003cp\u003eThis week you will create a personal diary application where you can write down your thoughts.\u003c/p\u003e\r\n\u003ch3\u003eUser Story\u003c/h3\u003e\r\n\u003cp\u003eYou as the user you should be able to:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate a new diary entry.\u003c/li\u003e\r\n\u003cli\u003eSet the date for a new entry.\u003c/li\u003e\r\n\u003cli\u003eDelete the Diary entry.\u003c/li\u003e\r\n\u003cli\u003eAble to highlight titles in the diary entry\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eTechnical Requirements\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003eUse the Angular CLI to create the application.\u003c/li\u003e\r\n\u003cli\u003eCreate a clear README file.\u003c/li\u003e\r\n\u003cli\u003eHave a minimum of 15 clear commit messages.\u003c/li\u003e\r\n\u003cli\u003eCreate a diary model class.\u003c/li\u003e\r\n\u003cli\u003eCreate a custom directive to highlight the titles.\u003c/li\u003e\r\n\u003cli\u003eCreate custom pipe to customize dates.\u003c/li\u003e\r\n\u003cli\u003eHave form component with the necessary Inputs.\u003c/li\u003e\r\n\u003cli\u003eYour app should be deployed.\u003c/li\u003e\r\n\u003c/ol\u003e","exportId":"thursday-diary"},{"id":809,"title":"Friday: Independent Project-Quotes","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":31.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003ch2\u003eQuotes\u003c/h2\u003e\r\n\u003cp\u003eThis weeks project is to create an application where users can create quotes and have those quotes voted on whether they are terrible or are inspirational. \u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eUser Requirements\u003c/h3\u003e\r\n\u003cp\u003eAs a user I would like to:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate a new quote.\u003c/li\u003e\r\n\u003cli\u003eUpvote or downvote a quote.\u003c/li\u003e\r\n\u003cli\u003eDelete a quote\u003c/li\u003e\r\n\u003cli\u003eSee the number of upvotes and number of downvotes for each quote.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eProject Objectives\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003eYour Project should be created using the Angular CLI.\u003c/li\u003e\r\n\u003cli\u003eYour project should contain a custom model class for the quote\u003c/li\u003e\r\n\u003cli\u003eYour project should have a custom\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edirective\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto highlight the quote that has the highest upvotes.\u003c/li\u003e\r\n\u003cli\u003eYour project should contain a form component that has input sections for the quote, the author, and the person who submitted the quote.\u003c/li\u003e\r\n\u003cli\u003eEach quote must begin with an initial upvote and downvote value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e0\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eYour project should have a component to display the quote and a component to display quote details. For example, the quote details could have the author of the quote and the votes it has.\u003c/li\u003e\r\n\u003cli\u003eYour project should contain a custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epipe\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat shows how much time has passed since the quote was created. \u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eTechnical Requirements\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003eYour app must be of high quality in terms of basic functionality and it should be visually appealing.\u003c/li\u003e\r\n\u003cli\u003eYou must have a well-documented README document that gives a brief description of your application, How it works, How to install your application, A link to the deployed website and a license section.\u003c/li\u003e\r\n\u003cli\u003eYour project must be deployed and a link to the deployed website should be submitted.\u003c/li\u003e\r\n\u003cli\u003eYour project should have regular, well-defined commits with clear messages.\u003c/li\u003e\r\n\u003c/ol\u003e","exportId":"i8e407f3a449f7288221a69acd4fb4549"},{"id":1119,"title":"Friday: IP review","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan\u003eThe following scale will be used to grade your Independent Project based on the criteria, please submit your links to your TM.\u003c/span\u003e\u003c/p\u003e","exportId":"i1434982cf934c55eda9c0280e7c2b6d0"}]},{"id":75,"name":"Week 2","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"i9be5203a2d71075a504a9b29542ae513","items":[{"id":2063,"title":"Monday: Angular Week 2 Objectives","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eThis week we'll dive slightly deeper into the Angular framework by learning a bit more complex and interesting concepts.\u003c/p\u003e\r\n\u003cp\u003eWe will start by learning a concept called \u003cem\u003edependency injection\u003c/em\u003e. By understanding this concept, it will help us create something called a \u003cem\u003eservice\u003c/em\u003e which will, in turn, allow us to organise and share code across our application.\u003c/p\u003e\r\n\u003cp\u003eFrom there, we will also to learn about \u003cem\u003ethe Http Client\u003c/em\u003e module that will enable us to use APIs in our Angular application. \u003c/p\u003e\r\n\u003cp\u003eFinally, we will finish off by learning how to use a router to create and add dynamic pages to our application. Here, we'll learn how to pass data and information between different routes.\u003c/p\u003e\r\n\u003ch3\u003eIndependent Project Objectives\u003c/h3\u003e\r\n\u003cp\u003eIn this section, you mentor will review your project based on the following objectives:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eHave a well-designed landing page that displays Github information such as username, profile photo and a list of repositories.\u003c/li\u003e\r\n\u003cli\u003eUse Http Client services to access GitHub API.\u003c/li\u003e\r\n\u003cli\u003eUse two classes in your project.\u003c/li\u003e\r\n\u003cli\u003eImplement Http requests to search for GitHub users and GitHub repositories.  \u003c/li\u003e\r\n\u003cli\u003eHave a routing module.\u003c/li\u003e\r\n\u003cli\u003eImplement custom directives and custom pipes in your project.\u003c/li\u003e\r\n\u003cli\u003ePolished and portfolio-quality.\u003c/li\u003e\r\n\u003cli\u003eHave a well-documented README file.\u003c/li\u003e\r\n\u003cli\u003eThe project must be deployed and link submitted.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e  \u003c/p\u003e","exportId":"monday-angular-week-2-objectives"},{"id":817,"title":"Monday: Dependency Injections","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eDependency Injection\u003c/h2\u003e\r\n\u003cp\u003eThis is a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edesign pattern\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ewhere a class receives its dependencies from external sources without having to create them itself. Let us see a brief example of what we mean. Let us imagine we had a class that allowed us to create instances of a house.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eHouse\u003c/span\u003e\u003c/span\u003e{\r\n    walls:Wall;\r\n    windows:Window;\r\n    doors:Door;\r\n    constructor(){\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.walls=\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Wall()\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.windows=\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Window()\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.doors=\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Door()\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe could create our class like this but this brings about significant challenges when we want to test or update our code. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHouse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass creates everything it needs in the constructor. What if one of its properties like the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDoor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass required a parameter to be passed into the constructor? This would break our House class until we update how we create the instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDoor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass in every instance we create of the House class. We could alternatively use the Dependency Injection approach.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eHouse\u003c/span\u003e\u003c/span\u003e{\r\n    walls:Wall;\r\n    windows:Window;\r\n    doors:Door;\r\n    constructor(wall:Wall,\u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e:Window,door:Door){\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.walls=wall\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.windows=\u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.doors=door;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere you notice our class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHouse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass moves from creating the different dependencies it needs to merely just consuming the dependencies. This ensures if any changes occur in one of the dependencies it does not affect the class.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e house =\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e House(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Wall(),\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Window(),\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Door())\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can create the new instance of the house class by passing in the dependencies in the constructor.\u003cbr\u003eThis brings about another challenge though we are now responsible for creating 4 separate classes. And this is where the\u003cspan\u003e \u003c/span\u003e\u003cem\u003edependency injector\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eframework becomes useful. It allows us to create something called an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einjector\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat we can register some classes with and it can figure out how to create them. Our job would be to simply ask the Injector to get the created class for you. Let us see how we can Implement that in our project.\u003c/p\u003e\r\n\u003cp\u003eTo start let us create a separate file to store our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray. This makes our component class deal with only operations that involve it and makes the code manageable. We can create a new file inside our app directory and call it\u003cspan\u003e \u003c/span\u003e\u003cem\u003egoals.ts\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoals.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goal} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./goal'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e Goals:Goal[]=[\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Find an online version and watch merlin find his son'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'I have to buy cookies for the parrot'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Diana has her birthday coming up soon'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Pupper likes expensive sancks'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Damn Math'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Cause I am an evil overlord'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n\r\n    ]\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass and then we create the array of goals and we export that array.\u003cbr\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e........\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goals} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goals'\u003c/span\u003e\r\n........\r\nexport class GoalComponent implements OnInit {\r\n    goals = Goals;\r\n    .......\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe then import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray and assign it as the value to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty in our components class.\u003c/p\u003e","exportId":"monday-dependency-injections"},{"id":818,"title":"Monday: Creating a service","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e Creating a service\u003c/h2\u003e\r\n\u003cp\u003eWe will now create a simple service that allows us to retrieve the goals from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray we created and to inject it into the goals Component. This service could emulate the process of getting data from a remote server to the application.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003eng generate service goals/goal\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis command generates a\u003cspan\u003e \u003c/span\u003e\u003cem\u003egoal.service.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile inside a folder called\u003cspan\u003e \u003c/span\u003e\u003cem\u003egoals\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoals/goal.service.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Injectable } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Injectable({\u003cbr\u003e  providedIn: 'root' //\u003c/code\u003e\u003cspan class=\"com\"\u003ewe declare that this service should be created \u003c/span\u003e\u003cspan class=\"com\"\u003eby the root application injector.\u003c/span\u003e\u003ccode class=\"language-javascript\"\u003e\u003cbr\u003e})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalService\u003c/span\u003e \u003c/span\u003e{\u003cbr\u003e  \u003cbr\u003e  constructor() {} \u003cbr\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Injectable()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edecorator is essential in creating a service because angular uses it to define a service class that might require dependencies. \u003ccode\u003eprovidedIn \u003c/code\u003e specifies that the root injector is responsible for creating an instance of the \u003ccode\u003eGoalService\u003c/code\u003e and making it available throughout the application.\u003c/p\u003e\r\n\u003cp\u003eOur service does not require any dependencies as of yet but if it did they would be defined in the constructor.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoals/goal.service.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Injectable } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goals} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"../goals\"\u003c/span\u003e\r\n\r\n@Injectable()\r\nexport class GoalService {\r\n  getGoals(){\r\n    return Goals;\r\n  }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFirst, we import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray then create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetGoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that returns the array. If we were getting data from a remote server this process would have to be asynchronous.\u003c/p\u003e","exportId":"monday-creating-a-service"},{"id":819,"title":"Monday: Register a Service","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eRegister a Service\u003c/h2\u003e\r\n\u003cp\u003eA service is just a class until it is registered with an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAngular dependency injector\u003c/strong\u003e.\u003cbr\u003eAn Injector is responsible for creating the different service instances and Injecting them into classes. They are created by Angular as it executes the app. We do, however, have to register our\u003cspan\u003e \u003c/span\u003eproviders with the Injector, which informs the injector how to create a given service.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Component_Providers_5\"\u003e\u003c/a\u003eComponent Providers\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {GoalService} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goals/goal.service'\u003c/span\u003e;\r\n.........\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-goal'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./goal.component.html'\u003c/span\u003e,\r\n  providers:[GoalService], \u003cspan class=\"hljs-comment\"\u003e//add the providers to the component\u003c/span\u003e\r\n  styleUrls: [\u003cspan class=\"hljs-string\"\u003e'./goal.component.css'\u003c/span\u003e]\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n............\r\n    goals:Goal[];\r\n  constructor(goalService:GoalService) {\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals = goalService.getGoals()\r\n   }\r\n..........\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoalService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand then place it in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eproviders\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Component\u003c/code\u003edecorator. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eproviders\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray is only registered in that components injector instance and the service can only be injected into that component or any of its child components.\u003c/p\u003e\r\n\u003cp\u003eWe then update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty and give it a type. We then inject the service into our constructor where we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetGoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod which returns the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray and we assign it to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty. You can run the servers to see that the page still looks the same.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"ngModules_providers_30\"\u003e\u003c/a\u003engModules providers\u003c/h3\u003e\r\n\u003cp\u003eLet us create a new service that allows us to create an alert message when an important event occurs\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate service alert-service/alerts\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis command creates a new service\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealerts.service.ts\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003ealert-service/alerts.service.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Injectable } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Injectable({\u003cbr\u003e  providedIn: 'root'\u003cbr\u003e})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAlertsService\u003c/span\u003e \u003c/span\u003e{\r\n\r\n  alertMe(message:string){\r\n    alert(message)\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAlertsService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe create an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealertMe\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that takes a string argument. Inside the method, we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and pass in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emessage\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparameter. Since this is a service that is useful in more than one component we can register it in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@ngModules\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edecorator’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eproviders\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.module.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e...........\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {AlertsService} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./alert-service/alerts.service'\u003c/span\u003e\r\n....................\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    GoalDetailsComponent,\r\n    GoalComponent,\r\n    StrikethroughDirective,\r\n    DateCountPipe,\r\n    GoalFormComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [AlertsService], // Add service to providers\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import the service then we add the service to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eproviders\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray property. This will make the service accessible to the entire application.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {GoalService} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goals/goal.service'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {AlertsService} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../alert-service/alerts.service'\u003c/span\u003e\r\n.............\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-goal'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./goal.component.html'\u003c/span\u003e,\r\n  providers:[GoalService], //add the providers to the component\r\n  styleUrls: [\u003cspan class=\"hljs-string\"\u003e'./goal.component.css'\u003c/span\u003e]\r\n})\r\nexport class GoalComponent implements OnInit {\r\n\r\n    goals:Goal[];\r\n    alertService:AlertsService;\r\n.......................\r\n    deleteGoal(isComplete,index){\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (isComplete){\r\n\r\n            \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e toDelete=confirm(\u003cspan class=\"hljs-string\"\u003e`Are you sure you want to delete \u003cspan class=\"hljs-subst\"\u003e${this.goals[index].name}\u003c/span\u003e`\u003c/span\u003e)\r\n\r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(toDelete){\r\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals.splice(index,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)\r\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.alertService.alertMe(\u003cspan class=\"hljs-string\"\u003e\"Goal has been deleted\"\u003c/span\u003e)\r\n            }\r\n\r\n        }\r\n    }\r\n  constructor(goalService:GoalService,alertService:AlertsService) {\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals = goalService.getGoals();\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.alertService = alertService;\u003cspan class=\"hljs-comment\"\u003e//make the service available to the class\u003c/span\u003e\r\n   }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import the service\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAlertsService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.Then inject the service into our Component’s constructor and we assign it to an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealertService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty. We then call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealertMe\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in our component’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edeleteGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and pass in a message we want to display. We now can serve our application and when we delete a goal an alert dialog pops up with the message we had written.\u003c/p\u003e","exportId":"monday-register-a-service"},{"id":820,"title":"Monday :HttpClient","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eHttpClient\u003c/h2\u003e\r\n\u003cp\u003eAngular provides the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule that allows our applications to communicate with backend services using the HTTP protocol. We are going to use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule to access a random quote API to display to our users. First, we need to setup the module\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {HttpClientModule} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/common/http'\u003c/span\u003e\r\n...............\r\n@NgModule({\r\n\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule\r\n  ],\r\n .......\r\n})\r\nexport class AppModule { }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClientModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@angular/common/http\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand then place it in our imports array. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClientModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eallows us to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our application.\u003cbr\u003eNext we need to create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eQuote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass that will help us convert our HTTP response to quote instances.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate class quote-class/quote\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003equote-class/quote.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eQuote\u003c/span\u003e \u003c/span\u003e{\r\n    constructor(public quote:string,public author:string){}\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eQuote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat takes 2 arguments in the constructor which are the class properties. It takes in a string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003equote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the.\u003cspan\u003e\u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Making_a_HTTP_request_33\"\u003e\u003c/a\u003eMaking a HTTP request\u003c/h3\u003e\r\n\u003cp\u003eWhen we place the API URL\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://talaikis.com/api/quotes/random/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our browser we get the following response with a random quote\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e{\"quote\":\"I do not fear computers. I fear the lack of them.\",\"author\":\"Isaac Asimov\",\"cat\":\"computers\"}\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis might be difficult to read. We can use the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsonprettyprint.com/\"\u003eJSON pretty print tool\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto prettify it.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\r\n  \"\u003cspan class=\"hljs-attribute\"\u003equote\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"I do not fear computers. I fear the lack of them.\"\u003c/span\u003e\u003c/span\u003e,\r\n  \"\u003cspan class=\"hljs-attribute\"\u003eauthor\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"Isaac Asimov\"\u003c/span\u003e\u003c/span\u003e,\r\n  \"\u003cspan class=\"hljs-attribute\"\u003ecat\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"computers\"\u003c/span\u003e\r\n\u003c/span\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe see the request returns a JSON object with 3 properties a quote, an author, and the category. Let us see how we can make the request in Angular\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {HttpClient} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/common/http'\u003cbr\u003e\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Quote} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../quote-class/quote'\u003c/span\u003e\r\n.......\r\nexport class GoalComponent implements OnInit {\r\n.......\r\n    quote:Quote;\r\n......\r\n  constructor(goalService:GoalService,alertService:AlertsService,private http:HttpClient) {\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals = goalService.getGoals();\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.alertService = alertService;\r\n   }\r\n\r\n  ngOnInit() {\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.http.get(\u003cspan class=\"hljs-string\"\u003e\"https://talaikis.com/api/quotes/random/\"\u003c/span\u003e).subscribe(data=\u0026gt;{\r\n        \u003cspan class=\"hljs-comment\"\u003e// Successful API request.\u003c/span\u003e\r\n    })\r\n  }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule then we inject it to our constructor. We then use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eget\u003c/code\u003emethod and pass to the API URL. we then call the subscribe function that takes in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction that is called when the API request is successful and returns a response.\u003cbr\u003eWe place the HTTP request in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engOnInit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elifecycle hook to be called immediately the component is initialized.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Handling_HTTP_response_72\"\u003e\u003c/a\u003eHandling HTTP response\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule converts the response into an object but does not specify what type of object it is. We can tell\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhat type of response we are expecting by defining an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einterface\u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {HttpClient} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/common/http'\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Quote} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../quote-class/quote'\u003c/span\u003e\r\n.......\r\nexport class GoalComponent implements OnInit {\r\n.......\r\n    quote:Quote;\r\n......\r\n  constructor(goalService:GoalService,alertService:AlertsService,private http:HttpClient) {\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals = goalService.getGoals();\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.alertService = alertService;\r\n   }\r\n\r\n ngOnInit() {\r\n\r\n    interface ApiResponse{\r\n        quote:string;\r\n        author:string\r\n    }\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.http.get\u0026lt;ApiResponse\u0026gt;(\u003cspan class=\"hljs-string\"\u003e\"https://talaikis.com/api/quotes/random/\"\u003c/span\u003e).subscribe(data=\u0026gt;{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote= \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Quote(data.quote,data.author)\r\n    })\r\n  }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAn\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einterface\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the description of the actions an object can do. Here we create an interface\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eApiResponse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat contains the properties that we need from the response. We then pass the interface with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eget\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. If the response is successful we create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eQuote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstance and passing in the response properties. We then assign this new quote instance to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003equote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eblockquote\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text-center text-lg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e{{quote.quote}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003efooter\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ecite\u003c/span\u003e\u0026gt;\u003c/span\u003e{{quote.author}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ecite\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003efooter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eblockquote\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n.........\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe lastly update our HTML template and add the quote and author inside a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblockquote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag that is at the top of the page.\u003cbr\u003eNow we can run our server and when we load the template we see a random quote displayed.\u003c/p\u003e","exportId":"monday-httpclient"},{"id":821,"title":"Monday: Error Handling","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eError Handling\u003c/h2\u003e\r\n\u003cp\u003eSo what if our HTTP request was not successful. The subscribe function takes in another parameter function that is called when the request fails.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {HttpClient} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/common/http'\u003c/span\u003e\r\n.......\r\n\r\nexport class GoalComponent implements OnInit {\r\n.........\r\n    quote:Quote;\r\n..........\r\n  constructor(goalService:GoalService,alertService:AlertsService,private http:HttpClient) {\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals = goalService.getGoals();\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.alertService = alertService;\r\n   }\r\n\r\n  ngOnInit() {\r\n\r\n    interface ApiResponse{\r\n        quote:string;\r\n        author:string\r\n\r\n    }\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.http.get\u0026lt;ApiResponse\u0026gt;(\u003cspan class=\"hljs-string\"\u003e\"https://talaikis.com/api/quotes/random/\"\u003c/span\u003e).subscribe(data=\u0026gt;{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote= \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Quote(data.quote,data.author)\r\n\r\n    },err=\u0026gt;{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote= \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Quote(\u003cspan class=\"hljs-string\"\u003e\"Never, never, never give up.\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"winston churchill\"\u003c/span\u003e)\r\n        \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Error occured \"\u003c/span\u003e)\r\n    })\r\n  }\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create another function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eerr\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat creates a backup quote instance that is assigned to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003equote\u003c/code\u003eproperty if the request fails to for any reason. We then log the error in our console.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Using_Loaders_37\"\u003e\u003c/a\u003eUsing Loaders\u003c/h3\u003e\r\n\u003cp\u003eWe can use a loader to show some process like HTTP request is happening. This provides good user experience to the user.\u003cbr\u003eWe will be using this\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/MurhafSousli/ngx-progressbar\"\u003eprogress bar\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eFirst, we need to install it\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ npm install --save @ngx-progressbar/core @ngx-progressbar/http\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe install the progress bar and the http progress bar that will automatically create a progress bar when a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule is called.Next, we need to import them into our root module\u003cbr\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e............\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { NgProgressModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@ngx-progressbar/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { NgProgressHttpModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@ngx-progressbar/http'\u003c/span\u003e;\r\n\r\n\r\n@NgModule({\r\n  \r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    NgProgressModule.forRoot(),\u003cspan class=\"hljs-comment\"\u003e// normal progress bar\u003c/span\u003e\r\n    NgProgressHttpModule \u003cspan class=\"hljs-comment\"\u003e// progress bar to load http requests\u003c/span\u003e\r\n  ],\r\n  providers: [AlertsService],\r\n  bootstrap: [AppComponent]\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppModule\u003c/span\u003e \u003c/span\u003e{ }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLastly, we will add the progress bar selector in our goal template file.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eng-progress\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eng-progress\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ng-progress\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector at the top of our template and when we run the server we will see a loader moving as our HTTP request is loading.\u003c/p\u003e","exportId":"monday-error-handling"},{"id":822,"title":"Monday: HTTP service","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eCreate a HTTP service\u003c/h2\u003e\r\n\u003cp\u003eNow we need to clean up our component. We can create a HTTP service that does the HTTP request for us and call the service inside our component.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate service quote-http/quote-request\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Environment_Variables_6\"\u003e\u003c/a\u003eEnvironment Variables\u003c/h3\u003e\r\n\u003cp\u003eSometimes we want to store some of the important properties like the API key away from prying eyes. We can place them in our environment files which we can later ignore\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003esrc/environments/environment.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e environment = {\r\n  production: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\r\n  apiUrl:\u003cspan class=\"hljs-string\"\u003e\"https://talaikis.com/api/quotes/random/\"\u003c/span\u003e\r\n};\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapiUrl\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty inside the environment object. We then pass in the API url . Remeber to place this file in your\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e.gitignore\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"HTTP_requests_using_Promises_18\"\u003e\u003c/a\u003eHTTP requests using Promises\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003equote-request.service.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Injectable } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {HttpClient} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/common/http'\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {environment} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../../environments/environment'\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Quote} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../quote-class/quote'\u003c/span\u003e\r\n\r\n\r\n@Injectable()\r\nexport class QuoteRequestService {\r\n\r\n    quote:Quote;\r\n\r\n  constructor(private http:HttpClient) { \r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote=\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Quote(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n  }\r\n\r\n  quoteRequest(){\r\n\r\n    interface ApiResponse{\r\n        quote:string;\r\n        author:string\r\n\r\n    }\r\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e promise =\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003ePromise\u003c/span\u003e((resolve,reject)=\u0026gt;{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.http.get\u0026lt;ApiResponse\u0026gt;(environment.apiUrl).toPromise().then(response=\u0026gt;{\r\n            \r\n            \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote.quote=response.quote\r\n            \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote.author=response.author\r\n\r\n            resolve()\r\n        },\r\n        error=\u0026gt;{\r\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote.quote=\u003cspan class=\"hljs-string\"\u003e\"Never, never, never give up.\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote.author=\u003cspan class=\"hljs-string\"\u003e\"winston churchill\"\u003c/span\u003e\r\n                reject(error)\r\n            }\r\n        )\r\n    })\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e promise\r\n  }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eInside our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eQuoteRequestService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eQuote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eenvironment\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. We then create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003equote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty which we initialize with empty string properties inside the constructor. We inject the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule inside our service constructor.\u003c/p\u003e\r\n\u003cp\u003eWe then create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003equoteRequest\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that defines the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eApiResponse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface and a promise instance. We then call the HttpClient’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eget\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod and pass in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapiUrl\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the environment object. We use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoPromise()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to convert the HTTP request to a promise then later call use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethen\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and pass in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eerror\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunctions as arguments. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction is called when the HTTP request is successful and returns a response. We update the property values of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003equote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass instance with values from the response. We then call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresolve\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction. If we encounter an error the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eerror\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction will be called and we can use the default quote properties.\u003c/p\u003e\r\n\u003cp\u003eWe can now call the service in our component.\u003cbr\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e.........\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {GoalService} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goals/goal.service'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {AlertsService} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../alert-service/alerts.service'\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {QuoteRequestService} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../quote-http/quote-request.service'\u003c/span\u003e\r\n.........\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-goal'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./goal.component.html'\u003c/span\u003e,\r\n  providers:[GoalService,QuoteRequestService], //add the providers to the component\r\n  styleUrls: [\u003cspan class=\"hljs-string\"\u003e'./goal.component.css'\u003c/span\u003e]\r\n})\r\nexport class GoalComponent implements OnInit {\r\n.........\r\nquote:Quote;\r\n.........\r\n  constructor(goalService:GoalService,alertService:AlertsService,private quoteService:QuoteRequestService) {\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals = goalService.getGoals();\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.alertService = alertService;\r\n   }\r\n\r\n\r\n  ngOnInit() {\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quoteService.quoteRequest()\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote=\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quoteService.quote\r\n  }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSince we only need to add this service to our goal component we can register our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eQuoteRequestService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our component’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eproviders\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray. We then inject it into our constructor and then inside our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engOnInit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elifecycle hook we can call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003equoteRequest\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod then we equate the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003equote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty with the quote property in the service. Now when we load our template we can see our quote being displayed at the top of the page.\u003cbr\u003eYou can read\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://medium.com/beautiful-angular/angular-2-and-environment-variables-59c57ba643be\"\u003ethis article\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto learn how to build your applications when you have items in the environment files.\u003c/p\u003e","exportId":"monday-http-service"},{"id":2064,"title":"Monday:Practice: Meal Tracker","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal: \u003c/strong\u003eContinue practising creating applications with Angular Cli while familiarizing yourself with the process of using services.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eWarm up\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is Dependency Injection? Why is it important?\u003c/li\u003e\r\n\u003cli\u003eWhat are services in angular 6?\u003c/li\u003e\r\n\u003cli\u003eWhat is Http service used for?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eCode\u003c/h3\u003e\r\n\u003ch4\u003eMeal Tracker\u003c/h4\u003e\r\n\u003cp\u003eCreate a meal tracking application where the user gets to keep track of the food they consume in each day. Here are some user stories to help you get started;\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eAs a user, I want to log a food I have eaten by submitting a form with food name, calories and details.\u003c/li\u003e\r\n\u003cli\u003eAs a user, I want to view a list of foods I have logged.\u003c/li\u003e\r\n\u003cli\u003eAs a user, I want options to view all foods, only high-calorie foods (more than 500 calories), or only lower-calorie foods (less than 500 calories).\u003c/li\u003e\r\n\u003cli\u003eI want to click a food to edit its name, details or calories (in case I decide to pretend my fries were 100 calories instead of 365).\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eMake sure you use at least one service to help you retrieve the meal from the meal array.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","exportId":"monday-practice-meal-tracker"},{"id":832,"title":"Tuesday: Routing","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eRouting\u003c/h2\u003e\r\n\u003cp\u003eAngular provides a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodel that allows us to change from one view to another while performing application tasks.\u003c/p\u003e\r\n\u003cp\u003eLet us start by creating an about page for our application.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate component about\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can populate the about template with a brief description of what our app is about\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eabout.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eAbout My App\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eAn Angular Application that lets us write goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we can start by setting up routing for the goals component and our new about component.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Install_the_Routing_Modules_18\"\u003e\u003c/a\u003eInstall the Routing Modules\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { RouterModule, Routes } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/router'\u003c/span\u003e;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe install the needed router Modules from the external\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elibrary.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Creating_route_configurations_25\"\u003e\u003c/a\u003eCreating route configurations\u003c/h3\u003e\r\n\u003cp\u003eNext, we need to set up the different route configurations\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { RouterModule, Routes } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/router'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-comment\"\u003e// Defining routes\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e routes:Routes=[\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"goals\"\u003c/span\u003e,component:GoalComponent},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"about\"\u003c/span\u003e,component:AboutComponent}\r\n]\r\n@NgModule({\r\n ........\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    NgProgressModule.forRoot(),\r\n    NgProgressHttpClientModule,\r\n    RouterModule.forRoot(routes)\r\n  ],\r\n  ........\r\n})\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eroutes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray determines how we navigate through our project. We pass into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRouterModule.forRoot()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in the imports array. Each route maps the path to the component it is to display.\u003c/p\u003e","exportId":"tuesday-routing"},{"id":833,"title":"Tuesday: Router-Outlet","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eRouter Outlet\u003c/h2\u003e\r\n\u003cp\u003eWe can create a navigation bar in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppComponent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etemplate file to display our different routes\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003enav\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"navbar navbar-inverse\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container-fluid\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Brand and toggle get grouped for better mobile display --\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"navbar-header\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"button\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"navbar-toggle collapsed\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003edata-toggle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"collapse\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003edata-target\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"#bs-example-navbar-collapse-1\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003earia-expanded\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"false\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"sr-only\"\u003c/span\u003e\u0026gt;\u003c/span\u003eToggle navigation\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"icon-bar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"icon-bar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"icon-bar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"navbar-brand\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"#\"\u003c/span\u003e\u0026gt;\u003c/span\u003eGoal App\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Collect the nav links, forms, and other content for toggling --\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"collapse navbar-collapse\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bs-example-navbar-collapse-1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"nav navbar-nav navbar-right\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erouterLink\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'/goals'\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erouterLinkActive\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'active'\u003c/span\u003e\u0026gt;\u003c/span\u003eGoals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erouterLink\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'/about'\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erouterLinkActive\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'active'\u003c/span\u003e\u0026gt;\u003c/span\u003eAbout\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- /.navbar-collapse --\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- /.container-fluid --\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003enav\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- End of Navigation --\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003erouter-outlet\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003erouter-outlet\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouter-oulet\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a directive provided by the router library. It marks the area where the router should display the different views it loads.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"RouterLink_35\"\u003e\u003c/a\u003eRouterLink\u003c/h3\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erouterLink\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'/goals'\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erouterLinkActive\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'active'\u003c/span\u003e\u0026gt;\u003c/span\u003eGoals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouterlink\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a directive attribute to the anchor tags that takes in a string that is the URL that maps to the route we created in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eroutes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"RouterLinkActive_42\"\u003e\u003c/a\u003eRouterLinkActive\u003c/h3\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erouterLink\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'/goals'\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erouterLinkActive\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'active'\u003c/span\u003e\u0026gt;\u003c/span\u003eGoals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouterLinkActive\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a directive that toggles the CSS classes by checking on the state of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouterLink\u003c/code\u003eusing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouterState\u003c/code\u003e. A given RouterLink will only be active if its URL is an exact match to the current URL.\u003c/p\u003e","exportId":"tuesday-router-outlet"},{"id":834,"title":"Tuesday: 404 Pages","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e404 page\u003c/h2\u003e\r\n\u003cp\u003eWhat if the user requests a route that does not exist. We want to redirect our users to a custom 404 Page.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate component not-found\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003enot-found.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text-center\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSorry We can't find It\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enot-found\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent and add some help text in the template file.We can add it to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eroutes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e...........\r\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e routes:Routes=[\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"goals\"\u003c/span\u003e,component:GoalComponent},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"about\"\u003c/span\u003e,component:AboutComponent},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e'**'\u003c/span\u003e,component:NotFoundComponent}\r\n  \r\n.........\r\n]\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e**\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto describe a wildcard route. This is a route that is not specified in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eroutes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray. We can now load our home template file and we notice something when we load the home page or the ‘/’ route we are directed to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e404\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epage. We can redirect our users to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent every time the home route is loaded.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"redirect_26\"\u003e\u003c/a\u003eredirect\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e...........\r\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e routes:Routes=[\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"goals\"\u003c/span\u003e,component:GoalComponent},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"about\"\u003c/span\u003e,component:AboutComponent},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,redirectTo:\u003cspan class=\"hljs-string\"\u003e\"/goals\"\u003c/span\u003e,pathMatch:\u003cspan class=\"hljs-string\"\u003e\"full\"\u003c/span\u003e},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e'**'\u003c/span\u003e,component:NotFoundComponent}\r\n]\r\n.........\r\n]\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eA redirect route requires a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epathMatch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty that tells the router how o match the URL with the path of a route. This app shows that the router will only redirect to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e/goals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eroute if the URL matches\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efully. Now when we load the home URL we get redirected to the goals route.\u003c/p\u003e","exportId":"tuesday-404-pages"},{"id":837,"title":"Tuesday: Routing Module","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eRouting Module\u003c/h2\u003e\r\n\u003cp\u003eWe will now create a new module to handle all the routing functionality. This is a design choice to minimize complexity as our application grows larger\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003eng generate module routing\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003erouting/routing.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { NgModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { CommonModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/common'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {RouterModule,Routes} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/router'\u003c/span\u003e\r\n\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { GoalComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goal/goal.component'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { AboutComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../about/about.component'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { NotFoundComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../not-found/not-found.component'\u003c/span\u003e;\r\n\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e// Defining routes\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e routes:Routes=[\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"goals\"\u003c/span\u003e,component:GoalComponent},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"about\"\u003c/span\u003e,component:AboutComponent},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,redirectTo:\u003cspan class=\"hljs-string\"\u003e\"/goals\"\u003c/span\u003e,pathMatch:\u003cspan class=\"hljs-string\"\u003e\"full\"\u003c/span\u003e},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e'**'\u003c/span\u003e,component:NotFoundComponent}\r\n]\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forRoot(routes)\r\n  ],\r\n  exports:[RouterModule],\r\n  declarations: []\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRoutingModule\u003c/span\u003e \u003c/span\u003e{ }\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFirst, we move all the \u003cspan\u003e\u003c/span\u003e\u003ccode\u003erouter\u003c/code\u003e\u003cspan\u003e\u003c/span\u003emodule imports from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp.module.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the new routing module. Next, we import the components we will need for in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eroutes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray. We then move the routes array to the new routing module.\u003c/p\u003e\r\n\u003cp\u003eWe place the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRouterModule.forRoot()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule in our imports array and pass in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eroutes\u003c/code\u003earray.\u003cbr\u003eWe also place the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRouterModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein an exports array. We now need to add this module to our root module.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {RoutingModule} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./routing/routing.module'\u003c/span\u003e\r\n...........\r\n@NgModule({\r\n ...........\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    RoutingModule,\r\n    HttpClientModule,\r\n    NgProgressModule.forRoot(),\r\n    NgProgressHttpClientModule,\r\n\r\n  ],\r\n ..........\r\n})\r\nexport class AppModule { }\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe import the new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRoutingModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand place it inside our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimports\u003c/code\u003e. array. We can now load our page and see that nothing has changed but how we configure our files is now more flexible.\u003c/p\u003e","exportId":"tuesday-routing-module"},{"id":839,"title":"Tuesday: Passing Parameters","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003ePassing Parameters\u003c/h2\u003e\r\n\u003cp\u003eNext, we can create a route that maps to a specific goal. Let us do that inside our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eroutes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003erouting/routing.module\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...........\r\n// Defining routes\r\nconst routes:Routes=[\r\n  {path:\"goals\",component:GoalComponent},\r\n  {path:\"about\",component:AboutComponent},\r\n  {path:\"\",redirectTo:\"/goals\",pathMatch:\"full\"},\r\n  {path:'goals/:id',component:GoalDetailsComponent},\r\n  {path:'**',component:NotFoundComponent}\r\n]\r\n.............\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a new route that has an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e:id\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etoken in the path allowing a slot for a route Parameter. We will insert the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof the goal to retrieve that specific goal. We then need to make some changes in our templates.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eng-progress\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eng-progress\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!--Quote Container--\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eblockquote\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text-center text-lg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e{{quote.quote}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003efooter\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ecite\u003c/span\u003e\u0026gt;\u003c/span\u003e{{quote.author}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ecite\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003efooter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eblockquote\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!--Quote Container end--\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!--Form Container--\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal-form\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eaddGoal\u003c/span\u003e)=\u003cspan class=\"hljs-value\"\u003e\"addNewGoal($event)\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal-form\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!--Form Container end--\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!--Goals container--\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"let goal of goals;let i = 'index'\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh4\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"{{i}}\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eappStrikethrough\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.name}} due on {{goal.completeDate|date|uppercase}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh4\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-primary\"\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eclick\u003c/span\u003e)=\u003cspan class=\"hljs-value\"\u003egoToUrl(goal.id)\u003c/span\u003e\u0026gt;\u003c/span\u003eView Details\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-danger\"\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eclick\u003c/span\u003e) = '\u003cspan class=\"hljs-attribute\"\u003edeleteGoal\u003c/span\u003e(\u003cspan class=\"hljs-attribute\"\u003ei\u003c/span\u003e)'\u0026gt;\u003c/span\u003e Delete Goal \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n \r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!--Goals container end--\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'goals.length \u0026gt; 5'\u003c/span\u003e\u0026gt;\u003c/span\u003eYou have too many goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoal\u003c/code\u003ecomponents template file. Notice we remove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;app-goal-details\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag and we replace the toggle button with two new buttons. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView Details\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebutton calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoToUrl()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction that takes in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal.id\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich will be responsible for triggering the navigation to the details component for that specific goal. We moved the Delete goal button from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoal-Details\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoal\u003c/code\u003ecomponent and it calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edeleteGoal()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and takes in the index of the goal.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e............\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Router} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/router'\u003c/span\u003e;\r\n............\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    goToUrl(id){\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.router.navigate([\u003cspan class=\"hljs-string\"\u003e'/goals'\u003c/span\u003e,id])\r\n    }\r\n\r\n    deleteGoal(index){\r\n            \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e toDelete=confirm(\u003cspan class=\"hljs-string\"\u003e`Are you sure you want to delete \u003cspan class=\"hljs-subst\"\u003e${this.goals[index].name}\u003c/span\u003e`\u003c/span\u003e)\r\n\r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(toDelete){\r\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals.splice(index,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)\r\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.alertService.alertMe(\u003cspan class=\"hljs-string\"\u003e\"Goal has been deleted\"\u003c/span\u003e)\r\n        }\r\n    }\r\n.............\r\n  constructor(goalService:GoalService,alertService:AlertsService,private quoteService:QuoteRequestService,private router:Router) {\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals = goalService.getGoals();\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.alertService = alertService;\r\n   }\r\n............\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFirst, we import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRouter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule and inject it into our constructor with the property\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouter\u003c/code\u003e. We can then create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoToUrl()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and crete an id argument. We call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouter\u003c/code\u003e's navigate function and put an array as an argument where the first part is the path and the second part is the parameter which is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof the goal. We also have the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edeleteGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction that deletes a goal from the array of Goals.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Creating_a_getGoal_method_89\"\u003e\u003c/a\u003eCreating a getGoal method\u003c/h3\u003e\r\n\u003cp\u003eWe can create a new method that gets a specific goal in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoalService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003cbr\u003e\u003cstrong\u003egoal.service.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Injectable } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goals} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"../goals\"\u003c/span\u003e\r\n\r\n@Injectable()\r\nexport class GoalService {\r\n\r\n  getGoals(){\r\n    return Goals;\r\n  }\r\n  getGoal(id){\r\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e goal \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e Goals){\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (goal.id == id){\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e goal;\r\n        }\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that takes in an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an argument. We then create a for-loop to loop through the array of goals. Inside the loop, we create an if statement that checks if any of the goals matches the id parameter. If one matches we return that goal and break out of the loop.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component, OnInit,Input,Output,EventEmitter } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goal} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goal'\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { ActivatedRoute, ParamMap } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/router'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {GoalService} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goals/goal.service'\u003c/span\u003e\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-goal-details'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./goal-details.component.html'\u003c/span\u003e,\r\n  styleUrls: [\u003cspan class=\"hljs-string\"\u003e'./goal-details.component.css'\u003c/span\u003e],\r\n  providers:[GoalService]\r\n})\r\nexport class GoalDetailsComponent implements OnInit {\r\n\r\n   goal:Goal;\r\n  constructor(private route:ActivatedRoute,\r\n    private service:GoalService) { }\r\n \r\n  ngOnInit() {\r\n     \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e id = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.route.snapshot.paramMap.get(\u003cspan class=\"hljs-string\"\u003e'id'\u003c/span\u003e);\r\n     \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goal=\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.service.getGoal(id)\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eActivatedRoute\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto retrieve parameters from the route and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParamMap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat provides methods that handle parameter access. We then import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoalService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand register it in the component provider. Next, we inject the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eActivatedRoute\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eservice and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoalService\u003c/code\u003eservice into our constructor.\u003c/p\u003e\r\n\u003cp\u003eInside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engOnInit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eroute.snapshot\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto get initial value of the route parameter map, Then we extract the id parameter with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eget\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod provided by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparamMap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction.\u003cbr\u003eWe then pass that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto our service’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod and the returning goal instance is assigned to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty of the component. Now we can load the server and see when we click the View Details button we are navigated to the details of the goal.\u003c/p\u003e","exportId":"tuesday-passing-parameters"},{"id":2065,"title":"Tuesday:Practice: Moringa Overflow","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e  Get comfortable using Angular Cli and practice the process of angular routing.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eWarm Up \u003c/h3\u003e\r\n\u003cp\u003eDiscuss the following questions with your pair\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is routing in Angular 6?\u003c/li\u003e\r\n\u003cli\u003eWhat is this tag used for \u0026lt;router-outlet\u0026gt;\u0026lt;/router-outlet\u0026gt; ?\u003c/li\u003e\r\n\u003cli\u003eWhat is a routerLink?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eCode \u003c/h3\u003e\r\n\u003ch4\u003eMoringa Overflow\u003c/h4\u003e\r\n\u003cp\u003eThe project for today will be to create a basic discussion /forum site where users can post questions or news about a certain topic. Much like stack overflow but we will call it Moringa overflow. Here are some user stories to help you get the bigger picture of the project.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eAs a user, I would like to see several discussion categories on the landing page\u003c/li\u003e\r\n\u003cli\u003eAs a user, I would like to click a category and view its collection of posts\u003c/li\u003e\r\n\u003cli\u003eAs a user, I would like to click on a post and see its details\u003c/li\u003e\r\n\u003cli\u003eAs a user, I would like to add a post to my desired category\u003c/li\u003e\r\n\u003cli\u003eAs a user,  I would like to have the option of deleting my post\u003c/li\u003e\r\n\u003cli\u003eAs a user, I would like to update my post if necessary.\u003c/li\u003e\r\n\u003c/ol\u003e","exportId":"tuesday-practice-moringa-overflow"},{"id":826,"title":"Wednesday: Two Day Project","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eTwo Day Project\u003c/h2\u003e\r\n\u003cp id=\"e2f4\" class=\"graf graf--p graf-after--figure\"\u003eFor the next two days, you will be creating a\u003cspan\u003e \u003c/span\u003e\u003ca class=\"markup--anchor markup--p-anchor\" href=\"https://giphy.com/\" target=\"_blank\" data-href=\"https://giphy.com/\"\u003egiphy website\u003c/a\u003e replica\u003cspan\u003e, using the \u003c/span\u003e\u003ca class=\"markup--anchor markup--p-anchor\" href=\"https://api.giphy.com/\" target=\"_blank\" data-href=\"https://api.giphy.com/\"\u003egiphy api\u003c/a\u003e. By the end of the two days, your app should \u003c/p\u003e\r\n\u003cul class=\"postList\"\u003e\r\n\u003cli id=\"e163\" class=\"graf graf--li graf-after--p\"\u003edisplay trending gifs on app load shown in a column/grid\u003c/li\u003e\r\n\u003cli id=\"2d96\" class=\"graf graf--li graf-after--li\"\u003ehave an input which allows you to search for specific gifs\u003c/li\u003e\r\n\u003cli id=\"6fce\" class=\"graf graf--li graf-after--li\"\u003eat the bottom of the results, there is a ‘load more’ button, which gets more gifs using that search term.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eUse the concepts you have been learning in Angular to build up the application. Make sure the application is at portfolio quality. If you have some time left off you can experiment by adding some extra features like sharing on social media.\u003c/p\u003e\r\n\u003cp id=\"5e3d\" class=\"graf graf--p graf-after--li\"\u003e \u003c/p\u003e","exportId":"wednesday-two-day-project"},{"id":827,"title":"Thursday: Interview Questions","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eTwo Day Project Continues\u003c/h2\u003e\r\n\u003cp\u003eContinue building with your pair the giphy\u003cstrong\u003e clone website.\u003c/strong\u003e Make sure you make regular commits while pushing your code to Github and make sure you have clear commit messages\u003c/p\u003e\r\n\u003ch2\u003eAngular 6 Interview Questions\u003c/h2\u003e\r\n\u003cp\u003eThese are some of the Interview questions you might encounter on Angular 6. discuss with your pair and also search online for other questions.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is Angular 6?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat are the key components of Angular 6?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eExplain Modules in Angular 6\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eExplain Components in Angular 6\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat are Angular 6 directives? Explain with examples.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is CLI?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is Dependency Injection? Explain with examples.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhen does ngOnInit event get called in Angular 6 Application Lifecycle?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWhat are Event Emitters and how do they work in Angular 6?\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eExplain Bootstrapping in an Angular Project\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","exportId":"thursday-interview-questions"},{"id":871,"title":"Friday: Independent Project","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":28.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003ch2\u003eGithub Search\u003c/h2\u003e\r\n\u003cp\u003eCreate a website where users may enter a GitHub username into a form, submit it, and see names and descriptions of that person's public repositories. A person can also look for repositories\u003c/p\u003e\r\n\u003cp\u003eUse the\u003cspan\u003e \u003c/span\u003e\u003ca class=\"external\" href=\"https://developer.github.com/v3/\" target=\"_blank\"\u003e\u003cspan\u003eGitHub API\u003cspan class=\"screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto retrieve this information. This API allows 5,000 requests per hour with an API key, but only 60 requests per hour _without_ one. Everyone is therefore required to use their own unique key. GitHub refers to these keys as \"Personal Access Tokens\".\u003c/p\u003e\r\n\u003ch3\u003eCreating Personal Access Tokens\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eVisit the _Settings_ area of your GitHub account like this\u003c/li\u003e\r\n\u003cli\u003e\u003cimg src=\"viewer/files/githubsettings.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"github settings\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/11/files/844\" data-api-returntype=\"File\"\u003e\u003c/li\u003e\r\n\u003cli\u003eselect Personal Access Tokens from the sidebar, and hit Generate New Token\u003c/li\u003e\r\n\u003cli\u003e\u003cimg src=\"viewer/files/githubgeneratetoken.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/11/files/845\" data-api-returntype=\"File\"\u003e\u003c/li\u003e\r\n\u003cli\u003eGitHub will offer a list of options\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not select any\u003c/strong\u003e. These grants read/write permissions and access to personal data. Finally, select\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eGenerate Token.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\n\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003e\u003cimg src=\"viewer/files/githublistofoptions.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/11/files/846\" data-api-returntype=\"File\"\u003e\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eA sample request  URL might look like this.\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan class=\"hljs-string\"\u003e'https://api.github.com/users/daneden?access_token='\u003c/span\u003e\u003cspan\u003e + apiKey\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan\u003eTechnical Requirements\u003c/span\u003e\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003eYour project must contain a well-designed landing page that displays your GitHub information such as your username, your profile photos and a list of your repositories.\u003c/li\u003e\r\n\u003cli\u003eYou must place your access key inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eenvironment.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile and place it inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egitignore\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/li\u003e\r\n\u003cli\u003eYou must create a HTTP service that uses a promise to make the requests to the GitHub API.\u003c/li\u003e\r\n\u003cli\u003eThe HTTP request should be able to search for both GitHub users and GitHub repositories.\u003c/li\u003e\r\n\u003cli\u003eYour project must have two classes for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003euser\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erepository\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eYour project must have a proper routing structure that links a GitHub username to the users GitHub repositories.\u003c/li\u003e\r\n\u003cli\u003eYour project must have a separate routing module.\u003cbr\u003e5.Your project must contain a custom directive and a custom pipe.\u003c/li\u003e\r\n\u003cli\u003eYour Project must be well designed and visually appealing and of portfolio quality.\u003c/li\u003e\r\n\u003cli\u003eYour project must have a well-documented README file.\u003c/li\u003e\r\n\u003cli\u003eYour project must be deployed and the deployed link should be submitted.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003e \u003c/h3\u003e","exportId":"i6b564de32a15ddd798f7fc7e7a232dbf"},{"id":1120,"title":"Friday: IP review","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan\u003eThe following scale will be used to grade your Independent Project based on the criteria, please submit your links to your TM.\u003c/span\u003e\u003c/p\u003e","exportId":"i1434982cf934c55eda9c0280e7c2b6d0"}]}],"pages":[{"exportId":"monday-angular-week-2-objectives","title":"Monday: Angular Week 2 Objectives","type":"WikiPage","content":"\u003cp\u003eThis week we'll dive slightly deeper into the Angular framework by learning a bit more complex and interesting concepts.\u003c/p\u003e\r\n\u003cp\u003eWe will start by learning a concept called \u003cem\u003edependency injection\u003c/em\u003e. By understanding this concept, it will help us create something called a \u003cem\u003eservice\u003c/em\u003e which will, in turn, allow us to organise and share code across our application.\u003c/p\u003e\r\n\u003cp\u003eFrom there, we will also to learn about \u003cem\u003ethe Http Client\u003c/em\u003e module that will enable us to use APIs in our Angular application. \u003c/p\u003e\r\n\u003cp\u003eFinally, we will finish off by learning how to use a router to create and add dynamic pages to our application. Here, we'll learn how to pass data and information between different routes.\u003c/p\u003e\r\n\u003ch3\u003eIndependent Project Objectives\u003c/h3\u003e\r\n\u003cp\u003eIn this section, you mentor will review your project based on the following objectives:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eHave a well-designed landing page that displays Github information such as username, profile photo and a list of repositories.\u003c/li\u003e\r\n\u003cli\u003eUse Http Client services to access GitHub API.\u003c/li\u003e\r\n\u003cli\u003eUse two classes in your project.\u003c/li\u003e\r\n\u003cli\u003eImplement Http requests to search for GitHub users and GitHub repositories.  \u003c/li\u003e\r\n\u003cli\u003eHave a routing module.\u003c/li\u003e\r\n\u003cli\u003eImplement custom directives and custom pipes in your project.\u003c/li\u003e\r\n\u003cli\u003ePolished and portfolio-quality.\u003c/li\u003e\r\n\u003cli\u003eHave a well-documented README file.\u003c/li\u003e\r\n\u003cli\u003eThe project must be deployed and link submitted.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e  \u003c/p\u003e","frontPage":false},{"exportId":"wednesday-two-day-project","title":"Wednesday: Two Day Project","type":"WikiPage","content":"\u003ch2\u003eTwo Day Project\u003c/h2\u003e\r\n\u003cp id=\"e2f4\" class=\"graf graf--p graf-after--figure\"\u003eFor the next two days, you will be creating a\u003cspan\u003e \u003c/span\u003e\u003ca class=\"markup--anchor markup--p-anchor\" href=\"https://giphy.com/\" target=\"_blank\" data-href=\"https://giphy.com/\"\u003egiphy website\u003c/a\u003e replica\u003cspan\u003e, using the \u003c/span\u003e\u003ca class=\"markup--anchor markup--p-anchor\" href=\"https://api.giphy.com/\" target=\"_blank\" data-href=\"https://api.giphy.com/\"\u003egiphy api\u003c/a\u003e. By the end of the two days, your app should \u003c/p\u003e\r\n\u003cul class=\"postList\"\u003e\r\n\u003cli id=\"e163\" class=\"graf graf--li graf-after--p\"\u003edisplay trending gifs on app load shown in a column/grid\u003c/li\u003e\r\n\u003cli id=\"2d96\" class=\"graf graf--li graf-after--li\"\u003ehave an input which allows you to search for specific gifs\u003c/li\u003e\r\n\u003cli id=\"6fce\" class=\"graf graf--li graf-after--li\"\u003eat the bottom of the results, there is a ‘load more’ button, which gets more gifs using that search term.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eUse the concepts you have been learning in Angular to build up the application. Make sure the application is at portfolio quality. If you have some time left off you can experiment by adding some extra features like sharing on social media.\u003c/p\u003e\r\n\u003cp id=\"5e3d\" class=\"graf graf--p graf-after--li\"\u003e \u003c/p\u003e","frontPage":false},{"exportId":"tuesday-router-outlet","title":"Tuesday: Router-Outlet","type":"WikiPage","content":"\u003ch2\u003eRouter Outlet\u003c/h2\u003e\r\n\u003cp\u003eWe can create a navigation bar in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppComponent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etemplate file to display our different routes\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003enav\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"navbar navbar-inverse\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container-fluid\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Brand and toggle get grouped for better mobile display --\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"navbar-header\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"button\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"navbar-toggle collapsed\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003edata-toggle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"collapse\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003edata-target\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"#bs-example-navbar-collapse-1\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003earia-expanded\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"false\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"sr-only\"\u003c/span\u003e\u0026gt;\u003c/span\u003eToggle navigation\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"icon-bar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"icon-bar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"icon-bar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003espan\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"navbar-brand\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"#\"\u003c/span\u003e\u0026gt;\u003c/span\u003eGoal App\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Collect the nav links, forms, and other content for toggling --\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"collapse navbar-collapse\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bs-example-navbar-collapse-1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"nav navbar-nav navbar-right\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erouterLink\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'/goals'\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erouterLinkActive\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'active'\u003c/span\u003e\u0026gt;\u003c/span\u003eGoals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erouterLink\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'/about'\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erouterLinkActive\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'active'\u003c/span\u003e\u0026gt;\u003c/span\u003eAbout\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n      \r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- /.navbar-collapse --\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- /.container-fluid --\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003enav\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- End of Navigation --\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003erouter-outlet\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003erouter-outlet\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouter-oulet\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a directive provided by the router library. It marks the area where the router should display the different views it loads.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"RouterLink_35\"\u003e\u003c/a\u003eRouterLink\u003c/h3\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erouterLink\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'/goals'\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erouterLinkActive\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'active'\u003c/span\u003e\u0026gt;\u003c/span\u003eGoals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouterlink\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a directive attribute to the anchor tags that takes in a string that is the URL that maps to the route we created in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eroutes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"RouterLinkActive_42\"\u003e\u003c/a\u003eRouterLinkActive\u003c/h3\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erouterLink\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'/goals'\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erouterLinkActive\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'active'\u003c/span\u003e\u0026gt;\u003c/span\u003eGoals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouterLinkActive\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a directive that toggles the CSS classes by checking on the state of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouterLink\u003c/code\u003eusing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouterState\u003c/code\u003e. A given RouterLink will only be active if its URL is an exact match to the current URL.\u003c/p\u003e","frontPage":false},{"exportId":"monday-and-tuesday-practice-to-do-list-flash-cards","title":"Monday \u0026 Tuesday: Practice - To Do List,Flash Cards","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Over the course of the last two days, you have learnt how to create a basic application using Angular, including the file structure, components, property binding, event emitting, directives, and pipes. Take this time to familiarize and solidify your understanding of these concepts.\u003c/p\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003ch3\u003eGoals\u003c/h3\u003e\r\n\u003cp\u003eFirst, follow along with the Monday and Tuesday lessons, creating the Goals application.   \u003c/p\u003e\r\n\u003cp\u003eOnly after you have completed the lessons and understand how an Angular application is built, move on to practice your skills further with the next projects.\u003c/p\u003e\r\n\u003ch3\u003eTo Do List\u003c/h3\u003e\r\n\u003cp\u003eCreate a to-do list application in Angular. Just like we did in our Goals application, you will have to hard code your Task objects. For now, your Task object should have properties such as name and description. \u003c/p\u003e\r\n\u003ch3\u003eFlash Card\u003c/h3\u003e\r\n\u003cp\u003eYou have learnt a lot since you start this journey of becoming a Programmer.  Wouldn't it be really cool if you could have somewhere to record all the new programming vocabularies (and their explanations) that you have encountered?\u003c/p\u003e\r\n\u003cp\u003eOnce you finish creating the to-do list project above and feel comfortable about the concepts you learnt so far, you can challenge yourself further and create a flashcard app. A flashcard app is a site where you create cards that contain new words you learnt and their explanations.\u003c/p\u003e\r\n\u003cp\u003eFollow along with the lessons you've covered so far and add functionality similar to the Goals app with the following user stories as your guide:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eAs a user, I would like to see the title of each flash card\u003c/li\u003e\r\n\u003cli\u003eas a user, I want to be able to click on the card's title to see it's explanation/detail.\u003c/li\u003e\r\n\u003cli\u003eAs a user, I want to be able to hide a card detail when am done viewing them.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false},{"exportId":"monday-creating-a-class","title":"Monday: Creating a class","type":"WikiPage","content":"\u003ch2\u003eCreating a class\u003c/h2\u003e\r\n\u003cp\u003eWe have been defining our goals up to this point just as strings. But normally goals usually have much more like the ID, the goal's name, even the intended completion date. We can define these in our component but it will be tedious to create a goal object for each of our goals.\u003c/p\u003e\r\n\u003cp\u003eLet us generate a class to help us define the blueprint of a goal.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate class Goal\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egenerate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand provided by the Angular CLI to create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003cbr\u003eWe can then define the properties of the class. For now, let us only create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ename\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof the goal.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/goal.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoal\u003c/span\u003e \u003c/span\u003e{\r\n    constructor(public id:number, public name:string){}\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a constructor function and define the properties of each instance of the class. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epublic\u003c/code\u003ekeyword is an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAccess modifier\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eit determines where the properties of a class are visible. This allows the id and number to be visible anywhere outside the class.\u003c/p\u003e\r\n\u003cp\u003eNow we need to change our array of goals\u003cbr\u003e\u003cstrong\u003eapp/app.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goal} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./goal'\u003c/span\u003e\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-root'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./app.component.html'\u003c/span\u003e\r\n})\r\nexport class AppComponent {\r\n    goals = [\r\n        new Goal(1,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e),\r\n        new Goal(2,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e),\r\n        new Goal(3, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e),\r\n        new Goal(4, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e),\r\n        new Goal(5, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e),\r\n        new Goal(6, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e),\r\n\r\n    ]\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. We then create an array of new instances of the goal class. Now we need to update the template files to target the name. of the goal.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehr\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals'\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.name}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe now bind the name attribute to our list element using the curly braces.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"NgIf_55\"\u003e\u003c/a\u003eNgIf\u003c/h3\u003e\r\n\u003cp\u003eWe now want to see another structural directive we can use in our templates.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehr\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals'\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.name}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'goals.length \u0026gt; 5'\u003c/span\u003e\u0026gt;\u003c/span\u003eYou have too many goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e*ngIf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edirective that adds some conditional logic to our templates. We check if the length of our goals exceeds 5. If so we display a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ep\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag that tells us we have too many goals.\u003c/p\u003e\r\n\u003cp\u003eWhen we run the application now we see the list of goals and a paragraph. If we remove one goal we see our page reloads and the paragraph is gone.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-deleting-goals","title":"Wednesday: Deleting Goals","type":"WikiPage","content":"\u003ch2\u003eDeleting Goals\u003c/h2\u003e\r\n\u003cp\u003eSince we created a custom directive that strikes through our goal when we click the goal we can replace the complete button in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal-details\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent to make us delete the goal when we are sure we want to get rid of it.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.description}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThis goal will be completed in {{goal.completeDate|dateCount}} days\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eclick\u003c/span\u003e) = '\u003cspan class=\"hljs-attribute\"\u003egoalDelete\u003c/span\u003e(\u003cspan class=\"hljs-attribute\"\u003etrue\u003c/span\u003e)'\u0026gt;\u003c/span\u003e Delete Goal \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe modify the button to emit a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoutput event that calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoalDelete\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction which takes a boolean as an argument.\u003c/p\u003e\r\n\u003cp\u003eWe then can remove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoalComplete\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal-details\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent class. We replace it with our new \u003ccode\u003egoalDelete\u003c/code\u003e function.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e.......\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalDetailsComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n.....\r\n  goalDelete(complete:boolean){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.isComplete.emit(complete);\r\n  }\r\n.......\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eisComplete\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevent emitter that we had defined and emit the boolean value passed in. We can now update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparent component.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e........\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals;let i = index'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    .........\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goal.showDescription\"\u003c/span\u003e [\u003cspan class=\"hljs-attribute\"\u003egoal\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e'goal'\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eisComplete\u003c/span\u003e)= '\u003cspan class=\"hljs-attribute\"\u003edeleteGoal\u003c/span\u003e($\u003cspan class=\"hljs-attribute\"\u003eevent\u003c/span\u003e,\u003cspan class=\"hljs-attribute\"\u003ei\u003c/span\u003e)'\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n............\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp-goal-details\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag to add the output event that gets the emitted event and calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edeleteGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction passing in the emitted value and the index of the goal.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n    goals = [\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Find an online version and watch merlin find his son'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'I have to buy cookies for the parrot'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Diana has her birthday coming up soon'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Pupper likes expensive sancks'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Damn Math'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Cause I am an evil overlord'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n\r\n    ]\r\n\r\n    deleteGoal(isComplete,index){\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (isComplete){\r\n            \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e toDelete=confirm(\u003cspan class=\"hljs-string\"\u003e`Are you sure you want to delete \u003cspan class=\"hljs-subst\"\u003e${this.goals[index].name}\u003c/span\u003e`\u003c/span\u003e)\r\n            \r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(toDelete){\r\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals.splice(index,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)\r\n            }\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create the deleteGoal function that takes the boolean value and index of the goal. We then create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoDelete\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eboolean variable that calls the Javascript\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econfirm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction that creates a browser prompt for the user to confirm if they actually want to delete the goal. If the user confirms the goal to be deleted we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esplice\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to remove the goal from the list of goals using the index\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-pipes","title":"Tuesday: Pipes","type":"WikiPage","content":"\u003ch2\u003ePipes\u003c/h2\u003e\r\n\u003cp\u003eIn angular Pipes take in data as Input and transform it to the desired output.\u003cbr\u003eLet us look at some examples. We will add a completion date for our goals.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/goal.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoal\u003c/span\u003e \u003c/span\u003e{\r\n    public showDescription:boolean\r\n    constructor(public id:number, public name:string,public description:string,public completeDate:\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e){\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.showDescription=\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompleteDate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eargument to our constructor and we give it a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype.\u003cbr\u003eWe then update our array of goal objects to add a completion date.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n    goals = [\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Find an online version and watch merlin find his son'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'I have to buy cookies for the parrot'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Diana has her birthday coming up soon'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Pupper likes expensive sancks'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Damn Math'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Cause I am an evil overlord'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n\r\n    ]\r\n\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstance takes 3 arguments the first one is the year,the second argument is the month the third argument is the date. The month is calculated from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e0-11\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhere\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e0\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis January and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e11\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis December.\u003cbr\u003eWe can now display the dates when we list out our goals.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals;let i = index'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e  \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"{{i}}\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eappStrikethrough\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.name}} due on {{goal.completeDate|date}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    ........\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  ..............\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompleteDate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the argument then we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e|\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epipe character to transform the date into something readable to us.We use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epipe, which is inbuilt in angular, that takes in date objects and transforms them. When we load the server we can see the changes that we made.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Chaining_pipes_48\"\u003e\u003c/a\u003eChaining pipes\u003c/h3\u003e\r\n\u003cp\u003eWe can also chain pipes to extend the transformation we give to the input.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals;let i = index'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e  \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"{{i}}\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eappStrikethrough\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.name}} due on {{goal.completeDate|date|uppercase}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    ........\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  ..............\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe add another pipe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003euppercase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis will transform our date to uppercase and we can see the changes when we load the server and we see the month now is in uppercase.\u003c/p\u003e","frontPage":false},{"exportId":"monday-mvc-architecture-with-angular","title":"Monday: MVC Architecture with Angular","type":"WikiPage","content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOne of the popular ways of organising application is using the \u003c/span\u003e\u003cstrong\u003eMVC architecture\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e. Angular uses this architecture to organise its application. Let's look at what is MVC architecture in Angular.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eModel-view-controller, or MVC as its popularly known, is a software design pattern for developing web applications. This design pattern is made up of three parts:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003e Model\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e: Responsible for maintaining data\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eView\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e:Responsible for displaying data to the user\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eController\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e: Responsible for controlling the interaction between the Model and Views\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe MVC design pattern separates the application's logic from the user interface.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe MVC concept can be represented graphically as follows:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cimg src=\"viewer/files/MVC.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"MVC\" width=\"561\" height=\"421\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/11/files/6805\" data-api-returntype=\"File\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's walk through what's happening in the diagram. Assume that you have an application that tracks your goals. Each time you delete or add a new goal, the controller updates the model by either deleting or adding a goal. In other words, the controller updates the model as per the user input.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe model then notifies the controller of the changes, which in turn updates the views to display the updated information. When you add your goals and the model is updated, the controller updates the view which displays the new goal on your site.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLet's look at each part separately and how they function:\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cstrong\u003eModel\u003c/strong\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis is the application's data structure. It represents the actual data that an app deals with, and it responds to requests from views and instructions from controllers to update itself. Moreover, a model does not depend on either view or controller.  In Angular applications, models are represented by objects. In the example of the goal application from earlier, our model would be:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003eclass Goal{\u003cbr\u003e  constructor(){}\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDon't worry about mastering the code right now - we'll be creating applications soon enough. For now, focus on what each part represents, and how they relate to one another.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cstrong\u003eView\u003c/strong\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eViews are what is presented to the user and how they interact with it. In other words, it's what the user actually sees on their screen, and can be made with HTML, CSS or Javascript. It displays the model data. In Angular, we can create a view in HTML by using double curly braces.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;h4 id=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"{{i}}\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e appStrikethrough\u0026gt; {{goal.name}} due on {{goal.completeDate|date|uppercase}} \u0026lt;\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e/h4\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch2\u003e\u003cstrong\u003eController\u003c/strong\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe controller is essentially the glue between the model and the view. It updates the view when the view changes and also adds event listeners to the view. Additionally, it updates the model when the user manipulates the view.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eSince the controller links both the model and the views, it can be separated into two; view controllers and model controllers\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eView controllers are responsible for pulling together the model used by the view and handling the input from the user of the view. For example, if you wanted to delete a goal from your goal application, you would have an event listener in the HTML that listens for when the user clicks the delete button and then a function that actually deletes the clicked goal.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003egoal.component.html\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026lt;button \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eclass\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\"btn btn-danger btn-sm\"\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e (click)=\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e'deleteGoal(i)'\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u0026gt;Delete Goal\u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn the example above the event listener is `(click)` and the function that deletes the goal is `deleteGoal(i)`\u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e For now, do not worry about how to create the function, we'll explain that later as we look at angular in depth. The important thing to understand for now is how the event listeners work together with functions as view controllers.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOn the other hand, model controllers contain the data to be displayed as well as the data to be collected as input in forms. It can also be functions that are invoked based on the user's activity such as clicking a button or making changes to the model data. For example, a function that adds a new goal to the model. Whenever you add a new goal through a form, there is a function that is responsible for adding that goal to your database. This function is a model controller because it interacts directly with your model. \u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-practice-meal-tracker","title":"Monday:Practice: Meal Tracker","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal: \u003c/strong\u003eContinue practising creating applications with Angular Cli while familiarizing yourself with the process of using services.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eWarm up\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is Dependency Injection? Why is it important?\u003c/li\u003e\r\n\u003cli\u003eWhat are services in angular 6?\u003c/li\u003e\r\n\u003cli\u003eWhat is Http service used for?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eCode\u003c/h3\u003e\r\n\u003ch4\u003eMeal Tracker\u003c/h4\u003e\r\n\u003cp\u003eCreate a meal tracking application where the user gets to keep track of the food they consume in each day. Here are some user stories to help you get started;\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eAs a user, I want to log a food I have eaten by submitting a form with food name, calories and details.\u003c/li\u003e\r\n\u003cli\u003eAs a user, I want to view a list of foods I have logged.\u003c/li\u003e\r\n\u003cli\u003eAs a user, I want options to view all foods, only high-calorie foods (more than 500 calories), or only lower-calorie foods (less than 500 calories).\u003c/li\u003e\r\n\u003cli\u003eI want to click a food to edit its name, details or calories (in case I decide to pretend my fries were 100 calories instead of 365).\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eMake sure you use at least one service to help you retrieve the meal from the meal array.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false},{"exportId":"monday-angular-apps","title":"Monday: Angular Apps","type":"WikiPage","content":"\u003ch2\u003eAngular Apps\u003c/h2\u003e\r\n\u003cp\u003eAfter that brief introduction to typescript and ES6, we can dive right into Angular. We will use the Angular\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCLI\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e-\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eCommand Line Interface\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto generate a new Angular app.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng new Goals\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis command will take some time to run but in essence, it is creating a new angular application by providing us with boilerplate code and by installing the latest\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enpm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edependencies that are needed in our project.\u003c/p\u003e\r\n\u003cp\u003eWhen the command is done we get a new shiny Angular app.\u003c/p\u003e\r\n\u003cp\u003eWe can now go into our newly created project and run the app to see what we have\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ cd Goals\u003cbr\u003e$ ng serve \r\n** NG Live Development Server is listening on localhost:\u003cspan class=\"hljs-number\"\u003e4200\u003c/span\u003e, open your browser on http://localhost:\u003cspan class=\"hljs-number\"\u003e4200\u003c/span\u003e/ **\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis opens a live development server that we can view our application on. We just type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttp://localhost:4200/\u003c/code\u003ein our browser’s URL tab. We can see the default Angular welcome page. But we haven’t even written any code how is the browser displaying content?\u003c/p\u003e\r\n\u003cp\u003eLet us open the new Angular app in our favorite editor. We immediately see a lot of files that we did not create but was generated by the Angular CLI. We will ignore most of them for now and head directly to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder. This is where we will write most of our code.\u003c/p\u003e\r\n\u003cp\u003eEvery new Project is created with one\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eComponent\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppComponent\u003c/code\u003e\u003cspan\u003e .\u003c/span\u003ewe will discuss what Components later on. Inside our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder we have another subfolder called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat is where our app component lives. It has a CSS file and template HTML file. It also has a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile where we define all our logic.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp.module.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estores all top-level configurations.\u003c/p\u003e\r\n\u003cp\u003eIn Angular, each component has a unique selector. This allows it to be called into any other component or to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eindex.html\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epage.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003esrc/index.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-doctype\"\u003e\u0026lt;!doctype html\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003elang\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"en\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003echarset\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"utf-8\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eGoals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebase\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"/\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"viewport\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"width=device-width, initial-scale=1\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elink\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erel\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"icon\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"image/x-icon\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"favicon.ico\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-root\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-root\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn our index page we render the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppcomponent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent to our page using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp-root\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emain.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile is responsible for importing the main module and bootstrapping the root component to be displayed first once we load the page.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Updating_Our_Components_46\"\u003e\u003c/a\u003eUpdating Our Components\u003c/h3\u003e\r\n\u003cp\u003eWe are going to be building a simple goal tracking application. We can start by updating our AppComponent.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-root'\u003c/span\u003e,\r\n  template: \u003cspan class=\"hljs-string\"\u003e`\r\n    \u0026lt;h1\u0026gt; My Goals \u0026lt;/h1\u0026gt;\r\n    \u0026lt;p\u0026gt; My goal for today is {{goal}} \u0026lt;/p\u0026gt;\r\n  `\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppComponent\u003c/span\u003e \u003c/span\u003e{\r\n  goal = \u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e;\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe change the contents of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.component.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. We create a property called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand give it a value. We then use backticks to generate multiline HTML code. We use the string interpolation\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e{{}}\u003c/code\u003eand the property to out template. Now we can serve the application and see the changes made.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Template_File_68\"\u003e\u003c/a\u003eTemplate File\u003c/h3\u003e\r\n\u003cp\u003eRight now our application is very small and we can get away with writing our HTML code together with our logic. In larger apps, we need to separate our logic from the View file. But in a Larger application, this might be very confusing and difficult to maintain. Each component is created with a HTML template file we can use to render template code.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-root'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./app.component.html'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppComponent\u003c/span\u003e \u003c/span\u003e{\r\n  goal = \u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFirst, we remove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etemplate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparameter and replace it with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etemplateUrl\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis will point to the template file.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e My Goals \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e My goal for today is {{goal}} \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe replace the initial content on the page with what was in our logic file. When we run the app again we should see nothing has changed.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-output-property-binding","title":"Tuesday: Output Property Binding","type":"WikiPage","content":"\u003ch2\u003eOutput Property Binding\u003c/h2\u003e\r\n\u003cp\u003eWe do not want to always be seeing the description. We can create a toggle effect to allow us toggle the goal description on and off.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/goal.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoal\u003c/span\u003e \u003c/span\u003e{\r\n    public showDescription:boolean;\r\n    constructor(public id:number, public name:string,public description:string){\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.showDescription=\u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e\r\n\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first update our goal class and add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eshowDescription\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty which is a boolean value and we set it to false immediately the object is created. We can now create the toggle button in our template file.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehr\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals;let i = index'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u0026gt;\u003c/span\u003e{{goal.name}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e  (\u003cspan class=\"hljs-attribute\"\u003eclick\u003c/span\u003e)=\u003cspan class=\"hljs-value\"\u003e'toogleDetails(i)'\u003c/span\u003e\u0026gt;\u003c/span\u003eToogle Details\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goal.showDescription\"\u003c/span\u003e [\u003cspan class=\"hljs-attribute\"\u003egoal\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e'goal'\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'goals.length \u0026gt; 5'\u003c/span\u003e\u0026gt;\u003c/span\u003eYou have too many goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first add an attribute\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ei=index\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis registers the position index of each list item. We then create a button and we pass in the attribute\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e(click)='toogleDetails(i)'\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eThis is an example of output property binding. Where when the button is clicked it will trigger the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoggleDetails\u003c/code\u003efunction that takes in the index position as an argument in our component. Let us create that function.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n    goals = [\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Find an online version and watch merlin find his son'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'I have to buy cookies for the parrot'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Diana has her birthday coming up soon'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Pupper likes expensive sancks'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Damn Math'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Cause I am an evil overlord'\u003c/span\u003e),\r\n\r\n    ]\r\n\r\n    toogleDetails(index){\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals[index].showDescription = !\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals[index].showDescription;\r\n    }\r\n\r\n  constructor() { }\r\n  ngOnInit() {\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoogleDetails\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction locates the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eat the index passed in and converts the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eshowDescription\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eProperty from true to false and vice verca . Now when we serve our application we can toggle the description on and off.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-custom-directives","title":"Tuesday:Custom Directives","type":"WikiPage","content":"\u003ch2\u003eCustom Directives\u003c/h2\u003e\r\n\u003cp\u003eWe talked about the two types of directives. We have structural directives that change the structure of the template and attribute directives that change the appearance and the behavior of the elements.\u003c/p\u003e\r\n\u003cp\u003eWe can also create our own custom attribute directives. What if we wanted instead of deleting a goal after finishing it we could strike through it. Let us create a directive that will help us with that behavior.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate directive  strikethrough\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet us write the code for that behavior.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003estrikethrough.directive.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Directive } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Directive({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'[appStrikethrough]'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eStrikethroughDirective\u003c/span\u003e \u003c/span\u003e{\r\n  constructor(){}\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eA directive is a class that has the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@directive\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eannotation. The annotation only has the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eselector\u003c/code\u003eproperty which is passed in as the attribute to the host element.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003estrikethrough.directive.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Directive,ElementRef } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Directive({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'[appStrikethrough]'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eStrikethroughDirective\u003c/span\u003e \u003c/span\u003e{\r\n  constructor(private elem:ElementRef){}\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eElementRef\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype that we use to define the property in the constructor. This constructor property will be the element that the directive will be hosted on.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003estrikethrough.directive.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Directive,ElementRef} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Directive({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'[appStrikethrough]'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eStrikethroughDirective\u003c/span\u003e \u003c/span\u003e{\r\n\r\n  constructor(private elem:ElementRef){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.elem.nativeElement.style.textDecoration=\u003cspan class=\"hljs-string\"\u003e'line-through'\u003c/span\u003e;\r\n  }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe then target the host element’s style attribute and change the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etextDecoration\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eline-through\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe can add the new attribute directive to our target element and view the changes.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u0026lt;h1\u0026gt;My Goals\u0026lt;/h1\u0026gt;\r\n\u0026lt;ul\u0026gt;\r\n    \u0026lt;div *ngFor='let goal of goals;let i = index'\u0026gt;\r\n        \u0026lt;li appStrikethrough\u0026gt;{{goal.name}}\u0026lt;/li\u0026gt;\r\n        \u0026lt;button  (click)='toogleDetails(i)'\u0026gt;Toogle Details\u0026lt;/button\u0026gt;\r\n\r\n    \u0026lt;app-goal-details *ngIf=\"goal.showDescription\" [goal]='goal' (isComplete)= 'completeGoal($event,i)'\u0026gt;\u0026lt;/app-goal-details\u0026gt;\r\n    \r\n    \u0026lt;/div\u0026gt;\r\n\u0026lt;/ul\u0026gt;\r\n\u0026lt;p *ngIf='goals.length \u0026gt; 5'\u0026gt;You have too many goals\u0026lt;/p\u0026gt;\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe use the directive selector attribute and add it to our list element. Now when we run the server we see all the list items have been stricken through. That's not really useful. We can have a setting that when we click the list item we can strike it and when we double-click it we can remove the strike.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003estrikethrough.directive.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Directive,ElementRef} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Directive({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'[appStrikethrough]'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eStrikethroughDirective\u003c/span\u003e \u003c/span\u003e{\r\n\r\n  constructor(private elem:ElementRef){ }\r\n  \r\n  private textDeco(action:string){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.elem.nativeElement.style.textDecoration=action;\r\n\r\n  }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe then create a function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etextDeco\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat targets the element reference and takes in a CSS style attribute as an argument.\u003c/p\u003e\r\n\u003cp\u003eWe will target the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estyle.textDecoration\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estyle and it can only have two states\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor when the goal is not completed and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eline-through\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen the goal is complete.\u003cbr\u003e\u003cstrong\u003estrikethrough.directive.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Directive,ElementRef,HostListener} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Directive({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'[appStrikethrough]'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eStrikethroughDirective\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \r\n  constructor(private elem:ElementRef){}\r\n\r\n  @HostListener(\u003cspan class=\"hljs-string\"\u003e\"click\"\u003c/span\u003e) onClicks(){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.textDeco(\u003cspan class=\"hljs-string\"\u003e\"line-through\"\u003c/span\u003e)\r\n  }\r\n\r\n  @HostListener(\u003cspan class=\"hljs-string\"\u003e\"dblclick\"\u003c/span\u003e) onDoubleClicks(){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.textDeco(\u003cspan class=\"hljs-string\"\u003e\"None\"\u003c/span\u003e)\r\n  }\r\n\r\n  private textDeco(action:string){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.elem.nativeElement.style.textDecoration=action;\r\n\r\n  }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe then import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHostListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eannotation. This will be responsible for capturing events that occur on the host element. We create two\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHostListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eannotation functions that listen to single clicks and double clicks. When a user clicks the host element once the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etextDeco\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction is called and a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eline-through\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis passed an argument. When the user double-clicks the host element we pass in None as an argument to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etextDeco\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction.\u003c/p\u003e\r\n\u003cp\u003eWe can now run our application and test out our new features.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-form-component","title":"Wednesday:Form Component","type":"WikiPage","content":"\u003ch2\u003eCreate Goal Form\u003c/h2\u003e\r\n\u003cp\u003eWe now need to create a new goal. We need to create a form to allow us to do that. Let us generate a form component.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate component goal-form\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis will generate a new component where we will define our form.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-form.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container-fluid\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e\u0026gt;\u003c/span\u003eName\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"description\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDescription\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etextarea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"description\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erows\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etextarea\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"complete\"\u003c/span\u003e\u0026gt;\u003c/span\u003eCompletion\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'date'\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"complete\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a new form with 3 input tags for the new goal’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ename\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e,\u003ccode\u003edescription\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompletionDate\u003c/code\u003e.\u003cbr\u003eWe need to then add the form component to the goal component where it will be displayed.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal-form\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal-form\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n..........\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp-goal-form\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag to the parent\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent. To make template forms work in angular applications we need to import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eforms\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule to our application.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp.module.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edefines the applications root module. We define all external modules used in the application and declare the components that belong to the module. When we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eng generate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand Angular CLI automatically declares the components for us in the root module.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { BrowserModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/platform-browser'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { NgModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {FormsModule} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/forms'\u003c/span\u003e;\r\n..............\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule\r\n  ],\r\n..........\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the above code excerpt, we add the following line to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp.module.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile.\u003cbr\u003e\u003ccode\u003eimport {FormsModule} from '@angular/forms';\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis imports the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFormsModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the root module. We then place the newly imported module to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimports\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-interview-questions","title":"Thursday: Interview Questions","type":"WikiPage","content":"\u003ch2\u003eTwo Day Project Continues\u003c/h2\u003e\r\n\u003cp\u003eContinue building with your pair the giphy\u003cstrong\u003e clone website.\u003c/strong\u003e Make sure you make regular commits while pushing your code to Github and make sure you have clear commit messages\u003c/p\u003e\r\n\u003ch2\u003eAngular 6 Interview Questions\u003c/h2\u003e\r\n\u003cp\u003eThese are some of the Interview questions you might encounter on Angular 6. discuss with your pair and also search online for other questions.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is Angular 6?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat are the key components of Angular 6?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eExplain Modules in Angular 6\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eExplain Components in Angular 6\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat are Angular 6 directives? Explain with examples.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is CLI?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is Dependency Injection? Explain with examples.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhen does ngOnInit event get called in Angular 6 Application Lifecycle?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWhat are Event Emitters and how do they work in Angular 6?\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eExplain Bootstrapping in an Angular Project\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false},{"exportId":"monday-components","title":"Monday: Components","type":"WikiPage","content":"\u003ch2\u003eComponents\u003c/h2\u003e\r\n\u003cp\u003eThe browser has a set list of tags that it understands and knows how to render to the user. But, what if we wanted to teach the browser new tags? How would we go about it? This is where components come in handy.\u003c/p\u003e\r\n\u003cp\u003eComponents are the building blocks of angular applications. We can nest components inside other components to make up larger components. Each Angular app has to have a root component which acts as the top-level component and is rendered first to the user.\u003c/p\u003e\r\n\u003cp\u003eTo bootstrap, an angular application means we tell the browser to render the top level component that will render its child component.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Structure_of_a_Component_8\"\u003e\u003c/a\u003eStructure of a Component\u003c/h3\u003e\r\n\u003cp\u003eComponents have 2 parts:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eThe Component Annotation\u003c/li\u003e\r\n\u003cli\u003eThe Component definition class.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eWe will use our AppComponent file to view these different sections.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-root'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./app.component.html'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppComponent\u003c/span\u003e \u003c/span\u003e{\r\n  constructor(){}\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimport\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekeyword to import modules we want to use in our application.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@angular/core\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis is where we want to find our modules.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Component_Annotation_31\"\u003e\u003c/a\u003eComponent Annotation\u003c/h4\u003e\r\n\u003cp\u003eAnnotations are ways to add functionality to our code during compilation.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-root'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./app.component.html'\u003c/span\u003e\r\n})\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn Angular, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Component\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eannotation to add metadata to our Component class.\u003cbr\u003eIn this example, we have the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eselector\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute to define a selector for our component and also the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etemplateUrl\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute to define the location of our template file.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Component_Defination_Class_43\"\u003e\u003c/a\u003eComponent Definition Class\u003c/h4\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppComponent\u003c/span\u003e \u003c/span\u003e{\r\n  constructor(){}\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis is a normal javascript class that will be used to define the logic of the component. We export the class so that we can import it anywhere we need it in the application. We also define a constructor function that will help us create a new instance of the class.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Displaying_an_Array_51\"\u003e\u003c/a\u003eDisplaying an Array\u003c/h4\u003e\r\n\u003cp\u003eNow we are typically going to be having more than one goal so we want to store our goals in an array and display them.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-root'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./app.component.html'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppComponent\u003c/span\u003e \u003c/span\u003e{\r\n    goals: string[];\r\n\r\n  constructor(){\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals = [\u003cspan class=\"hljs-string\"\u003e\"Watch Finding Nemo\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"Buy Cookies\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"Get new phone case\"\u003c/span\u003e];\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a new property in our class called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand we give it a type of string array. We then initialize the property with an array of goals we want to complete.\u003cbr\u003eWe can now display this list in the template.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals'\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engFor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edirective to loop through a list of items. A directive is a class that changes either the appearance and behavior of an element or changes the structure of a template, by adding or removing elements. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engFor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edirective is a structural directive that changes the structure of the element.\u003cbr\u003eIn the statement above we are telling the directive to loop through the list of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand assign each a temporary variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e. We then display each\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable as a list element.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-emitting-events","title":"Tuesday:Emitting Events","type":"WikiPage","content":"\u003ch2\u003eEmitting Events\u003c/h2\u003e\r\n\u003cp\u003eWhen we want a child component to communicate with the Parent component we have them emit events that will be taken by the parent.\u003c/p\u003e\r\n\u003cp\u003eLet us add a delete button to our goal-details component that will delete a goal.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details/goal-details.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.description}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eclick\u003c/span\u003e) = '\u003cspan class=\"hljs-attribute\"\u003egoalComplete\u003c/span\u003e(\u003cspan class=\"hljs-attribute\"\u003etrue\u003c/span\u003e)'\u0026gt;\u003c/span\u003e Complete \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a button that creates an output event calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoalComplete\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and passing in a boolean true.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details/goal-details.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component, OnInit,Input,Output,EventEmitter } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goal} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goal'\u003c/span\u003e\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-goal-details'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./goal-details.component.html'\u003c/span\u003e,\r\n  styleUrls: [\u003cspan class=\"hljs-string\"\u003e'./goal-details.component.css'\u003c/span\u003e]\r\n})\r\nexport class GoalDetailsComponent implements OnInit {\r\n\r\n  @Input() goal:Goal;\r\n  @Output() isComplete= \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e EventEmitter\u0026lt;boolean\u0026gt;();\r\n\r\n  goalComplete(complete:boolean){\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.isComplete.emit(complete);\r\n  }\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOutput\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edecorator and the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEventEmitter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. We then create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEventEmitter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject which will take on a boolean.\u003cbr\u003eWe create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoalComplete\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and inside it we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eemit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eisComplete\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEventEmitter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. This passes this event to the parent component.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals;let i = index'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u0026gt;\u003c/span\u003e{{goal.name}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e  (\u003cspan class=\"hljs-attribute\"\u003eclick\u003c/span\u003e)=\u003cspan class=\"hljs-value\"\u003e'toogleDetails(i)'\u003c/span\u003e\u0026gt;\u003c/span\u003eToogle Details\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goal.showDescription\"\u003c/span\u003e [\u003cspan class=\"hljs-attribute\"\u003egoal\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e'goal'\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eisComplete\u003c/span\u003e)= '\u003cspan class=\"hljs-attribute\"\u003ecompleteGoal\u003c/span\u003e($\u003cspan class=\"hljs-attribute\"\u003eevent\u003c/span\u003e,\u003cspan class=\"hljs-attribute\"\u003ei\u003c/span\u003e)'\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n  \r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'goals.length \u0026gt; 5'\u003c/span\u003e\u0026gt;\u003c/span\u003eYou have too many goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe capture the event being transmitted using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparenthesis. When we receive the event we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompleteGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and pass in the special\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$event\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable. This variable is a placeholder for values that are emitted with the event. We also pass in the index of the goal.\u003c/p\u003e\r\n\u003cp\u003eWe can now create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompleteGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction in our component.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e.............\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    goals = [\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Find an online version and watch merlin find his son'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'I have to buy cookies for the parrot'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Diana has her birthday coming up soon'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Pupper likes expensive sancks'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Damn Math'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Cause I am an evil overlord'\u003c/span\u003e),\r\n\r\n    ]\r\n\r\n    completeGoal(isComplete,index){\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (isComplete){\r\n            \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals.splice(index,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\r\n            }\r\n            }\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompleteGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eFunction where we use the javascript\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esplice\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to remove the complete goal and delete it from our array.\u003c/p\u003e\r\n\u003cp\u003eNow when we run the server we can click the delete button the goal disappears.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-routing-module","title":"Tuesday: Routing Module","type":"WikiPage","content":"\u003ch2\u003eRouting Module\u003c/h2\u003e\r\n\u003cp\u003eWe will now create a new module to handle all the routing functionality. This is a design choice to minimize complexity as our application grows larger\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003eng generate module routing\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003erouting/routing.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { NgModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { CommonModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/common'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {RouterModule,Routes} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/router'\u003c/span\u003e\r\n\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { GoalComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goal/goal.component'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { AboutComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../about/about.component'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { NotFoundComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../not-found/not-found.component'\u003c/span\u003e;\r\n\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e// Defining routes\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e routes:Routes=[\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"goals\"\u003c/span\u003e,component:GoalComponent},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"about\"\u003c/span\u003e,component:AboutComponent},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,redirectTo:\u003cspan class=\"hljs-string\"\u003e\"/goals\"\u003c/span\u003e,pathMatch:\u003cspan class=\"hljs-string\"\u003e\"full\"\u003c/span\u003e},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e'**'\u003c/span\u003e,component:NotFoundComponent}\r\n]\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forRoot(routes)\r\n  ],\r\n  exports:[RouterModule],\r\n  declarations: []\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRoutingModule\u003c/span\u003e \u003c/span\u003e{ }\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFirst, we move all the \u003cspan\u003e\u003c/span\u003e\u003ccode\u003erouter\u003c/code\u003e\u003cspan\u003e\u003c/span\u003emodule imports from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp.module.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the new routing module. Next, we import the components we will need for in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eroutes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray. We then move the routes array to the new routing module.\u003c/p\u003e\r\n\u003cp\u003eWe place the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRouterModule.forRoot()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule in our imports array and pass in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eroutes\u003c/code\u003earray.\u003cbr\u003eWe also place the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRouterModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein an exports array. We now need to add this module to our root module.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {RoutingModule} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./routing/routing.module'\u003c/span\u003e\r\n...........\r\n@NgModule({\r\n ...........\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    RoutingModule,\r\n    HttpClientModule,\r\n    NgProgressModule.forRoot(),\r\n    NgProgressHttpClientModule,\r\n\r\n  ],\r\n ..........\r\n})\r\nexport class AppModule { }\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe import the new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRoutingModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand place it inside our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimports\u003c/code\u003e. array. We can now load our page and see that nothing has changed but how we configure our files is now more flexible.\u003c/p\u003e","frontPage":false},{"exportId":"monday-angular-file-review","title":"Monday: Angular File Review","type":"WikiPage","content":"\u003ch2\u003e\n\u003cspan\u003e Angular File \u003c/span\u003eReview\u003c/h2\u003e\r\n\u003cp\u003eWe can now examine the files inside our goals app. A good starting point is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eREADME\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile where we can see all the Angular commands we can use to work with our app.\u003c/p\u003e\r\n\u003cp\u003eWe will mostly work inside our\u003cspan\u003e \u003c/span\u003e\u003cem\u003esrc/\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003esrc\r\n|\r\n|---app/\r\n|      | ---app.component.css\r\n|      | ---app.component.html\r\n|      | ---app.component.spec.ts\r\n|      | ---app.component.ts\r\n|      | ---app.module.ts\r\n|---assets/\r\n|      | ---.gitkeep\r\n|---environments/\r\n|      | ---environment.prod.ts\r\n|      | ---environment.ts\r\n|---favicon.ico\r\n|---index.html\r\n|---main.ts\r\n|---polyfills.ts\r\n|---styles.css\r\n|---test.ts\r\n|---tsconfig.app.json\r\n|    tsconfig.spec.json\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThese files and folders are what are found in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esrc\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder where our app will live. Angular documentation defines them this way:\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"appappcomponenttshtmlcssspects_30\"\u003e\u003c/a\u003eapp/app.component.{ts,html,css,spec.ts}\u003c/h3\u003e\r\n\u003cp\u003eDefines the AppComponent along with an HTML template, CSS stylesheet, and a unit test. It is the root component of what will become a tree of nested components as the application evolves.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"appappmodulets_34\"\u003e\u003c/a\u003eapp/app.module.ts\u003c/h3\u003e\r\n\u003cp\u003eDefines AppModule, the root module that tells Angular how to assemble the application. Right now it declares only the AppComponent. Soon there will be more components to declare.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"assets_38\"\u003e\u003c/a\u003eassets/*\u003c/h3\u003e\r\n\u003cp\u003eA folder where you can put images and anything else to be copied wholesale when you build your application.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"environments_42\"\u003e\u003c/a\u003eenvironments/*\u003c/h3\u003e\r\n\u003cp\u003eThis folder contains one file for each of your destination environments, each exporting simple configuration variables to use in your application. The files are replaced on-the-fly when you build your app. You might use a different API endpoint for development than you do for production or maybe different analytics tokens. You might even use some mock services. Either way, the CLI has you covered.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"faviconico_46\"\u003e\u003c/a\u003efavicon.ico\u003c/h3\u003e\r\n\u003cp\u003eEvery site wants to look good on the bookmark bar. Get started with your very own Angular icon.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"indexhtml_50\"\u003e\u003c/a\u003eindex.html\u003c/h3\u003e\r\n\u003cp\u003eThe main HTML page that is served when someone visits your site. Most of the time you’ll never need to edit it. The CLI automatically adds all js and css files when building your app so you never need to add any \u0026lt;script\u0026gt; or \u0026lt;link\u0026gt; tags here manually.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"maints_54\"\u003e\u003c/a\u003emain.ts\u003c/h3\u003e\r\n\u003cp\u003eThe main entry point for your app. Compiles the application with the Just-in-Time (JIT) compiler and bootstraps the application’s root module (AppModule) to run in the browser. You can also use the Ahead-of-Time (AOT) compiler without changing any code by appending the–aot flag to the ng build and ng serve commands.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"polyfillsts_58\"\u003e\u003c/a\u003epolyfills.ts\u003c/h3\u003e\r\n\u003cp\u003eDifferent browsers have different levels of support of the web standards. Polyfills help normalize those differences. You should be pretty safe with core-js and zone.js, but be sure to check out the Browser Support guide for more information.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"stylescss_62\"\u003e\u003c/a\u003estyles.css\u003c/h3\u003e\r\n\u003cp\u003eYour global styles go here. Most of the time you’ll want to have local styles in your components for easier maintenance, but styles that affect all of your app need to be in a central place.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"testts_66\"\u003e\u003c/a\u003etest.ts\u003c/h3\u003e\r\n\u003cp\u003eThis is the main entry point for your unit tests. It has some custom configuration that might be unfamiliar, but it’s not something you’ll need to edit.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"tsconfigappspecjson_70\"\u003e\u003c/a\u003etsconfig.{app|spec}.json\u003c/h3\u003e\r\n\u003cp\u003eTypeScript compiler configuration for the Angular app (tsconfig.app.json) and for the unit tests (tsconfig.spec.json).\u003c/p\u003e\r\n\u003ch2\u003e\n\u003ca id=\"The_root_folder_74\"\u003e\u003c/a\u003eThe root folder\u003c/h2\u003e\r\n\u003cpre\u003e\u003ccode\u003eGoals\r\n|---e2e/\r\n|   |---app.e2e-spec.ts\r\n|   |---app.po.ts\r\n|   |---tsconfig.e2e.json\r\n|---node_modules/...\r\n|---src/...\r\n|---.angular-cli.json\r\n|---.editorconfig\r\n|---.gitignore\r\n|---karma.conf.js\r\n|---package.json\r\n|---protractor.conf.js\r\n|---README.md\r\n|---tsconfig.json\r\n|---tslint.json\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\n\u003ca id=\"e2e_93\"\u003e\u003c/a\u003ee2e/\u003c/h3\u003e\r\n\u003cp\u003eInside e2e/ live the end-to-end tests. They shouldn’t be inside src/ because e2e tests are really a separate app that just so happens to test your main app. That’s also why they have their own tsconfig.e2e.json.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"node_modules_97\"\u003e\u003c/a\u003enode_modules/\u003c/h3\u003e\r\n\u003cp\u003eNode.js creates this folder and puts all third party modules listed in package.json inside of it.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"angularclijson_101\"\u003e\u003c/a\u003e.angular-cli.json\u003c/h3\u003e\r\n\u003cp\u003eConfiguration for Angular CLI. In this file you can set several defaults and also configure what files are included when your project is built. Check out the official documentation if you want to know more.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"editorconfig_105\"\u003e\u003c/a\u003e.editorconfig\u003c/h3\u003e\r\n\u003cp\u003eSimple configuration for your editor to make sure everyone that uses your project has the same basic configuration. Most editors support an .editorconfig file. See\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://editorconfig.org/\"\u003ehttp://editorconfig.org\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor more information.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"gitignore_109\"\u003e\u003c/a\u003e.gitignore\u003c/h3\u003e\r\n\u003cp\u003eGit configuration to make sure autogenerated files are not commited to source control.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"karmaconfjs_113\"\u003e\u003c/a\u003ekarma.conf.js\u003c/h3\u003e\r\n\u003cp\u003eUnit test configuration for the Karma test runner, used when running ng test.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"packagejson_117\"\u003e\u003c/a\u003epackage.json\u003c/h3\u003e\r\n\u003cp\u003enpm configuration listing the third party packages your project uses. You can also add your own custom scripts here.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"protractorconfjs_121\"\u003e\u003c/a\u003eprotractor.conf.js\u003c/h3\u003e\r\n\u003cp\u003eEnd-to-end test configuration for Protractor, used when running ng e2e.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"READMEmd_125\"\u003e\u003c/a\u003e\u003ca href=\"http://readme.md/\"\u003eREADME.md\u003c/a\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eBasic documentation for your project, pre-filled with CLI command information. Make sure to enhance it with project documentation so that anyone checking out the repo can build your app!\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"tsconfigjson_129\"\u003e\u003c/a\u003etsconfig.json\u003c/h3\u003e\r\n\u003cp\u003eTypeScript compiler configuration for your IDE to pick up and give you helpful tooling.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"tslintjson_133\"\u003e\u003c/a\u003etslint.json\u003c/h3\u003e\r\n\u003cp\u003eLinting configuration for TSLint together with Codelyzer, used when running ng lint. Linting helps keep your code style consistent.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-submit-form","title":"Wednesday: Submit Form","type":"WikiPage","content":"\u003ch2\u003eSubmitting forms using ngSubmit\u003c/h2\u003e\r\n\u003cp\u003eCurrently when we click our submit button nothing happens. We can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engSubmit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevent to call a function that will handle the form inputs.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-form.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e......\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003engSubmit\u003c/span\u003e)=\u003cspan class=\"hljs-value\"\u003e'submitGoal()'\u003c/span\u003e #\u003cspan class=\"hljs-attribute\"\u003egoalForm\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'ngForm'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n....\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engSubmit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eevent attribute that calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esubmitGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction which we will create next.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-form.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component, OnInit,Output,EventEmitter } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalFormComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n    newGoal=\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e());\r\n    @Output() addGoal=\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e EventEmitter\u0026lt;Goal\u0026gt;();\r\n    \r\n    submitGoal(){\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.addGoal.emit(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.newGoal);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOutput\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEventEmitter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunctions. Next we create a new event emitter object\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich is of type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoal\u003c/code\u003e. We create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esubmitGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction where we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eemit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod and pass in the newGoal property.\u003c/p\u003e\r\n\u003cp\u003eSo now when we click the submit button the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esubmitGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction is called and the new goal that has properties gotten from the form is emitted to the parent component.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal-form\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eaddGoal\u003c/span\u003e)=\u003cspan class=\"hljs-value\"\u003e\"addNewGoal($event)\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal-form\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n............\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe then update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent template. We add the output event\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat triggers the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddNewGoal\u003c/code\u003e\u003cspan\u003e function\u003c/span\u003e passing in the new goal that was emitted.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n    goals = [\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Find an online version and watch merlin find his son'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'I have to buy cookies for the parrot'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Diana has her birthday coming up soon'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Pupper likes expensive sancks'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Damn Math'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Cause I am an evil overlord'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n\r\n    ]\u003cbr\u003e.................\r\n\r\n    addNewGoal(goal){\r\n        \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e goalLength = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals.length;\r\n        goal.id=goalLength+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\r\n        goal.completeDate = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(goal.completeDate)\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals.push(goal)\r\n\r\n    }\u003cbr\u003e....................\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe then create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddNewGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction that takes a goal object as an argument. We first need to change the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty of the goal. We get the length of the array of goals and store it in the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoalLength\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe then add one to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoalLength\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand set that as the new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the goal. We then set the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompleteDat\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty of the goal object to a Date Object. Lastly, we push the new goal to our array of goals.\u003c/p\u003e\r\n\u003cp\u003eWhen you run the server now you can add a new goal and see it appear on the screen.\u003c/p\u003e","frontPage":false},{"exportId":"monday-httpclient","title":"Monday :HttpClient","type":"WikiPage","content":"\u003ch2\u003eHttpClient\u003c/h2\u003e\r\n\u003cp\u003eAngular provides the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule that allows our applications to communicate with backend services using the HTTP protocol. We are going to use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule to access a random quote API to display to our users. First, we need to setup the module\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {HttpClientModule} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/common/http'\u003c/span\u003e\r\n...............\r\n@NgModule({\r\n\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule\r\n  ],\r\n .......\r\n})\r\nexport class AppModule { }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClientModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@angular/common/http\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand then place it in our imports array. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClientModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eallows us to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our application.\u003cbr\u003eNext we need to create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eQuote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass that will help us convert our HTTP response to quote instances.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate class quote-class/quote\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003equote-class/quote.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eQuote\u003c/span\u003e \u003c/span\u003e{\r\n    constructor(public quote:string,public author:string){}\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eQuote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat takes 2 arguments in the constructor which are the class properties. It takes in a string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003equote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the.\u003cspan\u003e\u003c/span\u003e\u003ccode\u003eauthor\u003c/code\u003e\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Making_a_HTTP_request_33\"\u003e\u003c/a\u003eMaking a HTTP request\u003c/h3\u003e\r\n\u003cp\u003eWhen we place the API URL\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://talaikis.com/api/quotes/random/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our browser we get the following response with a random quote\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e{\"quote\":\"I do not fear computers. I fear the lack of them.\",\"author\":\"Isaac Asimov\",\"cat\":\"computers\"}\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethis might be difficult to read. We can use the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jsonprettyprint.com/\"\u003eJSON pretty print tool\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto prettify it.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\r\n  \"\u003cspan class=\"hljs-attribute\"\u003equote\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"I do not fear computers. I fear the lack of them.\"\u003c/span\u003e\u003c/span\u003e,\r\n  \"\u003cspan class=\"hljs-attribute\"\u003eauthor\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"Isaac Asimov\"\u003c/span\u003e\u003c/span\u003e,\r\n  \"\u003cspan class=\"hljs-attribute\"\u003ecat\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"computers\"\u003c/span\u003e\r\n\u003c/span\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe see the request returns a JSON object with 3 properties a quote, an author, and the category. Let us see how we can make the request in Angular\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {HttpClient} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/common/http'\u003cbr\u003e\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Quote} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../quote-class/quote'\u003c/span\u003e\r\n.......\r\nexport class GoalComponent implements OnInit {\r\n.......\r\n    quote:Quote;\r\n......\r\n  constructor(goalService:GoalService,alertService:AlertsService,private http:HttpClient) {\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals = goalService.getGoals();\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.alertService = alertService;\r\n   }\r\n\r\n  ngOnInit() {\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.http.get(\u003cspan class=\"hljs-string\"\u003e\"https://talaikis.com/api/quotes/random/\"\u003c/span\u003e).subscribe(data=\u0026gt;{\r\n        \u003cspan class=\"hljs-comment\"\u003e// Successful API request.\u003c/span\u003e\r\n    })\r\n  }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule then we inject it to our constructor. We then use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eget\u003c/code\u003emethod and pass to the API URL. we then call the subscribe function that takes in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction that is called when the API request is successful and returns a response.\u003cbr\u003eWe place the HTTP request in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engOnInit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elifecycle hook to be called immediately the component is initialized.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Handling_HTTP_response_72\"\u003e\u003c/a\u003eHandling HTTP response\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule converts the response into an object but does not specify what type of object it is. We can tell\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhat type of response we are expecting by defining an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einterface\u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {HttpClient} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/common/http'\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Quote} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../quote-class/quote'\u003c/span\u003e\r\n.......\r\nexport class GoalComponent implements OnInit {\r\n.......\r\n    quote:Quote;\r\n......\r\n  constructor(goalService:GoalService,alertService:AlertsService,private http:HttpClient) {\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals = goalService.getGoals();\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.alertService = alertService;\r\n   }\r\n\r\n ngOnInit() {\r\n\r\n    interface ApiResponse{\r\n        quote:string;\r\n        author:string\r\n    }\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.http.get\u0026lt;ApiResponse\u0026gt;(\u003cspan class=\"hljs-string\"\u003e\"https://talaikis.com/api/quotes/random/\"\u003c/span\u003e).subscribe(data=\u0026gt;{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote= \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Quote(data.quote,data.author)\r\n    })\r\n  }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAn\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einterface\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the description of the actions an object can do. Here we create an interface\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eApiResponse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat contains the properties that we need from the response. We then pass the interface with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eget\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. If the response is successful we create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eQuote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstance and passing in the response properties. We then assign this new quote instance to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003equote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eblockquote\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text-center text-lg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e{{quote.quote}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003efooter\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ecite\u003c/span\u003e\u0026gt;\u003c/span\u003e{{quote.author}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ecite\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003efooter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eblockquote\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n.........\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe lastly update our HTML template and add the quote and author inside a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eblockquote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag that is at the top of the page.\u003cbr\u003eNow we can run our server and when we load the template we see a random quote displayed.\u003c/p\u003e","frontPage":false},{"exportId":"monday-creating-a-service","title":"Monday: Creating a service","type":"WikiPage","content":"\u003ch2\u003e Creating a service\u003c/h2\u003e\r\n\u003cp\u003eWe will now create a simple service that allows us to retrieve the goals from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray we created and to inject it into the goals Component. This service could emulate the process of getting data from a remote server to the application.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003eng generate service goals/goal\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis command generates a\u003cspan\u003e \u003c/span\u003e\u003cem\u003egoal.service.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile inside a folder called\u003cspan\u003e \u003c/span\u003e\u003cem\u003egoals\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoals/goal.service.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Injectable } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Injectable({\u003cbr\u003e  providedIn: 'root' //\u003c/code\u003e\u003cspan class=\"com\"\u003ewe declare that this service should be created \u003c/span\u003e\u003cspan class=\"com\"\u003eby the root application injector.\u003c/span\u003e\u003ccode class=\"language-javascript\"\u003e\u003cbr\u003e})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalService\u003c/span\u003e \u003c/span\u003e{\u003cbr\u003e  \u003cbr\u003e  constructor() {} \u003cbr\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Injectable()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edecorator is essential in creating a service because angular uses it to define a service class that might require dependencies. \u003ccode\u003eprovidedIn \u003c/code\u003e specifies that the root injector is responsible for creating an instance of the \u003ccode\u003eGoalService\u003c/code\u003e and making it available throughout the application.\u003c/p\u003e\r\n\u003cp\u003eOur service does not require any dependencies as of yet but if it did they would be defined in the constructor.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoals/goal.service.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Injectable } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goals} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"../goals\"\u003c/span\u003e\r\n\r\n@Injectable()\r\nexport class GoalService {\r\n  getGoals(){\r\n    return Goals;\r\n  }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFirst, we import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray then create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetGoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that returns the array. If we were getting data from a remote server this process would have to be asynchronous.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-ngmodel","title":"Wednesday: NgModel","type":"WikiPage","content":"\u003ch2\u003eTwo-way Data Binding\u003c/h2\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFormModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003egives the application access to all of the template-driven forms features, including\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engModel\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engModel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eallows us to perform two-way data binding, this is transmitting data from our template to our Component class and data from the component class back to the template.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-form.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goal} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goal'\u003c/span\u003e;\r\n.......\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalFormComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n    newGoal=\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e());\r\n    ........\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFirst, we import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.Then we create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoalFormComponent\u003c/code\u003eclass. This will be a default object that will be changed by the form inputs.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-form.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container-fluid\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e #\u003cspan class=\"hljs-attribute\"\u003egoalForm\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'ngForm'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e\u0026gt;\u003c/span\u003eName\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e [(\u003cspan class=\"hljs-attribute\"\u003engModel\u003c/span\u003e)]=\u003cspan class=\"hljs-value\"\u003e\"newGoal.name\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!--Testing  to see if we get data--\u0026gt;\u003c/span\u003e\r\n                Display {{newGoal.name}}\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"description\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDescription\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etextarea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"description\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erows\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etextarea\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"complete\"\u003c/span\u003e\u0026gt;\u003c/span\u003eCompletion\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'date'\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"complete\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-success btn-lg\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAdd Goal\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe add a template reference variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoalForm\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our form tag and equate it to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engForm\u003c/code\u003e. This will provide the form element with additional features and monitor the changes and validity of input elements.\u003c/p\u003e\r\n\u003cp\u003eWe then add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e[(ngModel)]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute to our name input and equate it to the name attribute of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject we created in our Component class. We then define a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ename\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute which is a requirement when using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e[(ngModel)]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand a form.\u003c/p\u003e\r\n\u003cp\u003eWe then create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDisplay {{newGoal.name}}\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eline where we temporarily display the data is being received. Now when we start typing in the goal name input box we can see the data being displayed. This confirms that two-way data binding is occurring.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-404-pages","title":"Tuesday: 404 Pages","type":"WikiPage","content":"\u003ch2\u003e404 page\u003c/h2\u003e\r\n\u003cp\u003eWhat if the user requests a route that does not exist. We want to redirect our users to a custom 404 Page.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate component not-found\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003enot-found.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text-center\"\u003c/span\u003e\u0026gt;\u003c/span\u003eSorry We can't find It\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enot-found\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent and add some help text in the template file.We can add it to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eroutes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e...........\r\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e routes:Routes=[\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"goals\"\u003c/span\u003e,component:GoalComponent},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"about\"\u003c/span\u003e,component:AboutComponent},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e'**'\u003c/span\u003e,component:NotFoundComponent}\r\n  \r\n.........\r\n]\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e**\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto describe a wildcard route. This is a route that is not specified in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eroutes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray. We can now load our home template file and we notice something when we load the home page or the ‘/’ route we are directed to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e404\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epage. We can redirect our users to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent every time the home route is loaded.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"redirect_26\"\u003e\u003c/a\u003eredirect\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e...........\r\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e routes:Routes=[\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"goals\"\u003c/span\u003e,component:GoalComponent},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"about\"\u003c/span\u003e,component:AboutComponent},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,redirectTo:\u003cspan class=\"hljs-string\"\u003e\"/goals\"\u003c/span\u003e,pathMatch:\u003cspan class=\"hljs-string\"\u003e\"full\"\u003c/span\u003e},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e'**'\u003c/span\u003e,component:NotFoundComponent}\r\n]\r\n.........\r\n]\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eA redirect route requires a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epathMatch\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty that tells the router how o match the URL with the path of a route. This app shows that the router will only redirect to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e/goals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eroute if the URL matches\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efully. Now when we load the home URL we get redirected to the goals route.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-passing-parameters","title":"Tuesday: Passing Parameters","type":"WikiPage","content":"\u003ch2\u003ePassing Parameters\u003c/h2\u003e\r\n\u003cp\u003eNext, we can create a route that maps to a specific goal. Let us do that inside our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eroutes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003erouting/routing.module\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode\u003e...........\r\n// Defining routes\r\nconst routes:Routes=[\r\n  {path:\"goals\",component:GoalComponent},\r\n  {path:\"about\",component:AboutComponent},\r\n  {path:\"\",redirectTo:\"/goals\",pathMatch:\"full\"},\r\n  {path:'goals/:id',component:GoalDetailsComponent},\r\n  {path:'**',component:NotFoundComponent}\r\n]\r\n.............\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a new route that has an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e:id\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etoken in the path allowing a slot for a route Parameter. We will insert the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof the goal to retrieve that specific goal. We then need to make some changes in our templates.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eng-progress\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eng-progress\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!--Quote Container--\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eblockquote\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text-center text-lg\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e{{quote.quote}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003efooter\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ecite\u003c/span\u003e\u0026gt;\u003c/span\u003e{{quote.author}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ecite\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003efooter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eblockquote\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!--Quote Container end--\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!--Form Container--\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal-form\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eaddGoal\u003c/span\u003e)=\u003cspan class=\"hljs-value\"\u003e\"addNewGoal($event)\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal-form\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!--Form Container end--\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!--Goals container--\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"let goal of goals;let i = 'index'\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh4\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"{{i}}\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eappStrikethrough\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.name}} due on {{goal.completeDate|date|uppercase}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh4\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-primary\"\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eclick\u003c/span\u003e)=\u003cspan class=\"hljs-value\"\u003egoToUrl(goal.id)\u003c/span\u003e\u0026gt;\u003c/span\u003eView Details\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-danger\"\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eclick\u003c/span\u003e) = '\u003cspan class=\"hljs-attribute\"\u003edeleteGoal\u003c/span\u003e(\u003cspan class=\"hljs-attribute\"\u003ei\u003c/span\u003e)'\u0026gt;\u003c/span\u003e Delete Goal \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n \r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e\u0026lt;!--Goals container end--\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'goals.length \u0026gt; 5'\u003c/span\u003e\u0026gt;\u003c/span\u003eYou have too many goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoal\u003c/code\u003ecomponents template file. Notice we remove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;app-goal-details\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag and we replace the toggle button with two new buttons. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView Details\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebutton calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoToUrl()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction that takes in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal.id\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich will be responsible for triggering the navigation to the details component for that specific goal. We moved the Delete goal button from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoal-Details\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoal\u003c/code\u003ecomponent and it calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edeleteGoal()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and takes in the index of the goal.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e............\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Router} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/router'\u003c/span\u003e;\r\n............\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    goToUrl(id){\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.router.navigate([\u003cspan class=\"hljs-string\"\u003e'/goals'\u003c/span\u003e,id])\r\n    }\r\n\r\n    deleteGoal(index){\r\n            \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e toDelete=confirm(\u003cspan class=\"hljs-string\"\u003e`Are you sure you want to delete \u003cspan class=\"hljs-subst\"\u003e${this.goals[index].name}\u003c/span\u003e`\u003c/span\u003e)\r\n\r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(toDelete){\r\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals.splice(index,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)\r\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.alertService.alertMe(\u003cspan class=\"hljs-string\"\u003e\"Goal has been deleted\"\u003c/span\u003e)\r\n        }\r\n    }\r\n.............\r\n  constructor(goalService:GoalService,alertService:AlertsService,private quoteService:QuoteRequestService,private router:Router) {\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals = goalService.getGoals();\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.alertService = alertService;\r\n   }\r\n............\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFirst, we import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRouter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule and inject it into our constructor with the property\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouter\u003c/code\u003e. We can then create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoToUrl()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and crete an id argument. We call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouter\u003c/code\u003e's navigate function and put an array as an argument where the first part is the path and the second part is the parameter which is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof the goal. We also have the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edeleteGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction that deletes a goal from the array of Goals.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Creating_a_getGoal_method_89\"\u003e\u003c/a\u003eCreating a getGoal method\u003c/h3\u003e\r\n\u003cp\u003eWe can create a new method that gets a specific goal in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoalService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003cbr\u003e\u003cstrong\u003egoal.service.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Injectable } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goals} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"../goals\"\u003c/span\u003e\r\n\r\n@Injectable()\r\nexport class GoalService {\r\n\r\n  getGoals(){\r\n    return Goals;\r\n  }\r\n  getGoal(id){\r\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e goal \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e Goals){\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (goal.id == id){\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e goal;\r\n        }\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that takes in an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an argument. We then create a for-loop to loop through the array of goals. Inside the loop, we create an if statement that checks if any of the goals matches the id parameter. If one matches we return that goal and break out of the loop.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component, OnInit,Input,Output,EventEmitter } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goal} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goal'\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { ActivatedRoute, ParamMap } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/router'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {GoalService} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goals/goal.service'\u003c/span\u003e\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-goal-details'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./goal-details.component.html'\u003c/span\u003e,\r\n  styleUrls: [\u003cspan class=\"hljs-string\"\u003e'./goal-details.component.css'\u003c/span\u003e],\r\n  providers:[GoalService]\r\n})\r\nexport class GoalDetailsComponent implements OnInit {\r\n\r\n   goal:Goal;\r\n  constructor(private route:ActivatedRoute,\r\n    private service:GoalService) { }\r\n \r\n  ngOnInit() {\r\n     \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e id = \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.route.snapshot.paramMap.get(\u003cspan class=\"hljs-string\"\u003e'id'\u003c/span\u003e);\r\n     \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goal=\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.service.getGoal(id)\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eActivatedRoute\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto retrieve parameters from the route and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParamMap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat provides methods that handle parameter access. We then import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoalService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand register it in the component provider. Next, we inject the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eActivatedRoute\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eservice and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoalService\u003c/code\u003eservice into our constructor.\u003c/p\u003e\r\n\u003cp\u003eInside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engOnInit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eroute.snapshot\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto get initial value of the route parameter map, Then we extract the id parameter with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eget\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod provided by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eparamMap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction.\u003cbr\u003eWe then pass that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto our service’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod and the returning goal instance is assigned to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty of the component. Now we can load the server and see when we click the View Details button we are navigated to the details of the goal.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-bootstrapping","title":"Wednesday: Bootstrapping","type":"WikiPage","content":"\u003ch2\u003eBootstrapping\u003c/h2\u003e\r\n\u003cp\u003eAll Angular apps have at least one Angular Module which is the root module that is used to launch the application. By convention, it is called the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich is contained in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.module.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Imports_4\"\u003e\u003c/a\u003eImports\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { BrowserModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/platform-browser'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { NgModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {FormsModule} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/forms'\u003c/span\u003e;\r\n\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { AppComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./app.component'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { GoalDetailsComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./goal-details/goal-details.component'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { GoalComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./goal/goal.component'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { StrikethroughDirective } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./strikethrough.directive'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { DateCountPipe } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./date-count.pipe'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { GoalFormComponent } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./goal-form/goal-form.component'\u003c/span\u003e;\r\n\r\n..........\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eUsing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our application. The first part is the Import section where we import external modules that are used in our application and we also we import the components and directives that will be declared in our app module.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"NgModule_decorator_23\"\u003e\u003c/a\u003eNgModule decorator\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    GoalDetailsComponent,\r\n    GoalComponent,\r\n    StrikethroughDirective,\r\n    DateCountPipe,\r\n    GoalFormComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edecorator identifies the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. It has metadata that tells Angular how to run the application.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Declarations_array_45\"\u003e\u003c/a\u003eDeclarations array\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    GoalDetailsComponent,\r\n    GoalComponent,\r\n    StrikethroughDirective,\r\n    DateCountPipe,\r\n    GoalFormComponent\r\n  ],\r\n ......\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAngular knows what apps belong to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby finding it in the declaration array. We also place custom directives and pipes that we create in the declarations array.\u003cbr\u003eThe Angular CLI’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egenerate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecommand adds the generated pipes, components and directives to the declaration array automatically for us.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Imports_Array_63\"\u003e\u003c/a\u003eImports Array\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@NgModule({\r\n.........\r\nimports: [\r\n    BrowserModule,\r\n    FormsModule\r\n  ],\r\n  \r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn Angular, we group features into specific units called modules. We add these modules when the application wants to use its features. When we want to run our applications in the browser we use features provided in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBrowserModule\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Providers_Array_78\"\u003e\u003c/a\u003eProviders Array\u003c/h4\u003e\r\n\u003cp\u003eWe deliver services to different parts of an application using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edependency injection\u003c/code\u003e. We use the providers array to register the different services needed by our application. We do not have any services yet that is why our array is empty.\u003c/p\u003e\r\n\u003ch4\u003e\n\u003ca id=\"Bootstrapping_Array_82\"\u003e\u003c/a\u003eBootstrapping Array\u003c/h4\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e@NgModule({\r\n.........\r\n bootstrap: [AppComponent]\r\n .......\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe launch the application by bootstrapping the root component which is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppComponent\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Bootstraping_an_Appplication_93\"\u003e\u003c/a\u003eBootstrapping an Application\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003emain.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { enableProdMode } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { platformBrowserDynamic } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/platform-browser-dynamic'\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { AppModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./app/app.module'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { environment } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./environments/environment'\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err =\u0026gt; \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(err));\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe bootstrap an Angular Application in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emain.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. Here angular dynamically creates a browser platform and bootstraps the root Module which is the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e.The process of bootstrapping sets up an execution environment finding the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppComponent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebootstrap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppModule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand creating an instance of it within its selector tag in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e","frontPage":false},{"exportId":"monday-register-a-service","title":"Monday: Register a Service","type":"WikiPage","content":"\u003ch2\u003eRegister a Service\u003c/h2\u003e\r\n\u003cp\u003eA service is just a class until it is registered with an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAngular dependency injector\u003c/strong\u003e.\u003cbr\u003eAn Injector is responsible for creating the different service instances and Injecting them into classes. They are created by Angular as it executes the app. We do, however, have to register our\u003cspan\u003e \u003c/span\u003eproviders with the Injector, which informs the injector how to create a given service.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Component_Providers_5\"\u003e\u003c/a\u003eComponent Providers\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {GoalService} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goals/goal.service'\u003c/span\u003e;\r\n.........\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-goal'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./goal.component.html'\u003c/span\u003e,\r\n  providers:[GoalService], \u003cspan class=\"hljs-comment\"\u003e//add the providers to the component\u003c/span\u003e\r\n  styleUrls: [\u003cspan class=\"hljs-string\"\u003e'./goal.component.css'\u003c/span\u003e]\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n............\r\n    goals:Goal[];\r\n  constructor(goalService:GoalService) {\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals = goalService.getGoals()\r\n   }\r\n..........\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoalService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand then place it in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eproviders\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Component\u003c/code\u003edecorator. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eproviders\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray is only registered in that components injector instance and the service can only be injected into that component or any of its child components.\u003c/p\u003e\r\n\u003cp\u003eWe then update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty and give it a type. We then inject the service into our constructor where we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetGoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod which returns the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray and we assign it to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty. You can run the servers to see that the page still looks the same.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"ngModules_providers_30\"\u003e\u003c/a\u003engModules providers\u003c/h3\u003e\r\n\u003cp\u003eLet us create a new service that allows us to create an alert message when an important event occurs\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate service alert-service/alerts\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis command creates a new service\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealerts.service.ts\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003ealert-service/alerts.service.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Injectable } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Injectable({\u003cbr\u003e  providedIn: 'root'\u003cbr\u003e})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAlertsService\u003c/span\u003e \u003c/span\u003e{\r\n\r\n  alertMe(message:string){\r\n    alert(message)\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAlertsService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe create an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealertMe\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that takes a string argument. Inside the method, we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealert\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and pass in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emessage\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparameter. Since this is a service that is useful in more than one component we can register it in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@ngModules\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edecorator’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eproviders\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp.module.ts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e...........\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {AlertsService} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./alert-service/alerts.service'\u003c/span\u003e\r\n....................\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    GoalDetailsComponent,\r\n    GoalComponent,\r\n    StrikethroughDirective,\r\n    DateCountPipe,\r\n    GoalFormComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [AlertsService], // Add service to providers\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import the service then we add the service to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eproviders\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray property. This will make the service accessible to the entire application.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {GoalService} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goals/goal.service'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {AlertsService} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../alert-service/alerts.service'\u003c/span\u003e\r\n.............\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-goal'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./goal.component.html'\u003c/span\u003e,\r\n  providers:[GoalService], //add the providers to the component\r\n  styleUrls: [\u003cspan class=\"hljs-string\"\u003e'./goal.component.css'\u003c/span\u003e]\r\n})\r\nexport class GoalComponent implements OnInit {\r\n\r\n    goals:Goal[];\r\n    alertService:AlertsService;\r\n.......................\r\n    deleteGoal(isComplete,index){\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (isComplete){\r\n\r\n            \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e toDelete=confirm(\u003cspan class=\"hljs-string\"\u003e`Are you sure you want to delete \u003cspan class=\"hljs-subst\"\u003e${this.goals[index].name}\u003c/span\u003e`\u003c/span\u003e)\r\n\r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(toDelete){\r\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals.splice(index,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)\r\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.alertService.alertMe(\u003cspan class=\"hljs-string\"\u003e\"Goal has been deleted\"\u003c/span\u003e)\r\n            }\r\n\r\n        }\r\n    }\r\n  constructor(goalService:GoalService,alertService:AlertsService) {\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals = goalService.getGoals();\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.alertService = alertService;\u003cspan class=\"hljs-comment\"\u003e//make the service available to the class\u003c/span\u003e\r\n   }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import the service\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAlertsService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.Then inject the service into our Component’s constructor and we assign it to an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealertService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty. We then call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealertMe\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in our component’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edeleteGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and pass in a message we want to display. We now can serve our application and when we delete a goal an alert dialog pops up with the message we had written.\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-practice-moringa-overflow","title":"Tuesday:Practice: Moringa Overflow","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e  Get comfortable using Angular Cli and practice the process of angular routing.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eWarm Up \u003c/h3\u003e\r\n\u003cp\u003eDiscuss the following questions with your pair\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is routing in Angular 6?\u003c/li\u003e\r\n\u003cli\u003eWhat is this tag used for \u0026lt;router-outlet\u0026gt;\u0026lt;/router-outlet\u0026gt; ?\u003c/li\u003e\r\n\u003cli\u003eWhat is a routerLink?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eCode \u003c/h3\u003e\r\n\u003ch4\u003eMoringa Overflow\u003c/h4\u003e\r\n\u003cp\u003eThe project for today will be to create a basic discussion /forum site where users can post questions or news about a certain topic. Much like stack overflow but we will call it Moringa overflow. Here are some user stories to help you get the bigger picture of the project.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eAs a user, I would like to see several discussion categories on the landing page\u003c/li\u003e\r\n\u003cli\u003eAs a user, I would like to click a category and view its collection of posts\u003c/li\u003e\r\n\u003cli\u003eAs a user, I would like to click on a post and see its details\u003c/li\u003e\r\n\u003cli\u003eAs a user, I would like to add a post to my desired category\u003c/li\u003e\r\n\u003cli\u003eAs a user,  I would like to have the option of deleting my post\u003c/li\u003e\r\n\u003cli\u003eAs a user, I would like to update my post if necessary.\u003c/li\u003e\r\n\u003c/ol\u003e","frontPage":false},{"exportId":"tuesday-create-pipes","title":"Tuesday: Create Pipes","type":"WikiPage","content":"\u003ch2\u003eCreating Custom Pipes\u003c/h2\u003e\r\n\u003cp\u003eWe can also create custom pipes to customize the variable to fit our needs. What if we did not want to know when the goal will be complete but how many days left until we finish the goal. Let us create a Pipe for that.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate pipe date-count\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe generate a new pipe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edate-count\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand now we can add the logic to count the dates.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/date-count.pipe.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Pipe, PipeTransform } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\r\n@Pipe({\r\n  name: \u003cspan class=\"hljs-string\"\u003e'dateCount'\u003c/span\u003e\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDateCountPipe\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ePipeTransform\u003c/span\u003e \u003c/span\u003e{\r\n\r\n  transform(value: any): number {\r\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e today:\u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(); \u003cspan class=\"hljs-comment\"\u003e//get current date and time\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e todayWithNoTime:any = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(today.getFullYear(),today.getMonth(),today.getDate())\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dateDifference =\u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.abs(value-todayWithNoTime )\u003cspan class=\"hljs-comment\"\u003e// returns value in milliseconds\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e secondsInADay= \u003cspan class=\"hljs-number\"\u003e86400\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e//60 seconds*60 minutes in an hour *24 hours\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dateDifferenceSeconds=dateDifference*\u003cspan class=\"hljs-number\"\u003e0.001\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e//converts to seconds\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e dateCounter = dateDifferenceSeconds/secondsInADay;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (dateCounter \u0026gt;= \u003cspan class=\"hljs-number\"\u003e1 \u0026amp;\u0026amp; value \u0026gt; todayWithNoTime\u003c/span\u003e){\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e dateCounter;\r\n    }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\n    }\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first have the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Pipe\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edecorator that defines the name of the pipe. We then have the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDateCountPipe\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass that has a transform function that takes in a value of type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eany\u003c/code\u003e. This value will be our date object from the goals.\u003cbr\u003eWe then use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enew Date();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to get the current date and time. But since we do not need the time aspect we create a new date object for today's date which we store in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etodayWithNoTime\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable.\u003c/p\u003e\r\n\u003cp\u003eWe then get the difference of the date we get in the pipe input and subtract the current date to get the difference in milliseconds.\u003c/p\u003e\r\n\u003cp\u003eWe then convert the milliseconds to seconds. And we then divide the seconds by the seconds in a day to get how many days are left.\u003c/p\u003e\r\n\u003cp\u003eWe then return the days left if the goal date has not been passed. But if it past due we post\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e0\u003c/code\u003e. We can now add the pipe to our goal details.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details/goal-details.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.description}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThis goal will be completed in {{goal.completeDate|dateCount}} days\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n.....\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe add the pipe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edateCount\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompleteDate\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty. Now when we load our app we can see how many days to complete the goal.\u003c/p\u003e","frontPage":false},{"exportId":"monday-http-service","title":"Monday: HTTP service","type":"WikiPage","content":"\u003ch2\u003eCreate a HTTP service\u003c/h2\u003e\r\n\u003cp\u003eNow we need to clean up our component. We can create a HTTP service that does the HTTP request for us and call the service inside our component.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate service quote-http/quote-request\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Environment_Variables_6\"\u003e\u003c/a\u003eEnvironment Variables\u003c/h3\u003e\r\n\u003cp\u003eSometimes we want to store some of the important properties like the API key away from prying eyes. We can place them in our environment files which we can later ignore\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003esrc/environments/environment.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e environment = {\r\n  production: \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e,\r\n  apiUrl:\u003cspan class=\"hljs-string\"\u003e\"https://talaikis.com/api/quotes/random/\"\u003c/span\u003e\r\n};\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapiUrl\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty inside the environment object. We then pass in the API url . Remeber to place this file in your\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e.gitignore\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"HTTP_requests_using_Promises_18\"\u003e\u003c/a\u003eHTTP requests using Promises\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003equote-request.service.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Injectable } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {HttpClient} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/common/http'\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {environment} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../../environments/environment'\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Quote} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../quote-class/quote'\u003c/span\u003e\r\n\r\n\r\n@Injectable()\r\nexport class QuoteRequestService {\r\n\r\n    quote:Quote;\r\n\r\n  constructor(private http:HttpClient) { \r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote=\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Quote(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n  }\r\n\r\n  quoteRequest(){\r\n\r\n    interface ApiResponse{\r\n        quote:string;\r\n        author:string\r\n\r\n    }\r\n    \u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e promise =\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003ePromise\u003c/span\u003e((resolve,reject)=\u0026gt;{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.http.get\u0026lt;ApiResponse\u0026gt;(environment.apiUrl).toPromise().then(response=\u0026gt;{\r\n            \r\n            \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote.quote=response.quote\r\n            \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote.author=response.author\r\n\r\n            resolve()\r\n        },\r\n        error=\u0026gt;{\r\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote.quote=\u003cspan class=\"hljs-string\"\u003e\"Never, never, never give up.\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote.author=\u003cspan class=\"hljs-string\"\u003e\"winston churchill\"\u003c/span\u003e\r\n                reject(error)\r\n            }\r\n        )\r\n    })\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e promise\r\n  }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eInside our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eQuoteRequestService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eQuote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eenvironment\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. We then create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003equote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty which we initialize with empty string properties inside the constructor. We inject the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule inside our service constructor.\u003c/p\u003e\r\n\u003cp\u003eWe then create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003equoteRequest\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that defines the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eApiResponse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface and a promise instance. We then call the HttpClient’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eget\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod and pass in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapiUrl\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the environment object. We use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoPromise()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction to convert the HTTP request to a promise then later call use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethen\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction and pass in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eerror\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunctions as arguments. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction is called when the HTTP request is successful and returns a response. We update the property values of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003equote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass instance with values from the response. We then call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresolve\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction. If we encounter an error the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eerror\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction will be called and we can use the default quote properties.\u003c/p\u003e\r\n\u003cp\u003eWe can now call the service in our component.\u003cbr\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e.........\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {GoalService} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goals/goal.service'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {AlertsService} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../alert-service/alerts.service'\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {QuoteRequestService} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../quote-http/quote-request.service'\u003c/span\u003e\r\n.........\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-goal'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./goal.component.html'\u003c/span\u003e,\r\n  providers:[GoalService,QuoteRequestService], //add the providers to the component\r\n  styleUrls: [\u003cspan class=\"hljs-string\"\u003e'./goal.component.css'\u003c/span\u003e]\r\n})\r\nexport class GoalComponent implements OnInit {\r\n.........\r\nquote:Quote;\r\n.........\r\n  constructor(goalService:GoalService,alertService:AlertsService,private quoteService:QuoteRequestService) {\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals = goalService.getGoals();\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.alertService = alertService;\r\n   }\r\n\r\n\r\n  ngOnInit() {\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quoteService.quoteRequest()\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote=\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quoteService.quote\r\n  }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSince we only need to add this service to our goal component we can register our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eQuoteRequestService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our component’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eproviders\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray. We then inject it into our constructor and then inside our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engOnInit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elifecycle hook we can call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003equoteRequest\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod then we equate the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003equote\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty with the quote property in the service. Now when we load our template we can see our quote being displayed at the top of the page.\u003cbr\u003eYou can read\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://medium.com/beautiful-angular/angular-2-and-environment-variables-59c57ba643be\"\u003ethis article\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto learn how to build your applications when you have items in the environment files.\u003c/p\u003e","frontPage":false},{"exportId":"monday-dependency-injections","title":"Monday: Dependency Injections","type":"WikiPage","content":"\u003ch2\u003eDependency Injection\u003c/h2\u003e\r\n\u003cp\u003eThis is a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edesign pattern\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ewhere a class receives its dependencies from external sources without having to create them itself. Let us see a brief example of what we mean. Let us imagine we had a class that allowed us to create instances of a house.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eHouse\u003c/span\u003e\u003c/span\u003e{\r\n    walls:Wall;\r\n    windows:Window;\r\n    doors:Door;\r\n    constructor(){\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.walls=\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Wall()\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.windows=\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Window()\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.doors=\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Door()\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe could create our class like this but this brings about significant challenges when we want to test or update our code. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHouse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass creates everything it needs in the constructor. What if one of its properties like the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDoor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass required a parameter to be passed into the constructor? This would break our House class until we update how we create the instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDoor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass in every instance we create of the House class. We could alternatively use the Dependency Injection approach.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eHouse\u003c/span\u003e\u003c/span\u003e{\r\n    walls:Wall;\r\n    windows:Window;\r\n    doors:Door;\r\n    constructor(wall:Wall,\u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e:Window,door:Door){\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.walls=wall\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.windows=\u003cspan class=\"hljs-built_in\"\u003ewindow\u003c/span\u003e;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.doors=door;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere you notice our class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHouse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass moves from creating the different dependencies it needs to merely just consuming the dependencies. This ensures if any changes occur in one of the dependencies it does not affect the class.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003elet\u003c/span\u003e house =\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e House(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Wall(),\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Window(),\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Door())\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can create the new instance of the house class by passing in the dependencies in the constructor.\u003cbr\u003eThis brings about another challenge though we are now responsible for creating 4 separate classes. And this is where the\u003cspan\u003e \u003c/span\u003e\u003cem\u003edependency injector\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eframework becomes useful. It allows us to create something called an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einjector\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat we can register some classes with and it can figure out how to create them. Our job would be to simply ask the Injector to get the created class for you. Let us see how we can Implement that in our project.\u003c/p\u003e\r\n\u003cp\u003eTo start let us create a separate file to store our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray. This makes our component class deal with only operations that involve it and makes the code manageable. We can create a new file inside our app directory and call it\u003cspan\u003e \u003c/span\u003e\u003cem\u003egoals.ts\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoals.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goal} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'./goal'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e Goals:Goal[]=[\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Find an online version and watch merlin find his son'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'I have to buy cookies for the parrot'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Diana has her birthday coming up soon'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Pupper likes expensive sancks'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Damn Math'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Cause I am an evil overlord'\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2018\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e) ),\r\n\r\n    ]\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass and then we create the array of goals and we export that array.\u003cbr\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e........\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goals} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goals'\u003c/span\u003e\r\n........\r\nexport class GoalComponent implements OnInit {\r\n    goals = Goals;\r\n    .......\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe then import the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray and assign it as the value to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoals\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty in our components class.\u003c/p\u003e","frontPage":false},{"exportId":"monday-creating-components","title":"Monday: Creating Components","type":"WikiPage","content":"\u003ch2\u003eCreating Components\u003c/h2\u003e\r\n\u003cp\u003eSince it is the root components job render all other components let us start out by creating a goal component to handle the logic on goals.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate component goal\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis command generates a new folder\u003cspan\u003e \u003c/span\u003e\u003cem\u003egoal\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat hosts our new components code. It also registers the new component in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp.module.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003eWe can move the array property for our goals into our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal.component.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component, OnInit } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goal} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goal'\u003c/span\u003e\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-goal'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./goal.component.html'\u003c/span\u003e,\r\n  styleUrls: [\u003cspan class=\"hljs-string\"\u003e'./goal.component.css'\u003c/span\u003e]\r\n})\r\nexport class GoalComponent implements OnInit {\r\n\r\n    goals = [\r\n        new Goal(1,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e),\r\n        new Goal(2,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e),\r\n        new Goal(3, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e),\r\n        new Goal(4, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e),\r\n        new Goal(5, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e),\r\n        new Goal(6, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e),\r\n    ]\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engOnInit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction is a life cycle hook. Life cycle hooks are called to show different stages in the life cycle of a component.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003engOnInit\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called immediately the component is created.\u003c/p\u003e\r\n\u003cp\u003eWe also move the Template logic to our new components template file.\u003cbr\u003e\u003cstrong\u003egoal/goal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals'\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.name}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e   \r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'goals.length \u0026gt; 5'\u003c/span\u003e\u0026gt;\u003c/span\u003eYou have too many goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Nesting_Components_50\"\u003e\u003c/a\u003eNesting Components\u003c/h3\u003e\r\n\u003cp\u003eSince we have moved the code from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAppcomponent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoalComponent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe need to link our new component with the root component.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/app.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe place the selector tags from our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoalComponent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einside our root components template file. This will ensure the component is loaded.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Child_Components_60\"\u003e\u003c/a\u003eChild Components\u003c/h3\u003e\r\n\u003cp\u003eWhat if we wanted to display the details of a goal. We need to create a component for that.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate component goal-details\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe now need to update our goal class to add a new property for details.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/goal.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoal\u003c/span\u003e \u003c/span\u003e{\r\n    constructor(public id:number, public name:string,public description:string){}\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe now need to update our goal instances in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGoalComponent\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp/goal/goal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e.....\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGoalComponent\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnInit\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    goals = [\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Watch Finding Nemo'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Find an online version and watch merlin find his son'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Buy Cookies'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'I have to buy cookies for the parrot'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get new Phone Case'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Diana has her birthday coming up soon'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Get Dog Food'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Pupper likes expensive sancks'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Solve math homework'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Damn Math'\u003c/span\u003e),\r\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Goal(\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'Plot my world domination plan'\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e'Cause I am an evil overlord'\u003c/span\u003e),\r\n    ]\r\n  constructor() { }\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Input_Property_Binding_97\"\u003e\u003c/a\u003eInput Property Binding\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal/goal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehr\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'let goal of goals'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e \u0026gt;\u003c/span\u003e{{goal.name}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eli\u003c/span\u003e\u0026gt;\u003c/span\u003e \r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e [\u003cspan class=\"hljs-attribute\"\u003egoal\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e'goal'\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eul\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'goals.length \u0026gt; 5'\u003c/span\u003e\u0026gt;\u003c/span\u003eYou have too many goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eInput property binding is a method of passing data to child components from our views.\u003cbr\u003eWe add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp-goal-details\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector that will responsible for displaying details of our goals. We pass in the goal to display using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e[goal]='goal'\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute. This passes in the goal into the child component. Let us access the new value passed in the new component.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details/goal-details.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { Component, OnInit,Input } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {Goal} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'../goal'\u003c/span\u003e\r\n\r\n@Component({\r\n  selector: \u003cspan class=\"hljs-string\"\u003e'app-goal-details'\u003c/span\u003e,\r\n  templateUrl: \u003cspan class=\"hljs-string\"\u003e'./goal-details.component.html'\u003c/span\u003e,\r\n  styleUrls: [\u003cspan class=\"hljs-string\"\u003e'./goal-details.component.css'\u003c/span\u003e]\r\n})\r\nexport class GoalDetailsComponent implements OnInit {\r\n\r\n  @Input() goal:Goal;\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe first import the Input decorator that will allow us to access any value passed into the component.\u003cbr\u003eWe then define the value name and type inside our component class. Lastly we can now create the value template.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details/goal-details.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.description}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create a simple paragraph tag to display the details. Now when we serve our application we can see our goals together with the description.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-deployment","title":"Wednesday: Deployment","type":"WikiPage","content":"\u003ch2\u003eDeploying Angular Applications\u003c/h2\u003e\r\n\u003cp\u003eWe can now deploy our Angular applications for people to interact with them Online. We will host our applications on\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eghpages\u003c/strong\u003e. We first need to install the CLI tool that will help us deploy our application.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ npm i -g angular-cli-ghpages\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe install the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eangular-cli-ghpages\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eCLI tool globally in our computer. Now we can start the deployment process.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Step_1_Creating_a_Build_Folder_9\"\u003e\u003c/a\u003eStep 1 :Creating a Build Folder\u003c/h3\u003e\r\n\u003cp\u003eWe first have to run the following command:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng build --prod --base-href=\u003cspan class=\"hljs-string\"\u003e\"https://GithubUserName.github.io/GithubREPO/\"\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis will create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edist/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder in our application’s root folder. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e--prod\u003c/code\u003e\u003cspan\u003e \u003c/span\u003especifies that we are building for production. We then create the base link for our\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eindex.html\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003efile. We set our Github username and the name of the repository.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Step_2_Remove_dist_from_gitignore_17\"\u003e\u003c/a\u003eStep 2: Remove\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edist/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.gitignore\u003c/code\u003e\n\u003c/h3\u003e\r\n\u003cp\u003eNext, we go to our gitignore folder and remove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edist/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eline.This will enable us to send the file to GitHub.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Step_3_Push_to_Github_21\"\u003e\u003c/a\u003eStep 3: Push to Github.\u003c/h3\u003e\r\n\u003cp\u003eWe can now add and commit our changes and push our project to Github.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Step_4_Deploy_using_the_CLI_24\"\u003e\u003c/a\u003eStep 4: Deploy using the CLI\u003c/h3\u003e\r\n\u003cp\u003eNow we can run the following command to deploy to ghpages\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003esudo npx ngh --dir=dist/project-name \r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe \u003ccode class=\"language-bash\"\u003eproject-name \u003c/code\u003e should be the name of your project in your local computer\u003c/p\u003e\r\n\u003cp\u003eIf successful you can run your project from ghpages using the base link you provided\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehttps://GithubUserName.github.io/GithubREPO/\u003c/code\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-routing","title":"Tuesday: Routing","type":"WikiPage","content":"\u003ch2\u003eRouting\u003c/h2\u003e\r\n\u003cp\u003eAngular provides a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodel that allows us to change from one view to another while performing application tasks.\u003c/p\u003e\r\n\u003cp\u003eLet us start by creating an about page for our application.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ng generate component about\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can populate the about template with a brief description of what our app is about\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eabout.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003eAbout My App\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh2\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eAn Angular Application that lets us write goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we can start by setting up routing for the goals component and our new about component.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Install_the_Routing_Modules_18\"\u003e\u003c/a\u003eInstall the Routing Modules\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { RouterModule, Routes } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/router'\u003c/span\u003e;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe install the needed router Modules from the external\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erouter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elibrary.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Creating_route_configurations_25\"\u003e\u003c/a\u003eCreating route configurations\u003c/h3\u003e\r\n\u003cp\u003eNext, we need to set up the different route configurations\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { RouterModule, Routes } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/router'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-comment\"\u003e// Defining routes\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e routes:Routes=[\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"goals\"\u003c/span\u003e,component:GoalComponent},\r\n  {path:\u003cspan class=\"hljs-string\"\u003e\"about\"\u003c/span\u003e,component:AboutComponent}\r\n]\r\n@NgModule({\r\n ........\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    NgProgressModule.forRoot(),\r\n    NgProgressHttpClientModule,\r\n    RouterModule.forRoot(routes)\r\n  ],\r\n  ........\r\n})\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eroutes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray determines how we navigate through our project. We pass into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRouterModule.forRoot()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in the imports array. Each route maps the path to the component it is to display.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-add-boostrap","title":"Wednesday: Add Boostrap","type":"WikiPage","content":"\u003ch2\u003eAdding Bootstrap\u003c/h2\u003e\r\n\u003cp\u003eOur angular app looks very dull. We can use bootstrap to easily style our application. Let us first install bootstrap to our application.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ npm install --save bootstrap\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis will add a bootstrap folder to our Node modules folder. To make Bootstrap available to our application we have to import it from the Node Modules folder to the application\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estyles.css\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003esrc/styles.css\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-css\"\u003e\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"~bootstrap/dist/css/bootstrap.css\"\u003c/span\u003e\r\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we can use bootstrap in our application.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ehr\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engFor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"let goal of goals;let i = 'index'\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh4\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"{{i}}\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eappStrikethrough\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.name}} due on {{goal.completeDate|date|uppercase}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh4\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-primary\"\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eclick\u003c/span\u003e)=\u003cspan class=\"hljs-value\"\u003e'toogleDetails(i)'\u003c/span\u003e\u0026gt;\u003c/span\u003eToogle Details\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"goal.showDescription\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e  [\u003cspan class=\"hljs-attribute\"\u003egoal\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e'goal'\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eisComplete\u003c/span\u003e)= '\u003cspan class=\"hljs-attribute\"\u003edeleteGoal\u003c/span\u003e($\u003cspan class=\"hljs-attribute\"\u003eevent\u003c/span\u003e,\u003cspan class=\"hljs-attribute\"\u003ei\u003c/span\u003e)'\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapp-goal-details\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e *\u003cspan class=\"hljs-attribute\"\u003engIf\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'goals.length \u0026gt; 5'\u003c/span\u003e\u0026gt;\u003c/span\u003eYou have too many goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-details.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e{{goal.description}}\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003ecomplete in {{goal.completeDate|dateCount}} days\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-danger\"\u003c/span\u003e (\u003cspan class=\"hljs-attribute\"\u003eclick\u003c/span\u003e) = '\u003cspan class=\"hljs-attribute\"\u003egoalDelete\u003c/span\u003e(\u003cspan class=\"hljs-attribute\"\u003etrue\u003c/span\u003e)'\u0026gt;\u003c/span\u003e Delete Goal \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe update our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoal-details\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomponent’s HTML file to add bootstrap classes to our tags.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-form-validation","title":"Wednesday: Form Validation","type":"WikiPage","content":"\u003ch2\u003eForm Validation\u003c/h2\u003e\r\n\u003cp\u003eWe can hide and show validation messages under our input elements.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal-form.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container-fluid\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e #\u003cspan class=\"hljs-attribute\"\u003egoalForm\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'ngForm'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Name Form --\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e\u0026gt;\u003c/span\u003eName\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e  \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e [(\u003cspan class=\"hljs-attribute\"\u003engModel\u003c/span\u003e)]=\u003cspan class=\"hljs-value\"\u003e\"newGoal.name\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e #\u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"ngModel\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e [\u003cspan class=\"hljs-attribute\"\u003ehidden\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e\"name.valid || name.pristine\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"alert alert-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e Name is Required\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                    \r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n............\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe add a template reference variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#name\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto access the input box’s Angular control from within the template.\u003cbr\u003eWe then create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ediv\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement with the attribute template attribute\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehidden\u003c/code\u003e. This will display an alert message if the input is invalid. We then equate it to only be true if the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ename\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einput is valid. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epristine\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty allows us not to show the\u003cbr\u003emessage when we load a blank page.\u003c/p\u003e\r\n\u003cp\u003eWe can now replicate this to all the other fields in the form.\u003cbr\u003e\u003cstrong\u003egoal-form.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"container-fluid\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"row\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e #\u003cspan class=\"hljs-attribute\"\u003egoalForm\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'ngForm'\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Name Form --\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e\u0026gt;\u003c/span\u003eName\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text\"\u003c/span\u003e  \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e [(\u003cspan class=\"hljs-attribute\"\u003engModel\u003c/span\u003e)]=\u003cspan class=\"hljs-value\"\u003e\"newGoal.name\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"name\"\u003c/span\u003e #\u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"ngModel\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e [\u003cspan class=\"hljs-attribute\"\u003ehidden\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e\"name.valid || name.pristine\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"alert alert-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e Name is Required\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                    \r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Description Input --\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"description\"\u003c/span\u003e\u0026gt;\u003c/span\u003eDescription\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003etextarea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-control\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"description\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erows\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4\"\u003c/span\u003e [(\u003cspan class=\"hljs-attribute\"\u003engModel\u003c/span\u003e)]=\u003cspan class=\"hljs-value\"\u003e\"newGoal.description\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"description\"\u003c/span\u003e #\u003cspan class=\"hljs-attribute\"\u003edescription\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"ngModel\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003etextarea\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e [\u003cspan class=\"hljs-attribute\"\u003ehidden\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e\"description.valid || description.pristine\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"alert alert-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e Description is Required\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                    \r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Date Input --\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"form-group\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003efor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"complete\"\u003c/span\u003e\u0026gt;\u003c/span\u003eCompletion\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003elabel\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003einput\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e'date'\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"complete\"\u003c/span\u003e [(\u003cspan class=\"hljs-attribute\"\u003engModel\u003c/span\u003e)]=\u003cspan class=\"hljs-value\"\u003e\"newGoal.completeDate\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"completeDate\"\u003c/span\u003e #\u003cspan class=\"hljs-attribute\"\u003ecompleteDate\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"ngModel\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003erequired\u003c/span\u003e \u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e [\u003cspan class=\"hljs-attribute\"\u003ehidden\u003c/span\u003e]=\u003cspan class=\"hljs-value\"\u003e\"completeDate.valid || completeDate.pristine\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"alert alert-danger\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e Complete Date is Required\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                    \r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Submit\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eclass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"btn btn-success btn-lg\"\u003c/span\u003e\u0026gt;\u003c/span\u003eAdd Goal\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ebutton\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow when we load the page and type something in the Input box then delete it you can see the alert message is displayed.\u003c/p\u003e","frontPage":false},{"exportId":"monday-angular-objectives","title":"Monday: Angular Objectives","type":"WikiPage","content":"\u003cp\u003eWe will be learning how to create basic Angular apps using Angular CLI over the next two weeks.\u003c/p\u003e\r\n\u003cp\u003eAngular can be written using Javascript, Typescript or Dart. In our case, we will write our Angular apps using Typescript, which you learned over the pre-course work.\u003c/p\u003e\r\n\u003cp\u003eAngular CLI is a command-line interface that helps us build Angular apps quickly.\u003c/p\u003e\r\n\u003ch3\u003ePlan\u003c/h3\u003e\r\n\u003cp\u003eThis week we will start off by learning how to add content and interactivity to our Angular app. To start with, we will use templates and directives to display data dynamically. Then, we'll organise our data by adding models to our application and use event binding for adding interactivity.\u003c/p\u003e\r\n\u003cp\u003eMonday and Tuesday have been structured to have slightly more content so that you have enough basic knowledge which will help you practice on building an Angular application from scratch. Additionally, it also gives you a chance to engage with the content more and better understand the week's concepts.\u003c/p\u003e\r\n\u003cp\u003eBy the end of the week, you will be able to create a fully functional Angular Application.\u003c/p\u003e\r\n\u003cp\u003eNext week we will explore the framework further by adding pages to our application using routers and so much more.\u003c/p\u003e\r\n\u003ch2\u003eIndependent Project Objectives\u003c/h2\u003e\r\n\u003cp\u003eThe week's independent project will be evaluated for the following objectives:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eUse Angular CLI to create your Project.\u003c/li\u003e\r\n\u003cli\u003eCreate a model for your Quote objects.\u003c/li\u003e\r\n\u003cli\u003eCreate a custom directive that highlights the quote that has the highest vote.\u003c/li\u003e\r\n\u003cli\u003eImplement a form component that has input sections for the quote.\u003c/li\u003e\r\n\u003cli\u003eInitialize an initial value of 0 for both upvote and downvote for each quote\u003c/li\u003e\r\n\u003cli\u003eAdd a custom pipe which displays the time passed since the quote was created.\u003c/li\u003e\r\n\u003cli\u003eMake a well-documented README that highlights:\r\n\u003col\u003e\r\n\u003cli\u003eAuthor\u003c/li\u003e\r\n\u003cli\u003eA brief description of the project \u003c/li\u003e\r\n\u003cli\u003eProgram set-up instructions\u003c/li\u003e\r\n\u003cli\u003eA link to the deployed site of your project\u003c/li\u003e\r\n\u003cli\u003eCopyright and License information\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003eAt least use bootstrap  to style you project\u003c/li\u003e\r\n\u003cli\u003eHigh-Quality  and portfolio-ready project\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false},{"exportId":"friday-independent-project","title":"Friday: Independent Project","type":"WikiPage","content":"\u003ch2\u003eGithub Search\u003c/h2\u003e\r\n\u003cp\u003eCreate a website where users may enter a GitHub username into a form, submit it, and see names and descriptions of that person's public repositories. A person can also look for repositories\u003c/p\u003e\r\n\u003cp\u003eUse the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.github.com/v3/\"\u003eGitHub API\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto retrieve this information. This API allows 5,000 requests per hour with an API key, but only 60 requests per hour _without_ one. Everyone is therefore required to use their own unique key. GitHub refers to these keys as \"Personal Access Tokens\".\u003c/p\u003e\r\n\u003ch3\u003eCreating Personal Access Tokens\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eVisit the _Settings_ area of your GitHub account like this\u003cimg src=\"http://moringacore-js.herokuapp.com/assets/images/githubsettings.png\"\u003e\n\u003c/li\u003e\r\n\u003cli\u003eselect Personal Access Tokens from the sidebar, and hit Generate New Token\u003cimg src=\"http://moringacore-js.herokuapp.com/assets/images/githubgeneratetoken.png\"\u003e\n\u003c/li\u003e\r\n\u003cli\u003eGitHub will offer a list of options\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not select any\u003c/strong\u003e. These grants read/write permissions and access to personal data. Finally, select\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eGenerate Token.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cimg src=\"http://moringacore-js.herokuapp.com/assets/images/githublistofoptions.png\"\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eA sample request  URL might look like this\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan class=\"hljs-string\"\u003e'https://api.github.com/users/daneden?access_token='\u003c/span\u003e\u003cspan\u003e + apiKey\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan\u003eTechnical Requirements\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eYour application should:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eHave a landing page that displays your information. Image and Repositories\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eHave components to display user profile, search results from the API call and the Repository Details\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003eHave proper routing structure to map the different components/views.\u003c/li\u003e\r\n\u003cli\u003eHave a form component that allows us to search for users and repositories\u003c/li\u003e\r\n\u003cli\u003eHave a custom service for sending the HTTP requests.\u003c/li\u003e\r\n\u003cli\u003eContain a custom directive and a custom pipe.\u003c/li\u003e\r\n\u003cli\u003eBe deployed and in Portfolio quality.\u003c/li\u003e\r\n\u003cli\u003eHave a router module.\u003c/li\u003e\r\n\u003cli\u003eHide the API key inside the environment variables\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e","frontPage":false},{"exportId":"thursday-diary","title":"Thursday:  Diary","type":"WikiPage","content":"\u003ch2\u003eThe Diary\u003c/h2\u003e\r\n\u003cp\u003eThis week you will create a personal diary application where you can write down your thoughts.\u003c/p\u003e\r\n\u003ch3\u003eUser Story\u003c/h3\u003e\r\n\u003cp\u003eYou as the user you should be able to:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate a new diary entry.\u003c/li\u003e\r\n\u003cli\u003eSet the date for a new entry.\u003c/li\u003e\r\n\u003cli\u003eDelete the Diary entry.\u003c/li\u003e\r\n\u003cli\u003eAble to highlight titles in the diary entry\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eTechnical Requirements\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003eUse the Angular CLI to create the application.\u003c/li\u003e\r\n\u003cli\u003eCreate a clear README file.\u003c/li\u003e\r\n\u003cli\u003eHave a minimum of 15 clear commit messages.\u003c/li\u003e\r\n\u003cli\u003eCreate a diary model class.\u003c/li\u003e\r\n\u003cli\u003eCreate a custom directive to highlight the titles.\u003c/li\u003e\r\n\u003cli\u003eCreate custom pipe to customize dates.\u003c/li\u003e\r\n\u003cli\u003eHave form component with the necessary Inputs.\u003c/li\u003e\r\n\u003cli\u003eYour app should be deployed.\u003c/li\u003e\r\n\u003c/ol\u003e","frontPage":false},{"exportId":"monday-error-handling","title":"Monday: Error Handling","type":"WikiPage","content":"\u003ch2\u003eError Handling\u003c/h2\u003e\r\n\u003cp\u003eSo what if our HTTP request was not successful. The subscribe function takes in another parameter function that is called when the request fails.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e {HttpClient} \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@angular/common/http'\u003c/span\u003e\r\n.......\r\n\r\nexport class GoalComponent implements OnInit {\r\n.........\r\n    quote:Quote;\r\n..........\r\n  constructor(goalService:GoalService,alertService:AlertsService,private http:HttpClient) {\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.goals = goalService.getGoals();\r\n  \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.alertService = alertService;\r\n   }\r\n\r\n  ngOnInit() {\r\n\r\n    interface ApiResponse{\r\n        quote:string;\r\n        author:string\r\n\r\n    }\r\n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.http.get\u0026lt;ApiResponse\u0026gt;(\u003cspan class=\"hljs-string\"\u003e\"https://talaikis.com/api/quotes/random/\"\u003c/span\u003e).subscribe(data=\u0026gt;{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote= \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Quote(data.quote,data.author)\r\n\r\n    },err=\u0026gt;{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quote= \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Quote(\u003cspan class=\"hljs-string\"\u003e\"Never, never, never give up.\"\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\"winston churchill\"\u003c/span\u003e)\r\n        \u003cspan class=\"hljs-built_in\"\u003econsole\u003c/span\u003e.log(\u003cspan class=\"hljs-string\"\u003e\"Error occured \"\u003c/span\u003e)\r\n    })\r\n  }\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe create another function\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eerr\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat creates a backup quote instance that is assigned to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003equote\u003c/code\u003eproperty if the request fails to for any reason. We then log the error in our console.\u003c/p\u003e\r\n\u003ch3\u003e\n\u003ca id=\"Using_Loaders_37\"\u003e\u003c/a\u003eUsing Loaders\u003c/h3\u003e\r\n\u003cp\u003eWe can use a loader to show some process like HTTP request is happening. This provides good user experience to the user.\u003cbr\u003eWe will be using this\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/MurhafSousli/ngx-progressbar\"\u003eprogress bar\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eFirst, we need to install it\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ npm install --save @ngx-progressbar/core @ngx-progressbar/http\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe install the progress bar and the http progress bar that will automatically create a progress bar when a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodule is called.Next, we need to import them into our root module\u003cbr\u003e\u003cstrong\u003eapp.module.ts\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e............\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { NgProgressModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@ngx-progressbar/core'\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e { NgProgressHttpModule } \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e'@ngx-progressbar/http'\u003c/span\u003e;\r\n\r\n\r\n@NgModule({\r\n  \r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    NgProgressModule.forRoot(),\u003cspan class=\"hljs-comment\"\u003e// normal progress bar\u003c/span\u003e\r\n    NgProgressHttpModule \u003cspan class=\"hljs-comment\"\u003e// progress bar to load http requests\u003c/span\u003e\r\n  ],\r\n  providers: [AlertsService],\r\n  bootstrap: [AppComponent]\r\n})\r\n\u003cspan class=\"hljs-keyword\"\u003eexport\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppModule\u003c/span\u003e \u003c/span\u003e{ }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLastly, we will add the progress bar selector in our goal template file.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003egoal.component.html\u003c/strong\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eng-progress\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eng-progress\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003eMy Goals\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eh1\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;ng-progress\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eselector at the top of our template and when we run the server we will see a loader moving as our HTTP request is loading.\u003c/p\u003e","frontPage":false}],"assignments":[{"exportId":"i6b564de32a15ddd798f7fc7e7a232dbf","title":"Friday: Independent Project","type":"Assignment","content":"\u003ch2\u003eGithub Search\u003c/h2\u003e\r\n\u003cp\u003eCreate a website where users may enter a GitHub username into a form, submit it, and see names and descriptions of that person's public repositories. A person can also look for repositories\u003c/p\u003e\r\n\u003cp\u003eUse the\u003cspan\u003e \u003c/span\u003e\u003ca class=\"external\" href=\"https://developer.github.com/v3/\" target=\"_blank\"\u003e\u003cspan\u003eGitHub API\u003cspan class=\"screenreader-only\"\u003e (Links to an external site.)\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003cspan class=\"screenreader-only\"\u003eLinks to an external site.\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto retrieve this information. This API allows 5,000 requests per hour with an API key, but only 60 requests per hour _without_ one. Everyone is therefore required to use their own unique key. GitHub refers to these keys as \"Personal Access Tokens\".\u003c/p\u003e\r\n\u003ch3\u003eCreating Personal Access Tokens\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eVisit the _Settings_ area of your GitHub account like this\u003c/li\u003e\r\n\u003cli\u003e\u003cimg src=\"viewer/files/githubsettings.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"github settings\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/11/files/844\" data-api-returntype=\"File\"\u003e\u003c/li\u003e\r\n\u003cli\u003eselect Personal Access Tokens from the sidebar, and hit Generate New Token\u003c/li\u003e\r\n\u003cli\u003e\u003cimg src=\"viewer/files/githubgeneratetoken.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/11/files/845\" data-api-returntype=\"File\"\u003e\u003c/li\u003e\r\n\u003cli\u003eGitHub will offer a list of options\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not select any\u003c/strong\u003e. These grants read/write permissions and access to personal data. Finally, select\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eGenerate Token.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\n\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003e\u003cimg src=\"viewer/files/githublistofoptions.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/11/files/846\" data-api-returntype=\"File\"\u003e\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eA sample request  URL might look like this.\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan class=\"hljs-string\"\u003e'https://api.github.com/users/daneden?access_token='\u003c/span\u003e\u003cspan\u003e + apiKey\u003c/span\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan\u003eTechnical Requirements\u003c/span\u003e\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003eYour project must contain a well-designed landing page that displays your GitHub information such as your username, your profile photos and a list of your repositories.\u003c/li\u003e\r\n\u003cli\u003eYou must place your access key inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eenvironment.ts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile and place it inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egitignore\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile.\u003c/li\u003e\r\n\u003cli\u003eYou must create a HTTP service that uses a promise to make the requests to the GitHub API.\u003c/li\u003e\r\n\u003cli\u003eThe HTTP request should be able to search for both GitHub users and GitHub repositories.\u003c/li\u003e\r\n\u003cli\u003eYour project must have two classes for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003euser\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erepository\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eYour project must have a proper routing structure that links a GitHub username to the users GitHub repositories.\u003c/li\u003e\r\n\u003cli\u003eYour project must have a separate routing module.\u003cbr\u003e5.Your project must contain a custom directive and a custom pipe.\u003c/li\u003e\r\n\u003cli\u003eYour Project must be well designed and visually appealing and of portfolio quality.\u003c/li\u003e\r\n\u003cli\u003eYour project must have a well-documented README file.\u003c/li\u003e\r\n\u003cli\u003eYour project must be deployed and the deployed link should be submitted.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003e \u003c/h3\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":28.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i8e407f3a449f7288221a69acd4fb4549","title":"Friday: Independent Project-Quotes","type":"Assignment","content":"\u003ch2\u003eQuotes\u003c/h2\u003e\r\n\u003cp\u003eThis weeks project is to create an application where users can create quotes and have those quotes voted on whether they are terrible or are inspirational. \u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eUser Requirements\u003c/h3\u003e\r\n\u003cp\u003eAs a user I would like to:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate a new quote.\u003c/li\u003e\r\n\u003cli\u003eUpvote or downvote a quote.\u003c/li\u003e\r\n\u003cli\u003eDelete a quote\u003c/li\u003e\r\n\u003cli\u003eSee the number of upvotes and number of downvotes for each quote.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eProject Objectives\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003eYour Project should be created using the Angular CLI.\u003c/li\u003e\r\n\u003cli\u003eYour project should contain a custom model class for the quote\u003c/li\u003e\r\n\u003cli\u003eYour project should have a custom\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edirective\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto highlight the quote that has the highest upvotes.\u003c/li\u003e\r\n\u003cli\u003eYour project should contain a form component that has input sections for the quote, the author, and the person who submitted the quote.\u003c/li\u003e\r\n\u003cli\u003eEach quote must begin with an initial upvote and downvote value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e0\u003c/code\u003e\n\u003c/li\u003e\r\n\u003cli\u003eYour project should have a component to display the quote and a component to display quote details. For example, the quote details could have the author of the quote and the votes it has.\u003c/li\u003e\r\n\u003cli\u003eYour project should contain a custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epipe\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat shows how much time has passed since the quote was created. \u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003eTechnical Requirements\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003eYour app must be of high quality in terms of basic functionality and it should be visually appealing.\u003c/li\u003e\r\n\u003cli\u003eYou must have a well-documented README document that gives a brief description of your application, How it works, How to install your application, A link to the deployed website and a license section.\u003c/li\u003e\r\n\u003cli\u003eYour project must be deployed and a link to the deployed website should be submitted.\u003c/li\u003e\r\n\u003cli\u003eYour project should have regular, well-defined commits with clear messages.\u003c/li\u003e\r\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":31.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i1434982cf934c55eda9c0280e7c2b6d0","title":"Friday: IP review","type":"Assignment","content":"\u003cp\u003e\u003cspan\u003eThe following scale will be used to grade your Independent Project based on the criteria, please submit your links to your TM.\u003c/span\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i929ae7ef529a88398a0eebb1dba48a5a","title":"Roll Call Attendance","type":"Assignment","content":null,"submissionTypes":"an external tool","graded":true,"pointsPossible":100.0,"dueAt":null,"lockAt":null,"unlockAt":null}],"discussion_topics":[],"quizzes":[],"files":[{"type":"file","name":"VSTS_tasks.png","size":56293,"files":null},{"type":"file","name":"VSTS_template page.png","size":105144,"files":null},{"type":"file","name":"githublistofoptions.png","size":183210,"files":null},{"type":"file","name":"VSTS_Build.png","size":18815,"files":null},{"type":"file","name":"VSTS_npm_install .png","size":19801,"files":null},{"type":"file","name":"VSTS_Install_packages.png","size":22545,"files":null},{"type":"file","name":"Selection_003.png","size":28235,"files":null},{"type":"file","name":"VSTS_azure (2).png","size":29572,"files":null},{"type":"file","name":"Azure portal.png","size":102597,"files":null},{"type":"file","name":"MVC.png","size":39318,"files":null},{"type":"file","name":"Authorize with a github personal token.png","size":76927,"files":null},{"type":"file","name":"VSTS_Build_complete.png","size":143940,"files":null},{"type":"file","name":"VSTS_build(4).png","size":77473,"files":null},{"type":"file","name":"VSTS_Install_angula-cli.png","size":21058,"files":null},{"type":"file","name":"azure_portal_app_settings.png","size":125034,"files":null},{"type":"file","name":"githubgeneratetoken.png","size":39684,"files":null},{"type":"file","name":"Selection_002.png","size":82657,"files":null},{"type":"file","name":"VSTS_Azure(1).png","size":40597,"files":null},{"type":"file","name":"Screenshot from 2018-06-28 13-00-58.png","size":72493,"files":null},{"type":"file","name":"githubsettings.png","size":20128,"files":null},{"type":"file","name":"VSTS_ADD_TASK.png","size":103253,"files":null}]}